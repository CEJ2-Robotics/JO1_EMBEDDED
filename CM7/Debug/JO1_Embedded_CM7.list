
JO1_Embedded_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005934  08005934  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800593c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  24000010  0800594c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000654  0800594c  00020654  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163ad  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287c  00000000  00000000  000363eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00038c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00039c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a094  00000000  00000000  0003ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bfb  00000000  00000000  00074c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d999  00000000  00000000  000897ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00207198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004384  00000000  00000000  002071e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080058dc 	.word	0x080058dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080058dc 	.word	0x080058dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x9c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9eb 	bl	8000b0c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fbb1 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f835 	bl	80007a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x9c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <main+0x9c>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x9c>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fef3 	bl	8001548 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 ff09 	bl	800157c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <main+0x9c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9bd 	bl	8000b0c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f965 	bl	8000a60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f8e5 	bl	8000964 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 f92f 	bl	80009fc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 800079e:	f000 f88b 	bl	80008b8 <MX_SPI4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x9a>
 80007a4:	58024400 	.word	0x58024400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 f888 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 f882 	bl	80058cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f001 f833 	bl	8001834 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <SystemClock_Config+0x104>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a35      	ldr	r2, [pc, #212]	; (80008ac <SystemClock_Config+0x104>)
 80007d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <SystemClock_Config+0x104>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <SystemClock_Config+0x108>)
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	4a30      	ldr	r2, [pc, #192]	; (80008b0 <SystemClock_Config+0x108>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <SystemClock_Config+0x108>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000800:	bf00      	nop
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <SystemClock_Config+0x104>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080e:	d1f8      	bne.n	8000802 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <SystemClock_Config+0x10c>)
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	f023 0303 	bic.w	r3, r3, #3
 8000818:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <SystemClock_Config+0x10c>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000820:	2303      	movs	r3, #3
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000824:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800082a:	2301      	movs	r3, #1
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800083e:	2378      	movs	r3, #120	; 0x78
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084e:	230c      	movs	r3, #12
 8000850:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000852:	2300      	movs	r3, #0
 8000854:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f852 	bl	8001908 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800086a:	f000 f94f 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	233f      	movs	r3, #63	; 0x3f
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087a:	2308      	movs	r3, #8
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fc65 	bl	8002164 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008a0:	f000 f934 	bl	8000b0c <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3770      	adds	r7, #112	; 0x70
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024800 	.word	0x58024800
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024400 	.word	0x58024400

080008b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_SPI4_Init+0xa4>)
 80008be:	4a28      	ldr	r2, [pc, #160]	; (8000960 <MX_SPI4_Init+0xa8>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_SPI4_Init+0xa4>)
 80008c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_SPI4_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_SPI4_Init+0xa4>)
 80008d2:	2207      	movs	r2, #7
 80008d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_SPI4_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_SPI4_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_SPI4_Init+0xa4>)
 80008e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_SPI4_Init+0xa4>)
 80008ec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80008f0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_SPI4_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SPI4_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_SPI4_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_SPI4_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI4_Init+0xa4>)
 800090c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_SPI4_Init+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_SPI4_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SPI4_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_SPI4_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI4_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_SPI4_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI4_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_SPI4_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI4_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_SPI4_Init+0xa4>)
 800094a:	f003 faff 	bl	8003f4c <HAL_SPI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000954:	f000 f8da 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2400002c 	.word	0x2400002c
 8000960:	40013400 	.word	0x40013400

08000964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <MX_USART3_UART_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 80009ae:	f003 fbee 	bl	800418e <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 f8a8 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 80009c0:	f004 fb8c 	bl	80050dc <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f89f 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 80009d2:	f004 fbc1 	bl	8005158 <HAL_UARTEx_SetRxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f896 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_USART3_UART_Init+0x90>)
 80009e2:	f004 fb42 	bl	800506a <HAL_UARTEx_DisableFifoMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f88e 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	240000b4 	.word	0x240000b4
 80009f8:	40004800 	.word	0x40004800

080009fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a04:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a08:	2209      	movs	r2, #9
 8000a0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a44:	f000 fdae 	bl	80015a4 <HAL_PCD_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a4e:	f000 f85d 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000144 	.word	0x24000144
 8000a5c:	40080000 	.word	0x40080000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_GPIO_Init+0xa8>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]

}
 8000afc:	bf00      	nop
 8000afe:	371c      	adds	r7, #28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	58024400 	.word	0x58024400

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_MspInit+0x30>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x30>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	58024400 	.word	0x58024400

08000b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0b8      	sub	sp, #224	; 0xe0
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	22bc      	movs	r2, #188	; 0xbc
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fead 	bl	80058cc <memset>
  if(hspi->Instance==SPI4)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <HAL_SPI_MspInit+0xc0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d142      	bne.n	8000c02 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8000b82:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b86:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fe75 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000b98:	f7ff ffb8 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000ba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SPI4_SCK_Pin|NRF_SPI4_MISO_Pin|NRF_SPI4_MOSI_Pin;
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000bfe:	f000 faf3 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	37e0      	adds	r7, #224	; 0xe0
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013400 	.word	0x40013400
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58021000 	.word	0x58021000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b8      	sub	sp, #224	; 0xe0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22bc      	movs	r2, #188	; 0xbc
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fe47 	bl	80058cc <memset>
  if(huart->Instance==USART3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_UART_MspInit+0xc0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d142      	bne.n	8000cce <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fe10 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c62:	f7ff ff53 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_UART_MspInit+0xc8>)
 8000cca:	f000 fa8d 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	37e0      	adds	r7, #224	; 0xe0
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020c00 	.word	0x58020c00

08000ce4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b8      	sub	sp, #224	; 0xe0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	22bc      	movs	r2, #188	; 0xbc
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fde1 	bl	80058cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <HAL_PCD_MspInit+0x104>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d165      	bne.n	8000de0 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000d1e:	2318      	movs	r3, #24
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000d26:	2304      	movs	r3, #4
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fd99 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000d50:	f7ff fedc 	bl	8000b0c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d54:	f000 fdc8 	bl	80018e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d90:	230a      	movs	r3, #10
 8000d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4814      	ldr	r0, [pc, #80]	; (8000df0 <HAL_PCD_MspInit+0x10c>)
 8000d9e:	f000 fa23 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_PCD_MspInit+0x10c>)
 8000dbe:	f000 fa13 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_PCD_MspInit+0x108>)
 8000dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	37e0      	adds	r7, #224	; 0xe0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40080000 	.word	0x40080000
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58020000 	.word	0x58020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f89e 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e4c:	f7ff fbc6 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f004 fd05 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fc45 	bl	8000708 <main>
  bx  lr
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e88:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e8c:	0800593c 	.word	0x0800593c
  ldr r2, =_sbss
 8000e90:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e94:	24000654 	.word	0x24000654

08000e98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC3_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f96e 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ea8:	f001 fb12 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_Init+0x68>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <HAL_Init+0x6c>)
 8000eba:	5ccb      	ldrb	r3, [r1, r3]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_Init+0x68>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_Init+0x6c>)
 8000ed0:	5cd3      	ldrb	r3, [r2, r3]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_Init+0x70>)
 8000ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_Init+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f814 	bl	8000f14 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e002      	b.n	8000efc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff fe0f 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400
 8000f08:	080058f4 	.word	0x080058f4
 8000f0c:	24000004 	.word	0x24000004
 8000f10:	24000000 	.word	0x24000000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_InitTick+0x60>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e021      	b.n	8000f6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_InitTick+0x64>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f945 	bl	80011ce <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f91d 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x68>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400000c 	.word	0x2400000c
 8000f78:	24000000 	.word	0x24000000
 8000f7c:	24000008 	.word	0x24000008

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2400000c 	.word	0x2400000c
 8000fa4:	24000650 	.word	0x24000650

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	24000650 	.word	0x24000650

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2400000c 	.word	0x2400000c

08001008 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetREVID+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0c1b      	lsrs	r3, r3, #16
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	5c001000 	.word	0x5c001000

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	4313      	orrs	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	05fa0000 	.word	0x05fa0000

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff47 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff90 	bl	80010d8 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5f 	bl	8001084 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb2 	bl	8001140 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011f6:	4b89      	ldr	r3, [pc, #548]	; (800141c <HAL_GPIO_Init+0x234>)
 80011f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011fa:	e194      	b.n	8001526 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2101      	movs	r1, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 8186 	beq.w	8001520 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d005      	beq.n	800122c <HAL_GPIO_Init+0x44>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d130      	bne.n	800128e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001262:	2201      	movs	r2, #1
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 0201 	and.w	r2, r3, #1
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b03      	cmp	r3, #3
 8001298:	d017      	beq.n	80012ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d123      	bne.n	800131e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	69b9      	ldr	r1, [r7, #24]
 800131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0203 	and.w	r2, r3, #3
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80e0 	beq.w	8001520 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x238>)
 8001362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001366:	4a2e      	ldr	r2, [pc, #184]	; (8001420 <HAL_GPIO_Init+0x238>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_GPIO_Init+0x238>)
 8001372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a29      	ldr	r2, [pc, #164]	; (8001424 <HAL_GPIO_Init+0x23c>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a20      	ldr	r2, [pc, #128]	; (8001428 <HAL_GPIO_Init+0x240>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d052      	beq.n	8001450 <HAL_GPIO_Init+0x268>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <HAL_GPIO_Init+0x244>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d031      	beq.n	8001416 <HAL_GPIO_Init+0x22e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <HAL_GPIO_Init+0x248>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x22a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_GPIO_Init+0x24c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_GPIO_Init+0x250>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x222>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_GPIO_Init+0x254>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x21e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <HAL_GPIO_Init+0x258>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x25c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x216>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <HAL_GPIO_Init+0x260>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x212>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_GPIO_Init+0x264>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x20e>
 80013f2:	2309      	movs	r3, #9
 80013f4:	e02d      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 80013f6:	230a      	movs	r3, #10
 80013f8:	e02b      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 80013fa:	2308      	movs	r3, #8
 80013fc:	e029      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 80013fe:	2307      	movs	r3, #7
 8001400:	e027      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 8001402:	2306      	movs	r3, #6
 8001404:	e025      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 8001406:	2305      	movs	r3, #5
 8001408:	e023      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 800140a:	2304      	movs	r3, #4
 800140c:	e021      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 800140e:	2303      	movs	r3, #3
 8001410:	e01f      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 8001412:	2302      	movs	r3, #2
 8001414:	e01d      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 8001416:	2301      	movs	r3, #1
 8001418:	e01b      	b.n	8001452 <HAL_GPIO_Init+0x26a>
 800141a:	bf00      	nop
 800141c:	58000080 	.word	0x58000080
 8001420:	58024400 	.word	0x58024400
 8001424:	58000400 	.word	0x58000400
 8001428:	58020000 	.word	0x58020000
 800142c:	58020400 	.word	0x58020400
 8001430:	58020800 	.word	0x58020800
 8001434:	58020c00 	.word	0x58020c00
 8001438:	58021000 	.word	0x58021000
 800143c:	58021400 	.word	0x58021400
 8001440:	58021800 	.word	0x58021800
 8001444:	58021c00 	.word	0x58021c00
 8001448:	58022000 	.word	0x58022000
 800144c:	58022400 	.word	0x58022400
 8001450:	2300      	movs	r3, #0
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	f002 0203 	and.w	r2, r2, #3
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4093      	lsls	r3, r2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001462:	4938      	ldr	r1, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x35c>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	3301      	adds	r3, #1
 8001524:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f ae63 	bne.w	80011fc <HAL_GPIO_Init+0x14>
  }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3724      	adds	r7, #36	; 0x24
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	58000400 	.word	0x58000400

08001548 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001550:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_HSEM_FastTake+0x2c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3320      	adds	r3, #32
 8001556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_HSEM_FastTake+0x30>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	e000      	b.n	8001566 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	58026400 	.word	0x58026400
 8001578:	80000300 	.word	0x80000300

0800157c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001586:	4906      	ldr	r1, [pc, #24]	; (80015a0 <HAL_HSEM_Release+0x24>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	58026400 	.word	0x58026400

080015a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	b08f      	sub	sp, #60	; 0x3c
 80015a8:	af0a      	add	r7, sp, #40	; 0x28
 80015aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e116      	b.n	80017e4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fb87 	bl	8000ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fea9 	bl	800534c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	687e      	ldr	r6, [r7, #4]
 8001602:	466d      	mov	r5, sp
 8001604:	f106 0410 	add.w	r4, r6, #16
 8001608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001614:	e885 0003 	stmia.w	r5, {r0, r1}
 8001618:	1d33      	adds	r3, r6, #4
 800161a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f003 fe27 	bl	8005270 <USB_CoreInit>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0d7      	b.n	80017e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f003 fe97 	bl	800536e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e04a      	b.n	80016dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	333d      	adds	r3, #61	; 0x3d
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	333c      	adds	r3, #60	; 0x3c
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	b298      	uxth	r0, r3
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	3344      	adds	r3, #68	; 0x44
 8001682:	4602      	mov	r2, r0
 8001684:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3340      	adds	r3, #64	; 0x40
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3348      	adds	r3, #72	; 0x48
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	334c      	adds	r3, #76	; 0x4c
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3354      	adds	r3, #84	; 0x54
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3301      	adds	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3af      	bcc.n	8001646 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e044      	b.n	8001776 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3301      	adds	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3b5      	bcc.n	80016ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	687e      	ldr	r6, [r7, #4]
 8001788:	466d      	mov	r5, sp
 800178a:	f106 0410 	add.w	r4, r6, #16
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001796:	e894 0003 	ldmia.w	r4, {r0, r1}
 800179a:	e885 0003 	stmia.w	r5, {r0, r1}
 800179e:	1d33      	adds	r3, r6, #4
 80017a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a2:	6838      	ldr	r0, [r7, #0]
 80017a4:	f003 fe30 	bl	8005408 <USB_DevInit>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e014      	b.n	80017e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d102      	bne.n	80017d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f80a 	bl	80017ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 ffee 	bl	80057be <USB_DevDisconnect>

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_PCDEx_ActivateLPM+0x44>)
 800181c:	4313      	orrs	r3, r2
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	10000003 	.word	0x10000003

08001834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	2b06      	cmp	r3, #6
 8001846:	d00a      	beq.n	800185e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e040      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e03e      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001866:	491f      	ldr	r1, [pc, #124]	; (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800186e:	f7ff fb9b 	bl	8000fa8 <HAL_GetTick>
 8001872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001874:	e009      	b.n	800188a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001876:	f7ff fb97 	bl	8000fa8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001884:	d901      	bls.n	800188a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e028      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001896:	d1ee      	bne.n	8001876 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b1e      	cmp	r3, #30
 800189c:	d008      	beq.n	80018b0 <HAL_PWREx_ConfigSupply+0x7c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b2e      	cmp	r3, #46	; 0x2e
 80018a2:	d005      	beq.n	80018b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b1d      	cmp	r3, #29
 80018a8:	d002      	beq.n	80018b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b2d      	cmp	r3, #45	; 0x2d
 80018ae:	d114      	bne.n	80018da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018b0:	f7ff fb7a 	bl	8000fa8 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018b6:	e009      	b.n	80018cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018b8:	f7ff fb76 	bl	8000fa8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c6:	d901      	bls.n	80018cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e007      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d1ee      	bne.n	80018b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	58024800 	.word	0x58024800

080018e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	58024800 	.word	0x58024800

08001908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f000 bc1d 	b.w	8002156 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8087 	beq.w	8001a38 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192a:	4b99      	ldr	r3, [pc, #612]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	2b10      	cmp	r3, #16
 800193e:	d007      	beq.n	8001950 <HAL_RCC_OscConfig+0x48>
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	2b18      	cmp	r3, #24
 8001944:	d110      	bne.n	8001968 <HAL_RCC_OscConfig+0x60>
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4b8f      	ldr	r3, [pc, #572]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x12e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d168      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e3f6      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x78>
 8001972:	4b87      	ldr	r3, [pc, #540]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a86      	ldr	r2, [pc, #536]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e02e      	b.n	80019de <HAL_RCC_OscConfig+0xd6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x9a>
 8001988:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a80      	ldr	r2, [pc, #512]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b7e      	ldr	r3, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a7d      	ldr	r2, [pc, #500]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e01d      	b.n	80019de <HAL_RCC_OscConfig+0xd6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0xbe>
 80019ac:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a77      	ldr	r2, [pc, #476]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a74      	ldr	r2, [pc, #464]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0xd6>
 80019c6:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a71      	ldr	r2, [pc, #452]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d013      	beq.n	8001a0e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fadf 	bl	8000fa8 <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ee:	f7ff fadb 	bl	8000fa8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e3aa      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a00:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0xe6>
 8001a0c:	e014      	b.n	8001a38 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff facb 	bl	8000fa8 <HAL_GetTick>
 8001a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a16:	f7ff fac7 	bl	8000fa8 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b64      	cmp	r3, #100	; 0x64
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e396      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x10e>
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80cb 	beq.w	8001bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4b52      	ldr	r3, [pc, #328]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_RCC_OscConfig+0x164>
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2b18      	cmp	r3, #24
 8001a60:	d156      	bne.n	8001b10 <HAL_RCC_OscConfig+0x208>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d151      	bne.n	8001b10 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x17c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e368      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a84:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 0219 	bic.w	r2, r3, #25
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	493f      	ldr	r1, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a96:	f7ff fa87 	bl	8000fa8 <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fa83 	bl	8000fa8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e352      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	f7ff faa4 	bl	8001008 <HAL_GetREVID>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d817      	bhi.n	8001afa <HAL_RCC_OscConfig+0x1f2>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1dc>
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae2:	e07b      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	4927      	ldr	r1, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af8:	e070      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4921      	ldr	r1, [pc, #132]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0e:	e065      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d048      	beq.n	8001baa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 0219 	bic.w	r2, r3, #25
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	491a      	ldr	r1, [pc, #104]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fa3d 	bl	8000fa8 <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fa39 	bl	8000fa8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e308      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	f7ff fa5a 	bl	8001008 <HAL_GetREVID>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d81a      	bhi.n	8001b94 <HAL_RCC_OscConfig+0x28c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x270>
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	6053      	str	r3, [r2, #4]
 8001b76:	e031      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	031b      	lsls	r3, r3, #12
 8001b86:	4902      	ldr	r1, [pc, #8]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e026      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
 8001b8e:	bf00      	nop
 8001b90:	58024400 	.word	0x58024400
 8001b94:	4b9a      	ldr	r3, [pc, #616]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	4997      	ldr	r1, [pc, #604]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	e018      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b95      	ldr	r3, [pc, #596]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a94      	ldr	r2, [pc, #592]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f9f7 	bl	8000fa8 <HAL_GetTick>
 8001bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f9f3 	bl	8000fa8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e2c2      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd0:	4b8b      	ldr	r3, [pc, #556]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a9 	beq.w	8001d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bea:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bf4:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d007      	beq.n	8001c10 <HAL_RCC_OscConfig+0x308>
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b18      	cmp	r3, #24
 8001c04:	d13a      	bne.n	8001c7c <HAL_RCC_OscConfig+0x374>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d135      	bne.n	8001c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c10:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_OscConfig+0x320>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b80      	cmp	r3, #128	; 0x80
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e296      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c28:	f7ff f9ee 	bl	8001008 <HAL_GetREVID>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d817      	bhi.n	8001c66 <HAL_RCC_OscConfig+0x35e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_OscConfig+0x348>
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c4c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c4e:	e075      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c50:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	069b      	lsls	r3, r3, #26
 8001c5e:	4968      	ldr	r1, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c64:	e06a      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	061b      	lsls	r3, r3, #24
 8001c74:	4962      	ldr	r1, [pc, #392]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c7a:	e05f      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d042      	beq.n	8001d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f98a 	bl	8000fa8 <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c98:	f7ff f986 	bl	8000fa8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e255      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001caa:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb6:	f7ff f9a7 	bl	8001008 <HAL_GetREVID>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d817      	bhi.n	8001cf4 <HAL_RCC_OscConfig+0x3ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d108      	bne.n	8001cde <HAL_RCC_OscConfig+0x3d6>
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cd4:	4a4a      	ldr	r2, [pc, #296]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cda:	6053      	str	r3, [r2, #4]
 8001cdc:	e02e      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
 8001cde:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	069b      	lsls	r3, r3, #26
 8001cec:	4944      	ldr	r1, [pc, #272]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
 8001cf2:	e023      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	493f      	ldr	r1, [pc, #252]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
 8001d08:	e018      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff f947 	bl	8000fa8 <HAL_GetTick>
 8001d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f943 	bl	8000fa8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e212      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d036      	beq.n	8001db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d019      	beq.n	8001d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f924 	bl	8000fa8 <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff f920 	bl	8000fa8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1ef      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x45c>
 8001d82:	e018      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff f90a 	bl	8000fa8 <HAL_GetTick>
 8001d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff f906 	bl	8000fa8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1d5      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d039      	beq.n	8001e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f8e7 	bl	8000fa8 <HAL_GetTick>
 8001dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001dde:	f7ff f8e3 	bl	8000fa8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1b2      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x4d6>
 8001dfc:	e01b      	b.n	8001e36 <HAL_RCC_OscConfig+0x52e>
 8001dfe:	bf00      	nop
 8001e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e04:	4b9b      	ldr	r3, [pc, #620]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a9a      	ldr	r2, [pc, #616]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e10:	f7ff f8ca 	bl	8000fa8 <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e18:	f7ff f8c6 	bl	8000fa8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e195      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8081 	beq.w	8001f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e44:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <HAL_RCC_OscConfig+0x770>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a8b      	ldr	r2, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x770>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e50:	f7ff f8aa 	bl	8000fa8 <HAL_GetTick>
 8001e54:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e58:	f7ff f8a6 	bl	8000fa8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e175      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e6a:	4b83      	ldr	r3, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x770>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x584>
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	e02d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5e0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x5a6>
 8001e94:	4b77      	ldr	r3, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a76      	ldr	r2, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a73      	ldr	r2, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001eac:	e01c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5e0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c8>
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5e0>
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a67      	ldr	r2, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a64      	ldr	r2, [pc, #400]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f85a 	bl	8000fa8 <HAL_GetTick>
 8001ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f856 	bl	8000fa8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e123      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f0e:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ee      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x5f0>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f844 	bl	8000fa8 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff f840 	bl	8000fa8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e10d      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ee      	bne.n	8001f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8102 	beq.w	8002154 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f50:	4b48      	ldr	r3, [pc, #288]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f58:	2b18      	cmp	r3, #24
 8001f5a:	f000 80bd 	beq.w	80020d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	f040 809e 	bne.w	80020a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a41      	ldr	r2, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f818 	bl	8000fa8 <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff f814 	bl	8000fa8 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0e3      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9a:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_RCC_OscConfig+0x774>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	430a      	orrs	r2, r1
 8001fae:	4931      	ldr	r1, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fe4:	4923      	ldr	r1, [pc, #140]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	4a21      	ldr	r2, [pc, #132]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_RCC_OscConfig+0x778>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002002:	00d2      	lsls	r2, r2, #3
 8002004:	491b      	ldr	r1, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f023 020c 	bic.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4917      	ldr	r1, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002018:	4313      	orrs	r3, r2
 800201a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f023 0202 	bic.w	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	4912      	ldr	r1, [pc, #72]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800202a:	4313      	orrs	r3, r2
 800202c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002050:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe ff9d 	bl	8000fa8 <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002070:	e011      	b.n	8002096 <HAL_RCC_OscConfig+0x78e>
 8002072:	bf00      	nop
 8002074:	58024400 	.word	0x58024400
 8002078:	58024800 	.word	0x58024800
 800207c:	fffffc0c 	.word	0xfffffc0c
 8002080:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe ff90 	bl	8000fa8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e05f      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002096:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x77c>
 80020a2:	e057      	b.n	8002154 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe ff7a 	bl	8000fa8 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe ff76 	bl	8000fa8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e045      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x7b0>
 80020d6:	e03d      	b.n	8002154 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d031      	beq.n	8002150 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d12a      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d122      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d11a      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	0a5b      	lsrs	r3, r3, #9
 800211e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d111      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	0c1b      	lsrs	r3, r3, #16
 8002130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d108      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0e1b      	lsrs	r3, r3, #24
 8002142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3730      	adds	r7, #48	; 0x30
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	58024400 	.word	0x58024400

08002164 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e19c      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b8a      	ldr	r3, [pc, #552]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b87      	ldr	r3, [pc, #540]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	4985      	ldr	r1, [pc, #532]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b83      	ldr	r3, [pc, #524]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e184      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	4b7b      	ldr	r3, [pc, #492]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021c4:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	4975      	ldr	r1, [pc, #468]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d908      	bls.n	8002204 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021f2:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	496a      	ldr	r1, [pc, #424]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002200:	4313      	orrs	r3, r2
 8002202:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800221c:	429a      	cmp	r2, r3
 800221e:	d908      	bls.n	8002232 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002220:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	495e      	ldr	r1, [pc, #376]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800222e:	4313      	orrs	r3, r2
 8002230:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800224a:	429a      	cmp	r2, r3
 800224c:	d908      	bls.n	8002260 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4953      	ldr	r1, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800225c:	4313      	orrs	r3, r2
 800225e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d010      	beq.n	800228e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	429a      	cmp	r2, r3
 800227a:	d908      	bls.n	800228e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f023 020f 	bic.w	r2, r3, #15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4947      	ldr	r1, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800228a:	4313      	orrs	r3, r2
 800228c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d055      	beq.n	8002346 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4940      	ldr	r1, [pc, #256]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022b4:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d121      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0f6      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022cc:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d115      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0ea      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0de      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d6      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f023 0207 	bic.w	r2, r3, #7
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4925      	ldr	r1, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fe47 	bl	8000fa8 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231c:	e00a      	b.n	8002334 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231e:	f7fe fe43 	bl	8000fa8 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0be      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	429a      	cmp	r2, r3
 8002344:	d1eb      	bne.n	800231e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	429a      	cmp	r2, r3
 8002360:	d208      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f023 020f 	bic.w	r2, r3, #15
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002370:	4313      	orrs	r3, r2
 8002372:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d214      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 020f 	bic.w	r2, r3, #15
 800238a:	4906      	ldr	r1, [pc, #24]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e086      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
 80023a4:	52002000 	.word	0x52002000
 80023a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d208      	bcs.n	80023da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	4939      	ldr	r1, [pc, #228]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d208      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	492e      	ldr	r1, [pc, #184]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002404:	4313      	orrs	r3, r2
 8002406:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d010      	beq.n	8002436 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002420:	429a      	cmp	r2, r3
 8002422:	d208      	bcs.n	8002436 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002432:	4313      	orrs	r3, r2
 8002434:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800244e:	429a      	cmp	r2, r3
 8002450:	d208      	bcs.n	8002464 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4917      	ldr	r1, [pc, #92]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002460:	4313      	orrs	r3, r2
 8002462:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002464:	f000 f834 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	4912      	ldr	r1, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x35c>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_RCC_ClockConfig+0x35c>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x360>)
 800249a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x364>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x368>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fd34 	bl	8000f14 <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	58024400 	.word	0x58024400
 80024c0:	080058f4 	.word	0x080058f4
 80024c4:	24000004 	.word	0x24000004
 80024c8:	24000000 	.word	0x24000000
 80024cc:	24000008 	.word	0x24000008

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d6:	4bb3      	ldr	r3, [pc, #716]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024de:	2b18      	cmp	r3, #24
 80024e0:	f200 8155 	bhi.w	800278e <HAL_RCC_GetSysClockFreq+0x2be>
 80024e4:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ea:	bf00      	nop
 80024ec:	08002551 	.word	0x08002551
 80024f0:	0800278f 	.word	0x0800278f
 80024f4:	0800278f 	.word	0x0800278f
 80024f8:	0800278f 	.word	0x0800278f
 80024fc:	0800278f 	.word	0x0800278f
 8002500:	0800278f 	.word	0x0800278f
 8002504:	0800278f 	.word	0x0800278f
 8002508:	0800278f 	.word	0x0800278f
 800250c:	08002577 	.word	0x08002577
 8002510:	0800278f 	.word	0x0800278f
 8002514:	0800278f 	.word	0x0800278f
 8002518:	0800278f 	.word	0x0800278f
 800251c:	0800278f 	.word	0x0800278f
 8002520:	0800278f 	.word	0x0800278f
 8002524:	0800278f 	.word	0x0800278f
 8002528:	0800278f 	.word	0x0800278f
 800252c:	0800257d 	.word	0x0800257d
 8002530:	0800278f 	.word	0x0800278f
 8002534:	0800278f 	.word	0x0800278f
 8002538:	0800278f 	.word	0x0800278f
 800253c:	0800278f 	.word	0x0800278f
 8002540:	0800278f 	.word	0x0800278f
 8002544:	0800278f 	.word	0x0800278f
 8002548:	0800278f 	.word	0x0800278f
 800254c:	08002583 	.word	0x08002583
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002550:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800255c:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	4a90      	ldr	r2, [pc, #576]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800256e:	e111      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002570:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002572:	61bb      	str	r3, [r7, #24]
    break;
 8002574:	e10e      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002576:	4b8d      	ldr	r3, [pc, #564]	; (80027ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002578:	61bb      	str	r3, [r7, #24]
    break;
 800257a:	e10b      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800257c:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800257e:	61bb      	str	r3, [r7, #24]
    break;
 8002580:	e108      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800258c:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002596:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002598:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80025a2:	4b80      	ldr	r3, [pc, #512]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80e1 	beq.w	8002788 <HAL_RCC_GetSysClockFreq+0x2b8>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f000 8083 	beq.w	80026d4 <HAL_RCC_GetSysClockFreq+0x204>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f200 80a1 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x248>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x114>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d056      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025e2:	e099      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025e4:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02d      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	4a6b      	ldr	r2, [pc, #428]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261a:	4b62      	ldr	r3, [pc, #392]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262a:	ed97 6a02 	vldr	s12, [r7, #8]
 800262e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800263e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002646:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800264a:	e087      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	eddf 6a58 	vldr	s13, [pc, #352]	; 80027b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800265a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800266e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002672:	eddf 5a50 	vldr	s11, [pc, #320]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800267a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800267e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800268e:	e065      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80027bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800269e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026d2:	e043      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80027c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800270a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800270e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002716:	e021      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002722:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273a:	ed97 6a02 	vldr	s12, [r7, #8]
 800273e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800274e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800275a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	0a5b      	lsrs	r3, r3, #9
 8002762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002766:	3301      	adds	r3, #1
 8002768:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002774:	edd7 6a07 	vldr	s13, [r7, #28]
 8002778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002780:	ee17 3a90 	vmov	r3, s15
 8002784:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002786:	e005      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
    break;
 800278c:	e002      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002790:	61bb      	str	r3, [r7, #24]
    break;
 8002792:	bf00      	nop
  }

  return sysclockfreq;
 8002794:	69bb      	ldr	r3, [r7, #24]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	58024400 	.word	0x58024400
 80027a8:	03d09000 	.word	0x03d09000
 80027ac:	003d0900 	.word	0x003d0900
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	46000000 	.word	0x46000000
 80027b8:	4c742400 	.word	0x4c742400
 80027bc:	4a742400 	.word	0x4a742400
 80027c0:	4af42400 	.word	0x4af42400

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80027ca:	f7ff fe81 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_GetHCLKFreq+0x50>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	490f      	ldr	r1, [pc, #60]	; (8002818 <HAL_RCC_GetHCLKFreq+0x54>)
 80027dc:	5ccb      	ldrb	r3, [r1, r3]
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_GetHCLKFreq+0x50>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_GetHCLKFreq+0x54>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_RCC_GetHCLKFreq+0x58>)
 8002800:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_RCC_GetHCLKFreq+0x58>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	58024400 	.word	0x58024400
 8002818:	080058f4 	.word	0x080058f4
 800281c:	24000004 	.word	0x24000004
 8002820:	24000000 	.word	0x24000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002828:	f7ff ffcc 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4904      	ldr	r1, [pc, #16]	; (800284c <HAL_RCC_GetPCLK1Freq+0x28>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	58024400 	.word	0x58024400
 800284c:	080058f4 	.word	0x080058f4

08002850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002854:	f7ff ffb6 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4904      	ldr	r1, [pc, #16]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	58024400 	.word	0x58024400
 8002878:	080058f4 	.word	0x080058f4

0800287c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002888:	2300      	movs	r3, #0
 800288a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028a0:	d02a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028a6:	d824      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ac:	d018      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b2:	d81e      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028bc:	d007      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028be:	e018      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028c0:	4ba3      	ldr	r3, [pc, #652]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	4aa2      	ldr	r2, [pc, #648]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028cc:	e015      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2102      	movs	r1, #2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f9d5 	bl	8003c84 <RCCEx_PLL2_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028de:	e00c      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3324      	adds	r3, #36	; 0x24
 80028e4:	2102      	movs	r1, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 fa7e 	bl	8003de8 <RCCEx_PLL3_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028f0:	e003      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
      break;
 80028f6:	e000      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002900:	4b93      	ldr	r3, [pc, #588]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290c:	4990      	ldr	r1, [pc, #576]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	650b      	str	r3, [r1, #80]	; 0x50
 8002912:	e001      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03d      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	2b04      	cmp	r3, #4
 800292a:	d826      	bhi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002949 	.word	0x08002949
 8002938:	08002957 	.word	0x08002957
 800293c:	08002969 	.word	0x08002969
 8002940:	08002981 	.word	0x08002981
 8002944:	08002981 	.word	0x08002981
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002948:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	4a80      	ldr	r2, [pc, #512]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800294e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002954:	e015      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f001 f991 	bl	8003c84 <RCCEx_PLL2_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002966:	e00c      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3324      	adds	r3, #36	; 0x24
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fa3a 	bl	8003de8 <RCCEx_PLL3_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002978:	e003      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
      break;
 800297e:	e000      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002988:	4b71      	ldr	r3, [pc, #452]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	496e      	ldr	r1, [pc, #440]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	650b      	str	r3, [r1, #80]	; 0x50
 800299a:	e001      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d042      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d02b      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80029b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ba:	d825      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80029bc:	2bc0      	cmp	r3, #192	; 0xc0
 80029be:	d028      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80029c0:	2bc0      	cmp	r3, #192	; 0xc0
 80029c2:	d821      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d016      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80029c8:	2b80      	cmp	r3, #128	; 0x80
 80029ca:	d81d      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d007      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80029d4:	e018      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d6:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029e2:	e017      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 f94a 	bl	8003c84 <RCCEx_PLL2_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029f4:	e00e      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3324      	adds	r3, #36	; 0x24
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f9f3 	bl	8003de8 <RCCEx_PLL3_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a06:	e005      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0c:	e002      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a1a:	4b4d      	ldr	r3, [pc, #308]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	494a      	ldr	r1, [pc, #296]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	650b      	str	r3, [r1, #80]	; 0x50
 8002a2c:	e001      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d049      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a48:	d030      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002a4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a4e:	d82a      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a54:	d02c      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002a56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a5a:	d824      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a60:	d018      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a66:	d81e      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a70:	d007      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002a72:	e018      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	4a35      	ldr	r2, [pc, #212]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a80:	e017      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 f8fb 	bl	8003c84 <RCCEx_PLL2_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a92:	e00e      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3324      	adds	r3, #36	; 0x24
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 f9a4 	bl	8003de8 <RCCEx_PLL3_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aa4:	e005      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002aac:	bf00      	nop
 8002aae:	e000      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ac6:	4922      	ldr	r1, [pc, #136]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	658b      	str	r3, [r1, #88]	; 0x58
 8002acc:	e001      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04b      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae8:	d030      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aee:	d82a      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002af0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002af4:	d02e      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002af6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002afa:	d824      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b00:	d018      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b06:	d81e      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b10:	d007      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b12:	e018      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b20:	e019      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 f8ab 	bl	8003c84 <RCCEx_PLL2_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b32:	e010      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3324      	adds	r3, #36	; 0x24
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f954 	bl	8003de8 <RCCEx_PLL3_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b44:	e007      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75fb      	strb	r3, [r7, #23]
      break;
 8002b4a:	e004      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002b4c:	bf00      	nop
 8002b4e:	e002      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002b50:	58024400 	.word	0x58024400
      break;
 8002b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b5c:	4b99      	ldr	r3, [pc, #612]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b6a:	4996      	ldr	r1, [pc, #600]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	658b      	str	r3, [r1, #88]	; 0x58
 8002b70:	e001      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d032      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	2b30      	cmp	r3, #48	; 0x30
 8002b88:	d01c      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002b8a:	2b30      	cmp	r3, #48	; 0x30
 8002b8c:	d817      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d00c      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d813      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d10f      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	4a88      	ldr	r2, [pc, #544]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002baa:	e00e      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 f866 	bl	8003c84 <RCCEx_PLL2_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002bbc:	e005      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bd0:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bdc:	4979      	ldr	r1, [pc, #484]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d047      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bfc:	d030      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c02:	d82a      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c08:	d02c      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c0e:	d824      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c14:	d018      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1a:	d81e      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c24:	d007      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002c26:	e018      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c34:	e017      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 f821 	bl	8003c84 <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c46:	e00e      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3324      	adds	r3, #36	; 0x24
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 f8ca 	bl	8003de8 <RCCEx_PLL3_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c58:	e005      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c6c:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	4952      	ldr	r1, [pc, #328]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c7e:	e001      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d049      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c98:	d02e      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9e:	d828      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ca4:	d02a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002caa:	d822      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002cac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cb0:	d026      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cb6:	d81c      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cbc:	d010      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc2:	d816      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01d      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d111      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 ffd5 	bl	8003c84 <RCCEx_PLL2_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cde:	e012      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 f87e 	bl	8003de8 <RCCEx_PLL3_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cf0:	e009      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf6:	e006      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002cf8:	bf00      	nop
 8002cfa:	e004      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002cfc:	bf00      	nop
 8002cfe:	e002      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d109      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d10:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d18:	492a      	ldr	r1, [pc, #168]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	650b      	str	r3, [r1, #80]	; 0x50
 8002d1e:	e001      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d04d      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3a:	d02e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d40:	d828      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d02a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4c:	d822      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d52:	d026      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002d54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d58:	d81c      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d64:	d816      	bhi.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01d      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6e:	d111      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 ff84 	bl	8003c84 <RCCEx_PLL2_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d80:	e012      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3324      	adds	r3, #36	; 0x24
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f82d 	bl	8003de8 <RCCEx_PLL3_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d92:	e009      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
      break;
 8002d98:	e006      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e004      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e002      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002da2:	bf00      	nop
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dbc:	4901      	ldr	r1, [pc, #4]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	658b      	str	r3, [r1, #88]	; 0x58
 8002dc2:	e003      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d02f      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de0:	d00e      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de6:	d814      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df0:	d10f      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df2:	4baf      	ldr	r3, [pc, #700]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	4aae      	ldr	r2, [pc, #696]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 ff3c 	bl	8003c84 <RCCEx_PLL2_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e10:	e003      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
      break;
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e20:	4ba3      	ldr	r3, [pc, #652]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2c:	49a0      	ldr	r1, [pc, #640]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	650b      	str	r3, [r1, #80]	; 0x50
 8002e32:	e001      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d032      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d81b      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e8b 	.word	0x08002e8b
 8002e58:	08002e65 	.word	0x08002e65
 8002e5c:	08002e73 	.word	0x08002e73
 8002e60:	08002e8b 	.word	0x08002e8b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e64:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	4a91      	ldr	r2, [pc, #580]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e70:	e00c      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 ff03 	bl	8003c84 <RCCEx_PLL2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
      break;
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e92:	4b87      	ldr	r3, [pc, #540]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4984      	ldr	r1, [pc, #528]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ea4:	e001      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8086 	beq.w	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb8:	4b7e      	ldr	r3, [pc, #504]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a7d      	ldr	r2, [pc, #500]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe f870 	bl	8000fa8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eca:	e009      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fe f86c 	bl	8000fa8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d902      	bls.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	75fb      	strb	r3, [r7, #23]
        break;
 8002ede:	e005      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee0:	4b74      	ldr	r3, [pc, #464]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ef      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d166      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ef2:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002efc:	4053      	eors	r3, r2
 8002efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f06:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f10:	4b67      	ldr	r3, [pc, #412]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a66      	ldr	r2, [pc, #408]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1c:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a63      	ldr	r2, [pc, #396]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f28:	4a61      	ldr	r2, [pc, #388]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f38:	d115      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe f835 	bl	8000fa8 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f40:	e00b      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe f831 	bl	8000fa8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d902      	bls.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	75fb      	strb	r3, [r7, #23]
            break;
 8002f58:	e005      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f5a:	4b55      	ldr	r3, [pc, #340]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ed      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d126      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002f7c:	4b4c      	ldr	r3, [pc, #304]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f8a:	0919      	lsrs	r1, r3, #4
 8002f8c:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002f8e:	400b      	ands	r3, r1
 8002f90:	4947      	ldr	r1, [pc, #284]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	610b      	str	r3, [r1, #16]
 8002f96:	e005      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002f98:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a44      	ldr	r2, [pc, #272]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fa2:	6113      	str	r3, [r2, #16]
 8002fa4:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	493f      	ldr	r1, [pc, #252]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	670b      	str	r3, [r1, #112]	; 0x70
 8002fb8:	e004      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	75bb      	strb	r3, [r7, #22]
 8002fbe:	e001      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8085 	beq.w	80030dc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	2b28      	cmp	r3, #40	; 0x28
 8002fd8:	d866      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	080030bd 	.word	0x080030bd
 8002fe4:	080030a9 	.word	0x080030a9
 8002fe8:	080030a9 	.word	0x080030a9
 8002fec:	080030a9 	.word	0x080030a9
 8002ff0:	080030a9 	.word	0x080030a9
 8002ff4:	080030a9 	.word	0x080030a9
 8002ff8:	080030a9 	.word	0x080030a9
 8002ffc:	080030a9 	.word	0x080030a9
 8003000:	08003085 	.word	0x08003085
 8003004:	080030a9 	.word	0x080030a9
 8003008:	080030a9 	.word	0x080030a9
 800300c:	080030a9 	.word	0x080030a9
 8003010:	080030a9 	.word	0x080030a9
 8003014:	080030a9 	.word	0x080030a9
 8003018:	080030a9 	.word	0x080030a9
 800301c:	080030a9 	.word	0x080030a9
 8003020:	08003097 	.word	0x08003097
 8003024:	080030a9 	.word	0x080030a9
 8003028:	080030a9 	.word	0x080030a9
 800302c:	080030a9 	.word	0x080030a9
 8003030:	080030a9 	.word	0x080030a9
 8003034:	080030a9 	.word	0x080030a9
 8003038:	080030a9 	.word	0x080030a9
 800303c:	080030a9 	.word	0x080030a9
 8003040:	080030bd 	.word	0x080030bd
 8003044:	080030a9 	.word	0x080030a9
 8003048:	080030a9 	.word	0x080030a9
 800304c:	080030a9 	.word	0x080030a9
 8003050:	080030a9 	.word	0x080030a9
 8003054:	080030a9 	.word	0x080030a9
 8003058:	080030a9 	.word	0x080030a9
 800305c:	080030a9 	.word	0x080030a9
 8003060:	080030bd 	.word	0x080030bd
 8003064:	080030a9 	.word	0x080030a9
 8003068:	080030a9 	.word	0x080030a9
 800306c:	080030a9 	.word	0x080030a9
 8003070:	080030a9 	.word	0x080030a9
 8003074:	080030a9 	.word	0x080030a9
 8003078:	080030a9 	.word	0x080030a9
 800307c:	080030a9 	.word	0x080030a9
 8003080:	080030bd 	.word	0x080030bd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fdfa 	bl	8003c84 <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003094:	e013      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3324      	adds	r3, #36	; 0x24
 800309a:	2101      	movs	r1, #1
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fea3 	bl	8003de8 <RCCEx_PLL3_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030a6:	e00a      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	e007      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030ae:	bf00      	nop
 80030b0:	58024400 	.word	0x58024400
 80030b4:	58024800 	.word	0x58024800
 80030b8:	00ffffcf 	.word	0x00ffffcf
      break;
 80030bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030c4:	4b96      	ldr	r3, [pc, #600]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d0:	4993      	ldr	r1, [pc, #588]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	654b      	str	r3, [r1, #84]	; 0x54
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d038      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d821      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80030f0:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	0800313b 	.word	0x0800313b
 80030fc:	08003111 	.word	0x08003111
 8003100:	08003123 	.word	0x08003123
 8003104:	0800313b 	.word	0x0800313b
 8003108:	0800313b 	.word	0x0800313b
 800310c:	0800313b 	.word	0x0800313b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fdb4 	bl	8003c84 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003120:	e00c      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3324      	adds	r3, #36	; 0x24
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fe5d 	bl	8003de8 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003132:	e003      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
      break;
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800313a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	f023 0207 	bic.w	r2, r3, #7
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	4974      	ldr	r1, [pc, #464]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	654b      	str	r3, [r1, #84]	; 0x54
 8003154:	e001      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d03a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	2b05      	cmp	r3, #5
 800316e:	d821      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003170:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	080031bb 	.word	0x080031bb
 800317c:	08003191 	.word	0x08003191
 8003180:	080031a3 	.word	0x080031a3
 8003184:	080031bb 	.word	0x080031bb
 8003188:	080031bb 	.word	0x080031bb
 800318c:	080031bb 	.word	0x080031bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	2101      	movs	r1, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd74 	bl	8003c84 <RCCEx_PLL2_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031a0:	e00c      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3324      	adds	r3, #36	; 0x24
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fe1d 	bl	8003de8 <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031b2:	e003      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
      break;
 80031b8:	e000      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80031ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c2:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	4953      	ldr	r1, [pc, #332]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	658b      	str	r3, [r1, #88]	; 0x58
 80031d6:	e001      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d04b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f2:	d02e      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f8:	d828      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d02a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003204:	d822      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003206:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800320a:	d026      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800320c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003210:	d81c      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003216:	d010      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d816      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01d      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003226:	d111      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fd28 	bl	8003c84 <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003238:	e012      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3324      	adds	r3, #36	; 0x24
 800323e:	2102      	movs	r1, #2
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fdd1 	bl	8003de8 <RCCEx_PLL3_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800324a:	e009      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
      break;
 8003250:	e006      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003252:	bf00      	nop
 8003254:	e004      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800325e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003274:	492a      	ldr	r1, [pc, #168]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	654b      	str	r3, [r1, #84]	; 0x54
 800327a:	e001      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d04d      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003292:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003296:	d02e      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003298:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800329c:	d828      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	d02a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d822      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80032aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ae:	d026      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80032b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032b4:	d81c      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80032b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ba:	d010      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80032bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c0:	d816      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01d      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d111      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fcd6 	bl	8003c84 <RCCEx_PLL2_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032dc:	e012      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3324      	adds	r3, #36	; 0x24
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd7f 	bl	8003de8 <RCCEx_PLL3_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032ee:	e009      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	75fb      	strb	r3, [r7, #23]
      break;
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80032f6:	bf00      	nop
 80032f8:	e004      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003318:	4901      	ldr	r1, [pc, #4]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	658b      	str	r3, [r1, #88]	; 0x58
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b00      	cmp	r3, #0
 8003332:	d04b      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800333e:	d02e      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003340:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003344:	d828      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334a:	d02a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800334c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003350:	d822      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003352:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003356:	d026      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003358:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800335c:	d81c      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800335e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003362:	d010      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003368:	d816      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01d      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	d111      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fc82 	bl	8003c84 <RCCEx_PLL2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003384:	e012      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3324      	adds	r3, #36	; 0x24
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd2b 	bl	8003de8 <RCCEx_PLL3_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003396:	e009      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	e006      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800339e:	bf00      	nop
 80033a0:	e004      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80033aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033b2:	4b9d      	ldr	r3, [pc, #628]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c0:	4999      	ldr	r1, [pc, #612]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	658b      	str	r3, [r1, #88]	; 0x58
 80033c6:	e001      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d10a      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3324      	adds	r3, #36	; 0x24
 80033e8:	2102      	movs	r1, #2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fcfc 	bl	8003de8 <RCCEx_PLL3_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033fa:	4b8b      	ldr	r3, [pc, #556]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003408:	4987      	ldr	r1, [pc, #540]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800340a:	4313      	orrs	r3, r2
 800340c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003424:	d10a      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	2102      	movs	r1, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fcdb 	bl	8003de8 <RCCEx_PLL3_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800343c:	4b7a      	ldr	r3, [pc, #488]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344a:	4977      	ldr	r1, [pc, #476]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800344c:	4313      	orrs	r3, r2
 800344e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d034      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003466:	d01d      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346c:	d817      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003476:	d009      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003478:	e011      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fbff 	bl	8003c84 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800348a:	e00c      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fca8 	bl	8003de8 <RCCEx_PLL3_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
      break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80034a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ac:	4b5e      	ldr	r3, [pc, #376]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034ba:	495b      	ldr	r1, [pc, #364]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	658b      	str	r3, [r1, #88]	; 0x58
 80034c0:	e001      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d033      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034dc:	d01c      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80034de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034e2:	d816      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80034e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e8:	d003      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80034ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ee:	d007      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f2:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80034fe:	e00c      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3324      	adds	r3, #36	; 0x24
 8003504:	2101      	movs	r1, #1
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fc6e 	bl	8003de8 <RCCEx_PLL3_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003510:	e003      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	75fb      	strb	r3, [r7, #23]
      break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003520:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352e:	493e      	ldr	r1, [pc, #248]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003530:	4313      	orrs	r3, r2
 8003532:	654b      	str	r3, [r1, #84]	; 0x54
 8003534:	e001      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d029      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003552:	d007      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003556:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	4a33      	ldr	r2, [pc, #204]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003562:	e00b      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fb8a 	bl	8003c84 <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
      break;
 800357a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	4926      	ldr	r1, [pc, #152]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003590:	4313      	orrs	r3, r2
 8003592:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003594:	e001      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3324      	adds	r3, #36	; 0x24
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fc1b 	bl	8003de8 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d033      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d0:	d017      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80035d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d6:	d811      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d013      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80035de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e2:	d80b      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80035e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ec:	d106      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80035fa:	e007      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003600:	e004      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800360a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800361e:	4902      	ldr	r1, [pc, #8]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003620:	4313      	orrs	r3, r2
 8003622:	654b      	str	r3, [r1, #84]	; 0x54
 8003624:	e004      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003626:	bf00      	nop
 8003628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	492e      	ldr	r1, [pc, #184]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800364a:	4313      	orrs	r3, r2
 800364c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003668:	4926      	ldr	r1, [pc, #152]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800366a:	4313      	orrs	r3, r2
 800366c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800367c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003686:	491f      	ldr	r1, [pc, #124]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003688:	4313      	orrs	r3, r2
 800368a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800369e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036a2:	6113      	str	r3, [r2, #16]
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036ae:	4915      	ldr	r1, [pc, #84]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da08      	bge.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	4906      	ldr	r1, [pc, #24]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80036ee:	7dbb      	ldrb	r3, [r7, #22]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	58024400 	.word	0x58024400

08003708 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800370c:	f7ff f85a 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	58024400 	.word	0x58024400
 8003730:	080058f4 	.word	0x080058f4

08003734 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800373c:	4ba1      	ldr	r3, [pc, #644]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003746:	4b9f      	ldr	r3, [pc, #636]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	0b1b      	lsrs	r3, r3, #12
 800374c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003750:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003752:	4b9c      	ldr	r3, [pc, #624]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800375e:	4b99      	ldr	r3, [pc, #612]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8111 	beq.w	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b02      	cmp	r3, #2
 8003786:	f000 8083 	beq.w	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b02      	cmp	r3, #2
 800378e:	f200 80a1 	bhi.w	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d056      	beq.n	800384c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800379e:	e099      	b.n	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a0:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02d      	beq.n	8003808 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037ac:	4b85      	ldr	r3, [pc, #532]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	08db      	lsrs	r3, r3, #3
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	4a84      	ldr	r2, [pc, #528]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d6:	4b7b      	ldr	r3, [pc, #492]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003806:	e087      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381a:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382a:	ed97 6a03 	vldr	s12, [r7, #12]
 800382e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800384a:	e065      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003856:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800385a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003872:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800388e:	e043      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800389e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a2:	4b48      	ldr	r3, [pc, #288]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038d2:	e021      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003916:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	0a5b      	lsrs	r3, r3, #9
 800391e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003932:	edd7 6a07 	vldr	s13, [r7, #28]
 8003936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393e:	ee17 2a90 	vmov	r2, s15
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800395c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003960:	edd7 6a07 	vldr	s13, [r7, #28]
 8003964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800396c:	ee17 2a90 	vmov	r2, s15
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	0e1b      	lsrs	r3, r3, #24
 800397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399a:	ee17 2a90 	vmov	r2, s15
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039a2:	e008      	b.n	80039b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	bf00      	nop
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	58024400 	.word	0x58024400
 80039c8:	03d09000 	.word	0x03d09000
 80039cc:	46000000 	.word	0x46000000
 80039d0:	4c742400 	.word	0x4c742400
 80039d4:	4a742400 	.word	0x4a742400
 80039d8:	4af42400 	.word	0x4af42400

080039dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e4:	4ba1      	ldr	r3, [pc, #644]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80039ee:	4b9f      	ldr	r3, [pc, #636]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	0d1b      	lsrs	r3, r3, #20
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039fa:	4b9c      	ldr	r3, [pc, #624]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a06:	4b99      	ldr	r3, [pc, #612]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8111 	beq.w	8003c4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	f000 8083 	beq.w	8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	f200 80a1 	bhi.w	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d056      	beq.n	8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a46:	e099      	b.n	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a48:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02d      	beq.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a54:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	08db      	lsrs	r3, r3, #3
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	4a84      	ldr	r2, [pc, #528]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	4b7b      	ldr	r3, [pc, #492]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003aae:	e087      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003af2:	e065      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b06:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b36:	e043      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	4b48      	ldr	r3, [pc, #288]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b7a:	e021      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	0a5b      	lsrs	r3, r3, #9
 8003bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be6:	ee17 2a90 	vmov	r2, s15
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003bee:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c14:	ee17 2a90 	vmov	r2, s15
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	0e1b      	lsrs	r3, r3, #24
 8003c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c42:	ee17 2a90 	vmov	r2, s15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c4a:	e008      	b.n	8003c5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	03d09000 	.word	0x03d09000
 8003c74:	46000000 	.word	0x46000000
 8003c78:	4c742400 	.word	0x4c742400
 8003c7c:	4a742400 	.word	0x4a742400
 8003c80:	4af42400 	.word	0x4af42400

08003c84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c92:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d101      	bne.n	8003ca2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e099      	b.n	8003dd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ca2:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a4e      	ldr	r2, [pc, #312]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003ca8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cae:	f7fd f97b 	bl	8000fa8 <HAL_GetTick>
 8003cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cb4:	e008      	b.n	8003cc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cb6:	f7fd f977 	bl	8000fa8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e086      	b.n	8003dd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cc8:	4b45      	ldr	r3, [pc, #276]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cd4:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	493f      	ldr	r1, [pc, #252]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	025b      	lsls	r3, r3, #9
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d18:	4931      	ldr	r1, [pc, #196]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	492d      	ldr	r1, [pc, #180]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f023 0220 	bic.w	r2, r3, #32
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4928      	ldr	r1, [pc, #160]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d42:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d48:	f023 0310 	bic.w	r3, r3, #16
 8003d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d52:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <RCCEx_PLL2_Config+0x160>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	69d2      	ldr	r2, [r2, #28]
 8003d5a:	00d2      	lsls	r2, r2, #3
 8003d5c:	4920      	ldr	r1, [pc, #128]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	f043 0310 	orr.w	r3, r3, #16
 8003d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d80:	e00f      	b.n	8003da2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d94:	e005      	b.n	8003da2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a11      	ldr	r2, [pc, #68]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dae:	f7fd f8fb 	bl	8000fa8 <HAL_GetTick>
 8003db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003db4:	e008      	b.n	8003dc8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003db6:	f7fd f8f7 	bl	8000fa8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e006      	b.n	8003dd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	58024400 	.word	0x58024400
 8003de4:	ffff0007 	.word	0xffff0007

08003de8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d101      	bne.n	8003e06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e099      	b.n	8003f3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e06:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a4e      	ldr	r2, [pc, #312]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e12:	f7fd f8c9 	bl	8000fa8 <HAL_GetTick>
 8003e16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e18:	e008      	b.n	8003e2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e1a:	f7fd f8c5 	bl	8000fa8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e086      	b.n	8003f3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e2c:	4b45      	ldr	r3, [pc, #276]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	051b      	lsls	r3, r3, #20
 8003e46:	493f      	ldr	r1, [pc, #252]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	025b      	lsls	r3, r3, #9
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e7c:	4931      	ldr	r1, [pc, #196]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e82:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	492d      	ldr	r1, [pc, #180]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	4928      	ldr	r1, [pc, #160]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <RCCEx_PLL3_Config+0x160>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	69d2      	ldr	r2, [r2, #28]
 8003ebe:	00d2      	lsls	r2, r2, #3
 8003ec0:	4920      	ldr	r1, [pc, #128]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ee4:	e00f      	b.n	8003f06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d106      	bne.n	8003efa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003eec:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ef8:	e005      	b.n	8003f06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f12:	f7fd f849 	bl	8000fa8 <HAL_GetTick>
 8003f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f18:	e008      	b.n	8003f2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f1a:	f7fd f845 	bl	8000fa8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
 8003f48:	ffff0007 	.word	0xffff0007

08003f4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0f1      	b.n	8004142 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a78      	ldr	r2, [pc, #480]	; (800414c <HAL_SPI_Init+0x200>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <HAL_SPI_Init+0x42>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a77      	ldr	r2, [pc, #476]	; (8004150 <HAL_SPI_Init+0x204>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00a      	beq.n	8003f8e <HAL_SPI_Init+0x42>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a75      	ldr	r2, [pc, #468]	; (8004154 <HAL_SPI_Init+0x208>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d005      	beq.n	8003f8e <HAL_SPI_Init+0x42>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b0f      	cmp	r3, #15
 8003f88:	d901      	bls.n	8003f8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0d9      	b.n	8004142 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8e2 	bl	8004158 <SPI_GetPacketSize>
 8003f94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6c      	ldr	r2, [pc, #432]	; (800414c <HAL_SPI_Init+0x200>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00c      	beq.n	8003fba <HAL_SPI_Init+0x6e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6a      	ldr	r2, [pc, #424]	; (8004150 <HAL_SPI_Init+0x204>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <HAL_SPI_Init+0x6e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a69      	ldr	r2, [pc, #420]	; (8004154 <HAL_SPI_Init+0x208>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_Init+0x6e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d811      	bhi.n	8003fde <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003fbe:	4a63      	ldr	r2, [pc, #396]	; (800414c <HAL_SPI_Init+0x200>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a61      	ldr	r2, [pc, #388]	; (8004150 <HAL_SPI_Init+0x204>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_SPI_Init+0x8c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a60      	ldr	r2, [pc, #384]	; (8004154 <HAL_SPI_Init+0x208>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d104      	bne.n	8003fe2 <HAL_SPI_Init+0x96>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d901      	bls.n	8003fe2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0af      	b.n	8004142 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fda8 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800401e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004028:	d119      	bne.n	800405e <HAL_SPI_Init+0x112>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004032:	d103      	bne.n	800403c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10c      	bne.n	800405e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404c:	d107      	bne.n	800405e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	431a      	orrs	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	ea42 0103 	orr.w	r1, r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040be:	ea42 0103 	orr.w	r1, r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d113      	bne.n	80040fe <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40013000 	.word	0x40013000
 8004150:	40003800 	.word	0x40003800
 8004154:	40003c00 	.word	0x40003c00

08004158 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	3301      	adds	r3, #1
 8004170:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3307      	adds	r3, #7
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e042      	b.n	8004226 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fd30 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f82d 	bl	8004230 <UART_SetConfig>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e022      	b.n	8004226 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fd89 	bl	8004d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800420c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fe10 	bl	8004e44 <UART_CheckIdleState>
 8004224:	4603      	mov	r3, r0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004234:	b092      	sub	sp, #72	; 0x48
 8004236:	af00      	add	r7, sp, #0
 8004238:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	431a      	orrs	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	431a      	orrs	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	4313      	orrs	r3, r2
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4bbe      	ldr	r3, [pc, #760]	; (8004558 <UART_SetConfig+0x328>)
 8004260:	4013      	ands	r3, r2
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004268:	430b      	orrs	r3, r1
 800426a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4ab3      	ldr	r2, [pc, #716]	; (800455c <UART_SetConfig+0x32c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004298:	4313      	orrs	r3, r2
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	4baf      	ldr	r3, [pc, #700]	; (8004560 <UART_SetConfig+0x330>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	f023 010f 	bic.w	r1, r3, #15
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4aa6      	ldr	r2, [pc, #664]	; (8004564 <UART_SetConfig+0x334>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d177      	bne.n	80043c0 <UART_SetConfig+0x190>
 80042d0:	4ba5      	ldr	r3, [pc, #660]	; (8004568 <UART_SetConfig+0x338>)
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d8:	2b28      	cmp	r3, #40	; 0x28
 80042da:	d86d      	bhi.n	80043b8 <UART_SetConfig+0x188>
 80042dc:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0xb4>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	08004389 	.word	0x08004389
 80042e8:	080043b9 	.word	0x080043b9
 80042ec:	080043b9 	.word	0x080043b9
 80042f0:	080043b9 	.word	0x080043b9
 80042f4:	080043b9 	.word	0x080043b9
 80042f8:	080043b9 	.word	0x080043b9
 80042fc:	080043b9 	.word	0x080043b9
 8004300:	080043b9 	.word	0x080043b9
 8004304:	08004391 	.word	0x08004391
 8004308:	080043b9 	.word	0x080043b9
 800430c:	080043b9 	.word	0x080043b9
 8004310:	080043b9 	.word	0x080043b9
 8004314:	080043b9 	.word	0x080043b9
 8004318:	080043b9 	.word	0x080043b9
 800431c:	080043b9 	.word	0x080043b9
 8004320:	080043b9 	.word	0x080043b9
 8004324:	08004399 	.word	0x08004399
 8004328:	080043b9 	.word	0x080043b9
 800432c:	080043b9 	.word	0x080043b9
 8004330:	080043b9 	.word	0x080043b9
 8004334:	080043b9 	.word	0x080043b9
 8004338:	080043b9 	.word	0x080043b9
 800433c:	080043b9 	.word	0x080043b9
 8004340:	080043b9 	.word	0x080043b9
 8004344:	080043a1 	.word	0x080043a1
 8004348:	080043b9 	.word	0x080043b9
 800434c:	080043b9 	.word	0x080043b9
 8004350:	080043b9 	.word	0x080043b9
 8004354:	080043b9 	.word	0x080043b9
 8004358:	080043b9 	.word	0x080043b9
 800435c:	080043b9 	.word	0x080043b9
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043a9 	.word	0x080043a9
 8004368:	080043b9 	.word	0x080043b9
 800436c:	080043b9 	.word	0x080043b9
 8004370:	080043b9 	.word	0x080043b9
 8004374:	080043b9 	.word	0x080043b9
 8004378:	080043b9 	.word	0x080043b9
 800437c:	080043b9 	.word	0x080043b9
 8004380:	080043b9 	.word	0x080043b9
 8004384:	080043b1 	.word	0x080043b1
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800438e:	e222      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004390:	2304      	movs	r3, #4
 8004392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004396:	e21e      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004398:	2308      	movs	r3, #8
 800439a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800439e:	e21a      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043a6:	e216      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80043a8:	2320      	movs	r3, #32
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ae:	e212      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b6:	e20e      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043be:	e20a      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a69      	ldr	r2, [pc, #420]	; (800456c <UART_SetConfig+0x33c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d130      	bne.n	800442c <UART_SetConfig+0x1fc>
 80043ca:	4b67      	ldr	r3, [pc, #412]	; (8004568 <UART_SetConfig+0x338>)
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d826      	bhi.n	8004424 <UART_SetConfig+0x1f4>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x1ac>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	080043f5 	.word	0x080043f5
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004405 	.word	0x08004405
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fa:	e1ec      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80043fc:	2304      	movs	r3, #4
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004402:	e1e8      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004404:	2308      	movs	r3, #8
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440a:	e1e4      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004412:	e1e0      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004414:	2320      	movs	r3, #32
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441a:	e1dc      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800441c:	2340      	movs	r3, #64	; 0x40
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e1d8      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442a:	e1d4      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a4f      	ldr	r2, [pc, #316]	; (8004570 <UART_SetConfig+0x340>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d130      	bne.n	8004498 <UART_SetConfig+0x268>
 8004436:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <UART_SetConfig+0x338>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b05      	cmp	r3, #5
 8004440:	d826      	bhi.n	8004490 <UART_SetConfig+0x260>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0x218>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004461 	.word	0x08004461
 800444c:	08004469 	.word	0x08004469
 8004450:	08004471 	.word	0x08004471
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004466:	e1b6      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004468:	2304      	movs	r3, #4
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446e:	e1b2      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004470:	2308      	movs	r3, #8
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004476:	e1ae      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004478:	2310      	movs	r3, #16
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447e:	e1aa      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004480:	2320      	movs	r3, #32
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e1a6      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e1a2      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e19e      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a35      	ldr	r2, [pc, #212]	; (8004574 <UART_SetConfig+0x344>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d130      	bne.n	8004504 <UART_SetConfig+0x2d4>
 80044a2:	4b31      	ldr	r3, [pc, #196]	; (8004568 <UART_SetConfig+0x338>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d826      	bhi.n	80044fc <UART_SetConfig+0x2cc>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0x284>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044cd 	.word	0x080044cd
 80044b8:	080044d5 	.word	0x080044d5
 80044bc:	080044dd 	.word	0x080044dd
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d2:	e180      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044da:	e17c      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e2:	e178      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ea:	e174      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80044ec:	2320      	movs	r3, #32
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e170      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80044f4:	2340      	movs	r3, #64	; 0x40
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e16c      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e168      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <UART_SetConfig+0x348>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d142      	bne.n	8004594 <UART_SetConfig+0x364>
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <UART_SetConfig+0x338>)
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b05      	cmp	r3, #5
 8004518:	d838      	bhi.n	800458c <UART_SetConfig+0x35c>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0x2f0>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004539 	.word	0x08004539
 8004524:	08004541 	.word	0x08004541
 8004528:	08004549 	.word	0x08004549
 800452c:	08004551 	.word	0x08004551
 8004530:	0800457d 	.word	0x0800457d
 8004534:	08004585 	.word	0x08004585
 8004538:	2300      	movs	r3, #0
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453e:	e14a      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004540:	2304      	movs	r3, #4
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004546:	e146      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004548:	2308      	movs	r3, #8
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454e:	e142      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004550:	2310      	movs	r3, #16
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004556:	e13e      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004558:	cfff69f3 	.word	0xcfff69f3
 800455c:	58000c00 	.word	0x58000c00
 8004560:	11fff4ff 	.word	0x11fff4ff
 8004564:	40011000 	.word	0x40011000
 8004568:	58024400 	.word	0x58024400
 800456c:	40004400 	.word	0x40004400
 8004570:	40004800 	.word	0x40004800
 8004574:	40004c00 	.word	0x40004c00
 8004578:	40005000 	.word	0x40005000
 800457c:	2320      	movs	r3, #32
 800457e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004582:	e128      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004584:	2340      	movs	r3, #64	; 0x40
 8004586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458a:	e124      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004592:	e120      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4acb      	ldr	r2, [pc, #812]	; (80048c8 <UART_SetConfig+0x698>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d176      	bne.n	800468c <UART_SetConfig+0x45c>
 800459e:	4bcb      	ldr	r3, [pc, #812]	; (80048cc <UART_SetConfig+0x69c>)
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	2b28      	cmp	r3, #40	; 0x28
 80045a8:	d86c      	bhi.n	8004684 <UART_SetConfig+0x454>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x380>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	08004655 	.word	0x08004655
 80045b4:	08004685 	.word	0x08004685
 80045b8:	08004685 	.word	0x08004685
 80045bc:	08004685 	.word	0x08004685
 80045c0:	08004685 	.word	0x08004685
 80045c4:	08004685 	.word	0x08004685
 80045c8:	08004685 	.word	0x08004685
 80045cc:	08004685 	.word	0x08004685
 80045d0:	0800465d 	.word	0x0800465d
 80045d4:	08004685 	.word	0x08004685
 80045d8:	08004685 	.word	0x08004685
 80045dc:	08004685 	.word	0x08004685
 80045e0:	08004685 	.word	0x08004685
 80045e4:	08004685 	.word	0x08004685
 80045e8:	08004685 	.word	0x08004685
 80045ec:	08004685 	.word	0x08004685
 80045f0:	08004665 	.word	0x08004665
 80045f4:	08004685 	.word	0x08004685
 80045f8:	08004685 	.word	0x08004685
 80045fc:	08004685 	.word	0x08004685
 8004600:	08004685 	.word	0x08004685
 8004604:	08004685 	.word	0x08004685
 8004608:	08004685 	.word	0x08004685
 800460c:	08004685 	.word	0x08004685
 8004610:	0800466d 	.word	0x0800466d
 8004614:	08004685 	.word	0x08004685
 8004618:	08004685 	.word	0x08004685
 800461c:	08004685 	.word	0x08004685
 8004620:	08004685 	.word	0x08004685
 8004624:	08004685 	.word	0x08004685
 8004628:	08004685 	.word	0x08004685
 800462c:	08004685 	.word	0x08004685
 8004630:	08004675 	.word	0x08004675
 8004634:	08004685 	.word	0x08004685
 8004638:	08004685 	.word	0x08004685
 800463c:	08004685 	.word	0x08004685
 8004640:	08004685 	.word	0x08004685
 8004644:	08004685 	.word	0x08004685
 8004648:	08004685 	.word	0x08004685
 800464c:	08004685 	.word	0x08004685
 8004650:	0800467d 	.word	0x0800467d
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800465a:	e0bc      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004662:	e0b8      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466a:	e0b4      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004672:	e0b0      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004674:	2320      	movs	r3, #32
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800467a:	e0ac      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004682:	e0a8      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468a:	e0a4      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a8f      	ldr	r2, [pc, #572]	; (80048d0 <UART_SetConfig+0x6a0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d130      	bne.n	80046f8 <UART_SetConfig+0x4c8>
 8004696:	4b8d      	ldr	r3, [pc, #564]	; (80048cc <UART_SetConfig+0x69c>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d826      	bhi.n	80046f0 <UART_SetConfig+0x4c0>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0x478>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	080046d1 	.word	0x080046d1
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c6:	e086      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ce:	e082      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d6:	e07e      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046de:	e07a      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80046e0:	2320      	movs	r3, #32
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	e076      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80046e8:	2340      	movs	r3, #64	; 0x40
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e072      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f6:	e06e      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a75      	ldr	r2, [pc, #468]	; (80048d4 <UART_SetConfig+0x6a4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d130      	bne.n	8004764 <UART_SetConfig+0x534>
 8004702:	4b72      	ldr	r3, [pc, #456]	; (80048cc <UART_SetConfig+0x69c>)
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b05      	cmp	r3, #5
 800470c:	d826      	bhi.n	800475c <UART_SetConfig+0x52c>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x4e4>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	0800472d 	.word	0x0800472d
 8004718:	08004735 	.word	0x08004735
 800471c:	0800473d 	.word	0x0800473d
 8004720:	08004745 	.word	0x08004745
 8004724:	0800474d 	.word	0x0800474d
 8004728:	08004755 	.word	0x08004755
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004732:	e050      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473a:	e04c      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004742:	e048      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474a:	e044      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800474c:	2320      	movs	r3, #32
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e040      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004754:	2340      	movs	r3, #64	; 0x40
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e03c      	b.n	80047d6 <UART_SetConfig+0x5a6>
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e038      	b.n	80047d6 <UART_SetConfig+0x5a6>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a5b      	ldr	r2, [pc, #364]	; (80048d8 <UART_SetConfig+0x6a8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d130      	bne.n	80047d0 <UART_SetConfig+0x5a0>
 800476e:	4b57      	ldr	r3, [pc, #348]	; (80048cc <UART_SetConfig+0x69c>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	2b05      	cmp	r3, #5
 8004778:	d826      	bhi.n	80047c8 <UART_SetConfig+0x598>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <UART_SetConfig+0x550>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004799 	.word	0x08004799
 8004784:	080047a1 	.word	0x080047a1
 8004788:	080047a9 	.word	0x080047a9
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047c1 	.word	0x080047c1
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479e:	e01a      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a6:	e016      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ae:	e012      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e00e      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80047b8:	2320      	movs	r3, #32
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e00a      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e006      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e002      	b.n	80047d6 <UART_SetConfig+0x5a6>
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3f      	ldr	r2, [pc, #252]	; (80048d8 <UART_SetConfig+0x6a8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	f040 80f8 	bne.w	80049d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	dc46      	bgt.n	8004878 <UART_SetConfig+0x648>
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	f2c0 8082 	blt.w	80048f4 <UART_SetConfig+0x6c4>
 80047f0:	3b02      	subs	r3, #2
 80047f2:	2b1e      	cmp	r3, #30
 80047f4:	d87e      	bhi.n	80048f4 <UART_SetConfig+0x6c4>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x5cc>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800487f 	.word	0x0800487f
 8004800:	080048f5 	.word	0x080048f5
 8004804:	08004887 	.word	0x08004887
 8004808:	080048f5 	.word	0x080048f5
 800480c:	080048f5 	.word	0x080048f5
 8004810:	080048f5 	.word	0x080048f5
 8004814:	08004897 	.word	0x08004897
 8004818:	080048f5 	.word	0x080048f5
 800481c:	080048f5 	.word	0x080048f5
 8004820:	080048f5 	.word	0x080048f5
 8004824:	080048f5 	.word	0x080048f5
 8004828:	080048f5 	.word	0x080048f5
 800482c:	080048f5 	.word	0x080048f5
 8004830:	080048f5 	.word	0x080048f5
 8004834:	080048a7 	.word	0x080048a7
 8004838:	080048f5 	.word	0x080048f5
 800483c:	080048f5 	.word	0x080048f5
 8004840:	080048f5 	.word	0x080048f5
 8004844:	080048f5 	.word	0x080048f5
 8004848:	080048f5 	.word	0x080048f5
 800484c:	080048f5 	.word	0x080048f5
 8004850:	080048f5 	.word	0x080048f5
 8004854:	080048f5 	.word	0x080048f5
 8004858:	080048f5 	.word	0x080048f5
 800485c:	080048f5 	.word	0x080048f5
 8004860:	080048f5 	.word	0x080048f5
 8004864:	080048f5 	.word	0x080048f5
 8004868:	080048f5 	.word	0x080048f5
 800486c:	080048f5 	.word	0x080048f5
 8004870:	080048f5 	.word	0x080048f5
 8004874:	080048e7 	.word	0x080048e7
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d037      	beq.n	80048ec <UART_SetConfig+0x6bc>
 800487c:	e03a      	b.n	80048f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800487e:	f7fe ff43 	bl	8003708 <HAL_RCCEx_GetD3PCLK1Freq>
 8004882:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004884:	e03c      	b.n	8004900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe ff52 	bl	8003734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004894:	e034      	b.n	8004900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004896:	f107 0318 	add.w	r3, r7, #24
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff f89e 	bl	80039dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048a4:	e02c      	b.n	8004900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <UART_SetConfig+0x69c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <UART_SetConfig+0x69c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	4a07      	ldr	r2, [pc, #28]	; (80048dc <UART_SetConfig+0x6ac>)
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048c4:	e01c      	b.n	8004900 <UART_SetConfig+0x6d0>
 80048c6:	bf00      	nop
 80048c8:	40011400 	.word	0x40011400
 80048cc:	58024400 	.word	0x58024400
 80048d0:	40007800 	.word	0x40007800
 80048d4:	40007c00 	.word	0x40007c00
 80048d8:	58000c00 	.word	0x58000c00
 80048dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b9d      	ldr	r3, [pc, #628]	; (8004b58 <UART_SetConfig+0x928>)
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048e4:	e00c      	b.n	8004900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048e6:	4b9d      	ldr	r3, [pc, #628]	; (8004b5c <UART_SetConfig+0x92c>)
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048ea:	e009      	b.n	8004900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048f2:	e005      	b.n	8004900 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80048fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 81de 	beq.w	8004cc4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	4a94      	ldr	r2, [pc, #592]	; (8004b60 <UART_SetConfig+0x930>)
 800490e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004912:	461a      	mov	r2, r3
 8004914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004916:	fbb3 f3f2 	udiv	r3, r3, r2
 800491a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004928:	429a      	cmp	r2, r3
 800492a:	d305      	bcc.n	8004938 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800493e:	e1c1      	b.n	8004cc4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004942:	2200      	movs	r2, #0
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	60fa      	str	r2, [r7, #12]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	4a84      	ldr	r2, [pc, #528]	; (8004b60 <UART_SetConfig+0x930>)
 800494e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004952:	b29b      	uxth	r3, r3
 8004954:	2200      	movs	r2, #0
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800495e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004962:	f7fb fcb9 	bl	80002d8 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	020b      	lsls	r3, r1, #8
 8004978:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800497c:	0202      	lsls	r2, r0, #8
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	6849      	ldr	r1, [r1, #4]
 8004982:	0849      	lsrs	r1, r1, #1
 8004984:	2000      	movs	r0, #0
 8004986:	460c      	mov	r4, r1
 8004988:	4605      	mov	r5, r0
 800498a:	eb12 0804 	adds.w	r8, r2, r4
 800498e:	eb43 0905 	adc.w	r9, r3, r5
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	469a      	mov	sl, r3
 800499a:	4693      	mov	fp, r2
 800499c:	4652      	mov	r2, sl
 800499e:	465b      	mov	r3, fp
 80049a0:	4640      	mov	r0, r8
 80049a2:	4649      	mov	r1, r9
 80049a4:	f7fb fc98 	bl	80002d8 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4613      	mov	r3, r2
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b6:	d308      	bcc.n	80049ca <UART_SetConfig+0x79a>
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049be:	d204      	bcs.n	80049ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c6:	60da      	str	r2, [r3, #12]
 80049c8:	e17c      	b.n	8004cc4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80049d0:	e178      	b.n	8004cc4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049da:	f040 80c5 	bne.w	8004b68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80049de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	dc48      	bgt.n	8004a78 <UART_SetConfig+0x848>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db7b      	blt.n	8004ae2 <UART_SetConfig+0x8b2>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d879      	bhi.n	8004ae2 <UART_SetConfig+0x8b2>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0x7c4>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a7f 	.word	0x08004a7f
 80049f8:	08004a87 	.word	0x08004a87
 80049fc:	08004ae3 	.word	0x08004ae3
 8004a00:	08004ae3 	.word	0x08004ae3
 8004a04:	08004a8f 	.word	0x08004a8f
 8004a08:	08004ae3 	.word	0x08004ae3
 8004a0c:	08004ae3 	.word	0x08004ae3
 8004a10:	08004ae3 	.word	0x08004ae3
 8004a14:	08004a9f 	.word	0x08004a9f
 8004a18:	08004ae3 	.word	0x08004ae3
 8004a1c:	08004ae3 	.word	0x08004ae3
 8004a20:	08004ae3 	.word	0x08004ae3
 8004a24:	08004ae3 	.word	0x08004ae3
 8004a28:	08004ae3 	.word	0x08004ae3
 8004a2c:	08004ae3 	.word	0x08004ae3
 8004a30:	08004ae3 	.word	0x08004ae3
 8004a34:	08004aaf 	.word	0x08004aaf
 8004a38:	08004ae3 	.word	0x08004ae3
 8004a3c:	08004ae3 	.word	0x08004ae3
 8004a40:	08004ae3 	.word	0x08004ae3
 8004a44:	08004ae3 	.word	0x08004ae3
 8004a48:	08004ae3 	.word	0x08004ae3
 8004a4c:	08004ae3 	.word	0x08004ae3
 8004a50:	08004ae3 	.word	0x08004ae3
 8004a54:	08004ae3 	.word	0x08004ae3
 8004a58:	08004ae3 	.word	0x08004ae3
 8004a5c:	08004ae3 	.word	0x08004ae3
 8004a60:	08004ae3 	.word	0x08004ae3
 8004a64:	08004ae3 	.word	0x08004ae3
 8004a68:	08004ae3 	.word	0x08004ae3
 8004a6c:	08004ae3 	.word	0x08004ae3
 8004a70:	08004ae3 	.word	0x08004ae3
 8004a74:	08004ad5 	.word	0x08004ad5
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d02e      	beq.n	8004ada <UART_SetConfig+0x8aa>
 8004a7c:	e031      	b.n	8004ae2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7e:	f7fd fed1 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004a82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a84:	e033      	b.n	8004aee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a86:	f7fd fee3 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 8004a8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a8c:	e02f      	b.n	8004aee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fe fe4e 	bl	8003734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a9c:	e027      	b.n	8004aee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a9e:	f107 0318 	add.w	r3, r7, #24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe ff9a 	bl	80039dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aac:	e01f      	b.n	8004aee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aae:	4b2d      	ldr	r3, [pc, #180]	; (8004b64 <UART_SetConfig+0x934>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004aba:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <UART_SetConfig+0x934>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	08db      	lsrs	r3, r3, #3
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <UART_SetConfig+0x928>)
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004acc:	e00f      	b.n	8004aee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004ace:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <UART_SetConfig+0x928>)
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ad2:	e00c      	b.n	8004aee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ad4:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <UART_SetConfig+0x92c>)
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ad8:	e009      	b.n	8004aee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ae0:	e005      	b.n	8004aee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004aec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80e7 	beq.w	8004cc4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <UART_SetConfig+0x930>)
 8004afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b08:	005a      	lsls	r2, r3, #1
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	441a      	add	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	2b0f      	cmp	r3, #15
 8004b20:	d916      	bls.n	8004b50 <UART_SetConfig+0x920>
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d212      	bcs.n	8004b50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f023 030f 	bic.w	r3, r3, #15
 8004b32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b42:	4313      	orrs	r3, r2
 8004b44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	e0b9      	b.n	8004cc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b56:	e0b5      	b.n	8004cc4 <UART_SetConfig+0xa94>
 8004b58:	03d09000 	.word	0x03d09000
 8004b5c:	003d0900 	.word	0x003d0900
 8004b60:	08005904 	.word	0x08005904
 8004b64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	dc49      	bgt.n	8004c04 <UART_SetConfig+0x9d4>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	db7c      	blt.n	8004c6e <UART_SetConfig+0xa3e>
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d87a      	bhi.n	8004c6e <UART_SetConfig+0xa3e>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x950>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004c0b 	.word	0x08004c0b
 8004b84:	08004c13 	.word	0x08004c13
 8004b88:	08004c6f 	.word	0x08004c6f
 8004b8c:	08004c6f 	.word	0x08004c6f
 8004b90:	08004c1b 	.word	0x08004c1b
 8004b94:	08004c6f 	.word	0x08004c6f
 8004b98:	08004c6f 	.word	0x08004c6f
 8004b9c:	08004c6f 	.word	0x08004c6f
 8004ba0:	08004c2b 	.word	0x08004c2b
 8004ba4:	08004c6f 	.word	0x08004c6f
 8004ba8:	08004c6f 	.word	0x08004c6f
 8004bac:	08004c6f 	.word	0x08004c6f
 8004bb0:	08004c6f 	.word	0x08004c6f
 8004bb4:	08004c6f 	.word	0x08004c6f
 8004bb8:	08004c6f 	.word	0x08004c6f
 8004bbc:	08004c6f 	.word	0x08004c6f
 8004bc0:	08004c3b 	.word	0x08004c3b
 8004bc4:	08004c6f 	.word	0x08004c6f
 8004bc8:	08004c6f 	.word	0x08004c6f
 8004bcc:	08004c6f 	.word	0x08004c6f
 8004bd0:	08004c6f 	.word	0x08004c6f
 8004bd4:	08004c6f 	.word	0x08004c6f
 8004bd8:	08004c6f 	.word	0x08004c6f
 8004bdc:	08004c6f 	.word	0x08004c6f
 8004be0:	08004c6f 	.word	0x08004c6f
 8004be4:	08004c6f 	.word	0x08004c6f
 8004be8:	08004c6f 	.word	0x08004c6f
 8004bec:	08004c6f 	.word	0x08004c6f
 8004bf0:	08004c6f 	.word	0x08004c6f
 8004bf4:	08004c6f 	.word	0x08004c6f
 8004bf8:	08004c6f 	.word	0x08004c6f
 8004bfc:	08004c6f 	.word	0x08004c6f
 8004c00:	08004c61 	.word	0x08004c61
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d02e      	beq.n	8004c66 <UART_SetConfig+0xa36>
 8004c08:	e031      	b.n	8004c6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0a:	f7fd fe0b 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c10:	e033      	b.n	8004c7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c12:	f7fd fe1d 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 8004c16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c18:	e02f      	b.n	8004c7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fd88 	bl	8003734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c28:	e027      	b.n	8004c7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c2a:	f107 0318 	add.w	r3, r7, #24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fed4 	bl	80039dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c38:	e01f      	b.n	8004c7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <UART_SetConfig+0xac0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c46:	4b2a      	ldr	r3, [pc, #168]	; (8004cf0 <UART_SetConfig+0xac0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	08db      	lsrs	r3, r3, #3
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <UART_SetConfig+0xac4>)
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c58:	e00f      	b.n	8004c7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <UART_SetConfig+0xac4>)
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c5e:	e00c      	b.n	8004c7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <UART_SetConfig+0xac8>)
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c64:	e009      	b.n	8004c7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c6c:	e005      	b.n	8004c7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c78:	bf00      	nop
    }

    if (pclk != 0U)
 8004c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d021      	beq.n	8004cc4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <UART_SetConfig+0xacc>)
 8004c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	441a      	add	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	2b0f      	cmp	r3, #15
 8004ca8:	d909      	bls.n	8004cbe <UART_SetConfig+0xa8e>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d205      	bcs.n	8004cbe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	e002      	b.n	8004cc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004ce0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3748      	adds	r7, #72	; 0x48
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cee:	bf00      	nop
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	03d09000 	.word	0x03d09000
 8004cf8:	003d0900 	.word	0x003d0900
 8004cfc:	08005904 	.word	0x08005904

08004d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01a      	beq.n	8004e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfe:	d10a      	bne.n	8004e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e54:	f7fc f8a8 	bl	8000fa8 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d10e      	bne.n	8004e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f82f 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e025      	b.n	8004ed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d10e      	bne.n	8004eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f819 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e00f      	b.n	8004ed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b09c      	sub	sp, #112	; 0x70
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eea:	e0a9      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	f000 80a5 	beq.w	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fc f857 	bl	8000fa8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d140      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f20:	667b      	str	r3, [r7, #100]	; 0x64
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3308      	adds	r3, #8
 8004f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	663b      	str	r3, [r7, #96]	; 0x60
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e069      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d051      	beq.n	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004faa:	d149      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e6      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005008:	623a      	str	r2, [r7, #32]
 800500a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	61bb      	str	r3, [r7, #24]
   return(result);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e010      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	429a      	cmp	r2, r3
 800505c:	f43f af46 	beq.w	8004eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3770      	adds	r7, #112	; 0x70
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_UARTEx_DisableFifoMode+0x16>
 800507c:	2302      	movs	r3, #2
 800507e:	e027      	b.n	80050d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2224      	movs	r2, #36	; 0x24
 800508c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e02d      	b.n	8005150 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f84f 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e02d      	b.n	80051cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f811 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051f4:	e031      	b.n	800525a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051f6:	2310      	movs	r3, #16
 80051f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051fa:	2310      	movs	r3, #16
 80051fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	0e5b      	lsrs	r3, r3, #25
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	0f5b      	lsrs	r3, r3, #29
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	7b3a      	ldrb	r2, [r7, #12]
 8005222:	4911      	ldr	r1, [pc, #68]	; (8005268 <UARTEx_SetNbDataToProcess+0x94>)
 8005224:	5c8a      	ldrb	r2, [r1, r2]
 8005226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800522a:	7b3a      	ldrb	r2, [r7, #12]
 800522c:	490f      	ldr	r1, [pc, #60]	; (800526c <UARTEx_SetNbDataToProcess+0x98>)
 800522e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005230:	fb93 f3f2 	sdiv	r3, r3, r2
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	7b7a      	ldrb	r2, [r7, #13]
 8005240:	4909      	ldr	r1, [pc, #36]	; (8005268 <UARTEx_SetNbDataToProcess+0x94>)
 8005242:	5c8a      	ldrb	r2, [r1, r2]
 8005244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005248:	7b7a      	ldrb	r2, [r7, #13]
 800524a:	4908      	ldr	r1, [pc, #32]	; (800526c <UARTEx_SetNbDataToProcess+0x98>)
 800524c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800524e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005252:	b29a      	uxth	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	0800591c 	.word	0x0800591c
 800526c:	08005924 	.word	0x08005924

08005270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005270:	b084      	sub	sp, #16
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	f107 001c 	add.w	r0, r7, #28
 800527e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2b01      	cmp	r3, #1
 8005286:	d120      	bne.n	80052ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <USB_CoreInit+0xd4>)
 800529a:	4013      	ands	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d105      	bne.n	80052be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 faac 	bl	800581c <USB_CoreReset>
 80052c4:	4603      	mov	r3, r0
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e01a      	b.n	8005300 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 faa0 	bl	800581c <USB_CoreReset>
 80052dc:	4603      	mov	r3, r0
 80052de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
 80052f2:	e005      	b.n	8005300 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b01      	cmp	r3, #1
 8005304:	d116      	bne.n	8005334 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <USB_CoreInit+0xd8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f043 0206 	orr.w	r2, r3, #6
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005340:	b004      	add	sp, #16
 8005342:	4770      	bx	lr
 8005344:	ffbdffbf 	.word	0xffbdffbf
 8005348:	03ee0000 	.word	0x03ee0000

0800534c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 0201 	bic.w	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d115      	bne.n	80053bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800539c:	2001      	movs	r0, #1
 800539e:	f7fb fe0f 	bl	8000fc0 <HAL_Delay>
      ms++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fa29 	bl	8005800 <USB_GetMode>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d01e      	beq.n	80053f2 <USB_SetCurrentMode+0x84>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b31      	cmp	r3, #49	; 0x31
 80053b8:	d9f0      	bls.n	800539c <USB_SetCurrentMode+0x2e>
 80053ba:	e01a      	b.n	80053f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d115      	bne.n	80053ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ce:	2001      	movs	r0, #1
 80053d0:	f7fb fdf6 	bl	8000fc0 <HAL_Delay>
      ms++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa10 	bl	8005800 <USB_GetMode>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <USB_SetCurrentMode+0x84>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b31      	cmp	r3, #49	; 0x31
 80053ea:	d9f0      	bls.n	80053ce <USB_SetCurrentMode+0x60>
 80053ec:	e001      	b.n	80053f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e005      	b.n	80053fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b32      	cmp	r3, #50	; 0x32
 80053f6:	d101      	bne.n	80053fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005408:	b084      	sub	sp, #16
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	e009      	b.n	800543c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	3340      	adds	r3, #64	; 0x40
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3301      	adds	r3, #1
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b0e      	cmp	r3, #14
 8005440:	d9f2      	bls.n	8005428 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11c      	bne.n	8005482 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005456:	f043 0302 	orr.w	r3, r3, #2
 800545a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e005      	b.n	800548e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005494:	461a      	mov	r2, r3
 8005496:	2300      	movs	r3, #0
 8005498:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	4619      	mov	r1, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a8:	461a      	mov	r2, r3
 80054aa:	680b      	ldr	r3, [r1, #0]
 80054ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d10c      	bne.n	80054ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054ba:	2100      	movs	r1, #0
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f965 	bl	800578c <USB_SetDevSpeed>
 80054c2:	e008      	b.n	80054d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054c4:	2101      	movs	r1, #1
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f960 	bl	800578c <USB_SetDevSpeed>
 80054cc:	e003      	b.n	80054d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054ce:	2103      	movs	r1, #3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f95b 	bl	800578c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054d6:	2110      	movs	r1, #16
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8f3 	bl	80056c4 <USB_FlushTxFifo>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f91f 	bl	800572c <USB_FlushRxFifo>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	461a      	mov	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	461a      	mov	r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	e043      	b.n	80055aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005538:	d118      	bne.n	800556c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	461a      	mov	r2, r3
 800554e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	e013      	b.n	800557e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	461a      	mov	r2, r3
 8005564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e008      	b.n	800557e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	461a      	mov	r2, r3
 800557a:	2300      	movs	r3, #0
 800557c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3301      	adds	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3b7      	bcc.n	8005522 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	e043      	b.n	8005640 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ce:	d118      	bne.n	8005602 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	461a      	mov	r2, r3
 80055e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e013      	b.n	8005614 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	461a      	mov	r2, r3
 80055fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e008      	b.n	8005614 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	461a      	mov	r2, r3
 8005610:	2300      	movs	r3, #0
 8005612:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	2300      	movs	r3, #0
 8005624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005638:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3301      	adds	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	429a      	cmp	r2, r3
 8005646:	d3b7      	bcc.n	80055b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005668:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f043 0210 	orr.w	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <USB_DevInit+0x2b4>)
 8005682:	4313      	orrs	r3, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f043 0208 	orr.w	r2, r3, #8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800569a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d105      	bne.n	80056ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <USB_DevInit+0x2b8>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b8:	b004      	add	sp, #16
 80056ba:	4770      	bx	lr
 80056bc:	803c3800 	.word	0x803c3800
 80056c0:	40000004 	.word	0x40000004

080056c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4a13      	ldr	r2, [pc, #76]	; (8005728 <USB_FlushTxFifo+0x64>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e01b      	b.n	800571c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	daf2      	bge.n	80056d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	019b      	lsls	r3, r3, #6
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <USB_FlushTxFifo+0x64>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e006      	b.n	800571c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b20      	cmp	r3, #32
 8005718:	d0f0      	beq.n	80056fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	00030d40 	.word	0x00030d40

0800572c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a11      	ldr	r2, [pc, #68]	; (8005788 <USB_FlushRxFifo+0x5c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e018      	b.n	800577c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	daf2      	bge.n	8005738 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2210      	movs	r2, #16
 800575a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <USB_FlushRxFifo+0x5c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e006      	b.n	800577c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	d0f0      	beq.n	800575c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	00030d40 	.word	0x00030d40

0800578c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057d8:	f023 0303 	bic.w	r3, r3, #3
 80057dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ec:	f043 0302 	orr.w	r3, r3, #2
 80057f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0301 	and.w	r3, r3, #1
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <USB_CoreReset+0x64>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e01b      	b.n	8005872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	daf2      	bge.n	8005828 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4a09      	ldr	r2, [pc, #36]	; (8005880 <USB_CoreReset+0x64>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e006      	b.n	8005872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d0f0      	beq.n	8005852 <USB_CoreReset+0x36>

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	00030d40 	.word	0x00030d40

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4d0d      	ldr	r5, [pc, #52]	; (80058bc <__libc_init_array+0x38>)
 8005888:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	2600      	movs	r6, #0
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	4d0b      	ldr	r5, [pc, #44]	; (80058c4 <__libc_init_array+0x40>)
 8005896:	4c0c      	ldr	r4, [pc, #48]	; (80058c8 <__libc_init_array+0x44>)
 8005898:	f000 f820 	bl	80058dc <_init>
 800589c:	1b64      	subs	r4, r4, r5
 800589e:	10a4      	asrs	r4, r4, #2
 80058a0:	2600      	movs	r6, #0
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	08005934 	.word	0x08005934
 80058c0:	08005934 	.word	0x08005934
 80058c4:	08005934 	.word	0x08005934
 80058c8:	08005938 	.word	0x08005938

080058cc <memset>:
 80058cc:	4402      	add	r2, r0
 80058ce:	4603      	mov	r3, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
