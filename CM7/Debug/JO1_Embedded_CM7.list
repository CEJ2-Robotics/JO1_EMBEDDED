
JO1_Embedded_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800bcb0  0800bcb0  0001bcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c194  0800c194  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c194  0800c194  0001c194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c19c  0800c19c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1a0  0800c1a0  0001c1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800c1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  240001e4  0800c388  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000920  0800c388  00020920  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f79e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003642  00000000  00000000  0003f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00042ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00044810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d12b  00000000  00000000  00045ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fec2  00000000  00000000  00082feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018cfa3  00000000  00000000  000a2ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022fe50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b1c  00000000  00000000  0022fea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bc94 	.word	0x0800bc94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800bc94 	.word	0x0800bc94

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb4:	bf00      	nop
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <main+0xf8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
  if ( timeout < 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
  {
  Error_Handler();
 8000bd2:	f000 fb25 	bl	8001220 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 ff7b 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f869 	bl	8000cb0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <main+0xf8>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <main+0xf8>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <main+0xf8>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f001 fad7 	bl	80021b0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f001 faed 	bl	80021e4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	bf00      	nop
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <main+0xf8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
if ( timeout < 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
{
Error_Handler();
 8000c2e:	f000 faf7 	bl	8001220 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 fa75 	bl	8001120 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 f9f5 	bl	8001024 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c3a:	f000 fa3f 	bl	80010bc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8000c3e:	f000 f8ff 	bl	8000e40 <MX_SPI4_Init>
  MX_I2C4_Init();
 8000c42:	f000 f8bd 	bl	8000dc0 <MX_I2C4_Init>
  MX_TIM13_Init();
 8000c46:	f000 f951 	bl	8000eec <MX_TIM13_Init>
  MX_TIM14_Init();
 8000c4a:	f000 f99d 	bl	8000f88 <MX_TIM14_Init>
    /* USER CODE BEGIN 3 */

	//coords = NRF24_ReadJohnDeereSystem();
	//IMU_Data = MPU_ReadProcessedData(&hi2c4);

	Turning_SetAngle(0.0);
 8000c4e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000ca4 <main+0xfc>
 8000c52:	f000 fb59 	bl	8001308 <Turning_SetAngle>
	HAL_Delay(1000);
 8000c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5a:	f000 ffcb 	bl	8001bf4 <HAL_Delay>
	Turning_SetAngle(90.0);
 8000c5e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000ca8 <main+0x100>
 8000c62:	f000 fb51 	bl	8001308 <Turning_SetAngle>
	HAL_Delay(1000);
 8000c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6a:	f000 ffc3 	bl	8001bf4 <HAL_Delay>
	Turning_SetAngle(-90.0);
 8000c6e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000cac <main+0x104>
 8000c72:	f000 fb49 	bl	8001308 <Turning_SetAngle>
	HAL_Delay(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f000 ffbb 	bl	8001bf4 <HAL_Delay>

	SetMotorSpeed(1.0);
 8000c7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c82:	f000 fad3 	bl	800122c <SetMotorSpeed>
	HAL_Delay(1000);
 8000c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8a:	f000 ffb3 	bl	8001bf4 <HAL_Delay>
	SetMotorSpeed(-1.0);
 8000c8e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8000c92:	f000 facb 	bl	800122c <SetMotorSpeed>
	HAL_Delay(1000);
 8000c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9a:	f000 ffab 	bl	8001bf4 <HAL_Delay>
	Turning_SetAngle(0.0);
 8000c9e:	e7d6      	b.n	8000c4e <main+0xa6>
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	00000000 	.word	0x00000000
 8000ca8:	42b40000 	.word	0x42b40000
 8000cac:	c2b40000 	.word	0xc2b40000

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b09c      	sub	sp, #112	; 0x70
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	224c      	movs	r2, #76	; 0x4c
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fc88 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f006 fc82 	bl	80075d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cd0:	2004      	movs	r0, #4
 8000cd2:	f001 fd0b 	bl	80026ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <SystemClock_Config+0x104>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a35      	ldr	r2, [pc, #212]	; (8000db4 <SystemClock_Config+0x104>)
 8000ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <SystemClock_Config+0x104>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <SystemClock_Config+0x108>)
 8000cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf4:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <SystemClock_Config+0x108>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <SystemClock_Config+0x108>)
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d08:	bf00      	nop
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <SystemClock_Config+0x104>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d16:	d1f8      	bne.n	8000d0a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d18:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <SystemClock_Config+0x10c>)
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f023 0303 	bic.w	r3, r3, #3
 8000d20:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <SystemClock_Config+0x10c>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d46:	2378      	movs	r3, #120	; 0x78
 8000d48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d56:	230c      	movs	r3, #12
 8000d58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 fd2a 	bl	80027c0 <HAL_RCC_OscConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d72:	f000 fa55 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	233f      	movs	r3, #63	; 0x3f
 8000d78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d82:	2308      	movs	r3, #8
 8000d84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f93d 	bl	800301c <HAL_RCC_ClockConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000da8:	f000 fa3a 	bl	8001220 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3770      	adds	r7, #112	; 0x70
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	58024800 	.word	0x58024800
 8000db8:	58000400 	.word	0x58000400
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_I2C4_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <MX_I2C4_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000dfc:	f001 fa06 	bl	800220c <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 fa0b 	bl	8001220 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000e0e:	f001 fa8d 	bl	800232c <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 fa02 	bl	8001220 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2C4_Init+0x74>)
 8000e20:	f001 facf 	bl	80023c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f9f9 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	24000200 	.word	0x24000200
 8000e38:	58001c00 	.word	0x58001c00
 8000e3c:	307075b1 	.word	0x307075b1

08000e40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e46:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <MX_SPI4_Init+0xa8>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e74:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000e78:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPI4_Init+0xa4>)
 8000ed2:	f003 ff97 	bl	8004e04 <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000edc:	f000 f9a0 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2400024c 	.word	0x2400024c
 8000ee8:	40013400 	.word	0x40013400

08000eec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <MX_TIM13_Init+0x98>)
 8000f08:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 75;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f0c:	224b      	movs	r2, #75	; 0x4b
 8000f0e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 63999;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f18:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f1c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000f2a:	4815      	ldr	r0, [pc, #84]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f2c:	f004 f88b 	bl	8005046 <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000f36:	f000 f973 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f3c:	f004 f8da 	bl	80050f4 <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000f46:	f000 f96b 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4a:	2360      	movs	r3, #96	; 0x60
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f62:	f004 fa37 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000f6c:	f000 f958 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <MX_TIM13_Init+0x94>)
 8000f72:	f000 fb41 	bl	80015f8 <HAL_TIM_MspPostInit>

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	240002d4 	.word	0x240002d4
 8000f84:	40001c00 	.word	0x40001c00

08000f88 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <MX_TIM14_Init+0x94>)
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <MX_TIM14_Init+0x98>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 75;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_TIM14_Init+0x94>)
 8000fa8:	224b      	movs	r2, #75	; 0x4b
 8000faa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_TIM14_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 63999;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_TIM14_Init+0x94>)
 8000fb4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000fb8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_TIM14_Init+0x94>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_TIM14_Init+0x94>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fc6:	4815      	ldr	r0, [pc, #84]	; (800101c <MX_TIM14_Init+0x94>)
 8000fc8:	f004 f83d 	bl	8005046 <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000fd2:	f000 f925 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <MX_TIM14_Init+0x94>)
 8000fd8:	f004 f88c 	bl	80050f4 <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000fe2:	f000 f91d 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe6:	2360      	movs	r3, #96	; 0x60
 8000fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_TIM14_Init+0x94>)
 8000ffe:	f004 f9e9 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001008:	f000 f90a 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM14_Init+0x94>)
 800100e:	f000 faf3 	bl	80015f8 <HAL_TIM_MspPostInit>

}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	24000320 	.word	0x24000320
 8001020:	40002000 	.word	0x40002000

08001024 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <MX_USART3_UART_Init+0x94>)
 800102c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 800106e:	f004 fe68 	bl	8005d42 <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001078:	f000 f8d2 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001080:	f005 fe9c 	bl	8006dbc <HAL_UARTEx_SetTxFifoThreshold>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800108a:	f000 f8c9 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108e:	2100      	movs	r1, #0
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 8001092:	f005 fed1 	bl	8006e38 <HAL_UARTEx_SetRxFifoThreshold>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 f8c0 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_USART3_UART_Init+0x90>)
 80010a2:	f005 fe52 	bl	8006d4a <HAL_UARTEx_DisableFifoMode>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f8b8 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2400036c 	.word	0x2400036c
 80010b8:	40004800 	.word	0x40004800

080010bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c2:	4a16      	ldr	r2, [pc, #88]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80010c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c8:	2209      	movs	r2, #9
 80010ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010da:	2202      	movs	r2, #2
 80010dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001104:	f001 f9a9 	bl	800245a <HAL_PCD_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800110e:	f000 f887 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	240003fc 	.word	0x240003fc
 800111c:	40080000 	.word	0x40080000

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	4a36      	ldr	r2, [pc, #216]	; (8001218 <MX_GPIO_Init+0xf8>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <MX_GPIO_Init+0xf8>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <MX_GPIO_Init+0xf8>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001196:	4a20      	ldr	r2, [pc, #128]	; (8001218 <MX_GPIO_Init+0xf8>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_GPIO_Init+0xf8>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_GPIO_Init+0xf8>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <MX_GPIO_Init+0xf8>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_GPIO_Init+0xf8>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_GPIO_Init+0xf8>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <MX_GPIO_Init+0xf8>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_GPIO_Init+0xf8>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	21c0      	movs	r1, #192	; 0xc0
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0xfc>)
 80011f0:	f000 ffc4 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80011f4:	23c0      	movs	r3, #192	; 0xc0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_GPIO_Init+0xfc>)
 800120c:	f000 fe06 	bl	8001e1c <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400
 800121c:	58020800 	.word	0x58020800

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <SetMotorSpeed>:
 *
 * @param speed The desired motor speed (-1.0 to 1.0).
 */

void SetMotorSpeed(float speed)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ensure speed is within the valid range

	if (speed < -1.0f || speed > 1.0f) {
 8001236:	edd7 7a01 	vldr	s15, [r7, #4]
 800123a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800123e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	d446      	bmi.n	80012d6 <SetMotorSpeed+0xaa>
 8001248:	edd7 7a01 	vldr	s15, [r7, #4]
 800124c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	dc3d      	bgt.n	80012d6 <SetMotorSpeed+0xaa>
        return;
    }

	// Calculate the pulse width based on the input speed

	float pulseWidth = NEUTRAL_PULSE_WIDTH_MS + (speed * (speed > 0.0f ? FORWARD_PULSE_WIDTH_RANGE : -REVERSE_PULSE_WIDTH_RANGE));
 800125a:	edd7 7a01 	vldr	s15, [r7, #4]
 800125e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dd02      	ble.n	800126e <SetMotorSpeed+0x42>
 8001268:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800126c:	e001      	b.n	8001272 <SetMotorSpeed+0x46>
 800126e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001272:	edd7 7a01 	vldr	s15, [r7, #4]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800127e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001282:	edc7 7a05 	vstr	s15, [r7, #20]

    // Get the current value of the auto-reload register for the timer

    uint32_t autoreload_register_value = __HAL_TIM_GET_AUTORELOAD(&htim14);
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <SetMotorSpeed+0xb4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	613b      	str	r3, [r7, #16]

    // Calculate the compare value based on the pulse width and timer settings

    uint32_t value = (uint32_t)((pulseWidth / PWM_PERIOD_MS) * (autoreload_register_value + 1));
 800128e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001292:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001296:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	3301      	adds	r3, #1
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	60fb      	str	r3, [r7, #12]

    // Set the PWM duty cycle for TIM_CHANNEL_1 of the timer

    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, value);
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <SetMotorSpeed+0xb4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34

    // Start the PWM signal generation on TIM_CHANNEL_1 if not already started

    HAL_TIM_StateTypeDef pwmState = HAL_TIM_PWM_GetState(&htim14);
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <SetMotorSpeed+0xb4>)
 80012be:	f004 f99d 	bl	80055fc <HAL_TIM_PWM_GetState>
 80012c2:	4603      	mov	r3, r0
 80012c4:	72fb      	strb	r3, [r7, #11]

    if (pwmState != HAL_TIM_STATE_READY) {
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <SetMotorSpeed+0xac>
        HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <SetMotorSpeed+0xb4>)
 80012d0:	f003 ff72 	bl	80051b8 <HAL_TIM_PWM_Start>
 80012d4:	e000      	b.n	80012d8 <SetMotorSpeed+0xac>
        return;
 80012d6:	bf00      	nop
    }
}
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	24000320 	.word	0x24000320

080012e4 <__io_putchar>:
 * @param ch The character to be transmitted.
 * @return The transmitted character.
 */

PUTCHAR_PROTOTYPE
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012ec:	1d39      	adds	r1, r7, #4
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	2201      	movs	r2, #1
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <__io_putchar+0x20>)
 80012f6:	f004 fd74 	bl	8005de2 <HAL_UART_Transmit>
	return ch;
 80012fa:	687b      	ldr	r3, [r7, #4]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2400036c 	.word	0x2400036c

08001308 <Turning_SetAngle>:
 *
 * @param angle The desired servo angle in degrees (-90.0 to 90.0).
 */

void Turning_SetAngle(float angle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Check if the angle is within the valid range

	if (angle < SERVO_MIN_ANGLE || angle > SERVO_MAX_ANGLE) {
 8001312:	edd7 7a01 	vldr	s15, [r7, #4]
 8001316:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80013a8 <Turning_SetAngle+0xa0>
 800131a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	d43c      	bmi.n	800139e <Turning_SetAngle+0x96>
 8001324:	edd7 7a01 	vldr	s15, [r7, #4]
 8001328:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80013ac <Turning_SetAngle+0xa4>
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	dc33      	bgt.n	800139e <Turning_SetAngle+0x96>
	}

	// Calculate the pulse width corresponding to the angle
	// Base pulse width is SERVO_BASE_PULSE_WIDTH_MS, adjusted based on the angle

	float pulseWidth = SERVO_BASE_PULSE_WIDTH_MS + (angle / 180.0f);
 8001336:	ed97 7a01 	vldr	s14, [r7, #4]
 800133a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80013b0 <Turning_SetAngle+0xa8>
 800133e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001342:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001346:	ee77 7a87 	vadd.f32	s15, s15, s14
 800134a:	edc7 7a05 	vstr	s15, [r7, #20]

	// Get the current value of the auto-reload register for the timer

	uint32_t autoreload_register_value = __HAL_TIM_GET_AUTORELOAD(&htim13);
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <Turning_SetAngle+0xac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	613b      	str	r3, [r7, #16]

	// Calculate the compare value based on the pulse width and timer settings

	uint32_t value = (uint32_t)((pulseWidth / SERVO_PWM_PERIOD_MS) * (autoreload_register_value + 1));
 8001356:	edd7 7a05 	vldr	s15, [r7, #20]
 800135a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800135e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001376:	ee17 3a90 	vmov	r3, s15
 800137a:	60fb      	str	r3, [r7, #12]

	// Set the PWM duty cycle for TIM_CHANNEL_1 of the timer

	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, value);
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <Turning_SetAngle+0xac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	635a      	str	r2, [r3, #52]	; 0x34

    // Start the PWM signal generation on TIM_CHANNEL_1 if not already started

    HAL_TIM_StateTypeDef pwmState = HAL_TIM_PWM_GetState(&htim13);
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <Turning_SetAngle+0xac>)
 8001386:	f004 f939 	bl	80055fc <HAL_TIM_PWM_GetState>
 800138a:	4603      	mov	r3, r0
 800138c:	72fb      	strb	r3, [r7, #11]

    if (pwmState != HAL_TIM_STATE_READY) {
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d005      	beq.n	80013a0 <Turning_SetAngle+0x98>
        HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001394:	2100      	movs	r1, #0
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <Turning_SetAngle+0xac>)
 8001398:	f003 ff0e 	bl	80051b8 <HAL_TIM_PWM_Start>
 800139c:	e000      	b.n	80013a0 <Turning_SetAngle+0x98>
		return;
 800139e:	bf00      	nop
    }
}
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	c2b40000 	.word	0xc2b40000
 80013ac:	42b40000 	.word	0x42b40000
 80013b0:	43340000 	.word	0x43340000
 80013b4:	240002d4 	.word	0x240002d4

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_MspInit+0x30>)
 80013c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c4:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x30>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x30>)
 80013d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	58024400 	.word	0x58024400

080013ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0b8      	sub	sp, #224	; 0xe0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22bc      	movs	r2, #188	; 0xbc
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f006 f8e1 	bl	80075d4 <memset>
  if(hi2c->Instance==I2C4)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_I2C_MspInit+0xc0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d142      	bne.n	80014a2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800141c:	2310      	movs	r3, #16
 800141e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4618      	mov	r0, r3
 800142c:	f002 f982 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001436:	f7ff fef3 	bl	8001220 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_I2C_MspInit+0xc4>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_I2C_MspInit+0xc4>)
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_I2C_MspInit+0xc4>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001458:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800145c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001460:	2312      	movs	r3, #18
 8001462:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001472:	2304      	movs	r3, #4
 8001474:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001478:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <HAL_I2C_MspInit+0xc8>)
 8001480:	f000 fccc 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_I2C_MspInit+0xc4>)
 8001486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_I2C_MspInit+0xc4>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_I2C_MspInit+0xc4>)
 8001496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	37e0      	adds	r7, #224	; 0xe0
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	58001c00 	.word	0x58001c00
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58021400 	.word	0x58021400

080014b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0b8      	sub	sp, #224	; 0xe0
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	22bc      	movs	r2, #188	; 0xbc
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f006 f87b 	bl	80075d4 <memset>
  if(hspi->Instance==SPI4)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a25      	ldr	r2, [pc, #148]	; (8001578 <HAL_SPI_MspInit+0xc0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d142      	bne.n	800156e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80014e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 80014ee:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80014f2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f91b 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001504:	f7ff fe8c 	bl	8001220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_SPI_MspInit+0xc4>)
 800150a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_SPI_MspInit+0xc4>)
 8001510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001514:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_SPI_MspInit+0xc4>)
 800151a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800151e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_SPI_MspInit+0xc4>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a13      	ldr	r2, [pc, #76]	; (800157c <HAL_SPI_MspInit+0xc4>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_SPI_MspInit+0xc4>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SPI4_SCK_Pin|NRF_SPI4_MISO_Pin|NRF_SPI4_MOSI_Pin;
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800155c:	2305      	movs	r3, #5
 800155e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001562:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_SPI_MspInit+0xc8>)
 800156a:	f000 fc57 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	37e0      	adds	r7, #224	; 0xe0
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40013400 	.word	0x40013400
 800157c:	58024400 	.word	0x58024400
 8001580:	58021000 	.word	0x58021000

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10f      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 8001598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 800159e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80015b4:	e013      	b.n	80015de <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_TIM_Base_MspInit+0x70>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10e      	bne.n	80015de <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40001c00 	.word	0x40001c00
 80015f0:	58024400 	.word	0x58024400
 80015f4:	40002000 	.word	0x40002000

080015f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <HAL_TIM_MspPostInit+0xb8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d120      	bne.n	800165c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_TIM_MspPostInit+0xbc>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <HAL_TIM_MspPostInit+0xbc>)
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_TIM_MspPostInit+0xbc>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800164a:	2309      	movs	r3, #9
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <HAL_TIM_MspPostInit+0xc0>)
 8001656:	f000 fbe1 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800165a:	e024      	b.n	80016a6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a16      	ldr	r2, [pc, #88]	; (80016bc <HAL_TIM_MspPostInit+0xc4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11f      	bne.n	80016a6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_TIM_MspPostInit+0xbc>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_TIM_MspPostInit+0xbc>)
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_TIM_MspPostInit+0xbc>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001696:	2309      	movs	r3, #9
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_TIM_MspPostInit+0xc0>)
 80016a2:	f000 fbbb 	bl	8001e1c <HAL_GPIO_Init>
}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40001c00 	.word	0x40001c00
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58021400 	.word	0x58021400
 80016bc:	40002000 	.word	0x40002000

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0b8      	sub	sp, #224	; 0xe0
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	22bc      	movs	r2, #188	; 0xbc
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 ff77 	bl	80075d4 <memset>
  if(huart->Instance==USART3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_UART_MspInit+0xc0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d142      	bne.n	8001776 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 f818 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800170a:	f7ff fd89 	bl	8001220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0xc4>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_MspInit+0xc4>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800174a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800174e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001764:	2307      	movs	r3, #7
 8001766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_UART_MspInit+0xc8>)
 8001772:	f000 fb53 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	37e0      	adds	r7, #224	; 0xe0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40004800 	.word	0x40004800
 8001784:	58024400 	.word	0x58024400
 8001788:	58020c00 	.word	0x58020c00

0800178c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0b8      	sub	sp, #224	; 0xe0
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	22bc      	movs	r2, #188	; 0xbc
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 ff11 	bl	80075d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a36      	ldr	r2, [pc, #216]	; (8001890 <HAL_PCD_MspInit+0x104>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d165      	bne.n	8001888 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 80017c6:	2318      	movs	r3, #24
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80017ce:	2304      	movs	r3, #4
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80017d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80017e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 ffa1 	bl	8003734 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80017f8:	f7ff fd12 	bl	8001220 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80017fc:	f000 ffd0 	bl	80027a0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_PCD_MspInit+0x108>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <HAL_PCD_MspInit+0x108>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_PCD_MspInit+0x108>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800181e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001838:	230a      	movs	r3, #10
 800183a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001842:	4619      	mov	r1, r3
 8001844:	4814      	ldr	r0, [pc, #80]	; (8001898 <HAL_PCD_MspInit+0x10c>)
 8001846:	f000 fae9 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800184a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001862:	4619      	mov	r1, r3
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <HAL_PCD_MspInit+0x10c>)
 8001866:	f000 fad9 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_PCD_MspInit+0x108>)
 800186c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_PCD_MspInit+0x108>)
 8001872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001876:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_PCD_MspInit+0x108>)
 800187c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	37e0      	adds	r7, #224	; 0xe0
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40080000 	.word	0x40080000
 8001894:	58024400 	.word	0x58024400
 8001898:	58020000 	.word	0x58020000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f964 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190a:	f005 fe2b 	bl	8007564 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
	return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
	}

return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e009      	b.n	8001994 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fcab 	bl	80012e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf1      	blt.n	8001980 <_write+0x12>
	}
	return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
	return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_isatty>:

int _isatty(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f005 fd90 	bl	8007564 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	24080000 	.word	0x24080000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	24000908 	.word	0x24000908
 8001a78:	24000920 	.word	0x24000920

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a80:	f7fe fffc 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f005 fd61 	bl	8007570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7ff f87b 	bl	8000ba8 <main>
  bx  lr
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ab8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001abc:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001ac0:	0800c1a4 	.word	0x0800c1a4
  ldr r2, =_sbss
 8001ac4:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001ac8:	24000920 	.word	0x24000920

08001acc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC3_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f000 f96e 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001adc:	f001 fc54 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_Init+0x68>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	4913      	ldr	r1, [pc, #76]	; (8001b3c <HAL_Init+0x6c>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_Init+0x68>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_Init+0x6c>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_Init+0x70>)
 8001b12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_Init+0x74>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f814 	bl	8001b48 <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e002      	b.n	8001b30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2a:	f7ff fc45 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	0800bcb0 	.word	0x0800bcb0
 8001b40:	24000004 	.word	0x24000004
 8001b44:	24000000 	.word	0x24000000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_InitTick+0x60>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e021      	b.n	8001ba0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_InitTick+0x64>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f945 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f000 f91d 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_InitTick+0x68>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2400000c 	.word	0x2400000c
 8001bac:	24000000 	.word	0x24000000
 8001bb0:	24000008 	.word	0x24000008

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2400000c 	.word	0x2400000c
 8001bd8:	2400090c 	.word	0x2400090c

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2400090c 	.word	0x2400090c

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2400000c 	.word	0x2400000c

08001c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetREVID+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0c1b      	lsrs	r3, r3, #16
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	5c001000 	.word	0x5c001000

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	05fa0000 	.word	0x05fa0000

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff47 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff5e 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff90 	bl	8001d0c <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5f 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffb2 	bl	8001d74 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e2a:	4b89      	ldr	r3, [pc, #548]	; (8002050 <HAL_GPIO_Init+0x234>)
 8001e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e2e:	e194      	b.n	800215a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8186 	beq.w	8002154 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <HAL_GPIO_Init+0x44>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d130      	bne.n	8001ec2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e96:	2201      	movs	r2, #1
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 0201 	and.w	r2, r3, #1
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d017      	beq.n	8001efe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d123      	bne.n	8001f52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	69b9      	ldr	r1, [r7, #24]
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0203 	and.w	r2, r3, #3
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80e0 	beq.w	8002154 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_GPIO_Init+0x238>)
 8001f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f9a:	4a2e      	ldr	r2, [pc, #184]	; (8002054 <HAL_GPIO_Init+0x238>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_GPIO_Init+0x238>)
 8001fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_GPIO_Init+0x23c>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <HAL_GPIO_Init+0x240>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d052      	beq.n	8002084 <HAL_GPIO_Init+0x268>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_GPIO_Init+0x244>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d031      	beq.n	800204a <HAL_GPIO_Init+0x22e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_GPIO_Init+0x248>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <HAL_GPIO_Init+0x22a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_GPIO_Init+0x24c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_Init+0x226>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_GPIO_Init+0x250>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_Init+0x222>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_GPIO_Init+0x254>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x21e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_GPIO_Init+0x258>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_GPIO_Init+0x25c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_GPIO_Init+0x260>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x212>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_GPIO_Init+0x264>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x20e>
 8002026:	2309      	movs	r3, #9
 8002028:	e02d      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800202a:	230a      	movs	r3, #10
 800202c:	e02b      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800202e:	2308      	movs	r3, #8
 8002030:	e029      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002032:	2307      	movs	r3, #7
 8002034:	e027      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002036:	2306      	movs	r3, #6
 8002038:	e025      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800203a:	2305      	movs	r3, #5
 800203c:	e023      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800203e:	2304      	movs	r3, #4
 8002040:	e021      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002042:	2303      	movs	r3, #3
 8002044:	e01f      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002046:	2302      	movs	r3, #2
 8002048:	e01d      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800204a:	2301      	movs	r3, #1
 800204c:	e01b      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800204e:	bf00      	nop
 8002050:	58000080 	.word	0x58000080
 8002054:	58024400 	.word	0x58024400
 8002058:	58000400 	.word	0x58000400
 800205c:	58020000 	.word	0x58020000
 8002060:	58020400 	.word	0x58020400
 8002064:	58020800 	.word	0x58020800
 8002068:	58020c00 	.word	0x58020c00
 800206c:	58021000 	.word	0x58021000
 8002070:	58021400 	.word	0x58021400
 8002074:	58021800 	.word	0x58021800
 8002078:	58021c00 	.word	0x58021c00
 800207c:	58022000 	.word	0x58022000
 8002080:	58022400 	.word	0x58022400
 8002084:	2300      	movs	r3, #0
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002096:	4938      	ldr	r1, [pc, #224]	; (8002178 <HAL_GPIO_Init+0x35c>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3301      	adds	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f ae63 	bne.w	8001e30 <HAL_GPIO_Init+0x14>
  }
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	3724      	adds	r7, #36	; 0x24
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	58000400 	.word	0x58000400

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002198:	e003      	b.n	80021a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021b8:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_HSEM_FastTake+0x2c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3320      	adds	r3, #32
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_HSEM_FastTake+0x30>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	58026400 	.word	0x58026400
 80021e0:	80000300 	.word	0x80000300

080021e4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021ee:	4906      	ldr	r1, [pc, #24]	; (8002208 <HAL_HSEM_Release+0x24>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	58026400 	.word	0x58026400

0800220c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e07f      	b.n	800231e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff f8da 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e006      	b.n	8002294 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002292:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d104      	bne.n	80022a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_I2C_Init+0x11c>)
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69d9      	ldr	r1, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1a      	ldr	r2, [r3, #32]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	02008000 	.word	0x02008000

0800232c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	d138      	bne.n	80023b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800234c:	2302      	movs	r3, #2
 800234e:	e032      	b.n	80023b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	; 0x24
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800237e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6819      	ldr	r1, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d139      	bne.n	800244c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e033      	b.n	800244e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2224      	movs	r2, #36	; 0x24
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800245a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245c:	b08f      	sub	sp, #60	; 0x3c
 800245e:	af0a      	add	r7, sp, #40	; 0x28
 8002460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e116      	b.n	800269a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff f980 	bl	800178c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 fdbe 	bl	800702c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	687e      	ldr	r6, [r7, #4]
 80024b8:	466d      	mov	r5, sp
 80024ba:	f106 0410 	add.w	r4, r6, #16
 80024be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ce:	1d33      	adds	r3, r6, #4
 80024d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d2:	6838      	ldr	r0, [r7, #0]
 80024d4:	f004 fd3c 	bl	8006f50 <USB_CoreInit>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0d7      	b.n	800269a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 fdac 	bl	800704e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e04a      	b.n	8002592 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	333d      	adds	r3, #61	; 0x3d
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	333c      	adds	r3, #60	; 0x3c
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	b298      	uxth	r0, r3
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3344      	adds	r3, #68	; 0x44
 8002538:	4602      	mov	r2, r0
 800253a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3340      	adds	r3, #64	; 0x40
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3348      	adds	r3, #72	; 0x48
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	334c      	adds	r3, #76	; 0x4c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3354      	adds	r3, #84	; 0x54
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3af      	bcc.n	80024fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e044      	b.n	800262c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	3301      	adds	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	d3b5      	bcc.n	80025a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	687e      	ldr	r6, [r7, #4]
 800263e:	466d      	mov	r5, sp
 8002640:	f106 0410 	add.w	r4, r6, #16
 8002644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002650:	e885 0003 	stmia.w	r5, {r0, r1}
 8002654:	1d33      	adds	r3, r6, #4
 8002656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002658:	6838      	ldr	r0, [r7, #0]
 800265a:	f004 fd45 	bl	80070e8 <USB_DevInit>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e014      	b.n	800269a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2b01      	cmp	r3, #1
 8002686:	d102      	bne.n	800268e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f80b 	bl	80026a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f004 ff03 	bl	800749e <USB_DevDisconnect>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	10000003 	.word	0x10000003

080026ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80026f4:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d00a      	beq.n	8002716 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e040      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e03e      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800271e:	491f      	ldr	r1, [pc, #124]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002726:	f7ff fa59 	bl	8001bdc <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800272c:	e009      	b.n	8002742 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800272e:	f7ff fa55 	bl	8001bdc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273c:	d901      	bls.n	8002742 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e028      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274e:	d1ee      	bne.n	800272e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b1e      	cmp	r3, #30
 8002754:	d008      	beq.n	8002768 <HAL_PWREx_ConfigSupply+0x7c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b2e      	cmp	r3, #46	; 0x2e
 800275a:	d005      	beq.n	8002768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b1d      	cmp	r3, #29
 8002760:	d002      	beq.n	8002768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b2d      	cmp	r3, #45	; 0x2d
 8002766:	d114      	bne.n	8002792 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002768:	f7ff fa38 	bl	8001bdc <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800276e:	e009      	b.n	8002784 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002770:	f7ff fa34 	bl	8001bdc <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800277e:	d901      	bls.n	8002784 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e007      	b.n	8002794 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_PWREx_ConfigSupply+0xb0>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d1ee      	bne.n	8002770 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	58024800 	.word	0x58024800

080027a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80027aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	58024800 	.word	0x58024800

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f000 bc1d 	b.w	800300e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8087 	beq.w	80028f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	4b99      	ldr	r3, [pc, #612]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ec:	4b96      	ldr	r3, [pc, #600]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d007      	beq.n	8002808 <HAL_RCC_OscConfig+0x48>
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	2b18      	cmp	r3, #24
 80027fc:	d110      	bne.n	8002820 <HAL_RCC_OscConfig+0x60>
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d10b      	bne.n	8002820 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	4b8f      	ldr	r3, [pc, #572]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d06c      	beq.n	80028ee <HAL_RCC_OscConfig+0x12e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d168      	bne.n	80028ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e3f6      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x78>
 800282a:	4b87      	ldr	r3, [pc, #540]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a86      	ldr	r2, [pc, #536]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e02e      	b.n	8002896 <HAL_RCC_OscConfig+0xd6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x9a>
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a80      	ldr	r2, [pc, #512]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a7d      	ldr	r2, [pc, #500]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e01d      	b.n	8002896 <HAL_RCC_OscConfig+0xd6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002862:	d10c      	bne.n	800287e <HAL_RCC_OscConfig+0xbe>
 8002864:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a77      	ldr	r2, [pc, #476]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800286a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b75      	ldr	r3, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a74      	ldr	r2, [pc, #464]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e00b      	b.n	8002896 <HAL_RCC_OscConfig+0xd6>
 800287e:	4b72      	ldr	r3, [pc, #456]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a71      	ldr	r2, [pc, #452]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b6f      	ldr	r3, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6e      	ldr	r2, [pc, #440]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d013      	beq.n	80028c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7ff f99d 	bl	8001bdc <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a6:	f7ff f999 	bl	8001bdc <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b64      	cmp	r3, #100	; 0x64
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e3aa      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b8:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0xe6>
 80028c4:	e014      	b.n	80028f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7ff f989 	bl	8001bdc <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ce:	f7ff f985 	bl	8001bdc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	; 0x64
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e396      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x10e>
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80cb 	beq.w	8002a94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fe:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002906:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_RCC_OscConfig+0x164>
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	2b18      	cmp	r3, #24
 8002918:	d156      	bne.n	80029c8 <HAL_RCC_OscConfig+0x208>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d151      	bne.n	80029c8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002924:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x17c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e368      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800293c:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 0219 	bic.w	r2, r3, #25
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	493f      	ldr	r1, [pc, #252]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294e:	f7ff f945 	bl	8001bdc <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7ff f941 	bl	8001bdc <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e352      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002968:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	f7ff f962 	bl	8001c3c <HAL_GetREVID>
 8002978:	4603      	mov	r3, r0
 800297a:	f241 0203 	movw	r2, #4099	; 0x1003
 800297e:	4293      	cmp	r3, r2
 8002980:	d817      	bhi.n	80029b2 <HAL_RCC_OscConfig+0x1f2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x1dc>
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002992:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800299a:	e07b      	b.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	4927      	ldr	r1, [pc, #156]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b0:	e070      	b.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	061b      	lsls	r3, r3, #24
 80029c0:	4921      	ldr	r1, [pc, #132]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c6:	e065      	b.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d048      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0219 	bic.w	r2, r3, #25
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	491a      	ldr	r1, [pc, #104]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7ff f8fb 	bl	8001bdc <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ea:	f7ff f8f7 	bl	8001bdc <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e308      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	f7ff f918 	bl	8001c3c <HAL_GetREVID>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d81a      	bhi.n	8002a4c <HAL_RCC_OscConfig+0x28c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d108      	bne.n	8002a30 <HAL_RCC_OscConfig+0x270>
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	6053      	str	r3, [r2, #4]
 8002a2e:	e031      	b.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	031b      	lsls	r3, r3, #12
 8002a3e:	4902      	ldr	r1, [pc, #8]	; (8002a48 <HAL_RCC_OscConfig+0x288>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
 8002a44:	e026      	b.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	4b9a      	ldr	r3, [pc, #616]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	4997      	ldr	r1, [pc, #604]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
 8002a60:	e018      	b.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a62:	4b95      	ldr	r3, [pc, #596]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a94      	ldr	r2, [pc, #592]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7ff f8b5 	bl	8001bdc <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a76:	f7ff f8b1 	bl	8001bdc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e2c2      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a88:	4b8b      	ldr	r3, [pc, #556]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a9 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa2:	4b85      	ldr	r3, [pc, #532]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aac:	4b82      	ldr	r3, [pc, #520]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d007      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x308>
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b18      	cmp	r3, #24
 8002abc:	d13a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x374>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d135      	bne.n	8002b34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ac8:	4b7b      	ldr	r3, [pc, #492]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x320>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e296      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ae0:	f7ff f8ac 	bl	8001c3c <HAL_GetREVID>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d817      	bhi.n	8002b1e <HAL_RCC_OscConfig+0x35e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d108      	bne.n	8002b08 <HAL_RCC_OscConfig+0x348>
 8002af6:	4b70      	ldr	r3, [pc, #448]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002afe:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b06:	e075      	b.n	8002bf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b08:	4b6b      	ldr	r3, [pc, #428]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	069b      	lsls	r3, r3, #26
 8002b16:	4968      	ldr	r1, [pc, #416]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1c:	e06a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1e:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	061b      	lsls	r3, r3, #24
 8002b2c:	4962      	ldr	r1, [pc, #392]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b32:	e05f      	b.n	8002bf4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d042      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b3c:	4b5e      	ldr	r3, [pc, #376]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7ff f848 	bl	8001bdc <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b50:	f7ff f844 	bl	8001bdc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e255      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b62:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b6e:	f7ff f865 	bl	8001c3c <HAL_GetREVID>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d817      	bhi.n	8002bac <HAL_RCC_OscConfig+0x3ec>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d108      	bne.n	8002b96 <HAL_RCC_OscConfig+0x3d6>
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b92:	6053      	str	r3, [r2, #4]
 8002b94:	e02e      	b.n	8002bf4 <HAL_RCC_OscConfig+0x434>
 8002b96:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	4944      	ldr	r1, [pc, #272]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
 8002baa:	e023      	b.n	8002bf4 <HAL_RCC_OscConfig+0x434>
 8002bac:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	493f      	ldr	r1, [pc, #252]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60cb      	str	r3, [r1, #12]
 8002bc0:	e018      	b.n	8002bf4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a3c      	ldr	r2, [pc, #240]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7ff f805 	bl	8001bdc <HAL_GetTick>
 8002bd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bd6:	f7ff f801 	bl	8001bdc <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e212      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002be8:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d036      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d019      	beq.n	8002c3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0c:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe ffe2 	bl	8001bdc <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7fe ffde 	bl	8001bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1ef      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x45c>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c40:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe ffc8 	bl	8001bdc <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe ffc4 	bl	8001bdc <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1d5      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d039      	beq.n	8002cee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01c      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe ffa5 	bl	8001bdc <HAL_GetTick>
 8002c92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c96:	f7fe ffa1 	bl	8001bdc <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1b2      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCC_OscConfig+0x4f8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x4d6>
 8002cb4:	e01b      	b.n	8002cee <HAL_RCC_OscConfig+0x52e>
 8002cb6:	bf00      	nop
 8002cb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cbc:	4b9b      	ldr	r3, [pc, #620]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a9a      	ldr	r2, [pc, #616]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe ff88 	bl	8001bdc <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cd0:	f7fe ff84 	bl	8001bdc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e195      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce2:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8081 	beq.w	8002dfe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cfc:	4b8c      	ldr	r3, [pc, #560]	; (8002f30 <HAL_RCC_OscConfig+0x770>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a8b      	ldr	r2, [pc, #556]	; (8002f30 <HAL_RCC_OscConfig+0x770>)
 8002d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d08:	f7fe ff68 	bl	8001bdc <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d10:	f7fe ff64 	bl	8001bdc <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e175      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d22:	4b83      	ldr	r3, [pc, #524]	; (8002f30 <HAL_RCC_OscConfig+0x770>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x584>
 8002d36:	4b7d      	ldr	r3, [pc, #500]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a7c      	ldr	r2, [pc, #496]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	e02d      	b.n	8002da0 <HAL_RCC_OscConfig+0x5e0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x5a6>
 8002d4c:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a76      	ldr	r2, [pc, #472]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	4b74      	ldr	r3, [pc, #464]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a73      	ldr	r2, [pc, #460]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	f023 0304 	bic.w	r3, r3, #4
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	e01c      	b.n	8002da0 <HAL_RCC_OscConfig+0x5e0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c8>
 8002d6e:	4b6f      	ldr	r3, [pc, #444]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a6e      	ldr	r2, [pc, #440]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a6b      	ldr	r2, [pc, #428]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0x5e0>
 8002d88:	4b68      	ldr	r3, [pc, #416]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a67      	ldr	r2, [pc, #412]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a64      	ldr	r2, [pc, #400]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe ff18 	bl	8001bdc <HAL_GetTick>
 8002dac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe ff14 	bl	8001bdc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e123      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc6:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ee      	beq.n	8002db0 <HAL_RCC_OscConfig+0x5f0>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe ff02 	bl	8001bdc <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fefe 	bl	8001bdc <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e10d      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002df2:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ee      	bne.n	8002ddc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8102 	beq.w	800300c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e08:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e10:	2b18      	cmp	r3, #24
 8002e12:	f000 80bd 	beq.w	8002f90 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	f040 809e 	bne.w	8002f5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a41      	ldr	r2, [pc, #260]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fed6 	bl	8001bdc <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fed2 	bl	8001bdc <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0e3      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e52:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_RCC_OscConfig+0x774>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	430a      	orrs	r2, r1
 8002e66:	4931      	ldr	r1, [pc, #196]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	628b      	str	r3, [r1, #40]	; 0x28
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	3b01      	subs	r3, #1
 8002e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	025b      	lsls	r3, r3, #9
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	3b01      	subs	r3, #1
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	3b01      	subs	r3, #1
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e9c:	4923      	ldr	r1, [pc, #140]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb2:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eba:	00d2      	lsls	r2, r2, #3
 8002ebc:	491b      	ldr	r1, [pc, #108]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f023 020c 	bic.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4917      	ldr	r1, [pc, #92]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f023 0202 	bic.w	r2, r3, #2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fe5b 	bl	8001bdc <HAL_GetTick>
 8002f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f28:	e011      	b.n	8002f4e <HAL_RCC_OscConfig+0x78e>
 8002f2a:	bf00      	nop
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58024800 	.word	0x58024800
 8002f34:	fffffc0c 	.word	0xfffffc0c
 8002f38:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fe4e 	bl	8001bdc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e05f      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f4e:	4b32      	ldr	r3, [pc, #200]	; (8003018 <HAL_RCC_OscConfig+0x858>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x77c>
 8002f5a:	e057      	b.n	800300c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_RCC_OscConfig+0x858>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <HAL_RCC_OscConfig+0x858>)
 8002f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fe38 	bl	8001bdc <HAL_GetTick>
 8002f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe fe34 	bl	8001bdc <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e045      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <HAL_RCC_OscConfig+0x858>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x7b0>
 8002f8e:	e03d      	b.n	800300c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_RCC_OscConfig+0x858>)
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_RCC_OscConfig+0x858>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d031      	beq.n	8003008 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d12a      	bne.n	8003008 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d122      	bne.n	8003008 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d11a      	bne.n	8003008 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0a5b      	lsrs	r3, r3, #9
 8002fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d111      	bne.n	8003008 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d108      	bne.n	8003008 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	0e1b      	lsrs	r3, r3, #24
 8002ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3730      	adds	r7, #48	; 0x30
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	58024400 	.word	0x58024400

0800301c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e19c      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b8a      	ldr	r3, [pc, #552]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d910      	bls.n	8003060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b87      	ldr	r3, [pc, #540]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 020f 	bic.w	r2, r3, #15
 8003046:	4985      	ldr	r1, [pc, #532]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b83      	ldr	r3, [pc, #524]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e184      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	4b7b      	ldr	r3, [pc, #492]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003078:	429a      	cmp	r2, r3
 800307a:	d908      	bls.n	800308e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800307c:	4b78      	ldr	r3, [pc, #480]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4975      	ldr	r1, [pc, #468]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800308a:	4313      	orrs	r3, r2
 800308c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b70      	ldr	r3, [pc, #448]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d908      	bls.n	80030bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	496a      	ldr	r1, [pc, #424]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	4b64      	ldr	r3, [pc, #400]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d908      	bls.n	80030ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030d8:	4b61      	ldr	r3, [pc, #388]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	495e      	ldr	r1, [pc, #376]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d908      	bls.n	8003118 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003106:	4b56      	ldr	r3, [pc, #344]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4953      	ldr	r1, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003114:	4313      	orrs	r3, r2
 8003116:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4b4d      	ldr	r3, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	429a      	cmp	r2, r3
 8003132:	d908      	bls.n	8003146 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f023 020f 	bic.w	r2, r3, #15
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4947      	ldr	r1, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003142:	4313      	orrs	r3, r2
 8003144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d055      	beq.n	80031fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003152:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4940      	ldr	r1, [pc, #256]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d107      	bne.n	800317c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800316c:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d121      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0f6      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d107      	bne.n	8003194 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d115      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0ea      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800319c:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0de      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ac:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0d6      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f023 0207 	bic.w	r2, r3, #7
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4925      	ldr	r1, [pc, #148]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fd05 	bl	8001bdc <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7fe fd01 	bl	8001bdc <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0be      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ec:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d1eb      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	429a      	cmp	r2, r3
 8003218:	d208      	bcs.n	800322c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f023 020f 	bic.w	r2, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x244>)
 8003228:	4313      	orrs	r3, r2
 800322a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d214      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 020f 	bic.w	r2, r3, #15
 8003242:	4906      	ldr	r1, [pc, #24]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_ClockConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e086      	b.n	800336a <HAL_RCC_ClockConfig+0x34e>
 800325c:	52002000 	.word	0x52002000
 8003260:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800327c:	429a      	cmp	r2, r3
 800327e:	d208      	bcs.n	8003292 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003280:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4939      	ldr	r1, [pc, #228]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 800328e:	4313      	orrs	r3, r2
 8003290:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d208      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	492e      	ldr	r1, [pc, #184]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032d8:	429a      	cmp	r2, r3
 80032da:	d208      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4922      	ldr	r1, [pc, #136]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003306:	429a      	cmp	r2, r3
 8003308:	d208      	bcs.n	800331c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4917      	ldr	r1, [pc, #92]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003318:	4313      	orrs	r3, r2
 800331a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800331c:	f000 f834 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4912      	ldr	r1, [pc, #72]	; (8003378 <HAL_RCC_ClockConfig+0x35c>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_ClockConfig+0x358>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <HAL_RCC_ClockConfig+0x35c>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <HAL_RCC_ClockConfig+0x360>)
 8003352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_RCC_ClockConfig+0x364>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x368>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fbf2 	bl	8001b48 <HAL_InitTick>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	58024400 	.word	0x58024400
 8003378:	0800bcb0 	.word	0x0800bcb0
 800337c:	24000004 	.word	0x24000004
 8003380:	24000000 	.word	0x24000000
 8003384:	24000008 	.word	0x24000008

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800338e:	4bb3      	ldr	r3, [pc, #716]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003396:	2b18      	cmp	r3, #24
 8003398:	f200 8155 	bhi.w	8003646 <HAL_RCC_GetSysClockFreq+0x2be>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	08003409 	.word	0x08003409
 80033a8:	08003647 	.word	0x08003647
 80033ac:	08003647 	.word	0x08003647
 80033b0:	08003647 	.word	0x08003647
 80033b4:	08003647 	.word	0x08003647
 80033b8:	08003647 	.word	0x08003647
 80033bc:	08003647 	.word	0x08003647
 80033c0:	08003647 	.word	0x08003647
 80033c4:	0800342f 	.word	0x0800342f
 80033c8:	08003647 	.word	0x08003647
 80033cc:	08003647 	.word	0x08003647
 80033d0:	08003647 	.word	0x08003647
 80033d4:	08003647 	.word	0x08003647
 80033d8:	08003647 	.word	0x08003647
 80033dc:	08003647 	.word	0x08003647
 80033e0:	08003647 	.word	0x08003647
 80033e4:	08003435 	.word	0x08003435
 80033e8:	08003647 	.word	0x08003647
 80033ec:	08003647 	.word	0x08003647
 80033f0:	08003647 	.word	0x08003647
 80033f4:	08003647 	.word	0x08003647
 80033f8:	08003647 	.word	0x08003647
 80033fc:	08003647 	.word	0x08003647
 8003400:	08003647 	.word	0x08003647
 8003404:	0800343b 	.word	0x0800343b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003408:	4b94      	ldr	r3, [pc, #592]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003414:	4b91      	ldr	r3, [pc, #580]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	08db      	lsrs	r3, r3, #3
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	4a90      	ldr	r2, [pc, #576]	; (8003660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003426:	e111      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003428:	4b8d      	ldr	r3, [pc, #564]	; (8003660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800342a:	61bb      	str	r3, [r7, #24]
    break;
 800342c:	e10e      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800342e:	4b8d      	ldr	r3, [pc, #564]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003430:	61bb      	str	r3, [r7, #24]
    break;
 8003432:	e10b      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003434:	4b8c      	ldr	r3, [pc, #560]	; (8003668 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003436:	61bb      	str	r3, [r7, #24]
    break;
 8003438:	e108      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003444:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800344e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003450:	4b82      	ldr	r3, [pc, #520]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800345a:	4b80      	ldr	r3, [pc, #512]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80e1 	beq.w	8003640 <HAL_RCC_GetSysClockFreq+0x2b8>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b02      	cmp	r3, #2
 8003482:	f000 8083 	beq.w	800358c <HAL_RCC_GetSysClockFreq+0x204>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	f200 80a1 	bhi.w	80035d0 <HAL_RCC_GetSysClockFreq+0x248>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x114>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d056      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x1c0>
 800349a:	e099      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02d      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034a8:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	4a6b      	ldr	r2, [pc, #428]	; (8003660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d2:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003502:	e087      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003670 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003516:	4b51      	ldr	r3, [pc, #324]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	ed97 6a02 	vldr	s12, [r7, #8]
 800352a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 800352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003546:	e065      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003552:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356a:	ed97 6a02 	vldr	s12, [r7, #8]
 800356e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800357e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800358a:	e043      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003596:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003678 <HAL_RCC_GetSysClockFreq+0x2f0>
 800359a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ce:	e021      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003674 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800366c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003612:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	0a5b      	lsrs	r3, r3, #9
 800361a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800361e:	3301      	adds	r3, #1
 8003620:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800362c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003638:	ee17 3a90 	vmov	r3, s15
 800363c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800363e:	e005      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
    break;
 8003644:	e002      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003648:	61bb      	str	r3, [r7, #24]
    break;
 800364a:	bf00      	nop
  }

  return sysclockfreq;
 800364c:	69bb      	ldr	r3, [r7, #24]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
 8003660:	03d09000 	.word	0x03d09000
 8003664:	003d0900 	.word	0x003d0900
 8003668:	007a1200 	.word	0x007a1200
 800366c:	46000000 	.word	0x46000000
 8003670:	4c742400 	.word	0x4c742400
 8003674:	4a742400 	.word	0x4a742400
 8003678:	4af42400 	.word	0x4af42400

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003682:	f7ff fe81 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_RCC_GetHCLKFreq+0x50>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490f      	ldr	r1, [pc, #60]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <HAL_RCC_GetHCLKFreq+0x50>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	58024400 	.word	0x58024400
 80036d0:	0800bcb0 	.word	0x0800bcb0
 80036d4:	24000004 	.word	0x24000004
 80036d8:	24000000 	.word	0x24000000

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036e0:	f7ff ffcc 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	58024400 	.word	0x58024400
 8003704:	0800bcb0 	.word	0x0800bcb0

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800370c:	f7ff ffb6 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	58024400 	.word	0x58024400
 8003730:	0800bcb0 	.word	0x0800bcb0

08003734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800373c:	2300      	movs	r3, #0
 800373e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003740:	2300      	movs	r3, #0
 8003742:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003758:	d02a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800375a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800375e:	d824      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003764:	d018      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376a:	d81e      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003774:	d007      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003776:	e018      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003778:	4ba3      	ldr	r3, [pc, #652]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4aa2      	ldr	r2, [pc, #648]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800377e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003784:	e015      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	2102      	movs	r1, #2
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f9d5 	bl	8004b3c <RCCEx_PLL2_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003796:	e00c      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	2102      	movs	r1, #2
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fa7e 	bl	8004ca0 <RCCEx_PLL3_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037a8:	e003      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
      break;
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037b8:	4b93      	ldr	r3, [pc, #588]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c4:	4990      	ldr	r1, [pc, #576]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	650b      	str	r3, [r1, #80]	; 0x50
 80037ca:	e001      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d03d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d826      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	08003801 	.word	0x08003801
 80037f0:	0800380f 	.word	0x0800380f
 80037f4:	08003821 	.word	0x08003821
 80037f8:	08003839 	.word	0x08003839
 80037fc:	08003839 	.word	0x08003839
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a80      	ldr	r2, [pc, #512]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800380c:	e015      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f001 f991 	bl	8004b3c <RCCEx_PLL2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800381e:	e00c      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3324      	adds	r3, #36	; 0x24
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fa3a 	bl	8004ca0 <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003830:	e003      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
      break;
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003840:	4b71      	ldr	r3, [pc, #452]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003844:	f023 0207 	bic.w	r2, r3, #7
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	496e      	ldr	r1, [pc, #440]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	650b      	str	r3, [r1, #80]	; 0x50
 8003852:	e001      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003860:	2b00      	cmp	r3, #0
 8003862:	d042      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386c:	d02b      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800386e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003872:	d825      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003874:	2bc0      	cmp	r3, #192	; 0xc0
 8003876:	d028      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003878:	2bc0      	cmp	r3, #192	; 0xc0
 800387a:	d821      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d016      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d81d      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d007      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800388c:	e018      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388e:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	4a5d      	ldr	r2, [pc, #372]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800389a:	e017      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 f94a 	bl	8004b3c <RCCEx_PLL2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038ac:	e00e      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3324      	adds	r3, #36	; 0x24
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 f9f3 	bl	8004ca0 <RCCEx_PLL3_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038be:	e005      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	75fb      	strb	r3, [r7, #23]
      break;
 80038c4:	e002      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038d2:	4b4d      	ldr	r3, [pc, #308]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	494a      	ldr	r1, [pc, #296]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	650b      	str	r3, [r1, #80]	; 0x50
 80038e4:	e001      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d049      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003900:	d030      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003906:	d82a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003908:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800390c:	d02c      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800390e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003912:	d824      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003918:	d018      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391e:	d81e      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003928:	d007      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800392a:	e018      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a35      	ldr	r2, [pc, #212]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003938:	e017      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f8fb 	bl	8004b3c <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800394a:	e00e      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3324      	adds	r3, #36	; 0x24
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f9a4 	bl	8004ca0 <RCCEx_PLL3_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800395c:	e005      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800397e:	4922      	ldr	r1, [pc, #136]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	658b      	str	r3, [r1, #88]	; 0x58
 8003984:	e001      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04b      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800399c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a0:	d030      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80039a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a6:	d82a      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039ac:	d02e      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80039ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039b2:	d824      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b8:	d018      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80039ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039be:	d81e      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c8:	d007      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80039ca:	e018      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039d8:	e019      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f8ab 	bl	8004b3c <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039ea:	e010      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3324      	adds	r3, #36	; 0x24
 80039f0:	2100      	movs	r1, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f954 	bl	8004ca0 <RCCEx_PLL3_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039fc:	e007      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
      break;
 8003a02:	e004      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003a04:	bf00      	nop
 8003a06:	e002      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003a08:	58024400 	.word	0x58024400
      break;
 8003a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a14:	4b99      	ldr	r3, [pc, #612]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a22:	4996      	ldr	r1, [pc, #600]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	658b      	str	r3, [r1, #88]	; 0x58
 8003a28:	e001      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d032      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	2b30      	cmp	r3, #48	; 0x30
 8003a40:	d01c      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d817      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d00c      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d813      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d016      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d10f      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a56:	4b89      	ldr	r3, [pc, #548]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	4a88      	ldr	r2, [pc, #544]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a62:	e00e      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 f866 	bl	8004b3c <RCCEx_PLL2_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a74:	e005      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7a:	e002      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003a7c:	bf00      	nop
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a88:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	4979      	ldr	r1, [pc, #484]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d047      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab4:	d030      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aba:	d82a      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ac0:	d02c      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003ac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ac6:	d824      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003acc:	d018      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad2:	d81e      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003adc:	d007      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003ade:	e018      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae0:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003aec:	e017      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 f821 	bl	8004b3c <RCCEx_PLL2_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003afe:	e00e      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3324      	adds	r3, #36	; 0x24
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f8ca 	bl	8004ca0 <RCCEx_PLL3_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b10:	e005      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
      break;
 8003b16:	e002      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b24:	4b55      	ldr	r3, [pc, #340]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	4952      	ldr	r1, [pc, #328]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	650b      	str	r3, [r1, #80]	; 0x50
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d049      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b50:	d02e      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b56:	d828      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b5c:	d02a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003b5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b62:	d822      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b68:	d026      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003b6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b6e:	d81c      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b74:	d010      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b7a:	d816      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01d      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d111      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 ffd5 	bl	8004b3c <RCCEx_PLL2_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b96:	e012      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3324      	adds	r3, #36	; 0x24
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 f87e 	bl	8004ca0 <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e009      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
      break;
 8003bae:	e006      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bb0:	bf00      	nop
 8003bb2:	e004      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bb4:	bf00      	nop
 8003bb6:	e002      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e000      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	492a      	ldr	r1, [pc, #168]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	650b      	str	r3, [r1, #80]	; 0x50
 8003bd6:	e001      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d04d      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf2:	d02e      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf8:	d828      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d02a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c04:	d822      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c0a:	d026      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003c0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c10:	d81c      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c16:	d010      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1c:	d816      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01d      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c26:	d111      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ff84 	bl	8004b3c <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c38:	e012      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3324      	adds	r3, #36	; 0x24
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 f82d 	bl	8004ca0 <RCCEx_PLL3_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e009      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c52:	bf00      	nop
 8003c54:	e004      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c56:	bf00      	nop
 8003c58:	e002      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c74:	4901      	ldr	r1, [pc, #4]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	658b      	str	r3, [r1, #88]	; 0x58
 8003c7a:	e003      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c98:	d00e      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9e:	d814      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca8:	d10f      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003caa:	4baf      	ldr	r3, [pc, #700]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4aae      	ldr	r2, [pc, #696]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cb6:	e00c      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 ff3c 	bl	8004b3c <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cc8:	e003      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cd8:	4ba3      	ldr	r3, [pc, #652]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	49a0      	ldr	r1, [pc, #640]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	650b      	str	r3, [r1, #80]	; 0x50
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d032      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d81b      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d04:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d1d 	.word	0x08003d1d
 8003d14:	08003d2b 	.word	0x08003d2b
 8003d18:	08003d43 	.word	0x08003d43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b92      	ldr	r3, [pc, #584]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a91      	ldr	r2, [pc, #580]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d28:	e00c      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 ff03 	bl	8004b3c <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d4a:	4b87      	ldr	r3, [pc, #540]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	4984      	ldr	r1, [pc, #528]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d5c:	e001      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8086 	beq.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d70:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a7d      	ldr	r2, [pc, #500]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7c:	f7fd ff2e 	bl	8001bdc <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d82:	e009      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d84:	f7fd ff2a 	bl	8001bdc <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d902      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	75fb      	strb	r3, [r7, #23]
        break;
 8003d96:	e005      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d98:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ef      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d166      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003daa:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003db4:	4053      	eors	r3, r2
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d013      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbe:	4b6a      	ldr	r3, [pc, #424]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc8:	4b67      	ldr	r3, [pc, #412]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a66      	ldr	r2, [pc, #408]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd4:	4b64      	ldr	r3, [pc, #400]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a63      	ldr	r2, [pc, #396]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003de0:	4a61      	ldr	r2, [pc, #388]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df0:	d115      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd fef3 	bl	8001bdc <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df8:	e00b      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd feef 	bl	8001bdc <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d902      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	75fb      	strb	r3, [r7, #23]
            break;
 8003e10:	e005      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e12:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ed      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d126      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e32:	d10d      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e42:	0919      	lsrs	r1, r3, #4
 8003e44:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	4947      	ldr	r1, [pc, #284]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	610b      	str	r3, [r1, #16]
 8003e4e:	e005      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4a44      	ldr	r2, [pc, #272]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e5a:	6113      	str	r3, [r2, #16]
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6a:	493f      	ldr	r1, [pc, #252]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	670b      	str	r3, [r1, #112]	; 0x70
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	75bb      	strb	r3, [r7, #22]
 8003e76:	e001      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8085 	beq.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8e:	2b28      	cmp	r3, #40	; 0x28
 8003e90:	d866      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003f75 	.word	0x08003f75
 8003e9c:	08003f61 	.word	0x08003f61
 8003ea0:	08003f61 	.word	0x08003f61
 8003ea4:	08003f61 	.word	0x08003f61
 8003ea8:	08003f61 	.word	0x08003f61
 8003eac:	08003f61 	.word	0x08003f61
 8003eb0:	08003f61 	.word	0x08003f61
 8003eb4:	08003f61 	.word	0x08003f61
 8003eb8:	08003f3d 	.word	0x08003f3d
 8003ebc:	08003f61 	.word	0x08003f61
 8003ec0:	08003f61 	.word	0x08003f61
 8003ec4:	08003f61 	.word	0x08003f61
 8003ec8:	08003f61 	.word	0x08003f61
 8003ecc:	08003f61 	.word	0x08003f61
 8003ed0:	08003f61 	.word	0x08003f61
 8003ed4:	08003f61 	.word	0x08003f61
 8003ed8:	08003f4f 	.word	0x08003f4f
 8003edc:	08003f61 	.word	0x08003f61
 8003ee0:	08003f61 	.word	0x08003f61
 8003ee4:	08003f61 	.word	0x08003f61
 8003ee8:	08003f61 	.word	0x08003f61
 8003eec:	08003f61 	.word	0x08003f61
 8003ef0:	08003f61 	.word	0x08003f61
 8003ef4:	08003f61 	.word	0x08003f61
 8003ef8:	08003f75 	.word	0x08003f75
 8003efc:	08003f61 	.word	0x08003f61
 8003f00:	08003f61 	.word	0x08003f61
 8003f04:	08003f61 	.word	0x08003f61
 8003f08:	08003f61 	.word	0x08003f61
 8003f0c:	08003f61 	.word	0x08003f61
 8003f10:	08003f61 	.word	0x08003f61
 8003f14:	08003f61 	.word	0x08003f61
 8003f18:	08003f75 	.word	0x08003f75
 8003f1c:	08003f61 	.word	0x08003f61
 8003f20:	08003f61 	.word	0x08003f61
 8003f24:	08003f61 	.word	0x08003f61
 8003f28:	08003f61 	.word	0x08003f61
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08003f61 	.word	0x08003f61
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f75 	.word	0x08003f75
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fdfa 	bl	8004b3c <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f4c:	e013      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3324      	adds	r3, #36	; 0x24
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fea3 	bl	8004ca0 <RCCEx_PLL3_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
      break;
 8003f64:	e007      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f66:	bf00      	nop
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	58024800 	.word	0x58024800
 8003f70:	00ffffcf 	.word	0x00ffffcf
      break;
 8003f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f7c:	4b96      	ldr	r3, [pc, #600]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f88:	4993      	ldr	r1, [pc, #588]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	654b      	str	r3, [r1, #84]	; 0x54
 8003f8e:	e001      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d038      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d821      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003ff3 	.word	0x08003ff3
 8003fb4:	08003fc9 	.word	0x08003fc9
 8003fb8:	08003fdb 	.word	0x08003fdb
 8003fbc:	08003ff3 	.word	0x08003ff3
 8003fc0:	08003ff3 	.word	0x08003ff3
 8003fc4:	08003ff3 	.word	0x08003ff3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fdb4 	bl	8004b3c <RCCEx_PLL2_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fd8:	e00c      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3324      	adds	r3, #36	; 0x24
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fe5d 	bl	8004ca0 <RCCEx_PLL3_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fea:	e003      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ffa:	4b77      	ldr	r3, [pc, #476]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	4974      	ldr	r1, [pc, #464]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	654b      	str	r3, [r1, #84]	; 0x54
 800400c:	e001      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	2b05      	cmp	r3, #5
 8004026:	d821      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004073 	.word	0x08004073
 8004034:	08004049 	.word	0x08004049
 8004038:	0800405b 	.word	0x0800405b
 800403c:	08004073 	.word	0x08004073
 8004040:	08004073 	.word	0x08004073
 8004044:	08004073 	.word	0x08004073
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fd74 	bl	8004b3c <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004058:	e00c      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fe1d 	bl	8004ca0 <RCCEx_PLL3_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800406a:	e003      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
      break;
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f023 0207 	bic.w	r2, r3, #7
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	4953      	ldr	r1, [pc, #332]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	658b      	str	r3, [r1, #88]	; 0x58
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d04b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040aa:	d02e      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80040ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040b0:	d828      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d02a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d822      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c2:	d026      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80040c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040c8:	d81c      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ce:	d010      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d4:	d816      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01d      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80040da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040de:	d111      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fd28 	bl	8004b3c <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040f0:	e012      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fdd1 	bl	8004ca0 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004102:	e009      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
      break;
 8004108:	e006      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800410a:	bf00      	nop
 800410c:	e004      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800410e:	bf00      	nop
 8004110:	e002      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412c:	492a      	ldr	r1, [pc, #168]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	654b      	str	r3, [r1, #84]	; 0x54
 8004132:	e001      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d04d      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800414a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800414e:	d02e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004150:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004154:	d828      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415a:	d02a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004160:	d822      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004166:	d026      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800416c:	d81c      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800416e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004172:	d010      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004178:	d816      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01d      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004182:	d111      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fcd6 	bl	8004b3c <RCCEx_PLL2_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004194:	e012      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3324      	adds	r3, #36	; 0x24
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fd7f 	bl	8004ca0 <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041a6:	e009      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d0:	4901      	ldr	r1, [pc, #4]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	658b      	str	r3, [r1, #88]	; 0x58
 80041d6:	e003      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d04b      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041f6:	d02e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80041f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041fc:	d828      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004202:	d02a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d822      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800420a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800420e:	d026      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004210:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004214:	d81c      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800421a:	d010      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800421c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004220:	d816      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01d      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	d111      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fc82 	bl	8004b3c <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800423c:	e012      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3324      	adds	r3, #36	; 0x24
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fd2b 	bl	8004ca0 <RCCEx_PLL3_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800424e:	e009      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
      break;
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004256:	bf00      	nop
 8004258:	e004      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800426a:	4b9d      	ldr	r3, [pc, #628]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004278:	4999      	ldr	r1, [pc, #612]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800427a:	4313      	orrs	r3, r2
 800427c:	658b      	str	r3, [r1, #88]	; 0x58
 800427e:	e001      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	d10a      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fcfc 	bl	8004ca0 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042b2:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c0:	4987      	ldr	r1, [pc, #540]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042dc:	d10a      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3324      	adds	r3, #36	; 0x24
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fcdb 	bl	8004ca0 <RCCEx_PLL3_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042f4:	4b7a      	ldr	r3, [pc, #488]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004302:	4977      	ldr	r1, [pc, #476]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004304:	4313      	orrs	r3, r2
 8004306:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d034      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800431a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800431e:	d01d      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004324:	d817      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800432a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432e:	d009      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004330:	e011      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fbff 	bl	8004b3c <RCCEx_PLL2_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004342:	e00c      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3324      	adds	r3, #36	; 0x24
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fca8 	bl	8004ca0 <RCCEx_PLL3_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
      break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800435c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004364:	4b5e      	ldr	r3, [pc, #376]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004372:	495b      	ldr	r1, [pc, #364]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004374:	4313      	orrs	r3, r2
 8004376:	658b      	str	r3, [r1, #88]	; 0x58
 8004378:	e001      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
 800437c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d033      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004394:	d01c      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800439a:	d816      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800439c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a0:	d003      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80043a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a6:	d007      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80043a8:	e00f      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	4a4c      	ldr	r2, [pc, #304]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80043b6:	e00c      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3324      	adds	r3, #36	; 0x24
 80043bc:	2101      	movs	r1, #1
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fc6e 	bl	8004ca0 <RCCEx_PLL3_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80043c8:	e003      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
      break;
 80043ce:	e000      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80043d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d8:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e6:	493e      	ldr	r1, [pc, #248]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	654b      	str	r3, [r1, #84]	; 0x54
 80043ec:	e001      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d029      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440a:	d007      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800440c:	e00f      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800440e:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800441a:	e00b      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	2102      	movs	r1, #2
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fb8a 	bl	8004b3c <RCCEx_PLL2_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800442c:	e002      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
      break;
 8004432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	4926      	ldr	r1, [pc, #152]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004448:	4313      	orrs	r3, r2
 800444a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800444c:	e001      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3324      	adds	r3, #36	; 0x24
 8004462:	2102      	movs	r1, #2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fc1b 	bl	8004ca0 <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d033      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004488:	d017      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800448a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448e:	d811      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d013      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800449a:	d80b      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d010      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80044a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a4:	d106      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80044b2:	e007      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	75fb      	strb	r3, [r7, #23]
      break;
 80044b8:	e004      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044ba:	bf00      	nop
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d6:	4902      	ldr	r1, [pc, #8]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	654b      	str	r3, [r1, #84]	; 0x54
 80044dc:	e004      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044f4:	4b31      	ldr	r3, [pc, #196]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	492e      	ldr	r1, [pc, #184]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004502:	4313      	orrs	r3, r2
 8004504:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004520:	4926      	ldr	r1, [pc, #152]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004522:	4313      	orrs	r3, r2
 8004524:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004532:	4b22      	ldr	r3, [pc, #136]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453e:	491f      	ldr	r1, [pc, #124]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004540:	4313      	orrs	r3, r2
 8004542:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00d      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	4a19      	ldr	r2, [pc, #100]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800455a:	6113      	str	r3, [r2, #16]
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004566:	4915      	ldr	r1, [pc, #84]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	da08      	bge.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004578:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004580:	490e      	ldr	r1, [pc, #56]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004582:	4313      	orrs	r3, r2
 8004584:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	4906      	ldr	r1, [pc, #24]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80045a6:	7dbb      	ldrb	r3, [r7, #22]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	58024400 	.word	0x58024400

080045c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045c4:	f7ff f85a 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4904      	ldr	r1, [pc, #16]	; (80045e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	58024400 	.word	0x58024400
 80045e8:	0800bcb0 	.word	0x0800bcb0

080045ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045f4:	4ba1      	ldr	r3, [pc, #644]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80045fe:	4b9f      	ldr	r3, [pc, #636]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	0b1b      	lsrs	r3, r3, #12
 8004604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004608:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800460a:	4b9c      	ldr	r3, [pc, #624]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004616:	4b99      	ldr	r3, [pc, #612]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	08db      	lsrs	r3, r3, #3
 800461c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8111 	beq.w	800485c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	f000 8083 	beq.w	8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b02      	cmp	r3, #2
 8004646:	f200 80a1 	bhi.w	800478c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d056      	beq.n	8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004656:	e099      	b.n	800478c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004658:	4b88      	ldr	r3, [pc, #544]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02d      	beq.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004664:	4b85      	ldr	r3, [pc, #532]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	4a84      	ldr	r2, [pc, #528]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	4b7b      	ldr	r3, [pc, #492]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046be:	e087      	b.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80046ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d2:	4b6a      	ldr	r3, [pc, #424]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004702:	e065      	b.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800488c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004716:	4b59      	ldr	r3, [pc, #356]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004726:	ed97 6a03 	vldr	s12, [r7, #12]
 800472a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004746:	e043      	b.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475a:	4b48      	ldr	r3, [pc, #288]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	ed97 6a03 	vldr	s12, [r7, #12]
 800476e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800478a:	e021      	b.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800488c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047d0:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f6:	ee17 2a90 	vmov	r2, s15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80047fe:	4b1f      	ldr	r3, [pc, #124]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004818:	edd7 6a07 	vldr	s13, [r7, #28]
 800481c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004824:	ee17 2a90 	vmov	r2, s15
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004846:	edd7 6a07 	vldr	s13, [r7, #28]
 800484a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800484e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004852:	ee17 2a90 	vmov	r2, s15
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800485a:	e008      	b.n	800486e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
}
 800486e:	bf00      	nop
 8004870:	3724      	adds	r7, #36	; 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	58024400 	.word	0x58024400
 8004880:	03d09000 	.word	0x03d09000
 8004884:	46000000 	.word	0x46000000
 8004888:	4c742400 	.word	0x4c742400
 800488c:	4a742400 	.word	0x4a742400
 8004890:	4af42400 	.word	0x4af42400

08004894 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800489c:	4ba1      	ldr	r3, [pc, #644]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048a6:	4b9f      	ldr	r3, [pc, #636]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	0d1b      	lsrs	r3, r3, #20
 80048ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048b2:	4b9c      	ldr	r3, [pc, #624]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048be:	4b99      	ldr	r3, [pc, #612]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	08db      	lsrs	r3, r3, #3
 80048c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8111 	beq.w	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	f000 8083 	beq.w	80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f200 80a1 	bhi.w	8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d056      	beq.n	80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048fe:	e099      	b.n	8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004900:	4b88      	ldr	r3, [pc, #544]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02d      	beq.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800490c:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	08db      	lsrs	r3, r3, #3
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	4a84      	ldr	r2, [pc, #528]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
 800491c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b7b      	ldr	r3, [pc, #492]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004966:	e087      	b.n	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b6a      	ldr	r3, [pc, #424]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a03 	vldr	s12, [r7, #12]
 800498e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049aa:	e065      	b.n	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b59      	ldr	r3, [pc, #356]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ee:	e043      	b.n	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a32:	e021      	b.n	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b37      	ldr	r3, [pc, #220]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a78:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	0a5b      	lsrs	r3, r3, #9
 8004a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9e:	ee17 2a90 	vmov	r2, s15
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab0:	ee07 3a90 	vmov	s15, r3
 8004ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004acc:	ee17 2a90 	vmov	r2, s15
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afa:	ee17 2a90 	vmov	r2, s15
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b02:	e008      	b.n	8004b16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]
}
 8004b16:	bf00      	nop
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	03d09000 	.word	0x03d09000
 8004b2c:	46000000 	.word	0x46000000
 8004b30:	4c742400 	.word	0x4c742400
 8004b34:	4a742400 	.word	0x4a742400
 8004b38:	4af42400 	.word	0x4af42400

08004b3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b4a:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d101      	bne.n	8004b5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e099      	b.n	8004c8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b5a:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4e      	ldr	r2, [pc, #312]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b66:	f7fd f839 	bl	8001bdc <HAL_GetTick>
 8004b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b6c:	e008      	b.n	8004b80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b6e:	f7fd f835 	bl	8001bdc <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e086      	b.n	8004c8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b80:	4b45      	ldr	r3, [pc, #276]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b8c:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	031b      	lsls	r3, r3, #12
 8004b9a:	493f      	ldr	r1, [pc, #252]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	628b      	str	r3, [r1, #40]	; 0x28
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	025b      	lsls	r3, r3, #9
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bd0:	4931      	ldr	r1, [pc, #196]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bd6:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	492d      	ldr	r1, [pc, #180]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004be8:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	f023 0220 	bic.w	r2, r3, #32
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	4928      	ldr	r1, [pc, #160]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bfa:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c00:	f023 0310 	bic.w	r3, r3, #16
 8004c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0a:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <RCCEx_PLL2_Config+0x160>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	69d2      	ldr	r2, [r2, #28]
 8004c12:	00d2      	lsls	r2, r2, #3
 8004c14:	4920      	ldr	r1, [pc, #128]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c1a:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c20:	f043 0310 	orr.w	r3, r3, #16
 8004c24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c38:	e00f      	b.n	8004c5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d106      	bne.n	8004c4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c40:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c4c:	e005      	b.n	8004c5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a0e      	ldr	r2, [pc, #56]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c66:	f7fc ffb9 	bl	8001bdc <HAL_GetTick>
 8004c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c6e:	f7fc ffb5 	bl	8001bdc <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e006      	b.n	8004c8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <RCCEx_PLL2_Config+0x15c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	ffff0007 	.word	0xffff0007

08004ca0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cae:	4b53      	ldr	r3, [pc, #332]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d101      	bne.n	8004cbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e099      	b.n	8004df2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cbe:	4b4f      	ldr	r3, [pc, #316]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a4e      	ldr	r2, [pc, #312]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cca:	f7fc ff87 	bl	8001bdc <HAL_GetTick>
 8004cce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cd2:	f7fc ff83 	bl	8001bdc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e086      	b.n	8004df2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce4:	4b45      	ldr	r3, [pc, #276]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cf0:	4b42      	ldr	r3, [pc, #264]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	051b      	lsls	r3, r3, #20
 8004cfe:	493f      	ldr	r1, [pc, #252]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	628b      	str	r3, [r1, #40]	; 0x28
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	025b      	lsls	r3, r3, #9
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d34:	4931      	ldr	r1, [pc, #196]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d3a:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	492d      	ldr	r1, [pc, #180]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	4928      	ldr	r1, [pc, #160]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d5e:	4b27      	ldr	r3, [pc, #156]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <RCCEx_PLL3_Config+0x160>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	69d2      	ldr	r2, [r2, #28]
 8004d76:	00d2      	lsls	r2, r2, #3
 8004d78:	4920      	ldr	r1, [pc, #128]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	4a1e      	ldr	r2, [pc, #120]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d9c:	e00f      	b.n	8004dbe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004daa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004db0:	e005      	b.n	8004dbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a0e      	ldr	r2, [pc, #56]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dca:	f7fc ff07 	bl	8001bdc <HAL_GetTick>
 8004dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dd0:	e008      	b.n	8004de4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004dd2:	f7fc ff03 	bl	8001bdc <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e006      	b.n	8004df2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <RCCEx_PLL3_Config+0x15c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	ffff0007 	.word	0xffff0007

08004e04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e0f1      	b.n	8004ffa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a78      	ldr	r2, [pc, #480]	; (8005004 <HAL_SPI_Init+0x200>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <HAL_SPI_Init+0x42>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a77      	ldr	r2, [pc, #476]	; (8005008 <HAL_SPI_Init+0x204>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00a      	beq.n	8004e46 <HAL_SPI_Init+0x42>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a75      	ldr	r2, [pc, #468]	; (800500c <HAL_SPI_Init+0x208>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d005      	beq.n	8004e46 <HAL_SPI_Init+0x42>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	d901      	bls.n	8004e46 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e0d9      	b.n	8004ffa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f8e2 	bl	8005010 <SPI_GetPacketSize>
 8004e4c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a6c      	ldr	r2, [pc, #432]	; (8005004 <HAL_SPI_Init+0x200>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00c      	beq.n	8004e72 <HAL_SPI_Init+0x6e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a6a      	ldr	r2, [pc, #424]	; (8005008 <HAL_SPI_Init+0x204>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <HAL_SPI_Init+0x6e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a69      	ldr	r2, [pc, #420]	; (800500c <HAL_SPI_Init+0x208>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_Init+0x6e>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d811      	bhi.n	8004e96 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004e76:	4a63      	ldr	r2, [pc, #396]	; (8005004 <HAL_SPI_Init+0x200>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a61      	ldr	r2, [pc, #388]	; (8005008 <HAL_SPI_Init+0x204>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_SPI_Init+0x8c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a60      	ldr	r2, [pc, #384]	; (800500c <HAL_SPI_Init+0x208>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d104      	bne.n	8004e9a <HAL_SPI_Init+0x96>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d901      	bls.n	8004e9a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e0af      	b.n	8004ffa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fb02 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004ed6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ee0:	d119      	bne.n	8004f16 <HAL_SPI_Init+0x112>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d103      	bne.n	8004ef4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10c      	bne.n	8004f16 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004f00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f04:	d107      	bne.n	8004f16 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	ea42 0103 	orr.w	r1, r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f76:	ea42 0103 	orr.w	r1, r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d113      	bne.n	8004fb6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40013000 	.word	0x40013000
 8005008:	40003800 	.word	0x40003800
 800500c:	40003c00 	.word	0x40003c00

08005010 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	3301      	adds	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	3301      	adds	r3, #1
 8005028:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3307      	adds	r3, #7
 800502e:	08db      	lsrs	r3, r3, #3
 8005030:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	fb02 f303 	mul.w	r3, r2, r3
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e049      	b.n	80050ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fc fa89 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 fac7 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e049      	b.n	800519a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f841 	bl	80051a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f000 fa70 	bl	8005618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <HAL_TIM_PWM_Start+0x24>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	bf14      	ite	ne
 80051d4:	2301      	movne	r3, #1
 80051d6:	2300      	moveq	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e03c      	b.n	8005256 <HAL_TIM_PWM_Start+0x9e>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d109      	bne.n	80051f6 <HAL_TIM_PWM_Start+0x3e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	bf14      	ite	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	2300      	moveq	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	e02f      	b.n	8005256 <HAL_TIM_PWM_Start+0x9e>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d109      	bne.n	8005210 <HAL_TIM_PWM_Start+0x58>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e022      	b.n	8005256 <HAL_TIM_PWM_Start+0x9e>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b0c      	cmp	r3, #12
 8005214:	d109      	bne.n	800522a <HAL_TIM_PWM_Start+0x72>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e015      	b.n	8005256 <HAL_TIM_PWM_Start+0x9e>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b10      	cmp	r3, #16
 800522e:	d109      	bne.n	8005244 <HAL_TIM_PWM_Start+0x8c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e008      	b.n	8005256 <HAL_TIM_PWM_Start+0x9e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0a1      	b.n	80053a2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <HAL_TIM_PWM_Start+0xb6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800526c:	e023      	b.n	80052b6 <HAL_TIM_PWM_Start+0xfe>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d104      	bne.n	800527e <HAL_TIM_PWM_Start+0xc6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800527c:	e01b      	b.n	80052b6 <HAL_TIM_PWM_Start+0xfe>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xd6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528c:	e013      	b.n	80052b6 <HAL_TIM_PWM_Start+0xfe>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0xe6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800529c:	e00b      	b.n	80052b6 <HAL_TIM_PWM_Start+0xfe>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xf6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ac:	e003      	b.n	80052b6 <HAL_TIM_PWM_Start+0xfe>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fd1a 	bl	8005cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a38      	ldr	r2, [pc, #224]	; (80053ac <HAL_TIM_PWM_Start+0x1f4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x13e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a37      	ldr	r2, [pc, #220]	; (80053b0 <HAL_TIM_PWM_Start+0x1f8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x13e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a35      	ldr	r2, [pc, #212]	; (80053b4 <HAL_TIM_PWM_Start+0x1fc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x13e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <HAL_TIM_PWM_Start+0x200>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x13e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a32      	ldr	r2, [pc, #200]	; (80053bc <HAL_TIM_PWM_Start+0x204>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_PWM_Start+0x142>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_TIM_PWM_Start+0x144>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <HAL_TIM_PWM_Start+0x1f4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d022      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1a8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005322:	d01d      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1a8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <HAL_TIM_PWM_Start+0x208>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d018      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1a8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <HAL_TIM_PWM_Start+0x20c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1a8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <HAL_TIM_PWM_Start+0x210>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00e      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1a8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <HAL_TIM_PWM_Start+0x1f8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d009      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1a8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <HAL_TIM_PWM_Start+0x214>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_TIM_PWM_Start+0x1a8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <HAL_TIM_PWM_Start+0x1fc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d115      	bne.n	800538c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <HAL_TIM_PWM_Start+0x218>)
 8005368:	4013      	ands	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b06      	cmp	r3, #6
 8005370:	d015      	beq.n	800539e <HAL_TIM_PWM_Start+0x1e6>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005378:	d011      	beq.n	800539e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	e008      	b.n	800539e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e000      	b.n	80053a0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40001800 	.word	0x40001800
 80053d0:	00010007 	.word	0x00010007

080053d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e0ff      	b.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b14      	cmp	r3, #20
 80053fe:	f200 80f0 	bhi.w	80055e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005402:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080055e3 	.word	0x080055e3
 8005410:	080055e3 	.word	0x080055e3
 8005414:	080055e3 	.word	0x080055e3
 8005418:	0800549d 	.word	0x0800549d
 800541c:	080055e3 	.word	0x080055e3
 8005420:	080055e3 	.word	0x080055e3
 8005424:	080055e3 	.word	0x080055e3
 8005428:	080054df 	.word	0x080054df
 800542c:	080055e3 	.word	0x080055e3
 8005430:	080055e3 	.word	0x080055e3
 8005434:	080055e3 	.word	0x080055e3
 8005438:	0800551f 	.word	0x0800551f
 800543c:	080055e3 	.word	0x080055e3
 8005440:	080055e3 	.word	0x080055e3
 8005444:	080055e3 	.word	0x080055e3
 8005448:	08005561 	.word	0x08005561
 800544c:	080055e3 	.word	0x080055e3
 8005450:	080055e3 	.word	0x080055e3
 8005454:	080055e3 	.word	0x080055e3
 8005458:	080055a1 	.word	0x080055a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f972 	bl	800574c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0208 	orr.w	r2, r2, #8
 8005476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0204 	bic.w	r2, r2, #4
 8005486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6999      	ldr	r1, [r3, #24]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	619a      	str	r2, [r3, #24]
      break;
 800549a:	e0a5      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f9e2 	bl	800586c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6999      	ldr	r1, [r3, #24]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	619a      	str	r2, [r3, #24]
      break;
 80054dc:	e084      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fa4b 	bl	8005980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0208 	orr.w	r2, r2, #8
 80054f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0204 	bic.w	r2, r2, #4
 8005508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69d9      	ldr	r1, [r3, #28]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	61da      	str	r2, [r3, #28]
      break;
 800551c:	e064      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fab3 	bl	8005a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69d9      	ldr	r1, [r3, #28]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	021a      	lsls	r2, r3, #8
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	61da      	str	r2, [r3, #28]
      break;
 800555e:	e043      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fafc 	bl	8005b64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0208 	orr.w	r2, r2, #8
 800557a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0204 	bic.w	r2, r2, #4
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800559e:	e023      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fb40 	bl	8005c2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055e0:	e002      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
      break;
 80055e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop

080055fc <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560a:	b2db      	uxtb	r3, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a40      	ldr	r2, [pc, #256]	; (800572c <TIM_Base_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a3d      	ldr	r2, [pc, #244]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3c      	ldr	r2, [pc, #240]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3b      	ldr	r2, [pc, #236]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3a      	ldr	r2, [pc, #232]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2f      	ldr	r2, [pc, #188]	; (800572c <TIM_Base_SetConfig+0x114>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01f      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d01b      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <TIM_Base_SetConfig+0x118>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d017      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <TIM_Base_SetConfig+0x11c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <TIM_Base_SetConfig+0x120>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00f      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <TIM_Base_SetConfig+0x124>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00b      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <TIM_Base_SetConfig+0x128>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d007      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a27      	ldr	r2, [pc, #156]	; (8005744 <TIM_Base_SetConfig+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <TIM_Base_SetConfig+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d108      	bne.n	80056c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a10      	ldr	r2, [pc, #64]	; (800572c <TIM_Base_SetConfig+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a12      	ldr	r2, [pc, #72]	; (800573c <TIM_Base_SetConfig+0x124>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a11      	ldr	r2, [pc, #68]	; (8005740 <TIM_Base_SetConfig+0x128>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <TIM_Base_SetConfig+0x12c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0xf8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0f      	ldr	r2, [pc, #60]	; (8005748 <TIM_Base_SetConfig+0x130>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	615a      	str	r2, [r3, #20]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0201 	bic.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4b37      	ldr	r3, [pc, #220]	; (8005854 <TIM_OC1_SetConfig+0x108>)
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0302 	bic.w	r3, r3, #2
 8005794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a2d      	ldr	r2, [pc, #180]	; (8005858 <TIM_OC1_SetConfig+0x10c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00f      	beq.n	80057c8 <TIM_OC1_SetConfig+0x7c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a2c      	ldr	r2, [pc, #176]	; (800585c <TIM_OC1_SetConfig+0x110>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_OC1_SetConfig+0x7c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <TIM_OC1_SetConfig+0x114>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_OC1_SetConfig+0x7c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2a      	ldr	r2, [pc, #168]	; (8005864 <TIM_OC1_SetConfig+0x118>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC1_SetConfig+0x7c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a29      	ldr	r2, [pc, #164]	; (8005868 <TIM_OC1_SetConfig+0x11c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d10c      	bne.n	80057e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0308 	bic.w	r3, r3, #8
 80057ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <TIM_OC1_SetConfig+0x10c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00f      	beq.n	800580a <TIM_OC1_SetConfig+0xbe>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	; (800585c <TIM_OC1_SetConfig+0x110>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00b      	beq.n	800580a <TIM_OC1_SetConfig+0xbe>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1a      	ldr	r2, [pc, #104]	; (8005860 <TIM_OC1_SetConfig+0x114>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <TIM_OC1_SetConfig+0xbe>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a19      	ldr	r2, [pc, #100]	; (8005864 <TIM_OC1_SetConfig+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_OC1_SetConfig+0xbe>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a18      	ldr	r2, [pc, #96]	; (8005868 <TIM_OC1_SetConfig+0x11c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d111      	bne.n	800582e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	fffeff8f 	.word	0xfffeff8f
 8005858:	40010000 	.word	0x40010000
 800585c:	40010400 	.word	0x40010400
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800

0800586c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0210 	bic.w	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4b34      	ldr	r3, [pc, #208]	; (8005968 <TIM_OC2_SetConfig+0xfc>)
 8005898:	4013      	ands	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0320 	bic.w	r3, r3, #32
 80058b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a29      	ldr	r2, [pc, #164]	; (800596c <TIM_OC2_SetConfig+0x100>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC2_SetConfig+0x68>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a28      	ldr	r2, [pc, #160]	; (8005970 <TIM_OC2_SetConfig+0x104>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10d      	bne.n	80058f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1e      	ldr	r2, [pc, #120]	; (800596c <TIM_OC2_SetConfig+0x100>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00f      	beq.n	8005918 <TIM_OC2_SetConfig+0xac>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <TIM_OC2_SetConfig+0x104>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00b      	beq.n	8005918 <TIM_OC2_SetConfig+0xac>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <TIM_OC2_SetConfig+0x108>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <TIM_OC2_SetConfig+0xac>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <TIM_OC2_SetConfig+0x10c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_OC2_SetConfig+0xac>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a1a      	ldr	r2, [pc, #104]	; (800597c <TIM_OC2_SetConfig+0x110>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d113      	bne.n	8005940 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800591e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	621a      	str	r2, [r3, #32]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	feff8fff 	.word	0xfeff8fff
 800596c:	40010000 	.word	0x40010000
 8005970:	40010400 	.word	0x40010400
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800

08005980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4b33      	ldr	r3, [pc, #204]	; (8005a78 <TIM_OC3_SetConfig+0xf8>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <TIM_OC3_SetConfig+0xfc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC3_SetConfig+0x66>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a27      	ldr	r2, [pc, #156]	; (8005a80 <TIM_OC3_SetConfig+0x100>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10d      	bne.n	8005a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <TIM_OC3_SetConfig+0xfc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_OC3_SetConfig+0xaa>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <TIM_OC3_SetConfig+0x100>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_OC3_SetConfig+0xaa>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <TIM_OC3_SetConfig+0x104>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_OC3_SetConfig+0xaa>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <TIM_OC3_SetConfig+0x108>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_OC3_SetConfig+0xaa>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <TIM_OC3_SetConfig+0x10c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d113      	bne.n	8005a52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	fffeff8f 	.word	0xfffeff8f
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800

08005a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <TIM_OC4_SetConfig+0xbc>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <TIM_OC4_SetConfig+0xc0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00f      	beq.n	8005b10 <TIM_OC4_SetConfig+0x80>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <TIM_OC4_SetConfig+0xc4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_OC4_SetConfig+0x80>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <TIM_OC4_SetConfig+0xc8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_OC4_SetConfig+0x80>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <TIM_OC4_SetConfig+0xcc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_OC4_SetConfig+0x80>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <TIM_OC4_SetConfig+0xd0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d109      	bne.n	8005b24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	019b      	lsls	r3, r3, #6
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	feff8fff 	.word	0xfeff8fff
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40010400 	.word	0x40010400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800

08005b64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <TIM_OC5_SetConfig+0xb0>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ba4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <TIM_OC5_SetConfig+0xb4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00f      	beq.n	8005bda <TIM_OC5_SetConfig+0x76>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <TIM_OC5_SetConfig+0xb8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00b      	beq.n	8005bda <TIM_OC5_SetConfig+0x76>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <TIM_OC5_SetConfig+0xbc>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d007      	beq.n	8005bda <TIM_OC5_SetConfig+0x76>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <TIM_OC5_SetConfig+0xc0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC5_SetConfig+0x76>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <TIM_OC5_SetConfig+0xc4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d109      	bne.n	8005bee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	fffeff8f 	.word	0xfffeff8f
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4b22      	ldr	r3, [pc, #136]	; (8005ce0 <TIM_OC6_SetConfig+0xb4>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	051b      	lsls	r3, r3, #20
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <TIM_OC6_SetConfig+0xb8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00f      	beq.n	8005ca4 <TIM_OC6_SetConfig+0x78>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <TIM_OC6_SetConfig+0xbc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00b      	beq.n	8005ca4 <TIM_OC6_SetConfig+0x78>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a17      	ldr	r2, [pc, #92]	; (8005cec <TIM_OC6_SetConfig+0xc0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d007      	beq.n	8005ca4 <TIM_OC6_SetConfig+0x78>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <TIM_OC6_SetConfig+0xc4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_OC6_SetConfig+0x78>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <TIM_OC6_SetConfig+0xc8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d109      	bne.n	8005cb8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005caa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	029b      	lsls	r3, r3, #10
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	feff8fff 	.word	0xfeff8fff
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800

08005cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1a      	ldr	r2, [r3, #32]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e042      	b.n	8005dda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fb fcaa 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2224      	movs	r2, #36	; 0x24
 8005d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8c3 	bl	8005f10 <UART_SetConfig>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e022      	b.n	8005dda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fe1f 	bl	80069e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005db0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fea6 	bl	8006b24 <UART_CheckIdleState>
 8005dd8:	4603      	mov	r3, r0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b08a      	sub	sp, #40	; 0x28
 8005de6:	af02      	add	r7, sp, #8
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	f040 8083 	bne.w	8005f04 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_UART_Transmit+0x28>
 8005e04:	88fb      	ldrh	r3, [r7, #6]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e07b      	b.n	8005f06 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Transmit+0x3a>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e074      	b.n	8005f06 <HAL_UART_Transmit+0x124>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2221      	movs	r2, #33	; 0x21
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e34:	f7fb fed2 	bl	8001bdc <HAL_GetTick>
 8005e38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	88fa      	ldrh	r2, [r7, #6]
 8005e46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d108      	bne.n	8005e66 <HAL_UART_Transmit+0x84>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	e003      	b.n	8005e6e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005e76:	e02c      	b.n	8005ed2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2180      	movs	r1, #128	; 0x80
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fe99 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e039      	b.n	8005f06 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e007      	b.n	8005ec0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1cc      	bne.n	8005e78 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2140      	movs	r1, #64	; 0x40
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fe66 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e006      	b.n	8005f06 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e000      	b.n	8005f06 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005f04:	2302      	movs	r3, #2
  }
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f14:	b092      	sub	sp, #72	; 0x48
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4bbe      	ldr	r3, [pc, #760]	; (8006238 <UART_SetConfig+0x328>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4ab3      	ldr	r2, [pc, #716]	; (800623c <UART_SetConfig+0x32c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	4baf      	ldr	r3, [pc, #700]	; (8006240 <UART_SetConfig+0x330>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	f023 010f 	bic.w	r1, r3, #15
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4aa6      	ldr	r2, [pc, #664]	; (8006244 <UART_SetConfig+0x334>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d177      	bne.n	80060a0 <UART_SetConfig+0x190>
 8005fb0:	4ba5      	ldr	r3, [pc, #660]	; (8006248 <UART_SetConfig+0x338>)
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb8:	2b28      	cmp	r3, #40	; 0x28
 8005fba:	d86d      	bhi.n	8006098 <UART_SetConfig+0x188>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xb4>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08006069 	.word	0x08006069
 8005fc8:	08006099 	.word	0x08006099
 8005fcc:	08006099 	.word	0x08006099
 8005fd0:	08006099 	.word	0x08006099
 8005fd4:	08006099 	.word	0x08006099
 8005fd8:	08006099 	.word	0x08006099
 8005fdc:	08006099 	.word	0x08006099
 8005fe0:	08006099 	.word	0x08006099
 8005fe4:	08006071 	.word	0x08006071
 8005fe8:	08006099 	.word	0x08006099
 8005fec:	08006099 	.word	0x08006099
 8005ff0:	08006099 	.word	0x08006099
 8005ff4:	08006099 	.word	0x08006099
 8005ff8:	08006099 	.word	0x08006099
 8005ffc:	08006099 	.word	0x08006099
 8006000:	08006099 	.word	0x08006099
 8006004:	08006079 	.word	0x08006079
 8006008:	08006099 	.word	0x08006099
 800600c:	08006099 	.word	0x08006099
 8006010:	08006099 	.word	0x08006099
 8006014:	08006099 	.word	0x08006099
 8006018:	08006099 	.word	0x08006099
 800601c:	08006099 	.word	0x08006099
 8006020:	08006099 	.word	0x08006099
 8006024:	08006081 	.word	0x08006081
 8006028:	08006099 	.word	0x08006099
 800602c:	08006099 	.word	0x08006099
 8006030:	08006099 	.word	0x08006099
 8006034:	08006099 	.word	0x08006099
 8006038:	08006099 	.word	0x08006099
 800603c:	08006099 	.word	0x08006099
 8006040:	08006099 	.word	0x08006099
 8006044:	08006089 	.word	0x08006089
 8006048:	08006099 	.word	0x08006099
 800604c:	08006099 	.word	0x08006099
 8006050:	08006099 	.word	0x08006099
 8006054:	08006099 	.word	0x08006099
 8006058:	08006099 	.word	0x08006099
 800605c:	08006099 	.word	0x08006099
 8006060:	08006099 	.word	0x08006099
 8006064:	08006091 	.word	0x08006091
 8006068:	2301      	movs	r3, #1
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e222      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006070:	2304      	movs	r3, #4
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e21e      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006078:	2308      	movs	r3, #8
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e21a      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e216      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006088:	2320      	movs	r3, #32
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e212      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006090:	2340      	movs	r3, #64	; 0x40
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e20e      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e20a      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a69      	ldr	r2, [pc, #420]	; (800624c <UART_SetConfig+0x33c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d130      	bne.n	800610c <UART_SetConfig+0x1fc>
 80060aa:	4b67      	ldr	r3, [pc, #412]	; (8006248 <UART_SetConfig+0x338>)
 80060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	2b05      	cmp	r3, #5
 80060b4:	d826      	bhi.n	8006104 <UART_SetConfig+0x1f4>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <UART_SetConfig+0x1ac>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060d5 	.word	0x080060d5
 80060c0:	080060dd 	.word	0x080060dd
 80060c4:	080060e5 	.word	0x080060e5
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060fd 	.word	0x080060fd
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e1ec      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80060dc:	2304      	movs	r3, #4
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e1e8      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80060e4:	2308      	movs	r3, #8
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e1e4      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f2:	e1e0      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80060f4:	2320      	movs	r3, #32
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fa:	e1dc      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80060fc:	2340      	movs	r3, #64	; 0x40
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e1d8      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e1d4      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a4f      	ldr	r2, [pc, #316]	; (8006250 <UART_SetConfig+0x340>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d130      	bne.n	8006178 <UART_SetConfig+0x268>
 8006116:	4b4c      	ldr	r3, [pc, #304]	; (8006248 <UART_SetConfig+0x338>)
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	2b05      	cmp	r3, #5
 8006120:	d826      	bhi.n	8006170 <UART_SetConfig+0x260>
 8006122:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <UART_SetConfig+0x218>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	08006141 	.word	0x08006141
 800612c:	08006149 	.word	0x08006149
 8006130:	08006151 	.word	0x08006151
 8006134:	08006159 	.word	0x08006159
 8006138:	08006161 	.word	0x08006161
 800613c:	08006169 	.word	0x08006169
 8006140:	2300      	movs	r3, #0
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006146:	e1b6      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006148:	2304      	movs	r3, #4
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e1b2      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006150:	2308      	movs	r3, #8
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e1ae      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006158:	2310      	movs	r3, #16
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e1aa      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006160:	2320      	movs	r3, #32
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e1a6      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006168:	2340      	movs	r3, #64	; 0x40
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e1a2      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e19e      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a35      	ldr	r2, [pc, #212]	; (8006254 <UART_SetConfig+0x344>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d130      	bne.n	80061e4 <UART_SetConfig+0x2d4>
 8006182:	4b31      	ldr	r3, [pc, #196]	; (8006248 <UART_SetConfig+0x338>)
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b05      	cmp	r3, #5
 800618c:	d826      	bhi.n	80061dc <UART_SetConfig+0x2cc>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0x284>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061ad 	.word	0x080061ad
 8006198:	080061b5 	.word	0x080061b5
 800619c:	080061bd 	.word	0x080061bd
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061d5 	.word	0x080061d5
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b2:	e180      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80061b4:	2304      	movs	r3, #4
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ba:	e17c      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80061bc:	2308      	movs	r3, #8
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c2:	e178      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80061c4:	2310      	movs	r3, #16
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ca:	e174      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80061cc:	2320      	movs	r3, #32
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d2:	e170      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80061d4:	2340      	movs	r3, #64	; 0x40
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e16c      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e168      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <UART_SetConfig+0x348>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d142      	bne.n	8006274 <UART_SetConfig+0x364>
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <UART_SetConfig+0x338>)
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d838      	bhi.n	800626c <UART_SetConfig+0x35c>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <UART_SetConfig+0x2f0>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006219 	.word	0x08006219
 8006204:	08006221 	.word	0x08006221
 8006208:	08006229 	.word	0x08006229
 800620c:	08006231 	.word	0x08006231
 8006210:	0800625d 	.word	0x0800625d
 8006214:	08006265 	.word	0x08006265
 8006218:	2300      	movs	r3, #0
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621e:	e14a      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006220:	2304      	movs	r3, #4
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006226:	e146      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006228:	2308      	movs	r3, #8
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e142      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006230:	2310      	movs	r3, #16
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e13e      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006238:	cfff69f3 	.word	0xcfff69f3
 800623c:	58000c00 	.word	0x58000c00
 8006240:	11fff4ff 	.word	0x11fff4ff
 8006244:	40011000 	.word	0x40011000
 8006248:	58024400 	.word	0x58024400
 800624c:	40004400 	.word	0x40004400
 8006250:	40004800 	.word	0x40004800
 8006254:	40004c00 	.word	0x40004c00
 8006258:	40005000 	.word	0x40005000
 800625c:	2320      	movs	r3, #32
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006262:	e128      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006264:	2340      	movs	r3, #64	; 0x40
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626a:	e124      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006272:	e120      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4acb      	ldr	r2, [pc, #812]	; (80065a8 <UART_SetConfig+0x698>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d176      	bne.n	800636c <UART_SetConfig+0x45c>
 800627e:	4bcb      	ldr	r3, [pc, #812]	; (80065ac <UART_SetConfig+0x69c>)
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006286:	2b28      	cmp	r3, #40	; 0x28
 8006288:	d86c      	bhi.n	8006364 <UART_SetConfig+0x454>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x380>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	08006335 	.word	0x08006335
 8006294:	08006365 	.word	0x08006365
 8006298:	08006365 	.word	0x08006365
 800629c:	08006365 	.word	0x08006365
 80062a0:	08006365 	.word	0x08006365
 80062a4:	08006365 	.word	0x08006365
 80062a8:	08006365 	.word	0x08006365
 80062ac:	08006365 	.word	0x08006365
 80062b0:	0800633d 	.word	0x0800633d
 80062b4:	08006365 	.word	0x08006365
 80062b8:	08006365 	.word	0x08006365
 80062bc:	08006365 	.word	0x08006365
 80062c0:	08006365 	.word	0x08006365
 80062c4:	08006365 	.word	0x08006365
 80062c8:	08006365 	.word	0x08006365
 80062cc:	08006365 	.word	0x08006365
 80062d0:	08006345 	.word	0x08006345
 80062d4:	08006365 	.word	0x08006365
 80062d8:	08006365 	.word	0x08006365
 80062dc:	08006365 	.word	0x08006365
 80062e0:	08006365 	.word	0x08006365
 80062e4:	08006365 	.word	0x08006365
 80062e8:	08006365 	.word	0x08006365
 80062ec:	08006365 	.word	0x08006365
 80062f0:	0800634d 	.word	0x0800634d
 80062f4:	08006365 	.word	0x08006365
 80062f8:	08006365 	.word	0x08006365
 80062fc:	08006365 	.word	0x08006365
 8006300:	08006365 	.word	0x08006365
 8006304:	08006365 	.word	0x08006365
 8006308:	08006365 	.word	0x08006365
 800630c:	08006365 	.word	0x08006365
 8006310:	08006355 	.word	0x08006355
 8006314:	08006365 	.word	0x08006365
 8006318:	08006365 	.word	0x08006365
 800631c:	08006365 	.word	0x08006365
 8006320:	08006365 	.word	0x08006365
 8006324:	08006365 	.word	0x08006365
 8006328:	08006365 	.word	0x08006365
 800632c:	08006365 	.word	0x08006365
 8006330:	0800635d 	.word	0x0800635d
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e0bc      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800633c:	2304      	movs	r3, #4
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e0b8      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006344:	2308      	movs	r3, #8
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e0b4      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800634c:	2310      	movs	r3, #16
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e0b0      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006354:	2320      	movs	r3, #32
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635a:	e0ac      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800635c:	2340      	movs	r3, #64	; 0x40
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e0a8      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636a:	e0a4      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a8f      	ldr	r2, [pc, #572]	; (80065b0 <UART_SetConfig+0x6a0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d130      	bne.n	80063d8 <UART_SetConfig+0x4c8>
 8006376:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <UART_SetConfig+0x69c>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	2b05      	cmp	r3, #5
 8006380:	d826      	bhi.n	80063d0 <UART_SetConfig+0x4c0>
 8006382:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <UART_SetConfig+0x478>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	080063a1 	.word	0x080063a1
 800638c:	080063a9 	.word	0x080063a9
 8006390:	080063b1 	.word	0x080063b1
 8006394:	080063b9 	.word	0x080063b9
 8006398:	080063c1 	.word	0x080063c1
 800639c:	080063c9 	.word	0x080063c9
 80063a0:	2300      	movs	r3, #0
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a6:	e086      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80063a8:	2304      	movs	r3, #4
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e082      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e07e      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e07a      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80063c0:	2320      	movs	r3, #32
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e076      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80063c8:	2340      	movs	r3, #64	; 0x40
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e072      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e06e      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a75      	ldr	r2, [pc, #468]	; (80065b4 <UART_SetConfig+0x6a4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d130      	bne.n	8006444 <UART_SetConfig+0x534>
 80063e2:	4b72      	ldr	r3, [pc, #456]	; (80065ac <UART_SetConfig+0x69c>)
 80063e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	d826      	bhi.n	800643c <UART_SetConfig+0x52c>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0x4e4>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	0800640d 	.word	0x0800640d
 80063f8:	08006415 	.word	0x08006415
 80063fc:	0800641d 	.word	0x0800641d
 8006400:	08006425 	.word	0x08006425
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006435 	.word	0x08006435
 800640c:	2300      	movs	r3, #0
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e050      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006414:	2304      	movs	r3, #4
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e04c      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800641c:	2308      	movs	r3, #8
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e048      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006424:	2310      	movs	r3, #16
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e044      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800642c:	2320      	movs	r3, #32
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e040      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006434:	2340      	movs	r3, #64	; 0x40
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e03c      	b.n	80064b6 <UART_SetConfig+0x5a6>
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e038      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a5b      	ldr	r2, [pc, #364]	; (80065b8 <UART_SetConfig+0x6a8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d130      	bne.n	80064b0 <UART_SetConfig+0x5a0>
 800644e:	4b57      	ldr	r3, [pc, #348]	; (80065ac <UART_SetConfig+0x69c>)
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b05      	cmp	r3, #5
 8006458:	d826      	bhi.n	80064a8 <UART_SetConfig+0x598>
 800645a:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <UART_SetConfig+0x550>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	08006479 	.word	0x08006479
 8006464:	08006481 	.word	0x08006481
 8006468:	08006489 	.word	0x08006489
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	2302      	movs	r3, #2
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647e:	e01a      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006480:	2304      	movs	r3, #4
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e016      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006488:	2308      	movs	r3, #8
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e012      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006490:	2310      	movs	r3, #16
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e00e      	b.n	80064b6 <UART_SetConfig+0x5a6>
 8006498:	2320      	movs	r3, #32
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e00a      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e006      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e002      	b.n	80064b6 <UART_SetConfig+0x5a6>
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <UART_SetConfig+0x6a8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	f040 80f8 	bne.w	80066b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	dc46      	bgt.n	8006558 <UART_SetConfig+0x648>
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	f2c0 8082 	blt.w	80065d4 <UART_SetConfig+0x6c4>
 80064d0:	3b02      	subs	r3, #2
 80064d2:	2b1e      	cmp	r3, #30
 80064d4:	d87e      	bhi.n	80065d4 <UART_SetConfig+0x6c4>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0x5cc>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	0800655f 	.word	0x0800655f
 80064e0:	080065d5 	.word	0x080065d5
 80064e4:	08006567 	.word	0x08006567
 80064e8:	080065d5 	.word	0x080065d5
 80064ec:	080065d5 	.word	0x080065d5
 80064f0:	080065d5 	.word	0x080065d5
 80064f4:	08006577 	.word	0x08006577
 80064f8:	080065d5 	.word	0x080065d5
 80064fc:	080065d5 	.word	0x080065d5
 8006500:	080065d5 	.word	0x080065d5
 8006504:	080065d5 	.word	0x080065d5
 8006508:	080065d5 	.word	0x080065d5
 800650c:	080065d5 	.word	0x080065d5
 8006510:	080065d5 	.word	0x080065d5
 8006514:	08006587 	.word	0x08006587
 8006518:	080065d5 	.word	0x080065d5
 800651c:	080065d5 	.word	0x080065d5
 8006520:	080065d5 	.word	0x080065d5
 8006524:	080065d5 	.word	0x080065d5
 8006528:	080065d5 	.word	0x080065d5
 800652c:	080065d5 	.word	0x080065d5
 8006530:	080065d5 	.word	0x080065d5
 8006534:	080065d5 	.word	0x080065d5
 8006538:	080065d5 	.word	0x080065d5
 800653c:	080065d5 	.word	0x080065d5
 8006540:	080065d5 	.word	0x080065d5
 8006544:	080065d5 	.word	0x080065d5
 8006548:	080065d5 	.word	0x080065d5
 800654c:	080065d5 	.word	0x080065d5
 8006550:	080065d5 	.word	0x080065d5
 8006554:	080065c7 	.word	0x080065c7
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d037      	beq.n	80065cc <UART_SetConfig+0x6bc>
 800655c:	e03a      	b.n	80065d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800655e:	f7fe f82f 	bl	80045c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006562:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006564:	e03c      	b.n	80065e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe f83e 	bl	80045ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006574:	e034      	b.n	80065e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006576:	f107 0318 	add.w	r3, r7, #24
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe f98a 	bl	8004894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006584:	e02c      	b.n	80065e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <UART_SetConfig+0x69c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d016      	beq.n	80065c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006592:	4b06      	ldr	r3, [pc, #24]	; (80065ac <UART_SetConfig+0x69c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	08db      	lsrs	r3, r3, #3
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	4a07      	ldr	r2, [pc, #28]	; (80065bc <UART_SetConfig+0x6ac>)
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065a4:	e01c      	b.n	80065e0 <UART_SetConfig+0x6d0>
 80065a6:	bf00      	nop
 80065a8:	40011400 	.word	0x40011400
 80065ac:	58024400 	.word	0x58024400
 80065b0:	40007800 	.word	0x40007800
 80065b4:	40007c00 	.word	0x40007c00
 80065b8:	58000c00 	.word	0x58000c00
 80065bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80065c0:	4b9d      	ldr	r3, [pc, #628]	; (8006838 <UART_SetConfig+0x928>)
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c4:	e00c      	b.n	80065e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065c6:	4b9d      	ldr	r3, [pc, #628]	; (800683c <UART_SetConfig+0x92c>)
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ca:	e009      	b.n	80065e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d2:	e005      	b.n	80065e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 81de 	beq.w	80069a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	4a94      	ldr	r2, [pc, #592]	; (8006840 <UART_SetConfig+0x930>)
 80065ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80065fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	4613      	mov	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4413      	add	r3, r2
 8006606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006608:	429a      	cmp	r2, r3
 800660a:	d305      	bcc.n	8006618 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800661e:	e1c1      	b.n	80069a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006622:	2200      	movs	r2, #0
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	60fa      	str	r2, [r7, #12]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	4a84      	ldr	r2, [pc, #528]	; (8006840 <UART_SetConfig+0x930>)
 800662e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006632:	b29b      	uxth	r3, r3
 8006634:	2200      	movs	r2, #0
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800663e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006642:	f7fa f861 	bl	8000708 <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	020b      	lsls	r3, r1, #8
 8006658:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800665c:	0202      	lsls	r2, r0, #8
 800665e:	6979      	ldr	r1, [r7, #20]
 8006660:	6849      	ldr	r1, [r1, #4]
 8006662:	0849      	lsrs	r1, r1, #1
 8006664:	2000      	movs	r0, #0
 8006666:	460c      	mov	r4, r1
 8006668:	4605      	mov	r5, r0
 800666a:	eb12 0804 	adds.w	r8, r2, r4
 800666e:	eb43 0905 	adc.w	r9, r3, r5
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	469a      	mov	sl, r3
 800667a:	4693      	mov	fp, r2
 800667c:	4652      	mov	r2, sl
 800667e:	465b      	mov	r3, fp
 8006680:	4640      	mov	r0, r8
 8006682:	4649      	mov	r1, r9
 8006684:	f7fa f840 	bl	8000708 <__aeabi_uldivmod>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4613      	mov	r3, r2
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006696:	d308      	bcc.n	80066aa <UART_SetConfig+0x79a>
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669e:	d204      	bcs.n	80066aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	e17c      	b.n	80069a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066b0:	e178      	b.n	80069a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ba:	f040 80c5 	bne.w	8006848 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80066be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	dc48      	bgt.n	8006758 <UART_SetConfig+0x848>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	db7b      	blt.n	80067c2 <UART_SetConfig+0x8b2>
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d879      	bhi.n	80067c2 <UART_SetConfig+0x8b2>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0x7c4>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	0800675f 	.word	0x0800675f
 80066d8:	08006767 	.word	0x08006767
 80066dc:	080067c3 	.word	0x080067c3
 80066e0:	080067c3 	.word	0x080067c3
 80066e4:	0800676f 	.word	0x0800676f
 80066e8:	080067c3 	.word	0x080067c3
 80066ec:	080067c3 	.word	0x080067c3
 80066f0:	080067c3 	.word	0x080067c3
 80066f4:	0800677f 	.word	0x0800677f
 80066f8:	080067c3 	.word	0x080067c3
 80066fc:	080067c3 	.word	0x080067c3
 8006700:	080067c3 	.word	0x080067c3
 8006704:	080067c3 	.word	0x080067c3
 8006708:	080067c3 	.word	0x080067c3
 800670c:	080067c3 	.word	0x080067c3
 8006710:	080067c3 	.word	0x080067c3
 8006714:	0800678f 	.word	0x0800678f
 8006718:	080067c3 	.word	0x080067c3
 800671c:	080067c3 	.word	0x080067c3
 8006720:	080067c3 	.word	0x080067c3
 8006724:	080067c3 	.word	0x080067c3
 8006728:	080067c3 	.word	0x080067c3
 800672c:	080067c3 	.word	0x080067c3
 8006730:	080067c3 	.word	0x080067c3
 8006734:	080067c3 	.word	0x080067c3
 8006738:	080067c3 	.word	0x080067c3
 800673c:	080067c3 	.word	0x080067c3
 8006740:	080067c3 	.word	0x080067c3
 8006744:	080067c3 	.word	0x080067c3
 8006748:	080067c3 	.word	0x080067c3
 800674c:	080067c3 	.word	0x080067c3
 8006750:	080067c3 	.word	0x080067c3
 8006754:	080067b5 	.word	0x080067b5
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	d02e      	beq.n	80067ba <UART_SetConfig+0x8aa>
 800675c:	e031      	b.n	80067c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800675e:	f7fc ffbd 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8006762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006764:	e033      	b.n	80067ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006766:	f7fc ffcf 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 800676a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800676c:	e02f      	b.n	80067ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800676e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006772:	4618      	mov	r0, r3
 8006774:	f7fd ff3a 	bl	80045ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677c:	e027      	b.n	80067ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677e:	f107 0318 	add.w	r3, r7, #24
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe f886 	bl	8004894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678c:	e01f      	b.n	80067ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800678e:	4b2d      	ldr	r3, [pc, #180]	; (8006844 <UART_SetConfig+0x934>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800679a:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <UART_SetConfig+0x934>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	08db      	lsrs	r3, r3, #3
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	4a24      	ldr	r2, [pc, #144]	; (8006838 <UART_SetConfig+0x928>)
 80067a6:	fa22 f303 	lsr.w	r3, r2, r3
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067ac:	e00f      	b.n	80067ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80067ae:	4b22      	ldr	r3, [pc, #136]	; (8006838 <UART_SetConfig+0x928>)
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b2:	e00c      	b.n	80067ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067b4:	4b21      	ldr	r3, [pc, #132]	; (800683c <UART_SetConfig+0x92c>)
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b8:	e009      	b.n	80067ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c0:	e005      	b.n	80067ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 80e7 	beq.w	80069a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <UART_SetConfig+0x930>)
 80067dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067e8:	005a      	lsls	r2, r3, #1
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	441a      	add	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	d916      	bls.n	8006830 <UART_SetConfig+0x920>
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d212      	bcs.n	8006830 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	b29b      	uxth	r3, r3
 800680e:	f023 030f 	bic.w	r3, r3, #15
 8006812:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	b29b      	uxth	r3, r3
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	b29a      	uxth	r2, r3
 8006820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006822:	4313      	orrs	r3, r2
 8006824:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800682c:	60da      	str	r2, [r3, #12]
 800682e:	e0b9      	b.n	80069a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006836:	e0b5      	b.n	80069a4 <UART_SetConfig+0xa94>
 8006838:	03d09000 	.word	0x03d09000
 800683c:	003d0900 	.word	0x003d0900
 8006840:	0800bcc0 	.word	0x0800bcc0
 8006844:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006848:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800684c:	2b20      	cmp	r3, #32
 800684e:	dc49      	bgt.n	80068e4 <UART_SetConfig+0x9d4>
 8006850:	2b00      	cmp	r3, #0
 8006852:	db7c      	blt.n	800694e <UART_SetConfig+0xa3e>
 8006854:	2b20      	cmp	r3, #32
 8006856:	d87a      	bhi.n	800694e <UART_SetConfig+0xa3e>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0x950>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	080068eb 	.word	0x080068eb
 8006864:	080068f3 	.word	0x080068f3
 8006868:	0800694f 	.word	0x0800694f
 800686c:	0800694f 	.word	0x0800694f
 8006870:	080068fb 	.word	0x080068fb
 8006874:	0800694f 	.word	0x0800694f
 8006878:	0800694f 	.word	0x0800694f
 800687c:	0800694f 	.word	0x0800694f
 8006880:	0800690b 	.word	0x0800690b
 8006884:	0800694f 	.word	0x0800694f
 8006888:	0800694f 	.word	0x0800694f
 800688c:	0800694f 	.word	0x0800694f
 8006890:	0800694f 	.word	0x0800694f
 8006894:	0800694f 	.word	0x0800694f
 8006898:	0800694f 	.word	0x0800694f
 800689c:	0800694f 	.word	0x0800694f
 80068a0:	0800691b 	.word	0x0800691b
 80068a4:	0800694f 	.word	0x0800694f
 80068a8:	0800694f 	.word	0x0800694f
 80068ac:	0800694f 	.word	0x0800694f
 80068b0:	0800694f 	.word	0x0800694f
 80068b4:	0800694f 	.word	0x0800694f
 80068b8:	0800694f 	.word	0x0800694f
 80068bc:	0800694f 	.word	0x0800694f
 80068c0:	0800694f 	.word	0x0800694f
 80068c4:	0800694f 	.word	0x0800694f
 80068c8:	0800694f 	.word	0x0800694f
 80068cc:	0800694f 	.word	0x0800694f
 80068d0:	0800694f 	.word	0x0800694f
 80068d4:	0800694f 	.word	0x0800694f
 80068d8:	0800694f 	.word	0x0800694f
 80068dc:	0800694f 	.word	0x0800694f
 80068e0:	08006941 	.word	0x08006941
 80068e4:	2b40      	cmp	r3, #64	; 0x40
 80068e6:	d02e      	beq.n	8006946 <UART_SetConfig+0xa36>
 80068e8:	e031      	b.n	800694e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ea:	f7fc fef7 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 80068ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068f0:	e033      	b.n	800695a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f2:	f7fc ff09 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 80068f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068f8:	e02f      	b.n	800695a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fd fe74 	bl	80045ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006908:	e027      	b.n	800695a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800690a:	f107 0318 	add.w	r3, r7, #24
 800690e:	4618      	mov	r0, r3
 8006910:	f7fd ffc0 	bl	8004894 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006918:	e01f      	b.n	800695a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800691a:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <UART_SetConfig+0xac0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006926:	4b2a      	ldr	r3, [pc, #168]	; (80069d0 <UART_SetConfig+0xac0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	08db      	lsrs	r3, r3, #3
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	4a28      	ldr	r2, [pc, #160]	; (80069d4 <UART_SetConfig+0xac4>)
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006938:	e00f      	b.n	800695a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800693a:	4b26      	ldr	r3, [pc, #152]	; (80069d4 <UART_SetConfig+0xac4>)
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800693e:	e00c      	b.n	800695a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006940:	4b25      	ldr	r3, [pc, #148]	; (80069d8 <UART_SetConfig+0xac8>)
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006944:	e009      	b.n	800695a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694c:	e005      	b.n	800695a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006958:	bf00      	nop
    }

    if (pclk != 0U)
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d021      	beq.n	80069a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <UART_SetConfig+0xacc>)
 8006966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800696a:	461a      	mov	r2, r3
 800696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	085b      	lsrs	r3, r3, #1
 8006978:	441a      	add	r2, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006982:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	2b0f      	cmp	r3, #15
 8006988:	d909      	bls.n	800699e <UART_SetConfig+0xa8e>
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006990:	d205      	bcs.n	800699e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	b29a      	uxth	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60da      	str	r2, [r3, #12]
 800699c:	e002      	b.n	80069a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2200      	movs	r2, #0
 80069b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3748      	adds	r7, #72	; 0x48
 80069c8:	46bd      	mov	sp, r7
 80069ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	03d09000 	.word	0x03d09000
 80069d8:	003d0900 	.word	0x003d0900
 80069dc:	0800bcc0 	.word	0x0800bcc0

080069e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01a      	beq.n	8006af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ade:	d10a      	bne.n	8006af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b34:	f7fb f852 	bl	8001bdc <HAL_GetTick>
 8006b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d10e      	bne.n	8006b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f82f 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e025      	b.n	8006bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d10e      	bne.n	8006b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f819 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e00f      	b.n	8006bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b09c      	sub	sp, #112	; 0x70
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bca:	e0a9      	b.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	f000 80a5 	beq.w	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fb f801 	bl	8001bdc <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <UART_WaitOnFlagUntilTimeout+0x32>
 8006be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d140      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c00:	667b      	str	r3, [r7, #100]	; 0x64
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e6      	bne.n	8006bec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3308      	adds	r3, #8
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	663b      	str	r3, [r7, #96]	; 0x60
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e069      	b.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d051      	beq.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8a:	d149      	bne.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ce8:	623a      	str	r2, [r7, #32]
 8006cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	69f9      	ldr	r1, [r7, #28]
 8006cee:	6a3a      	ldr	r2, [r7, #32]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e010      	b.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	bf0c      	ite	eq
 8006d30:	2301      	moveq	r3, #1
 8006d32:	2300      	movne	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	f43f af46 	beq.w	8006bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3770      	adds	r7, #112	; 0x70
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e027      	b.n	8006db0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2224      	movs	r2, #36	; 0x24
 8006d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0201 	bic.w	r2, r2, #1
 8006d86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e02d      	b.n	8006e30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	; 0x24
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f84f 	bl	8006eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e02d      	b.n	8006eac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2224      	movs	r2, #36	; 0x24
 8006e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0201 	bic.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f811 	bl	8006eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ed4:	e031      	b.n	8006f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ed6:	2310      	movs	r3, #16
 8006ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eda:	2310      	movs	r3, #16
 8006edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	0e5b      	lsrs	r3, r3, #25
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	0f5b      	lsrs	r3, r3, #29
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	7b3a      	ldrb	r2, [r7, #12]
 8006f02:	4911      	ldr	r1, [pc, #68]	; (8006f48 <UARTEx_SetNbDataToProcess+0x94>)
 8006f04:	5c8a      	ldrb	r2, [r1, r2]
 8006f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f0a:	7b3a      	ldrb	r2, [r7, #12]
 8006f0c:	490f      	ldr	r1, [pc, #60]	; (8006f4c <UARTEx_SetNbDataToProcess+0x98>)
 8006f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	7b7a      	ldrb	r2, [r7, #13]
 8006f20:	4909      	ldr	r1, [pc, #36]	; (8006f48 <UARTEx_SetNbDataToProcess+0x94>)
 8006f22:	5c8a      	ldrb	r2, [r1, r2]
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f28:	7b7a      	ldrb	r2, [r7, #13]
 8006f2a:	4908      	ldr	r1, [pc, #32]	; (8006f4c <UARTEx_SetNbDataToProcess+0x98>)
 8006f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	0800bcd8 	.word	0x0800bcd8
 8006f4c:	0800bce0 	.word	0x0800bce0

08006f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f50:	b084      	sub	sp, #16
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	f107 001c 	add.w	r0, r7, #28
 8006f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d120      	bne.n	8006faa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	4b2a      	ldr	r3, [pc, #168]	; (8007024 <USB_CoreInit+0xd4>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d105      	bne.n	8006f9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 faac 	bl	80074fc <USB_CoreReset>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
 8006fa8:	e01a      	b.n	8006fe0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 faa0 	bl	80074fc <USB_CoreReset>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
 8006fd2:	e005      	b.n	8006fe0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d116      	bne.n	8007014 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <USB_CoreInit+0xd8>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f043 0206 	orr.w	r2, r3, #6
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f043 0220 	orr.w	r2, r3, #32
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007020:	b004      	add	sp, #16
 8007022:	4770      	bx	lr
 8007024:	ffbdffbf 	.word	0xffbdffbf
 8007028:	03ee0000 	.word	0x03ee0000

0800702c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f023 0201 	bic.w	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d115      	bne.n	800709c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800707c:	2001      	movs	r0, #1
 800707e:	f7fa fdb9 	bl	8001bf4 <HAL_Delay>
      ms++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fa29 	bl	80074e0 <USB_GetMode>
 800708e:	4603      	mov	r3, r0
 8007090:	2b01      	cmp	r3, #1
 8007092:	d01e      	beq.n	80070d2 <USB_SetCurrentMode+0x84>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b31      	cmp	r3, #49	; 0x31
 8007098:	d9f0      	bls.n	800707c <USB_SetCurrentMode+0x2e>
 800709a:	e01a      	b.n	80070d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d115      	bne.n	80070ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070ae:	2001      	movs	r0, #1
 80070b0:	f7fa fda0 	bl	8001bf4 <HAL_Delay>
      ms++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa10 	bl	80074e0 <USB_GetMode>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <USB_SetCurrentMode+0x84>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b31      	cmp	r3, #49	; 0x31
 80070ca:	d9f0      	bls.n	80070ae <USB_SetCurrentMode+0x60>
 80070cc:	e001      	b.n	80070d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e005      	b.n	80070de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b32      	cmp	r3, #50	; 0x32
 80070d6:	d101      	bne.n	80070dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e000      	b.n	80070de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070e8:	b084      	sub	sp, #16
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b086      	sub	sp, #24
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007102:	2300      	movs	r3, #0
 8007104:	613b      	str	r3, [r7, #16]
 8007106:	e009      	b.n	800711c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3340      	adds	r3, #64	; 0x40
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	2200      	movs	r2, #0
 8007114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3301      	adds	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b0e      	cmp	r3, #14
 8007120:	d9f2      	bls.n	8007108 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d11c      	bne.n	8007162 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007136:	f043 0302 	orr.w	r3, r3, #2
 800713a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	e005      	b.n	800716e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007174:	461a      	mov	r2, r3
 8007176:	2300      	movs	r3, #0
 8007178:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007180:	4619      	mov	r1, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007188:	461a      	mov	r2, r3
 800718a:	680b      	ldr	r3, [r1, #0]
 800718c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10c      	bne.n	80071ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800719a:	2100      	movs	r1, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f965 	bl	800746c <USB_SetDevSpeed>
 80071a2:	e008      	b.n	80071b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071a4:	2101      	movs	r1, #1
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f960 	bl	800746c <USB_SetDevSpeed>
 80071ac:	e003      	b.n	80071b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071ae:	2103      	movs	r1, #3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f95b 	bl	800746c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071b6:	2110      	movs	r1, #16
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8f3 	bl	80073a4 <USB_FlushTxFifo>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f91f 	bl	800740c <USB_FlushRxFifo>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	461a      	mov	r2, r3
 80071e0:	2300      	movs	r3, #0
 80071e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	461a      	mov	r2, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	461a      	mov	r2, r3
 80071f8:	2300      	movs	r3, #0
 80071fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	e043      	b.n	800728a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007218:	d118      	bne.n	800724c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	461a      	mov	r2, r3
 800722e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	e013      	b.n	800725e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007242:	461a      	mov	r2, r3
 8007244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e008      	b.n	800725e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	461a      	mov	r2, r3
 800725a:	2300      	movs	r3, #0
 800725c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	461a      	mov	r2, r3
 800726c:	2300      	movs	r3, #0
 800726e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727c:	461a      	mov	r2, r3
 800727e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	3301      	adds	r3, #1
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	429a      	cmp	r2, r3
 8007290:	d3b7      	bcc.n	8007202 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	e043      	b.n	8007320 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ae:	d118      	bne.n	80072e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	461a      	mov	r2, r3
 80072c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	e013      	b.n	80072f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	461a      	mov	r2, r3
 80072da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	e008      	b.n	80072f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ee:	461a      	mov	r2, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007300:	461a      	mov	r2, r3
 8007302:	2300      	movs	r3, #0
 8007304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007312:	461a      	mov	r2, r3
 8007314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	3301      	adds	r3, #1
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	429a      	cmp	r2, r3
 8007326:	d3b7      	bcc.n	8007298 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800733a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f043 0210 	orr.w	r2, r3, #16
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	4b0e      	ldr	r3, [pc, #56]	; (800739c <USB_DevInit+0x2b4>)
 8007362:	4313      	orrs	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f043 0208 	orr.w	r2, r3, #8
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800737a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d105      	bne.n	800738c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <USB_DevInit+0x2b8>)
 8007386:	4313      	orrs	r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007398:	b004      	add	sp, #16
 800739a:	4770      	bx	lr
 800739c:	803c3800 	.word	0x803c3800
 80073a0:	40000004 	.word	0x40000004

080073a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <USB_FlushTxFifo+0x64>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d901      	bls.n	80073c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e01b      	b.n	80073fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	daf2      	bge.n	80073b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	019b      	lsls	r3, r3, #6
 80073d4:	f043 0220 	orr.w	r2, r3, #32
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a08      	ldr	r2, [pc, #32]	; (8007408 <USB_FlushTxFifo+0x64>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d901      	bls.n	80073ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e006      	b.n	80073fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d0f0      	beq.n	80073dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	00030d40 	.word	0x00030d40

0800740c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4a11      	ldr	r2, [pc, #68]	; (8007468 <USB_FlushRxFifo+0x5c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e018      	b.n	800745c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	daf2      	bge.n	8007418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2210      	movs	r2, #16
 800743a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3301      	adds	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4a08      	ldr	r2, [pc, #32]	; (8007468 <USB_FlushRxFifo+0x5c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e006      	b.n	800745c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0310 	and.w	r3, r3, #16
 8007456:	2b10      	cmp	r3, #16
 8007458:	d0f0      	beq.n	800743c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	00030d40 	.word	0x00030d40

0800746c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800748c:	4313      	orrs	r3, r2
 800748e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b8:	f023 0303 	bic.w	r3, r3, #3
 80074bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f003 0301 	and.w	r3, r3, #1
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3301      	adds	r3, #1
 800750c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a13      	ldr	r2, [pc, #76]	; (8007560 <USB_CoreReset+0x64>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d901      	bls.n	800751a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e01b      	b.n	8007552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	daf2      	bge.n	8007508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f043 0201 	orr.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a09      	ldr	r2, [pc, #36]	; (8007560 <USB_CoreReset+0x64>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d901      	bls.n	8007544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e006      	b.n	8007552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b01      	cmp	r3, #1
 800754e:	d0f0      	beq.n	8007532 <USB_CoreReset+0x36>

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	00030d40 	.word	0x00030d40

08007564 <__errno>:
 8007564:	4b01      	ldr	r3, [pc, #4]	; (800756c <__errno+0x8>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	24000010 	.word	0x24000010

08007570 <__libc_init_array>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4d0d      	ldr	r5, [pc, #52]	; (80075a8 <__libc_init_array+0x38>)
 8007574:	4c0d      	ldr	r4, [pc, #52]	; (80075ac <__libc_init_array+0x3c>)
 8007576:	1b64      	subs	r4, r4, r5
 8007578:	10a4      	asrs	r4, r4, #2
 800757a:	2600      	movs	r6, #0
 800757c:	42a6      	cmp	r6, r4
 800757e:	d109      	bne.n	8007594 <__libc_init_array+0x24>
 8007580:	4d0b      	ldr	r5, [pc, #44]	; (80075b0 <__libc_init_array+0x40>)
 8007582:	4c0c      	ldr	r4, [pc, #48]	; (80075b4 <__libc_init_array+0x44>)
 8007584:	f004 fb86 	bl	800bc94 <_init>
 8007588:	1b64      	subs	r4, r4, r5
 800758a:	10a4      	asrs	r4, r4, #2
 800758c:	2600      	movs	r6, #0
 800758e:	42a6      	cmp	r6, r4
 8007590:	d105      	bne.n	800759e <__libc_init_array+0x2e>
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	f855 3b04 	ldr.w	r3, [r5], #4
 8007598:	4798      	blx	r3
 800759a:	3601      	adds	r6, #1
 800759c:	e7ee      	b.n	800757c <__libc_init_array+0xc>
 800759e:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a2:	4798      	blx	r3
 80075a4:	3601      	adds	r6, #1
 80075a6:	e7f2      	b.n	800758e <__libc_init_array+0x1e>
 80075a8:	0800c19c 	.word	0x0800c19c
 80075ac:	0800c19c 	.word	0x0800c19c
 80075b0:	0800c19c 	.word	0x0800c19c
 80075b4:	0800c1a0 	.word	0x0800c1a0

080075b8 <memcpy>:
 80075b8:	440a      	add	r2, r1
 80075ba:	4291      	cmp	r1, r2
 80075bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80075c0:	d100      	bne.n	80075c4 <memcpy+0xc>
 80075c2:	4770      	bx	lr
 80075c4:	b510      	push	{r4, lr}
 80075c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ce:	4291      	cmp	r1, r2
 80075d0:	d1f9      	bne.n	80075c6 <memcpy+0xe>
 80075d2:	bd10      	pop	{r4, pc}

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <__cvt>:
 80075e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e6:	ed2d 8b02 	vpush	{d8}
 80075ea:	eeb0 8b40 	vmov.f64	d8, d0
 80075ee:	b085      	sub	sp, #20
 80075f0:	4617      	mov	r7, r2
 80075f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80075f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80075f6:	ee18 2a90 	vmov	r2, s17
 80075fa:	f025 0520 	bic.w	r5, r5, #32
 80075fe:	2a00      	cmp	r2, #0
 8007600:	bfb6      	itet	lt
 8007602:	222d      	movlt	r2, #45	; 0x2d
 8007604:	2200      	movge	r2, #0
 8007606:	eeb1 8b40 	vneglt.f64	d8, d0
 800760a:	2d46      	cmp	r5, #70	; 0x46
 800760c:	460c      	mov	r4, r1
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	d004      	beq.n	800761c <__cvt+0x38>
 8007612:	2d45      	cmp	r5, #69	; 0x45
 8007614:	d100      	bne.n	8007618 <__cvt+0x34>
 8007616:	3401      	adds	r4, #1
 8007618:	2102      	movs	r1, #2
 800761a:	e000      	b.n	800761e <__cvt+0x3a>
 800761c:	2103      	movs	r1, #3
 800761e:	ab03      	add	r3, sp, #12
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	ab02      	add	r3, sp, #8
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4622      	mov	r2, r4
 8007628:	4633      	mov	r3, r6
 800762a:	eeb0 0b48 	vmov.f64	d0, d8
 800762e:	f001 fdef 	bl	8009210 <_dtoa_r>
 8007632:	2d47      	cmp	r5, #71	; 0x47
 8007634:	d101      	bne.n	800763a <__cvt+0x56>
 8007636:	07fb      	lsls	r3, r7, #31
 8007638:	d51a      	bpl.n	8007670 <__cvt+0x8c>
 800763a:	2d46      	cmp	r5, #70	; 0x46
 800763c:	eb00 0204 	add.w	r2, r0, r4
 8007640:	d10c      	bne.n	800765c <__cvt+0x78>
 8007642:	7803      	ldrb	r3, [r0, #0]
 8007644:	2b30      	cmp	r3, #48	; 0x30
 8007646:	d107      	bne.n	8007658 <__cvt+0x74>
 8007648:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800764c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007650:	bf1c      	itt	ne
 8007652:	f1c4 0401 	rsbne	r4, r4, #1
 8007656:	6034      	strne	r4, [r6, #0]
 8007658:	6833      	ldr	r3, [r6, #0]
 800765a:	441a      	add	r2, r3
 800765c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007664:	bf08      	it	eq
 8007666:	9203      	streq	r2, [sp, #12]
 8007668:	2130      	movs	r1, #48	; 0x30
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	4293      	cmp	r3, r2
 800766e:	d307      	bcc.n	8007680 <__cvt+0x9c>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007674:	1a1b      	subs	r3, r3, r0
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	b005      	add	sp, #20
 800767a:	ecbd 8b02 	vpop	{d8}
 800767e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007680:	1c5c      	adds	r4, r3, #1
 8007682:	9403      	str	r4, [sp, #12]
 8007684:	7019      	strb	r1, [r3, #0]
 8007686:	e7f0      	b.n	800766a <__cvt+0x86>

08007688 <__exponent>:
 8007688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768a:	4603      	mov	r3, r0
 800768c:	2900      	cmp	r1, #0
 800768e:	bfb8      	it	lt
 8007690:	4249      	neglt	r1, r1
 8007692:	f803 2b02 	strb.w	r2, [r3], #2
 8007696:	bfb4      	ite	lt
 8007698:	222d      	movlt	r2, #45	; 0x2d
 800769a:	222b      	movge	r2, #43	; 0x2b
 800769c:	2909      	cmp	r1, #9
 800769e:	7042      	strb	r2, [r0, #1]
 80076a0:	dd2a      	ble.n	80076f8 <__exponent+0x70>
 80076a2:	f10d 0407 	add.w	r4, sp, #7
 80076a6:	46a4      	mov	ip, r4
 80076a8:	270a      	movs	r7, #10
 80076aa:	46a6      	mov	lr, r4
 80076ac:	460a      	mov	r2, r1
 80076ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80076b2:	fb07 1516 	mls	r5, r7, r6, r1
 80076b6:	3530      	adds	r5, #48	; 0x30
 80076b8:	2a63      	cmp	r2, #99	; 0x63
 80076ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80076be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076c2:	4631      	mov	r1, r6
 80076c4:	dcf1      	bgt.n	80076aa <__exponent+0x22>
 80076c6:	3130      	adds	r1, #48	; 0x30
 80076c8:	f1ae 0502 	sub.w	r5, lr, #2
 80076cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076d0:	1c44      	adds	r4, r0, #1
 80076d2:	4629      	mov	r1, r5
 80076d4:	4561      	cmp	r1, ip
 80076d6:	d30a      	bcc.n	80076ee <__exponent+0x66>
 80076d8:	f10d 0209 	add.w	r2, sp, #9
 80076dc:	eba2 020e 	sub.w	r2, r2, lr
 80076e0:	4565      	cmp	r5, ip
 80076e2:	bf88      	it	hi
 80076e4:	2200      	movhi	r2, #0
 80076e6:	4413      	add	r3, r2
 80076e8:	1a18      	subs	r0, r3, r0
 80076ea:	b003      	add	sp, #12
 80076ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076f6:	e7ed      	b.n	80076d4 <__exponent+0x4c>
 80076f8:	2330      	movs	r3, #48	; 0x30
 80076fa:	3130      	adds	r1, #48	; 0x30
 80076fc:	7083      	strb	r3, [r0, #2]
 80076fe:	70c1      	strb	r1, [r0, #3]
 8007700:	1d03      	adds	r3, r0, #4
 8007702:	e7f1      	b.n	80076e8 <__exponent+0x60>
 8007704:	0000      	movs	r0, r0
	...

08007708 <_printf_float>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	b08b      	sub	sp, #44	; 0x2c
 800770e:	460c      	mov	r4, r1
 8007710:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007714:	4616      	mov	r6, r2
 8007716:	461f      	mov	r7, r3
 8007718:	4605      	mov	r5, r0
 800771a:	f003 f80d 	bl	800a738 <_localeconv_r>
 800771e:	f8d0 b000 	ldr.w	fp, [r0]
 8007722:	4658      	mov	r0, fp
 8007724:	f7f8 fddc 	bl	80002e0 <strlen>
 8007728:	2300      	movs	r3, #0
 800772a:	9308      	str	r3, [sp, #32]
 800772c:	f8d8 3000 	ldr.w	r3, [r8]
 8007730:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	3307      	adds	r3, #7
 8007738:	f023 0307 	bic.w	r3, r3, #7
 800773c:	f103 0108 	add.w	r1, r3, #8
 8007740:	f8c8 1000 	str.w	r1, [r8]
 8007744:	4682      	mov	sl, r0
 8007746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800774a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800774e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80079b0 <_printf_float+0x2a8>
 8007752:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007756:	eeb0 6bc0 	vabs.f64	d6, d0
 800775a:	eeb4 6b47 	vcmp.f64	d6, d7
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	dd24      	ble.n	80077ae <_printf_float+0xa6>
 8007764:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776c:	d502      	bpl.n	8007774 <_printf_float+0x6c>
 800776e:	232d      	movs	r3, #45	; 0x2d
 8007770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007774:	4b90      	ldr	r3, [pc, #576]	; (80079b8 <_printf_float+0x2b0>)
 8007776:	4891      	ldr	r0, [pc, #580]	; (80079bc <_printf_float+0x2b4>)
 8007778:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800777c:	bf94      	ite	ls
 800777e:	4698      	movls	r8, r3
 8007780:	4680      	movhi	r8, r0
 8007782:	2303      	movs	r3, #3
 8007784:	6123      	str	r3, [r4, #16]
 8007786:	f022 0204 	bic.w	r2, r2, #4
 800778a:	2300      	movs	r3, #0
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	9700      	str	r7, [sp, #0]
 8007792:	4633      	mov	r3, r6
 8007794:	aa09      	add	r2, sp, #36	; 0x24
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f000 f9d3 	bl	8007b44 <_printf_common>
 800779e:	3001      	adds	r0, #1
 80077a0:	f040 808a 	bne.w	80078b8 <_printf_float+0x1b0>
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	b00b      	add	sp, #44	; 0x2c
 80077aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	d709      	bvc.n	80077cc <_printf_float+0xc4>
 80077b8:	ee10 3a90 	vmov	r3, s1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bfbc      	itt	lt
 80077c0:	232d      	movlt	r3, #45	; 0x2d
 80077c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077c6:	487e      	ldr	r0, [pc, #504]	; (80079c0 <_printf_float+0x2b8>)
 80077c8:	4b7e      	ldr	r3, [pc, #504]	; (80079c4 <_printf_float+0x2bc>)
 80077ca:	e7d5      	b.n	8007778 <_printf_float+0x70>
 80077cc:	6863      	ldr	r3, [r4, #4]
 80077ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80077d2:	9104      	str	r1, [sp, #16]
 80077d4:	1c59      	adds	r1, r3, #1
 80077d6:	d13c      	bne.n	8007852 <_printf_float+0x14a>
 80077d8:	2306      	movs	r3, #6
 80077da:	6063      	str	r3, [r4, #4]
 80077dc:	2300      	movs	r3, #0
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	ab08      	add	r3, sp, #32
 80077e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80077e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077ea:	ab07      	add	r3, sp, #28
 80077ec:	6861      	ldr	r1, [r4, #4]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	6022      	str	r2, [r4, #0]
 80077f2:	f10d 031b 	add.w	r3, sp, #27
 80077f6:	4628      	mov	r0, r5
 80077f8:	f7ff fef4 	bl	80075e4 <__cvt>
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	9907      	ldr	r1, [sp, #28]
 8007800:	2b47      	cmp	r3, #71	; 0x47
 8007802:	4680      	mov	r8, r0
 8007804:	d108      	bne.n	8007818 <_printf_float+0x110>
 8007806:	1cc8      	adds	r0, r1, #3
 8007808:	db02      	blt.n	8007810 <_printf_float+0x108>
 800780a:	6863      	ldr	r3, [r4, #4]
 800780c:	4299      	cmp	r1, r3
 800780e:	dd41      	ble.n	8007894 <_printf_float+0x18c>
 8007810:	f1a9 0902 	sub.w	r9, r9, #2
 8007814:	fa5f f989 	uxtb.w	r9, r9
 8007818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800781c:	d820      	bhi.n	8007860 <_printf_float+0x158>
 800781e:	3901      	subs	r1, #1
 8007820:	464a      	mov	r2, r9
 8007822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007826:	9107      	str	r1, [sp, #28]
 8007828:	f7ff ff2e 	bl	8007688 <__exponent>
 800782c:	9a08      	ldr	r2, [sp, #32]
 800782e:	9004      	str	r0, [sp, #16]
 8007830:	1813      	adds	r3, r2, r0
 8007832:	2a01      	cmp	r2, #1
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	dc02      	bgt.n	800783e <_printf_float+0x136>
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	07d2      	lsls	r2, r2, #31
 800783c:	d501      	bpl.n	8007842 <_printf_float+0x13a>
 800783e:	3301      	adds	r3, #1
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0a2      	beq.n	8007790 <_printf_float+0x88>
 800784a:	232d      	movs	r3, #45	; 0x2d
 800784c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007850:	e79e      	b.n	8007790 <_printf_float+0x88>
 8007852:	9904      	ldr	r1, [sp, #16]
 8007854:	2947      	cmp	r1, #71	; 0x47
 8007856:	d1c1      	bne.n	80077dc <_printf_float+0xd4>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1bf      	bne.n	80077dc <_printf_float+0xd4>
 800785c:	2301      	movs	r3, #1
 800785e:	e7bc      	b.n	80077da <_printf_float+0xd2>
 8007860:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007864:	d118      	bne.n	8007898 <_printf_float+0x190>
 8007866:	2900      	cmp	r1, #0
 8007868:	6863      	ldr	r3, [r4, #4]
 800786a:	dd0b      	ble.n	8007884 <_printf_float+0x17c>
 800786c:	6121      	str	r1, [r4, #16]
 800786e:	b913      	cbnz	r3, 8007876 <_printf_float+0x16e>
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	07d0      	lsls	r0, r2, #31
 8007874:	d502      	bpl.n	800787c <_printf_float+0x174>
 8007876:	3301      	adds	r3, #1
 8007878:	440b      	add	r3, r1
 800787a:	6123      	str	r3, [r4, #16]
 800787c:	2300      	movs	r3, #0
 800787e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	e7de      	b.n	8007842 <_printf_float+0x13a>
 8007884:	b913      	cbnz	r3, 800788c <_printf_float+0x184>
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	07d2      	lsls	r2, r2, #31
 800788a:	d501      	bpl.n	8007890 <_printf_float+0x188>
 800788c:	3302      	adds	r3, #2
 800788e:	e7f4      	b.n	800787a <_printf_float+0x172>
 8007890:	2301      	movs	r3, #1
 8007892:	e7f2      	b.n	800787a <_printf_float+0x172>
 8007894:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007898:	9b08      	ldr	r3, [sp, #32]
 800789a:	4299      	cmp	r1, r3
 800789c:	db05      	blt.n	80078aa <_printf_float+0x1a2>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	6121      	str	r1, [r4, #16]
 80078a2:	07d8      	lsls	r0, r3, #31
 80078a4:	d5ea      	bpl.n	800787c <_printf_float+0x174>
 80078a6:	1c4b      	adds	r3, r1, #1
 80078a8:	e7e7      	b.n	800787a <_printf_float+0x172>
 80078aa:	2900      	cmp	r1, #0
 80078ac:	bfd4      	ite	le
 80078ae:	f1c1 0202 	rsble	r2, r1, #2
 80078b2:	2201      	movgt	r2, #1
 80078b4:	4413      	add	r3, r2
 80078b6:	e7e0      	b.n	800787a <_printf_float+0x172>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	055a      	lsls	r2, r3, #21
 80078bc:	d407      	bmi.n	80078ce <_printf_float+0x1c6>
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	4642      	mov	r2, r8
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	d12a      	bne.n	8007922 <_printf_float+0x21a>
 80078cc:	e76a      	b.n	80077a4 <_printf_float+0x9c>
 80078ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80078d2:	f240 80e2 	bls.w	8007a9a <_printf_float+0x392>
 80078d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80078da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e2:	d133      	bne.n	800794c <_printf_float+0x244>
 80078e4:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <_printf_float+0x2c0>)
 80078e6:	2301      	movs	r3, #1
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f af58 	beq.w	80077a4 <_printf_float+0x9c>
 80078f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	db02      	blt.n	8007902 <_printf_float+0x1fa>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	07d8      	lsls	r0, r3, #31
 8007900:	d50f      	bpl.n	8007922 <_printf_float+0x21a>
 8007902:	4653      	mov	r3, sl
 8007904:	465a      	mov	r2, fp
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f af49 	beq.w	80077a4 <_printf_float+0x9c>
 8007912:	f04f 0800 	mov.w	r8, #0
 8007916:	f104 091a 	add.w	r9, r4, #26
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	3b01      	subs	r3, #1
 800791e:	4543      	cmp	r3, r8
 8007920:	dc09      	bgt.n	8007936 <_printf_float+0x22e>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	079b      	lsls	r3, r3, #30
 8007926:	f100 8108 	bmi.w	8007b3a <_printf_float+0x432>
 800792a:	68e0      	ldr	r0, [r4, #12]
 800792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792e:	4298      	cmp	r0, r3
 8007930:	bfb8      	it	lt
 8007932:	4618      	movlt	r0, r3
 8007934:	e738      	b.n	80077a8 <_printf_float+0xa0>
 8007936:	2301      	movs	r3, #1
 8007938:	464a      	mov	r2, r9
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	f43f af2f 	beq.w	80077a4 <_printf_float+0x9c>
 8007946:	f108 0801 	add.w	r8, r8, #1
 800794a:	e7e6      	b.n	800791a <_printf_float+0x212>
 800794c:	9b07      	ldr	r3, [sp, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	dc3c      	bgt.n	80079cc <_printf_float+0x2c4>
 8007952:	4a1d      	ldr	r2, [pc, #116]	; (80079c8 <_printf_float+0x2c0>)
 8007954:	2301      	movs	r3, #1
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	f43f af21 	beq.w	80077a4 <_printf_float+0x9c>
 8007962:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007966:	4313      	orrs	r3, r2
 8007968:	d102      	bne.n	8007970 <_printf_float+0x268>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	07d9      	lsls	r1, r3, #31
 800796e:	d5d8      	bpl.n	8007922 <_printf_float+0x21a>
 8007970:	4653      	mov	r3, sl
 8007972:	465a      	mov	r2, fp
 8007974:	4631      	mov	r1, r6
 8007976:	4628      	mov	r0, r5
 8007978:	47b8      	blx	r7
 800797a:	3001      	adds	r0, #1
 800797c:	f43f af12 	beq.w	80077a4 <_printf_float+0x9c>
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	f104 0a1a 	add.w	sl, r4, #26
 8007988:	9b07      	ldr	r3, [sp, #28]
 800798a:	425b      	negs	r3, r3
 800798c:	454b      	cmp	r3, r9
 800798e:	dc01      	bgt.n	8007994 <_printf_float+0x28c>
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	e795      	b.n	80078c0 <_printf_float+0x1b8>
 8007994:	2301      	movs	r3, #1
 8007996:	4652      	mov	r2, sl
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af00 	beq.w	80077a4 <_printf_float+0x9c>
 80079a4:	f109 0901 	add.w	r9, r9, #1
 80079a8:	e7ee      	b.n	8007988 <_printf_float+0x280>
 80079aa:	bf00      	nop
 80079ac:	f3af 8000 	nop.w
 80079b0:	ffffffff 	.word	0xffffffff
 80079b4:	7fefffff 	.word	0x7fefffff
 80079b8:	0800bcec 	.word	0x0800bcec
 80079bc:	0800bcf0 	.word	0x0800bcf0
 80079c0:	0800bcf8 	.word	0x0800bcf8
 80079c4:	0800bcf4 	.word	0x0800bcf4
 80079c8:	0800bcfc 	.word	0x0800bcfc
 80079cc:	9a08      	ldr	r2, [sp, #32]
 80079ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079d0:	429a      	cmp	r2, r3
 80079d2:	bfa8      	it	ge
 80079d4:	461a      	movge	r2, r3
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	4691      	mov	r9, r2
 80079da:	dc38      	bgt.n	8007a4e <_printf_float+0x346>
 80079dc:	2300      	movs	r3, #0
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079e4:	f104 021a 	add.w	r2, r4, #26
 80079e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ea:	9905      	ldr	r1, [sp, #20]
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	eba3 0309 	sub.w	r3, r3, r9
 80079f2:	428b      	cmp	r3, r1
 80079f4:	dc33      	bgt.n	8007a5e <_printf_float+0x356>
 80079f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	db3c      	blt.n	8007a78 <_printf_float+0x370>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	07da      	lsls	r2, r3, #31
 8007a02:	d439      	bmi.n	8007a78 <_printf_float+0x370>
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	9a04      	ldr	r2, [sp, #16]
 8007a08:	9907      	ldr	r1, [sp, #28]
 8007a0a:	1a9a      	subs	r2, r3, r2
 8007a0c:	eba3 0901 	sub.w	r9, r3, r1
 8007a10:	4591      	cmp	r9, r2
 8007a12:	bfa8      	it	ge
 8007a14:	4691      	movge	r9, r2
 8007a16:	f1b9 0f00 	cmp.w	r9, #0
 8007a1a:	dc35      	bgt.n	8007a88 <_printf_float+0x380>
 8007a1c:	f04f 0800 	mov.w	r8, #0
 8007a20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a24:	f104 0a1a 	add.w	sl, r4, #26
 8007a28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a2c:	1a9b      	subs	r3, r3, r2
 8007a2e:	eba3 0309 	sub.w	r3, r3, r9
 8007a32:	4543      	cmp	r3, r8
 8007a34:	f77f af75 	ble.w	8007922 <_printf_float+0x21a>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4652      	mov	r2, sl
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f aeae 	beq.w	80077a4 <_printf_float+0x9c>
 8007a48:	f108 0801 	add.w	r8, r8, #1
 8007a4c:	e7ec      	b.n	8007a28 <_printf_float+0x320>
 8007a4e:	4613      	mov	r3, r2
 8007a50:	4631      	mov	r1, r6
 8007a52:	4642      	mov	r2, r8
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d1bf      	bne.n	80079dc <_printf_float+0x2d4>
 8007a5c:	e6a2      	b.n	80077a4 <_printf_float+0x9c>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4631      	mov	r1, r6
 8007a62:	4628      	mov	r0, r5
 8007a64:	9204      	str	r2, [sp, #16]
 8007a66:	47b8      	blx	r7
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f43f ae9b 	beq.w	80077a4 <_printf_float+0x9c>
 8007a6e:	9b05      	ldr	r3, [sp, #20]
 8007a70:	9a04      	ldr	r2, [sp, #16]
 8007a72:	3301      	adds	r3, #1
 8007a74:	9305      	str	r3, [sp, #20]
 8007a76:	e7b7      	b.n	80079e8 <_printf_float+0x2e0>
 8007a78:	4653      	mov	r3, sl
 8007a7a:	465a      	mov	r2, fp
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	d1be      	bne.n	8007a04 <_printf_float+0x2fc>
 8007a86:	e68d      	b.n	80077a4 <_printf_float+0x9c>
 8007a88:	9a04      	ldr	r2, [sp, #16]
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	4442      	add	r2, r8
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b8      	blx	r7
 8007a94:	3001      	adds	r0, #1
 8007a96:	d1c1      	bne.n	8007a1c <_printf_float+0x314>
 8007a98:	e684      	b.n	80077a4 <_printf_float+0x9c>
 8007a9a:	9a08      	ldr	r2, [sp, #32]
 8007a9c:	2a01      	cmp	r2, #1
 8007a9e:	dc01      	bgt.n	8007aa4 <_printf_float+0x39c>
 8007aa0:	07db      	lsls	r3, r3, #31
 8007aa2:	d537      	bpl.n	8007b14 <_printf_float+0x40c>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4628      	mov	r0, r5
 8007aac:	47b8      	blx	r7
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f43f ae78 	beq.w	80077a4 <_printf_float+0x9c>
 8007ab4:	4653      	mov	r3, sl
 8007ab6:	465a      	mov	r2, fp
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f ae70 	beq.w	80077a4 <_printf_float+0x9c>
 8007ac4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007ac8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad0:	d01b      	beq.n	8007b0a <_printf_float+0x402>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	f108 0201 	add.w	r2, r8, #1
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b8      	blx	r7
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d10e      	bne.n	8007b02 <_printf_float+0x3fa>
 8007ae4:	e65e      	b.n	80077a4 <_printf_float+0x9c>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	464a      	mov	r2, r9
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	f43f ae57 	beq.w	80077a4 <_printf_float+0x9c>
 8007af6:	f108 0801 	add.w	r8, r8, #1
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4543      	cmp	r3, r8
 8007b00:	dcf1      	bgt.n	8007ae6 <_printf_float+0x3de>
 8007b02:	9b04      	ldr	r3, [sp, #16]
 8007b04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b08:	e6db      	b.n	80078c2 <_printf_float+0x1ba>
 8007b0a:	f04f 0800 	mov.w	r8, #0
 8007b0e:	f104 091a 	add.w	r9, r4, #26
 8007b12:	e7f2      	b.n	8007afa <_printf_float+0x3f2>
 8007b14:	2301      	movs	r3, #1
 8007b16:	4642      	mov	r2, r8
 8007b18:	e7df      	b.n	8007ada <_printf_float+0x3d2>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	464a      	mov	r2, r9
 8007b1e:	4631      	mov	r1, r6
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b8      	blx	r7
 8007b24:	3001      	adds	r0, #1
 8007b26:	f43f ae3d 	beq.w	80077a4 <_printf_float+0x9c>
 8007b2a:	f108 0801 	add.w	r8, r8, #1
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b32:	1a5b      	subs	r3, r3, r1
 8007b34:	4543      	cmp	r3, r8
 8007b36:	dcf0      	bgt.n	8007b1a <_printf_float+0x412>
 8007b38:	e6f7      	b.n	800792a <_printf_float+0x222>
 8007b3a:	f04f 0800 	mov.w	r8, #0
 8007b3e:	f104 0919 	add.w	r9, r4, #25
 8007b42:	e7f4      	b.n	8007b2e <_printf_float+0x426>

08007b44 <_printf_common>:
 8007b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b48:	4616      	mov	r6, r2
 8007b4a:	4699      	mov	r9, r3
 8007b4c:	688a      	ldr	r2, [r1, #8]
 8007b4e:	690b      	ldr	r3, [r1, #16]
 8007b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b54:	4293      	cmp	r3, r2
 8007b56:	bfb8      	it	lt
 8007b58:	4613      	movlt	r3, r2
 8007b5a:	6033      	str	r3, [r6, #0]
 8007b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b60:	4607      	mov	r7, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	b10a      	cbz	r2, 8007b6a <_printf_common+0x26>
 8007b66:	3301      	adds	r3, #1
 8007b68:	6033      	str	r3, [r6, #0]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	0699      	lsls	r1, r3, #26
 8007b6e:	bf42      	ittt	mi
 8007b70:	6833      	ldrmi	r3, [r6, #0]
 8007b72:	3302      	addmi	r3, #2
 8007b74:	6033      	strmi	r3, [r6, #0]
 8007b76:	6825      	ldr	r5, [r4, #0]
 8007b78:	f015 0506 	ands.w	r5, r5, #6
 8007b7c:	d106      	bne.n	8007b8c <_printf_common+0x48>
 8007b7e:	f104 0a19 	add.w	sl, r4, #25
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	6832      	ldr	r2, [r6, #0]
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	42ab      	cmp	r3, r5
 8007b8a:	dc26      	bgt.n	8007bda <_printf_common+0x96>
 8007b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b90:	1e13      	subs	r3, r2, #0
 8007b92:	6822      	ldr	r2, [r4, #0]
 8007b94:	bf18      	it	ne
 8007b96:	2301      	movne	r3, #1
 8007b98:	0692      	lsls	r2, r2, #26
 8007b9a:	d42b      	bmi.n	8007bf4 <_printf_common+0xb0>
 8007b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c0      	blx	r8
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d01e      	beq.n	8007be8 <_printf_common+0xa4>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	68e5      	ldr	r5, [r4, #12]
 8007bae:	6832      	ldr	r2, [r6, #0]
 8007bb0:	f003 0306 	and.w	r3, r3, #6
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	bf08      	it	eq
 8007bb8:	1aad      	subeq	r5, r5, r2
 8007bba:	68a3      	ldr	r3, [r4, #8]
 8007bbc:	6922      	ldr	r2, [r4, #16]
 8007bbe:	bf0c      	ite	eq
 8007bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bc4:	2500      	movne	r5, #0
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	bfc4      	itt	gt
 8007bca:	1a9b      	subgt	r3, r3, r2
 8007bcc:	18ed      	addgt	r5, r5, r3
 8007bce:	2600      	movs	r6, #0
 8007bd0:	341a      	adds	r4, #26
 8007bd2:	42b5      	cmp	r5, r6
 8007bd4:	d11a      	bne.n	8007c0c <_printf_common+0xc8>
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	e008      	b.n	8007bec <_printf_common+0xa8>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4652      	mov	r2, sl
 8007bde:	4649      	mov	r1, r9
 8007be0:	4638      	mov	r0, r7
 8007be2:	47c0      	blx	r8
 8007be4:	3001      	adds	r0, #1
 8007be6:	d103      	bne.n	8007bf0 <_printf_common+0xac>
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf0:	3501      	adds	r5, #1
 8007bf2:	e7c6      	b.n	8007b82 <_printf_common+0x3e>
 8007bf4:	18e1      	adds	r1, r4, r3
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	2030      	movs	r0, #48	; 0x30
 8007bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bfe:	4422      	add	r2, r4
 8007c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c08:	3302      	adds	r3, #2
 8007c0a:	e7c7      	b.n	8007b9c <_printf_common+0x58>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	4622      	mov	r2, r4
 8007c10:	4649      	mov	r1, r9
 8007c12:	4638      	mov	r0, r7
 8007c14:	47c0      	blx	r8
 8007c16:	3001      	adds	r0, #1
 8007c18:	d0e6      	beq.n	8007be8 <_printf_common+0xa4>
 8007c1a:	3601      	adds	r6, #1
 8007c1c:	e7d9      	b.n	8007bd2 <_printf_common+0x8e>
	...

08007c20 <_printf_i>:
 8007c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c24:	7e0f      	ldrb	r7, [r1, #24]
 8007c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c28:	2f78      	cmp	r7, #120	; 0x78
 8007c2a:	4691      	mov	r9, r2
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	469a      	mov	sl, r3
 8007c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c36:	d807      	bhi.n	8007c48 <_printf_i+0x28>
 8007c38:	2f62      	cmp	r7, #98	; 0x62
 8007c3a:	d80a      	bhi.n	8007c52 <_printf_i+0x32>
 8007c3c:	2f00      	cmp	r7, #0
 8007c3e:	f000 80d8 	beq.w	8007df2 <_printf_i+0x1d2>
 8007c42:	2f58      	cmp	r7, #88	; 0x58
 8007c44:	f000 80a3 	beq.w	8007d8e <_printf_i+0x16e>
 8007c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c50:	e03a      	b.n	8007cc8 <_printf_i+0xa8>
 8007c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c56:	2b15      	cmp	r3, #21
 8007c58:	d8f6      	bhi.n	8007c48 <_printf_i+0x28>
 8007c5a:	a101      	add	r1, pc, #4	; (adr r1, 8007c60 <_printf_i+0x40>)
 8007c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c60:	08007cb9 	.word	0x08007cb9
 8007c64:	08007ccd 	.word	0x08007ccd
 8007c68:	08007c49 	.word	0x08007c49
 8007c6c:	08007c49 	.word	0x08007c49
 8007c70:	08007c49 	.word	0x08007c49
 8007c74:	08007c49 	.word	0x08007c49
 8007c78:	08007ccd 	.word	0x08007ccd
 8007c7c:	08007c49 	.word	0x08007c49
 8007c80:	08007c49 	.word	0x08007c49
 8007c84:	08007c49 	.word	0x08007c49
 8007c88:	08007c49 	.word	0x08007c49
 8007c8c:	08007dd9 	.word	0x08007dd9
 8007c90:	08007cfd 	.word	0x08007cfd
 8007c94:	08007dbb 	.word	0x08007dbb
 8007c98:	08007c49 	.word	0x08007c49
 8007c9c:	08007c49 	.word	0x08007c49
 8007ca0:	08007dfb 	.word	0x08007dfb
 8007ca4:	08007c49 	.word	0x08007c49
 8007ca8:	08007cfd 	.word	0x08007cfd
 8007cac:	08007c49 	.word	0x08007c49
 8007cb0:	08007c49 	.word	0x08007c49
 8007cb4:	08007dc3 	.word	0x08007dc3
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	1d1a      	adds	r2, r3, #4
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	602a      	str	r2, [r5, #0]
 8007cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e0a3      	b.n	8007e14 <_printf_i+0x1f4>
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	6829      	ldr	r1, [r5, #0]
 8007cd0:	0606      	lsls	r6, r0, #24
 8007cd2:	f101 0304 	add.w	r3, r1, #4
 8007cd6:	d50a      	bpl.n	8007cee <_printf_i+0xce>
 8007cd8:	680e      	ldr	r6, [r1, #0]
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	da03      	bge.n	8007ce8 <_printf_i+0xc8>
 8007ce0:	232d      	movs	r3, #45	; 0x2d
 8007ce2:	4276      	negs	r6, r6
 8007ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce8:	485e      	ldr	r0, [pc, #376]	; (8007e64 <_printf_i+0x244>)
 8007cea:	230a      	movs	r3, #10
 8007cec:	e019      	b.n	8007d22 <_printf_i+0x102>
 8007cee:	680e      	ldr	r6, [r1, #0]
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cf6:	bf18      	it	ne
 8007cf8:	b236      	sxthne	r6, r6
 8007cfa:	e7ef      	b.n	8007cdc <_printf_i+0xbc>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	6029      	str	r1, [r5, #0]
 8007d04:	0601      	lsls	r1, r0, #24
 8007d06:	d501      	bpl.n	8007d0c <_printf_i+0xec>
 8007d08:	681e      	ldr	r6, [r3, #0]
 8007d0a:	e002      	b.n	8007d12 <_printf_i+0xf2>
 8007d0c:	0646      	lsls	r6, r0, #25
 8007d0e:	d5fb      	bpl.n	8007d08 <_printf_i+0xe8>
 8007d10:	881e      	ldrh	r6, [r3, #0]
 8007d12:	4854      	ldr	r0, [pc, #336]	; (8007e64 <_printf_i+0x244>)
 8007d14:	2f6f      	cmp	r7, #111	; 0x6f
 8007d16:	bf0c      	ite	eq
 8007d18:	2308      	moveq	r3, #8
 8007d1a:	230a      	movne	r3, #10
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d22:	6865      	ldr	r5, [r4, #4]
 8007d24:	60a5      	str	r5, [r4, #8]
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	bfa2      	ittt	ge
 8007d2a:	6821      	ldrge	r1, [r4, #0]
 8007d2c:	f021 0104 	bicge.w	r1, r1, #4
 8007d30:	6021      	strge	r1, [r4, #0]
 8007d32:	b90e      	cbnz	r6, 8007d38 <_printf_i+0x118>
 8007d34:	2d00      	cmp	r5, #0
 8007d36:	d04d      	beq.n	8007dd4 <_printf_i+0x1b4>
 8007d38:	4615      	mov	r5, r2
 8007d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d42:	5dc7      	ldrb	r7, [r0, r7]
 8007d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d48:	4637      	mov	r7, r6
 8007d4a:	42bb      	cmp	r3, r7
 8007d4c:	460e      	mov	r6, r1
 8007d4e:	d9f4      	bls.n	8007d3a <_printf_i+0x11a>
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d10b      	bne.n	8007d6c <_printf_i+0x14c>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	07de      	lsls	r6, r3, #31
 8007d58:	d508      	bpl.n	8007d6c <_printf_i+0x14c>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	6861      	ldr	r1, [r4, #4]
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	bfde      	ittt	le
 8007d62:	2330      	movle	r3, #48	; 0x30
 8007d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d6c:	1b52      	subs	r2, r2, r5
 8007d6e:	6122      	str	r2, [r4, #16]
 8007d70:	f8cd a000 	str.w	sl, [sp]
 8007d74:	464b      	mov	r3, r9
 8007d76:	aa03      	add	r2, sp, #12
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7ff fee2 	bl	8007b44 <_printf_common>
 8007d80:	3001      	adds	r0, #1
 8007d82:	d14c      	bne.n	8007e1e <_printf_i+0x1fe>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	b004      	add	sp, #16
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	4835      	ldr	r0, [pc, #212]	; (8007e64 <_printf_i+0x244>)
 8007d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d94:	6829      	ldr	r1, [r5, #0]
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d9c:	6029      	str	r1, [r5, #0]
 8007d9e:	061d      	lsls	r5, r3, #24
 8007da0:	d514      	bpl.n	8007dcc <_printf_i+0x1ac>
 8007da2:	07df      	lsls	r7, r3, #31
 8007da4:	bf44      	itt	mi
 8007da6:	f043 0320 	orrmi.w	r3, r3, #32
 8007daa:	6023      	strmi	r3, [r4, #0]
 8007dac:	b91e      	cbnz	r6, 8007db6 <_printf_i+0x196>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	f023 0320 	bic.w	r3, r3, #32
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	2310      	movs	r3, #16
 8007db8:	e7b0      	b.n	8007d1c <_printf_i+0xfc>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	f043 0320 	orr.w	r3, r3, #32
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	2378      	movs	r3, #120	; 0x78
 8007dc4:	4828      	ldr	r0, [pc, #160]	; (8007e68 <_printf_i+0x248>)
 8007dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dca:	e7e3      	b.n	8007d94 <_printf_i+0x174>
 8007dcc:	0659      	lsls	r1, r3, #25
 8007dce:	bf48      	it	mi
 8007dd0:	b2b6      	uxthmi	r6, r6
 8007dd2:	e7e6      	b.n	8007da2 <_printf_i+0x182>
 8007dd4:	4615      	mov	r5, r2
 8007dd6:	e7bb      	b.n	8007d50 <_printf_i+0x130>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	6826      	ldr	r6, [r4, #0]
 8007ddc:	6961      	ldr	r1, [r4, #20]
 8007dde:	1d18      	adds	r0, r3, #4
 8007de0:	6028      	str	r0, [r5, #0]
 8007de2:	0635      	lsls	r5, r6, #24
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	d501      	bpl.n	8007dec <_printf_i+0x1cc>
 8007de8:	6019      	str	r1, [r3, #0]
 8007dea:	e002      	b.n	8007df2 <_printf_i+0x1d2>
 8007dec:	0670      	lsls	r0, r6, #25
 8007dee:	d5fb      	bpl.n	8007de8 <_printf_i+0x1c8>
 8007df0:	8019      	strh	r1, [r3, #0]
 8007df2:	2300      	movs	r3, #0
 8007df4:	6123      	str	r3, [r4, #16]
 8007df6:	4615      	mov	r5, r2
 8007df8:	e7ba      	b.n	8007d70 <_printf_i+0x150>
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	1d1a      	adds	r2, r3, #4
 8007dfe:	602a      	str	r2, [r5, #0]
 8007e00:	681d      	ldr	r5, [r3, #0]
 8007e02:	6862      	ldr	r2, [r4, #4]
 8007e04:	2100      	movs	r1, #0
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7f8 fa72 	bl	80002f0 <memchr>
 8007e0c:	b108      	cbz	r0, 8007e12 <_printf_i+0x1f2>
 8007e0e:	1b40      	subs	r0, r0, r5
 8007e10:	6060      	str	r0, [r4, #4]
 8007e12:	6863      	ldr	r3, [r4, #4]
 8007e14:	6123      	str	r3, [r4, #16]
 8007e16:	2300      	movs	r3, #0
 8007e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e1c:	e7a8      	b.n	8007d70 <_printf_i+0x150>
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	462a      	mov	r2, r5
 8007e22:	4649      	mov	r1, r9
 8007e24:	4640      	mov	r0, r8
 8007e26:	47d0      	blx	sl
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d0ab      	beq.n	8007d84 <_printf_i+0x164>
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	079b      	lsls	r3, r3, #30
 8007e30:	d413      	bmi.n	8007e5a <_printf_i+0x23a>
 8007e32:	68e0      	ldr	r0, [r4, #12]
 8007e34:	9b03      	ldr	r3, [sp, #12]
 8007e36:	4298      	cmp	r0, r3
 8007e38:	bfb8      	it	lt
 8007e3a:	4618      	movlt	r0, r3
 8007e3c:	e7a4      	b.n	8007d88 <_printf_i+0x168>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4632      	mov	r2, r6
 8007e42:	4649      	mov	r1, r9
 8007e44:	4640      	mov	r0, r8
 8007e46:	47d0      	blx	sl
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d09b      	beq.n	8007d84 <_printf_i+0x164>
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	68e3      	ldr	r3, [r4, #12]
 8007e50:	9903      	ldr	r1, [sp, #12]
 8007e52:	1a5b      	subs	r3, r3, r1
 8007e54:	42ab      	cmp	r3, r5
 8007e56:	dcf2      	bgt.n	8007e3e <_printf_i+0x21e>
 8007e58:	e7eb      	b.n	8007e32 <_printf_i+0x212>
 8007e5a:	2500      	movs	r5, #0
 8007e5c:	f104 0619 	add.w	r6, r4, #25
 8007e60:	e7f5      	b.n	8007e4e <_printf_i+0x22e>
 8007e62:	bf00      	nop
 8007e64:	0800bcfe 	.word	0x0800bcfe
 8007e68:	0800bd0f 	.word	0x0800bd0f

08007e6c <_scanf_float>:
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	b087      	sub	sp, #28
 8007e72:	4617      	mov	r7, r2
 8007e74:	9303      	str	r3, [sp, #12]
 8007e76:	688b      	ldr	r3, [r1, #8]
 8007e78:	1e5a      	subs	r2, r3, #1
 8007e7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e7e:	bf83      	ittte	hi
 8007e80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e84:	195b      	addhi	r3, r3, r5
 8007e86:	9302      	strhi	r3, [sp, #8]
 8007e88:	2300      	movls	r3, #0
 8007e8a:	bf86      	itte	hi
 8007e8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e90:	608b      	strhi	r3, [r1, #8]
 8007e92:	9302      	strls	r3, [sp, #8]
 8007e94:	680b      	ldr	r3, [r1, #0]
 8007e96:	468b      	mov	fp, r1
 8007e98:	2500      	movs	r5, #0
 8007e9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ea2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	465e      	mov	r6, fp
 8007eac:	46aa      	mov	sl, r5
 8007eae:	46a9      	mov	r9, r5
 8007eb0:	9501      	str	r5, [sp, #4]
 8007eb2:	68a2      	ldr	r2, [r4, #8]
 8007eb4:	b152      	cbz	r2, 8007ecc <_scanf_float+0x60>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b4e      	cmp	r3, #78	; 0x4e
 8007ebc:	d864      	bhi.n	8007f88 <_scanf_float+0x11c>
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d83c      	bhi.n	8007f3c <_scanf_float+0xd0>
 8007ec2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ec6:	b2c8      	uxtb	r0, r1
 8007ec8:	280e      	cmp	r0, #14
 8007eca:	d93a      	bls.n	8007f42 <_scanf_float+0xd6>
 8007ecc:	f1b9 0f00 	cmp.w	r9, #0
 8007ed0:	d003      	beq.n	8007eda <_scanf_float+0x6e>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ede:	f1ba 0f01 	cmp.w	sl, #1
 8007ee2:	f200 8113 	bhi.w	800810c <_scanf_float+0x2a0>
 8007ee6:	455e      	cmp	r6, fp
 8007ee8:	f200 8105 	bhi.w	80080f6 <_scanf_float+0x28a>
 8007eec:	2501      	movs	r5, #1
 8007eee:	4628      	mov	r0, r5
 8007ef0:	b007      	add	sp, #28
 8007ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007efa:	2a0d      	cmp	r2, #13
 8007efc:	d8e6      	bhi.n	8007ecc <_scanf_float+0x60>
 8007efe:	a101      	add	r1, pc, #4	; (adr r1, 8007f04 <_scanf_float+0x98>)
 8007f00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f04:	08008043 	.word	0x08008043
 8007f08:	08007ecd 	.word	0x08007ecd
 8007f0c:	08007ecd 	.word	0x08007ecd
 8007f10:	08007ecd 	.word	0x08007ecd
 8007f14:	080080a3 	.word	0x080080a3
 8007f18:	0800807b 	.word	0x0800807b
 8007f1c:	08007ecd 	.word	0x08007ecd
 8007f20:	08007ecd 	.word	0x08007ecd
 8007f24:	08008051 	.word	0x08008051
 8007f28:	08007ecd 	.word	0x08007ecd
 8007f2c:	08007ecd 	.word	0x08007ecd
 8007f30:	08007ecd 	.word	0x08007ecd
 8007f34:	08007ecd 	.word	0x08007ecd
 8007f38:	08008009 	.word	0x08008009
 8007f3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007f40:	e7db      	b.n	8007efa <_scanf_float+0x8e>
 8007f42:	290e      	cmp	r1, #14
 8007f44:	d8c2      	bhi.n	8007ecc <_scanf_float+0x60>
 8007f46:	a001      	add	r0, pc, #4	; (adr r0, 8007f4c <_scanf_float+0xe0>)
 8007f48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f4c:	08007ffb 	.word	0x08007ffb
 8007f50:	08007ecd 	.word	0x08007ecd
 8007f54:	08007ffb 	.word	0x08007ffb
 8007f58:	0800808f 	.word	0x0800808f
 8007f5c:	08007ecd 	.word	0x08007ecd
 8007f60:	08007fa9 	.word	0x08007fa9
 8007f64:	08007fe5 	.word	0x08007fe5
 8007f68:	08007fe5 	.word	0x08007fe5
 8007f6c:	08007fe5 	.word	0x08007fe5
 8007f70:	08007fe5 	.word	0x08007fe5
 8007f74:	08007fe5 	.word	0x08007fe5
 8007f78:	08007fe5 	.word	0x08007fe5
 8007f7c:	08007fe5 	.word	0x08007fe5
 8007f80:	08007fe5 	.word	0x08007fe5
 8007f84:	08007fe5 	.word	0x08007fe5
 8007f88:	2b6e      	cmp	r3, #110	; 0x6e
 8007f8a:	d809      	bhi.n	8007fa0 <_scanf_float+0x134>
 8007f8c:	2b60      	cmp	r3, #96	; 0x60
 8007f8e:	d8b2      	bhi.n	8007ef6 <_scanf_float+0x8a>
 8007f90:	2b54      	cmp	r3, #84	; 0x54
 8007f92:	d077      	beq.n	8008084 <_scanf_float+0x218>
 8007f94:	2b59      	cmp	r3, #89	; 0x59
 8007f96:	d199      	bne.n	8007ecc <_scanf_float+0x60>
 8007f98:	2d07      	cmp	r5, #7
 8007f9a:	d197      	bne.n	8007ecc <_scanf_float+0x60>
 8007f9c:	2508      	movs	r5, #8
 8007f9e:	e029      	b.n	8007ff4 <_scanf_float+0x188>
 8007fa0:	2b74      	cmp	r3, #116	; 0x74
 8007fa2:	d06f      	beq.n	8008084 <_scanf_float+0x218>
 8007fa4:	2b79      	cmp	r3, #121	; 0x79
 8007fa6:	e7f6      	b.n	8007f96 <_scanf_float+0x12a>
 8007fa8:	6821      	ldr	r1, [r4, #0]
 8007faa:	05c8      	lsls	r0, r1, #23
 8007fac:	d51a      	bpl.n	8007fe4 <_scanf_float+0x178>
 8007fae:	9b02      	ldr	r3, [sp, #8]
 8007fb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007fb4:	6021      	str	r1, [r4, #0]
 8007fb6:	f109 0901 	add.w	r9, r9, #1
 8007fba:	b11b      	cbz	r3, 8007fc4 <_scanf_float+0x158>
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	3201      	adds	r2, #1
 8007fc0:	9302      	str	r3, [sp, #8]
 8007fc2:	60a2      	str	r2, [r4, #8]
 8007fc4:	68a3      	ldr	r3, [r4, #8]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	60a3      	str	r3, [r4, #8]
 8007fca:	6923      	ldr	r3, [r4, #16]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	6123      	str	r3, [r4, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	607b      	str	r3, [r7, #4]
 8007fd8:	f340 8084 	ble.w	80080e4 <_scanf_float+0x278>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	603b      	str	r3, [r7, #0]
 8007fe2:	e766      	b.n	8007eb2 <_scanf_float+0x46>
 8007fe4:	eb1a 0f05 	cmn.w	sl, r5
 8007fe8:	f47f af70 	bne.w	8007ecc <_scanf_float+0x60>
 8007fec:	6822      	ldr	r2, [r4, #0]
 8007fee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007ff2:	6022      	str	r2, [r4, #0]
 8007ff4:	f806 3b01 	strb.w	r3, [r6], #1
 8007ff8:	e7e4      	b.n	8007fc4 <_scanf_float+0x158>
 8007ffa:	6822      	ldr	r2, [r4, #0]
 8007ffc:	0610      	lsls	r0, r2, #24
 8007ffe:	f57f af65 	bpl.w	8007ecc <_scanf_float+0x60>
 8008002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008006:	e7f4      	b.n	8007ff2 <_scanf_float+0x186>
 8008008:	f1ba 0f00 	cmp.w	sl, #0
 800800c:	d10e      	bne.n	800802c <_scanf_float+0x1c0>
 800800e:	f1b9 0f00 	cmp.w	r9, #0
 8008012:	d10e      	bne.n	8008032 <_scanf_float+0x1c6>
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800801a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800801e:	d108      	bne.n	8008032 <_scanf_float+0x1c6>
 8008020:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008024:	6022      	str	r2, [r4, #0]
 8008026:	f04f 0a01 	mov.w	sl, #1
 800802a:	e7e3      	b.n	8007ff4 <_scanf_float+0x188>
 800802c:	f1ba 0f02 	cmp.w	sl, #2
 8008030:	d055      	beq.n	80080de <_scanf_float+0x272>
 8008032:	2d01      	cmp	r5, #1
 8008034:	d002      	beq.n	800803c <_scanf_float+0x1d0>
 8008036:	2d04      	cmp	r5, #4
 8008038:	f47f af48 	bne.w	8007ecc <_scanf_float+0x60>
 800803c:	3501      	adds	r5, #1
 800803e:	b2ed      	uxtb	r5, r5
 8008040:	e7d8      	b.n	8007ff4 <_scanf_float+0x188>
 8008042:	f1ba 0f01 	cmp.w	sl, #1
 8008046:	f47f af41 	bne.w	8007ecc <_scanf_float+0x60>
 800804a:	f04f 0a02 	mov.w	sl, #2
 800804e:	e7d1      	b.n	8007ff4 <_scanf_float+0x188>
 8008050:	b97d      	cbnz	r5, 8008072 <_scanf_float+0x206>
 8008052:	f1b9 0f00 	cmp.w	r9, #0
 8008056:	f47f af3c 	bne.w	8007ed2 <_scanf_float+0x66>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008060:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008064:	f47f af39 	bne.w	8007eda <_scanf_float+0x6e>
 8008068:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	2501      	movs	r5, #1
 8008070:	e7c0      	b.n	8007ff4 <_scanf_float+0x188>
 8008072:	2d03      	cmp	r5, #3
 8008074:	d0e2      	beq.n	800803c <_scanf_float+0x1d0>
 8008076:	2d05      	cmp	r5, #5
 8008078:	e7de      	b.n	8008038 <_scanf_float+0x1cc>
 800807a:	2d02      	cmp	r5, #2
 800807c:	f47f af26 	bne.w	8007ecc <_scanf_float+0x60>
 8008080:	2503      	movs	r5, #3
 8008082:	e7b7      	b.n	8007ff4 <_scanf_float+0x188>
 8008084:	2d06      	cmp	r5, #6
 8008086:	f47f af21 	bne.w	8007ecc <_scanf_float+0x60>
 800808a:	2507      	movs	r5, #7
 800808c:	e7b2      	b.n	8007ff4 <_scanf_float+0x188>
 800808e:	6822      	ldr	r2, [r4, #0]
 8008090:	0591      	lsls	r1, r2, #22
 8008092:	f57f af1b 	bpl.w	8007ecc <_scanf_float+0x60>
 8008096:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800809a:	6022      	str	r2, [r4, #0]
 800809c:	f8cd 9004 	str.w	r9, [sp, #4]
 80080a0:	e7a8      	b.n	8007ff4 <_scanf_float+0x188>
 80080a2:	6822      	ldr	r2, [r4, #0]
 80080a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80080a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80080ac:	d006      	beq.n	80080bc <_scanf_float+0x250>
 80080ae:	0550      	lsls	r0, r2, #21
 80080b0:	f57f af0c 	bpl.w	8007ecc <_scanf_float+0x60>
 80080b4:	f1b9 0f00 	cmp.w	r9, #0
 80080b8:	f43f af0f 	beq.w	8007eda <_scanf_float+0x6e>
 80080bc:	0591      	lsls	r1, r2, #22
 80080be:	bf58      	it	pl
 80080c0:	9901      	ldrpl	r1, [sp, #4]
 80080c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080c6:	bf58      	it	pl
 80080c8:	eba9 0101 	subpl.w	r1, r9, r1
 80080cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80080d0:	bf58      	it	pl
 80080d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80080d6:	6022      	str	r2, [r4, #0]
 80080d8:	f04f 0900 	mov.w	r9, #0
 80080dc:	e78a      	b.n	8007ff4 <_scanf_float+0x188>
 80080de:	f04f 0a03 	mov.w	sl, #3
 80080e2:	e787      	b.n	8007ff4 <_scanf_float+0x188>
 80080e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080e8:	4639      	mov	r1, r7
 80080ea:	4640      	mov	r0, r8
 80080ec:	4798      	blx	r3
 80080ee:	2800      	cmp	r0, #0
 80080f0:	f43f aedf 	beq.w	8007eb2 <_scanf_float+0x46>
 80080f4:	e6ea      	b.n	8007ecc <_scanf_float+0x60>
 80080f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080fe:	463a      	mov	r2, r7
 8008100:	4640      	mov	r0, r8
 8008102:	4798      	blx	r3
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	3b01      	subs	r3, #1
 8008108:	6123      	str	r3, [r4, #16]
 800810a:	e6ec      	b.n	8007ee6 <_scanf_float+0x7a>
 800810c:	1e6b      	subs	r3, r5, #1
 800810e:	2b06      	cmp	r3, #6
 8008110:	d825      	bhi.n	800815e <_scanf_float+0x2f2>
 8008112:	2d02      	cmp	r5, #2
 8008114:	d836      	bhi.n	8008184 <_scanf_float+0x318>
 8008116:	455e      	cmp	r6, fp
 8008118:	f67f aee8 	bls.w	8007eec <_scanf_float+0x80>
 800811c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008120:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008124:	463a      	mov	r2, r7
 8008126:	4640      	mov	r0, r8
 8008128:	4798      	blx	r3
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	3b01      	subs	r3, #1
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	e7f1      	b.n	8008116 <_scanf_float+0x2aa>
 8008132:	9802      	ldr	r0, [sp, #8]
 8008134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008138:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800813c:	9002      	str	r0, [sp, #8]
 800813e:	463a      	mov	r2, r7
 8008140:	4640      	mov	r0, r8
 8008142:	4798      	blx	r3
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	3b01      	subs	r3, #1
 8008148:	6123      	str	r3, [r4, #16]
 800814a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800814e:	fa5f fa8a 	uxtb.w	sl, sl
 8008152:	f1ba 0f02 	cmp.w	sl, #2
 8008156:	d1ec      	bne.n	8008132 <_scanf_float+0x2c6>
 8008158:	3d03      	subs	r5, #3
 800815a:	b2ed      	uxtb	r5, r5
 800815c:	1b76      	subs	r6, r6, r5
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	05da      	lsls	r2, r3, #23
 8008162:	d52f      	bpl.n	80081c4 <_scanf_float+0x358>
 8008164:	055b      	lsls	r3, r3, #21
 8008166:	d510      	bpl.n	800818a <_scanf_float+0x31e>
 8008168:	455e      	cmp	r6, fp
 800816a:	f67f aebf 	bls.w	8007eec <_scanf_float+0x80>
 800816e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008176:	463a      	mov	r2, r7
 8008178:	4640      	mov	r0, r8
 800817a:	4798      	blx	r3
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	3b01      	subs	r3, #1
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	e7f1      	b.n	8008168 <_scanf_float+0x2fc>
 8008184:	46aa      	mov	sl, r5
 8008186:	9602      	str	r6, [sp, #8]
 8008188:	e7df      	b.n	800814a <_scanf_float+0x2de>
 800818a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	2965      	cmp	r1, #101	; 0x65
 8008192:	f103 33ff 	add.w	r3, r3, #4294967295
 8008196:	f106 35ff 	add.w	r5, r6, #4294967295
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	d00c      	beq.n	80081b8 <_scanf_float+0x34c>
 800819e:	2945      	cmp	r1, #69	; 0x45
 80081a0:	d00a      	beq.n	80081b8 <_scanf_float+0x34c>
 80081a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081a6:	463a      	mov	r2, r7
 80081a8:	4640      	mov	r0, r8
 80081aa:	4798      	blx	r3
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	1eb5      	subs	r5, r6, #2
 80081b6:	6123      	str	r3, [r4, #16]
 80081b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081bc:	463a      	mov	r2, r7
 80081be:	4640      	mov	r0, r8
 80081c0:	4798      	blx	r3
 80081c2:	462e      	mov	r6, r5
 80081c4:	6825      	ldr	r5, [r4, #0]
 80081c6:	f015 0510 	ands.w	r5, r5, #16
 80081ca:	d14e      	bne.n	800826a <_scanf_float+0x3fe>
 80081cc:	7035      	strb	r5, [r6, #0]
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d8:	d119      	bne.n	800820e <_scanf_float+0x3a2>
 80081da:	9b01      	ldr	r3, [sp, #4]
 80081dc:	454b      	cmp	r3, r9
 80081de:	eba3 0209 	sub.w	r2, r3, r9
 80081e2:	d121      	bne.n	8008228 <_scanf_float+0x3bc>
 80081e4:	2200      	movs	r2, #0
 80081e6:	4659      	mov	r1, fp
 80081e8:	4640      	mov	r0, r8
 80081ea:	f000 fe3b 	bl	8008e64 <_strtod_r>
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	f012 0f02 	tst.w	r2, #2
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	d021      	beq.n	800823e <_scanf_float+0x3d2>
 80081fa:	9903      	ldr	r1, [sp, #12]
 80081fc:	1d1a      	adds	r2, r3, #4
 80081fe:	600a      	str	r2, [r1, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	ed83 0b00 	vstr	d0, [r3]
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60e3      	str	r3, [r4, #12]
 800820c:	e66f      	b.n	8007eee <_scanf_float+0x82>
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0e7      	beq.n	80081e4 <_scanf_float+0x378>
 8008214:	9905      	ldr	r1, [sp, #20]
 8008216:	230a      	movs	r3, #10
 8008218:	462a      	mov	r2, r5
 800821a:	3101      	adds	r1, #1
 800821c:	4640      	mov	r0, r8
 800821e:	f000 fea9 	bl	8008f74 <_strtol_r>
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	9e05      	ldr	r6, [sp, #20]
 8008226:	1ac2      	subs	r2, r0, r3
 8008228:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800822c:	429e      	cmp	r6, r3
 800822e:	bf28      	it	cs
 8008230:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008234:	490e      	ldr	r1, [pc, #56]	; (8008270 <_scanf_float+0x404>)
 8008236:	4630      	mov	r0, r6
 8008238:	f000 f824 	bl	8008284 <siprintf>
 800823c:	e7d2      	b.n	80081e4 <_scanf_float+0x378>
 800823e:	9903      	ldr	r1, [sp, #12]
 8008240:	f012 0f04 	tst.w	r2, #4
 8008244:	f103 0204 	add.w	r2, r3, #4
 8008248:	600a      	str	r2, [r1, #0]
 800824a:	d1d9      	bne.n	8008200 <_scanf_float+0x394>
 800824c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008254:	681e      	ldr	r6, [r3, #0]
 8008256:	d705      	bvc.n	8008264 <_scanf_float+0x3f8>
 8008258:	4806      	ldr	r0, [pc, #24]	; (8008274 <_scanf_float+0x408>)
 800825a:	f000 f80d 	bl	8008278 <nanf>
 800825e:	ed86 0a00 	vstr	s0, [r6]
 8008262:	e7d0      	b.n	8008206 <_scanf_float+0x39a>
 8008264:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008268:	e7f9      	b.n	800825e <_scanf_float+0x3f2>
 800826a:	2500      	movs	r5, #0
 800826c:	e63f      	b.n	8007eee <_scanf_float+0x82>
 800826e:	bf00      	nop
 8008270:	0800bd20 	.word	0x0800bd20
 8008274:	0800c190 	.word	0x0800c190

08008278 <nanf>:
 8008278:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008280 <nanf+0x8>
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	7fc00000 	.word	0x7fc00000

08008284 <siprintf>:
 8008284:	b40e      	push	{r1, r2, r3}
 8008286:	b500      	push	{lr}
 8008288:	b09c      	sub	sp, #112	; 0x70
 800828a:	ab1d      	add	r3, sp, #116	; 0x74
 800828c:	9002      	str	r0, [sp, #8]
 800828e:	9006      	str	r0, [sp, #24]
 8008290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008294:	4809      	ldr	r0, [pc, #36]	; (80082bc <siprintf+0x38>)
 8008296:	9107      	str	r1, [sp, #28]
 8008298:	9104      	str	r1, [sp, #16]
 800829a:	4909      	ldr	r1, [pc, #36]	; (80082c0 <siprintf+0x3c>)
 800829c:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a0:	9105      	str	r1, [sp, #20]
 80082a2:	6800      	ldr	r0, [r0, #0]
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	a902      	add	r1, sp, #8
 80082a8:	f003 f8dc 	bl	800b464 <_svfiprintf_r>
 80082ac:	9b02      	ldr	r3, [sp, #8]
 80082ae:	2200      	movs	r2, #0
 80082b0:	701a      	strb	r2, [r3, #0]
 80082b2:	b01c      	add	sp, #112	; 0x70
 80082b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b8:	b003      	add	sp, #12
 80082ba:	4770      	bx	lr
 80082bc:	24000010 	.word	0x24000010
 80082c0:	ffff0208 	.word	0xffff0208

080082c4 <sulp>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	4604      	mov	r4, r0
 80082c8:	460d      	mov	r5, r1
 80082ca:	4616      	mov	r6, r2
 80082cc:	ec45 4b10 	vmov	d0, r4, r5
 80082d0:	f002 fe2a 	bl	800af28 <__ulp>
 80082d4:	b17e      	cbz	r6, 80082f6 <sulp+0x32>
 80082d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082de:	2b00      	cmp	r3, #0
 80082e0:	dd09      	ble.n	80082f6 <sulp+0x32>
 80082e2:	051b      	lsls	r3, r3, #20
 80082e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80082e8:	2000      	movs	r0, #0
 80082ea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80082ee:	ec41 0b17 	vmov	d7, r0, r1
 80082f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80082f6:	bd70      	pop	{r4, r5, r6, pc}

080082f8 <_strtod_l>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	ed2d 8b0e 	vpush	{d8-d14}
 8008300:	b097      	sub	sp, #92	; 0x5c
 8008302:	461f      	mov	r7, r3
 8008304:	2300      	movs	r3, #0
 8008306:	9312      	str	r3, [sp, #72]	; 0x48
 8008308:	4ba1      	ldr	r3, [pc, #644]	; (8008590 <_strtod_l+0x298>)
 800830a:	920d      	str	r2, [sp, #52]	; 0x34
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	4604      	mov	r4, r0
 8008312:	4618      	mov	r0, r3
 8008314:	468b      	mov	fp, r1
 8008316:	f7f7 ffe3 	bl	80002e0 <strlen>
 800831a:	f04f 0800 	mov.w	r8, #0
 800831e:	4605      	mov	r5, r0
 8008320:	f04f 0900 	mov.w	r9, #0
 8008324:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008328:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800832a:	7813      	ldrb	r3, [r2, #0]
 800832c:	2b2b      	cmp	r3, #43	; 0x2b
 800832e:	d04d      	beq.n	80083cc <_strtod_l+0xd4>
 8008330:	d83a      	bhi.n	80083a8 <_strtod_l+0xb0>
 8008332:	2b0d      	cmp	r3, #13
 8008334:	d833      	bhi.n	800839e <_strtod_l+0xa6>
 8008336:	2b08      	cmp	r3, #8
 8008338:	d833      	bhi.n	80083a2 <_strtod_l+0xaa>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d03d      	beq.n	80083ba <_strtod_l+0xc2>
 800833e:	2300      	movs	r3, #0
 8008340:	9308      	str	r3, [sp, #32]
 8008342:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008344:	7833      	ldrb	r3, [r6, #0]
 8008346:	2b30      	cmp	r3, #48	; 0x30
 8008348:	f040 80b0 	bne.w	80084ac <_strtod_l+0x1b4>
 800834c:	7873      	ldrb	r3, [r6, #1]
 800834e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008352:	2b58      	cmp	r3, #88	; 0x58
 8008354:	d167      	bne.n	8008426 <_strtod_l+0x12e>
 8008356:	9b08      	ldr	r3, [sp, #32]
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	ab12      	add	r3, sp, #72	; 0x48
 800835c:	9702      	str	r7, [sp, #8]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4a8c      	ldr	r2, [pc, #560]	; (8008594 <_strtod_l+0x29c>)
 8008362:	ab13      	add	r3, sp, #76	; 0x4c
 8008364:	a911      	add	r1, sp, #68	; 0x44
 8008366:	4620      	mov	r0, r4
 8008368:	f001 fede 	bl	800a128 <__gethex>
 800836c:	f010 0507 	ands.w	r5, r0, #7
 8008370:	4607      	mov	r7, r0
 8008372:	d005      	beq.n	8008380 <_strtod_l+0x88>
 8008374:	2d06      	cmp	r5, #6
 8008376:	d12b      	bne.n	80083d0 <_strtod_l+0xd8>
 8008378:	3601      	adds	r6, #1
 800837a:	2300      	movs	r3, #0
 800837c:	9611      	str	r6, [sp, #68]	; 0x44
 800837e:	9308      	str	r3, [sp, #32]
 8008380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008382:	2b00      	cmp	r3, #0
 8008384:	f040 854e 	bne.w	8008e24 <_strtod_l+0xb2c>
 8008388:	9b08      	ldr	r3, [sp, #32]
 800838a:	b1e3      	cbz	r3, 80083c6 <_strtod_l+0xce>
 800838c:	ec49 8b17 	vmov	d7, r8, r9
 8008390:	eeb1 0b47 	vneg.f64	d0, d7
 8008394:	b017      	add	sp, #92	; 0x5c
 8008396:	ecbd 8b0e 	vpop	{d8-d14}
 800839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d1cd      	bne.n	800833e <_strtod_l+0x46>
 80083a2:	3201      	adds	r2, #1
 80083a4:	9211      	str	r2, [sp, #68]	; 0x44
 80083a6:	e7bf      	b.n	8008328 <_strtod_l+0x30>
 80083a8:	2b2d      	cmp	r3, #45	; 0x2d
 80083aa:	d1c8      	bne.n	800833e <_strtod_l+0x46>
 80083ac:	2301      	movs	r3, #1
 80083ae:	9308      	str	r3, [sp, #32]
 80083b0:	1c53      	adds	r3, r2, #1
 80083b2:	9311      	str	r3, [sp, #68]	; 0x44
 80083b4:	7853      	ldrb	r3, [r2, #1]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1c3      	bne.n	8008342 <_strtod_l+0x4a>
 80083ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 852d 	bne.w	8008e20 <_strtod_l+0xb28>
 80083c6:	ec49 8b10 	vmov	d0, r8, r9
 80083ca:	e7e3      	b.n	8008394 <_strtod_l+0x9c>
 80083cc:	2300      	movs	r3, #0
 80083ce:	e7ee      	b.n	80083ae <_strtod_l+0xb6>
 80083d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083d2:	b13a      	cbz	r2, 80083e4 <_strtod_l+0xec>
 80083d4:	2135      	movs	r1, #53	; 0x35
 80083d6:	a814      	add	r0, sp, #80	; 0x50
 80083d8:	f002 feae 	bl	800b138 <__copybits>
 80083dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80083de:	4620      	mov	r0, r4
 80083e0:	f002 fa70 	bl	800a8c4 <_Bfree>
 80083e4:	3d01      	subs	r5, #1
 80083e6:	2d04      	cmp	r5, #4
 80083e8:	d806      	bhi.n	80083f8 <_strtod_l+0x100>
 80083ea:	e8df f005 	tbb	[pc, r5]
 80083ee:	030a      	.short	0x030a
 80083f0:	1714      	.short	0x1714
 80083f2:	0a          	.byte	0x0a
 80083f3:	00          	.byte	0x00
 80083f4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80083f8:	073f      	lsls	r7, r7, #28
 80083fa:	d5c1      	bpl.n	8008380 <_strtod_l+0x88>
 80083fc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008400:	e7be      	b.n	8008380 <_strtod_l+0x88>
 8008402:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008406:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008408:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800840c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008410:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008414:	e7f0      	b.n	80083f8 <_strtod_l+0x100>
 8008416:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008598 <_strtod_l+0x2a0>
 800841a:	e7ed      	b.n	80083f8 <_strtod_l+0x100>
 800841c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008420:	f04f 38ff 	mov.w	r8, #4294967295
 8008424:	e7e8      	b.n	80083f8 <_strtod_l+0x100>
 8008426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	9211      	str	r2, [sp, #68]	; 0x44
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	2b30      	cmp	r3, #48	; 0x30
 8008430:	d0f9      	beq.n	8008426 <_strtod_l+0x12e>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0a4      	beq.n	8008380 <_strtod_l+0x88>
 8008436:	2301      	movs	r3, #1
 8008438:	f04f 0a00 	mov.w	sl, #0
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008440:	930a      	str	r3, [sp, #40]	; 0x28
 8008442:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008446:	f8cd a018 	str.w	sl, [sp, #24]
 800844a:	220a      	movs	r2, #10
 800844c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800844e:	7807      	ldrb	r7, [r0, #0]
 8008450:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008454:	b2d9      	uxtb	r1, r3
 8008456:	2909      	cmp	r1, #9
 8008458:	d92a      	bls.n	80084b0 <_strtod_l+0x1b8>
 800845a:	9907      	ldr	r1, [sp, #28]
 800845c:	462a      	mov	r2, r5
 800845e:	f003 fab6 	bl	800b9ce <strncmp>
 8008462:	2800      	cmp	r0, #0
 8008464:	d033      	beq.n	80084ce <_strtod_l+0x1d6>
 8008466:	2000      	movs	r0, #0
 8008468:	9b06      	ldr	r3, [sp, #24]
 800846a:	463a      	mov	r2, r7
 800846c:	4601      	mov	r1, r0
 800846e:	4607      	mov	r7, r0
 8008470:	2a65      	cmp	r2, #101	; 0x65
 8008472:	d001      	beq.n	8008478 <_strtod_l+0x180>
 8008474:	2a45      	cmp	r2, #69	; 0x45
 8008476:	d117      	bne.n	80084a8 <_strtod_l+0x1b0>
 8008478:	b91b      	cbnz	r3, 8008482 <_strtod_l+0x18a>
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	4303      	orrs	r3, r0
 800847e:	d09c      	beq.n	80083ba <_strtod_l+0xc2>
 8008480:	2300      	movs	r3, #0
 8008482:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008486:	f10b 0201 	add.w	r2, fp, #1
 800848a:	9211      	str	r2, [sp, #68]	; 0x44
 800848c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008490:	2a2b      	cmp	r2, #43	; 0x2b
 8008492:	d071      	beq.n	8008578 <_strtod_l+0x280>
 8008494:	2a2d      	cmp	r2, #45	; 0x2d
 8008496:	d077      	beq.n	8008588 <_strtod_l+0x290>
 8008498:	f04f 0e00 	mov.w	lr, #0
 800849c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80084a0:	2d09      	cmp	r5, #9
 80084a2:	d97f      	bls.n	80085a4 <_strtod_l+0x2ac>
 80084a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80084a8:	2500      	movs	r5, #0
 80084aa:	e09b      	b.n	80085e4 <_strtod_l+0x2ec>
 80084ac:	2300      	movs	r3, #0
 80084ae:	e7c3      	b.n	8008438 <_strtod_l+0x140>
 80084b0:	9906      	ldr	r1, [sp, #24]
 80084b2:	2908      	cmp	r1, #8
 80084b4:	bfdd      	ittte	le
 80084b6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80084b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80084bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80084be:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	3001      	adds	r0, #1
 80084c6:	3301      	adds	r3, #1
 80084c8:	9306      	str	r3, [sp, #24]
 80084ca:	9011      	str	r0, [sp, #68]	; 0x44
 80084cc:	e7be      	b.n	800844c <_strtod_l+0x154>
 80084ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d0:	195a      	adds	r2, r3, r5
 80084d2:	9211      	str	r2, [sp, #68]	; 0x44
 80084d4:	5d5a      	ldrb	r2, [r3, r5]
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	b3a3      	cbz	r3, 8008544 <_strtod_l+0x24c>
 80084da:	4607      	mov	r7, r0
 80084dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80084e0:	2909      	cmp	r1, #9
 80084e2:	d912      	bls.n	800850a <_strtod_l+0x212>
 80084e4:	2101      	movs	r1, #1
 80084e6:	e7c3      	b.n	8008470 <_strtod_l+0x178>
 80084e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	9211      	str	r2, [sp, #68]	; 0x44
 80084ee:	785a      	ldrb	r2, [r3, #1]
 80084f0:	3001      	adds	r0, #1
 80084f2:	2a30      	cmp	r2, #48	; 0x30
 80084f4:	d0f8      	beq.n	80084e8 <_strtod_l+0x1f0>
 80084f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80084fa:	2b08      	cmp	r3, #8
 80084fc:	f200 8497 	bhi.w	8008e2e <_strtod_l+0xb36>
 8008500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008502:	930a      	str	r3, [sp, #40]	; 0x28
 8008504:	4607      	mov	r7, r0
 8008506:	2000      	movs	r0, #0
 8008508:	4603      	mov	r3, r0
 800850a:	3a30      	subs	r2, #48	; 0x30
 800850c:	f100 0101 	add.w	r1, r0, #1
 8008510:	d012      	beq.n	8008538 <_strtod_l+0x240>
 8008512:	440f      	add	r7, r1
 8008514:	eb00 0c03 	add.w	ip, r0, r3
 8008518:	4619      	mov	r1, r3
 800851a:	250a      	movs	r5, #10
 800851c:	4561      	cmp	r1, ip
 800851e:	d113      	bne.n	8008548 <_strtod_l+0x250>
 8008520:	1819      	adds	r1, r3, r0
 8008522:	2908      	cmp	r1, #8
 8008524:	f103 0301 	add.w	r3, r3, #1
 8008528:	4403      	add	r3, r0
 800852a:	dc1c      	bgt.n	8008566 <_strtod_l+0x26e>
 800852c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800852e:	210a      	movs	r1, #10
 8008530:	fb01 2200 	mla	r2, r1, r0, r2
 8008534:	9209      	str	r2, [sp, #36]	; 0x24
 8008536:	2100      	movs	r1, #0
 8008538:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800853a:	1c50      	adds	r0, r2, #1
 800853c:	9011      	str	r0, [sp, #68]	; 0x44
 800853e:	7852      	ldrb	r2, [r2, #1]
 8008540:	4608      	mov	r0, r1
 8008542:	e7cb      	b.n	80084dc <_strtod_l+0x1e4>
 8008544:	9806      	ldr	r0, [sp, #24]
 8008546:	e7d4      	b.n	80084f2 <_strtod_l+0x1fa>
 8008548:	2908      	cmp	r1, #8
 800854a:	dc04      	bgt.n	8008556 <_strtod_l+0x25e>
 800854c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800854e:	436e      	muls	r6, r5
 8008550:	9609      	str	r6, [sp, #36]	; 0x24
 8008552:	3101      	adds	r1, #1
 8008554:	e7e2      	b.n	800851c <_strtod_l+0x224>
 8008556:	f101 0e01 	add.w	lr, r1, #1
 800855a:	f1be 0f10 	cmp.w	lr, #16
 800855e:	bfd8      	it	le
 8008560:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008564:	e7f5      	b.n	8008552 <_strtod_l+0x25a>
 8008566:	2b10      	cmp	r3, #16
 8008568:	bfdc      	itt	le
 800856a:	210a      	movle	r1, #10
 800856c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008570:	e7e1      	b.n	8008536 <_strtod_l+0x23e>
 8008572:	2700      	movs	r7, #0
 8008574:	2101      	movs	r1, #1
 8008576:	e780      	b.n	800847a <_strtod_l+0x182>
 8008578:	f04f 0e00 	mov.w	lr, #0
 800857c:	f10b 0202 	add.w	r2, fp, #2
 8008580:	9211      	str	r2, [sp, #68]	; 0x44
 8008582:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008586:	e789      	b.n	800849c <_strtod_l+0x1a4>
 8008588:	f04f 0e01 	mov.w	lr, #1
 800858c:	e7f6      	b.n	800857c <_strtod_l+0x284>
 800858e:	bf00      	nop
 8008590:	0800bfd4 	.word	0x0800bfd4
 8008594:	0800bd28 	.word	0x0800bd28
 8008598:	7ff00000 	.word	0x7ff00000
 800859c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800859e:	1c55      	adds	r5, r2, #1
 80085a0:	9511      	str	r5, [sp, #68]	; 0x44
 80085a2:	7852      	ldrb	r2, [r2, #1]
 80085a4:	2a30      	cmp	r2, #48	; 0x30
 80085a6:	d0f9      	beq.n	800859c <_strtod_l+0x2a4>
 80085a8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80085ac:	2d08      	cmp	r5, #8
 80085ae:	f63f af7b 	bhi.w	80084a8 <_strtod_l+0x1b0>
 80085b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80085b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085b8:	9207      	str	r2, [sp, #28]
 80085ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085bc:	1c55      	adds	r5, r2, #1
 80085be:	9511      	str	r5, [sp, #68]	; 0x44
 80085c0:	7852      	ldrb	r2, [r2, #1]
 80085c2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80085c6:	2e09      	cmp	r6, #9
 80085c8:	d937      	bls.n	800863a <_strtod_l+0x342>
 80085ca:	9e07      	ldr	r6, [sp, #28]
 80085cc:	1bad      	subs	r5, r5, r6
 80085ce:	2d08      	cmp	r5, #8
 80085d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80085d4:	dc02      	bgt.n	80085dc <_strtod_l+0x2e4>
 80085d6:	4565      	cmp	r5, ip
 80085d8:	bfa8      	it	ge
 80085da:	4665      	movge	r5, ip
 80085dc:	f1be 0f00 	cmp.w	lr, #0
 80085e0:	d000      	beq.n	80085e4 <_strtod_l+0x2ec>
 80085e2:	426d      	negs	r5, r5
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d14d      	bne.n	8008684 <_strtod_l+0x38c>
 80085e8:	9b04      	ldr	r3, [sp, #16]
 80085ea:	4303      	orrs	r3, r0
 80085ec:	f47f aec8 	bne.w	8008380 <_strtod_l+0x88>
 80085f0:	2900      	cmp	r1, #0
 80085f2:	f47f aee2 	bne.w	80083ba <_strtod_l+0xc2>
 80085f6:	2a69      	cmp	r2, #105	; 0x69
 80085f8:	d027      	beq.n	800864a <_strtod_l+0x352>
 80085fa:	dc24      	bgt.n	8008646 <_strtod_l+0x34e>
 80085fc:	2a49      	cmp	r2, #73	; 0x49
 80085fe:	d024      	beq.n	800864a <_strtod_l+0x352>
 8008600:	2a4e      	cmp	r2, #78	; 0x4e
 8008602:	f47f aeda 	bne.w	80083ba <_strtod_l+0xc2>
 8008606:	4996      	ldr	r1, [pc, #600]	; (8008860 <_strtod_l+0x568>)
 8008608:	a811      	add	r0, sp, #68	; 0x44
 800860a:	f001 ffe5 	bl	800a5d8 <__match>
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f aed3 	beq.w	80083ba <_strtod_l+0xc2>
 8008614:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b28      	cmp	r3, #40	; 0x28
 800861a:	d12d      	bne.n	8008678 <_strtod_l+0x380>
 800861c:	4991      	ldr	r1, [pc, #580]	; (8008864 <_strtod_l+0x56c>)
 800861e:	aa14      	add	r2, sp, #80	; 0x50
 8008620:	a811      	add	r0, sp, #68	; 0x44
 8008622:	f001 ffed 	bl	800a600 <__hexnan>
 8008626:	2805      	cmp	r0, #5
 8008628:	d126      	bne.n	8008678 <_strtod_l+0x380>
 800862a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008630:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008634:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008638:	e6a2      	b.n	8008380 <_strtod_l+0x88>
 800863a:	250a      	movs	r5, #10
 800863c:	fb05 250c 	mla	r5, r5, ip, r2
 8008640:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008644:	e7b9      	b.n	80085ba <_strtod_l+0x2c2>
 8008646:	2a6e      	cmp	r2, #110	; 0x6e
 8008648:	e7db      	b.n	8008602 <_strtod_l+0x30a>
 800864a:	4987      	ldr	r1, [pc, #540]	; (8008868 <_strtod_l+0x570>)
 800864c:	a811      	add	r0, sp, #68	; 0x44
 800864e:	f001 ffc3 	bl	800a5d8 <__match>
 8008652:	2800      	cmp	r0, #0
 8008654:	f43f aeb1 	beq.w	80083ba <_strtod_l+0xc2>
 8008658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800865a:	4984      	ldr	r1, [pc, #528]	; (800886c <_strtod_l+0x574>)
 800865c:	3b01      	subs	r3, #1
 800865e:	a811      	add	r0, sp, #68	; 0x44
 8008660:	9311      	str	r3, [sp, #68]	; 0x44
 8008662:	f001 ffb9 	bl	800a5d8 <__match>
 8008666:	b910      	cbnz	r0, 800866e <_strtod_l+0x376>
 8008668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800866a:	3301      	adds	r3, #1
 800866c:	9311      	str	r3, [sp, #68]	; 0x44
 800866e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008880 <_strtod_l+0x588>
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	e683      	b.n	8008380 <_strtod_l+0x88>
 8008678:	487d      	ldr	r0, [pc, #500]	; (8008870 <_strtod_l+0x578>)
 800867a:	f003 f94d 	bl	800b918 <nan>
 800867e:	ec59 8b10 	vmov	r8, r9, d0
 8008682:	e67d      	b.n	8008380 <_strtod_l+0x88>
 8008684:	1bea      	subs	r2, r5, r7
 8008686:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800868a:	9207      	str	r2, [sp, #28]
 800868c:	9a06      	ldr	r2, [sp, #24]
 800868e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008692:	2a00      	cmp	r2, #0
 8008694:	bf08      	it	eq
 8008696:	461a      	moveq	r2, r3
 8008698:	2b10      	cmp	r3, #16
 800869a:	9206      	str	r2, [sp, #24]
 800869c:	461a      	mov	r2, r3
 800869e:	bfa8      	it	ge
 80086a0:	2210      	movge	r2, #16
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	ec59 8b17 	vmov	r8, r9, d7
 80086a8:	dd0c      	ble.n	80086c4 <_strtod_l+0x3cc>
 80086aa:	4972      	ldr	r1, [pc, #456]	; (8008874 <_strtod_l+0x57c>)
 80086ac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80086b0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80086b4:	ee06 aa90 	vmov	s13, sl
 80086b8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80086bc:	eea7 6b05 	vfma.f64	d6, d7, d5
 80086c0:	ec59 8b16 	vmov	r8, r9, d6
 80086c4:	2b0f      	cmp	r3, #15
 80086c6:	dc36      	bgt.n	8008736 <_strtod_l+0x43e>
 80086c8:	9907      	ldr	r1, [sp, #28]
 80086ca:	2900      	cmp	r1, #0
 80086cc:	f43f ae58 	beq.w	8008380 <_strtod_l+0x88>
 80086d0:	dd23      	ble.n	800871a <_strtod_l+0x422>
 80086d2:	2916      	cmp	r1, #22
 80086d4:	dc0b      	bgt.n	80086ee <_strtod_l+0x3f6>
 80086d6:	4b67      	ldr	r3, [pc, #412]	; (8008874 <_strtod_l+0x57c>)
 80086d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80086dc:	ed93 7b00 	vldr	d7, [r3]
 80086e0:	ec49 8b16 	vmov	d6, r8, r9
 80086e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086e8:	ec59 8b17 	vmov	r8, r9, d7
 80086ec:	e648      	b.n	8008380 <_strtod_l+0x88>
 80086ee:	9807      	ldr	r0, [sp, #28]
 80086f0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80086f4:	4281      	cmp	r1, r0
 80086f6:	db1e      	blt.n	8008736 <_strtod_l+0x43e>
 80086f8:	4a5e      	ldr	r2, [pc, #376]	; (8008874 <_strtod_l+0x57c>)
 80086fa:	f1c3 030f 	rsb	r3, r3, #15
 80086fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008702:	ed91 7b00 	vldr	d7, [r1]
 8008706:	ec49 8b16 	vmov	d6, r8, r9
 800870a:	1ac3      	subs	r3, r0, r3
 800870c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008710:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008714:	ed92 6b00 	vldr	d6, [r2]
 8008718:	e7e4      	b.n	80086e4 <_strtod_l+0x3ec>
 800871a:	9907      	ldr	r1, [sp, #28]
 800871c:	3116      	adds	r1, #22
 800871e:	db0a      	blt.n	8008736 <_strtod_l+0x43e>
 8008720:	4b54      	ldr	r3, [pc, #336]	; (8008874 <_strtod_l+0x57c>)
 8008722:	1b7d      	subs	r5, r7, r5
 8008724:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008728:	ed95 7b00 	vldr	d7, [r5]
 800872c:	ec49 8b16 	vmov	d6, r8, r9
 8008730:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008734:	e7d8      	b.n	80086e8 <_strtod_l+0x3f0>
 8008736:	9907      	ldr	r1, [sp, #28]
 8008738:	1a9a      	subs	r2, r3, r2
 800873a:	440a      	add	r2, r1
 800873c:	2a00      	cmp	r2, #0
 800873e:	dd6f      	ble.n	8008820 <_strtod_l+0x528>
 8008740:	f012 000f 	ands.w	r0, r2, #15
 8008744:	d00a      	beq.n	800875c <_strtod_l+0x464>
 8008746:	494b      	ldr	r1, [pc, #300]	; (8008874 <_strtod_l+0x57c>)
 8008748:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800874c:	ed91 7b00 	vldr	d7, [r1]
 8008750:	ec49 8b16 	vmov	d6, r8, r9
 8008754:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008758:	ec59 8b17 	vmov	r8, r9, d7
 800875c:	f032 020f 	bics.w	r2, r2, #15
 8008760:	d04f      	beq.n	8008802 <_strtod_l+0x50a>
 8008762:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008766:	dd22      	ble.n	80087ae <_strtod_l+0x4b6>
 8008768:	2500      	movs	r5, #0
 800876a:	462e      	mov	r6, r5
 800876c:	9506      	str	r5, [sp, #24]
 800876e:	462f      	mov	r7, r5
 8008770:	2322      	movs	r3, #34	; 0x22
 8008772:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008880 <_strtod_l+0x588>
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	f04f 0800 	mov.w	r8, #0
 800877c:	9b06      	ldr	r3, [sp, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f43f adfe 	beq.w	8008380 <_strtod_l+0x88>
 8008784:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008786:	4620      	mov	r0, r4
 8008788:	f002 f89c 	bl	800a8c4 <_Bfree>
 800878c:	4639      	mov	r1, r7
 800878e:	4620      	mov	r0, r4
 8008790:	f002 f898 	bl	800a8c4 <_Bfree>
 8008794:	4631      	mov	r1, r6
 8008796:	4620      	mov	r0, r4
 8008798:	f002 f894 	bl	800a8c4 <_Bfree>
 800879c:	9906      	ldr	r1, [sp, #24]
 800879e:	4620      	mov	r0, r4
 80087a0:	f002 f890 	bl	800a8c4 <_Bfree>
 80087a4:	4629      	mov	r1, r5
 80087a6:	4620      	mov	r0, r4
 80087a8:	f002 f88c 	bl	800a8c4 <_Bfree>
 80087ac:	e5e8      	b.n	8008380 <_strtod_l+0x88>
 80087ae:	2000      	movs	r0, #0
 80087b0:	ec49 8b17 	vmov	d7, r8, r9
 80087b4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008878 <_strtod_l+0x580>
 80087b8:	1112      	asrs	r2, r2, #4
 80087ba:	4601      	mov	r1, r0
 80087bc:	2a01      	cmp	r2, #1
 80087be:	dc23      	bgt.n	8008808 <_strtod_l+0x510>
 80087c0:	b108      	cbz	r0, 80087c6 <_strtod_l+0x4ce>
 80087c2:	ec59 8b17 	vmov	r8, r9, d7
 80087c6:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <_strtod_l+0x580>)
 80087c8:	482c      	ldr	r0, [pc, #176]	; (800887c <_strtod_l+0x584>)
 80087ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80087ce:	ed92 7b00 	vldr	d7, [r2]
 80087d2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80087d6:	ec49 8b16 	vmov	d6, r8, r9
 80087da:	4a29      	ldr	r2, [pc, #164]	; (8008880 <_strtod_l+0x588>)
 80087dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087e0:	ee17 1a90 	vmov	r1, s15
 80087e4:	400a      	ands	r2, r1
 80087e6:	4282      	cmp	r2, r0
 80087e8:	ec59 8b17 	vmov	r8, r9, d7
 80087ec:	d8bc      	bhi.n	8008768 <_strtod_l+0x470>
 80087ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80087f2:	4282      	cmp	r2, r0
 80087f4:	bf86      	itte	hi
 80087f6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008884 <_strtod_l+0x58c>
 80087fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80087fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008802:	2200      	movs	r2, #0
 8008804:	9204      	str	r2, [sp, #16]
 8008806:	e078      	b.n	80088fa <_strtod_l+0x602>
 8008808:	07d6      	lsls	r6, r2, #31
 800880a:	d504      	bpl.n	8008816 <_strtod_l+0x51e>
 800880c:	ed9c 6b00 	vldr	d6, [ip]
 8008810:	2001      	movs	r0, #1
 8008812:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008816:	3101      	adds	r1, #1
 8008818:	1052      	asrs	r2, r2, #1
 800881a:	f10c 0c08 	add.w	ip, ip, #8
 800881e:	e7cd      	b.n	80087bc <_strtod_l+0x4c4>
 8008820:	d0ef      	beq.n	8008802 <_strtod_l+0x50a>
 8008822:	4252      	negs	r2, r2
 8008824:	f012 000f 	ands.w	r0, r2, #15
 8008828:	d00a      	beq.n	8008840 <_strtod_l+0x548>
 800882a:	4912      	ldr	r1, [pc, #72]	; (8008874 <_strtod_l+0x57c>)
 800882c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008830:	ed91 7b00 	vldr	d7, [r1]
 8008834:	ec49 8b16 	vmov	d6, r8, r9
 8008838:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800883c:	ec59 8b17 	vmov	r8, r9, d7
 8008840:	1112      	asrs	r2, r2, #4
 8008842:	d0de      	beq.n	8008802 <_strtod_l+0x50a>
 8008844:	2a1f      	cmp	r2, #31
 8008846:	dd1f      	ble.n	8008888 <_strtod_l+0x590>
 8008848:	2500      	movs	r5, #0
 800884a:	462e      	mov	r6, r5
 800884c:	9506      	str	r5, [sp, #24]
 800884e:	462f      	mov	r7, r5
 8008850:	2322      	movs	r3, #34	; 0x22
 8008852:	f04f 0800 	mov.w	r8, #0
 8008856:	f04f 0900 	mov.w	r9, #0
 800885a:	6023      	str	r3, [r4, #0]
 800885c:	e78e      	b.n	800877c <_strtod_l+0x484>
 800885e:	bf00      	nop
 8008860:	0800bcf9 	.word	0x0800bcf9
 8008864:	0800bd3c 	.word	0x0800bd3c
 8008868:	0800bcf1 	.word	0x0800bcf1
 800886c:	0800be7c 	.word	0x0800be7c
 8008870:	0800c190 	.word	0x0800c190
 8008874:	0800c070 	.word	0x0800c070
 8008878:	0800c048 	.word	0x0800c048
 800887c:	7ca00000 	.word	0x7ca00000
 8008880:	7ff00000 	.word	0x7ff00000
 8008884:	7fefffff 	.word	0x7fefffff
 8008888:	f012 0110 	ands.w	r1, r2, #16
 800888c:	bf18      	it	ne
 800888e:	216a      	movne	r1, #106	; 0x6a
 8008890:	9104      	str	r1, [sp, #16]
 8008892:	ec49 8b17 	vmov	d7, r8, r9
 8008896:	49be      	ldr	r1, [pc, #760]	; (8008b90 <_strtod_l+0x898>)
 8008898:	2000      	movs	r0, #0
 800889a:	07d6      	lsls	r6, r2, #31
 800889c:	d504      	bpl.n	80088a8 <_strtod_l+0x5b0>
 800889e:	ed91 6b00 	vldr	d6, [r1]
 80088a2:	2001      	movs	r0, #1
 80088a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088a8:	1052      	asrs	r2, r2, #1
 80088aa:	f101 0108 	add.w	r1, r1, #8
 80088ae:	d1f4      	bne.n	800889a <_strtod_l+0x5a2>
 80088b0:	b108      	cbz	r0, 80088b6 <_strtod_l+0x5be>
 80088b2:	ec59 8b17 	vmov	r8, r9, d7
 80088b6:	9a04      	ldr	r2, [sp, #16]
 80088b8:	b1c2      	cbz	r2, 80088ec <_strtod_l+0x5f4>
 80088ba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80088be:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	4648      	mov	r0, r9
 80088c6:	dd11      	ble.n	80088ec <_strtod_l+0x5f4>
 80088c8:	2a1f      	cmp	r2, #31
 80088ca:	f340 812e 	ble.w	8008b2a <_strtod_l+0x832>
 80088ce:	2a34      	cmp	r2, #52	; 0x34
 80088d0:	bfde      	ittt	le
 80088d2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80088d6:	f04f 32ff 	movle.w	r2, #4294967295
 80088da:	fa02 f101 	lslle.w	r1, r2, r1
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	bfcc      	ite	gt
 80088e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80088e8:	ea01 0900 	andle.w	r9, r1, r0
 80088ec:	ec49 8b17 	vmov	d7, r8, r9
 80088f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f8:	d0a6      	beq.n	8008848 <_strtod_l+0x550>
 80088fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088fc:	9200      	str	r2, [sp, #0]
 80088fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008900:	9a06      	ldr	r2, [sp, #24]
 8008902:	4620      	mov	r0, r4
 8008904:	f002 f846 	bl	800a994 <__s2b>
 8008908:	9006      	str	r0, [sp, #24]
 800890a:	2800      	cmp	r0, #0
 800890c:	f43f af2c 	beq.w	8008768 <_strtod_l+0x470>
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	1b7d      	subs	r5, r7, r5
 8008914:	2b00      	cmp	r3, #0
 8008916:	bfb4      	ite	lt
 8008918:	462b      	movlt	r3, r5
 800891a:	2300      	movge	r3, #0
 800891c:	9309      	str	r3, [sp, #36]	; 0x24
 800891e:	9b07      	ldr	r3, [sp, #28]
 8008920:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008b70 <_strtod_l+0x878>
 8008924:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008b78 <_strtod_l+0x880>
 8008928:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008b80 <_strtod_l+0x888>
 800892c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008930:	2500      	movs	r5, #0
 8008932:	930c      	str	r3, [sp, #48]	; 0x30
 8008934:	462e      	mov	r6, r5
 8008936:	9b06      	ldr	r3, [sp, #24]
 8008938:	4620      	mov	r0, r4
 800893a:	6859      	ldr	r1, [r3, #4]
 800893c:	f001 ff82 	bl	800a844 <_Balloc>
 8008940:	4607      	mov	r7, r0
 8008942:	2800      	cmp	r0, #0
 8008944:	f43f af14 	beq.w	8008770 <_strtod_l+0x478>
 8008948:	9b06      	ldr	r3, [sp, #24]
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	3202      	adds	r2, #2
 800894e:	f103 010c 	add.w	r1, r3, #12
 8008952:	0092      	lsls	r2, r2, #2
 8008954:	300c      	adds	r0, #12
 8008956:	f7fe fe2f 	bl	80075b8 <memcpy>
 800895a:	ec49 8b10 	vmov	d0, r8, r9
 800895e:	aa14      	add	r2, sp, #80	; 0x50
 8008960:	a913      	add	r1, sp, #76	; 0x4c
 8008962:	4620      	mov	r0, r4
 8008964:	f002 fb5c 	bl	800b020 <__d2b>
 8008968:	ec49 8b18 	vmov	d8, r8, r9
 800896c:	9012      	str	r0, [sp, #72]	; 0x48
 800896e:	2800      	cmp	r0, #0
 8008970:	f43f aefe 	beq.w	8008770 <_strtod_l+0x478>
 8008974:	2101      	movs	r1, #1
 8008976:	4620      	mov	r0, r4
 8008978:	f002 f8a6 	bl	800aac8 <__i2b>
 800897c:	4606      	mov	r6, r0
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f aef6 	beq.w	8008770 <_strtod_l+0x478>
 8008984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008986:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfab      	itete	ge
 800898c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800898e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008990:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008994:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008998:	bfac      	ite	ge
 800899a:	eb03 0b02 	addge.w	fp, r3, r2
 800899e:	eba2 0a03 	sublt.w	sl, r2, r3
 80089a2:	9a04      	ldr	r2, [sp, #16]
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	440b      	add	r3, r1
 80089a8:	4a7a      	ldr	r2, [pc, #488]	; (8008b94 <_strtod_l+0x89c>)
 80089aa:	3b01      	subs	r3, #1
 80089ac:	4293      	cmp	r3, r2
 80089ae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80089b2:	f280 80cd 	bge.w	8008b50 <_strtod_l+0x858>
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	2a1f      	cmp	r2, #31
 80089ba:	eba1 0102 	sub.w	r1, r1, r2
 80089be:	f04f 0001 	mov.w	r0, #1
 80089c2:	f300 80b9 	bgt.w	8008b38 <_strtod_l+0x840>
 80089c6:	fa00 f302 	lsl.w	r3, r0, r2
 80089ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80089cc:	2300      	movs	r3, #0
 80089ce:	930a      	str	r3, [sp, #40]	; 0x28
 80089d0:	eb0b 0301 	add.w	r3, fp, r1
 80089d4:	9a04      	ldr	r2, [sp, #16]
 80089d6:	459b      	cmp	fp, r3
 80089d8:	448a      	add	sl, r1
 80089da:	4492      	add	sl, r2
 80089dc:	465a      	mov	r2, fp
 80089de:	bfa8      	it	ge
 80089e0:	461a      	movge	r2, r3
 80089e2:	4552      	cmp	r2, sl
 80089e4:	bfa8      	it	ge
 80089e6:	4652      	movge	r2, sl
 80089e8:	2a00      	cmp	r2, #0
 80089ea:	bfc2      	ittt	gt
 80089ec:	1a9b      	subgt	r3, r3, r2
 80089ee:	ebaa 0a02 	subgt.w	sl, sl, r2
 80089f2:	ebab 0b02 	subgt.w	fp, fp, r2
 80089f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	dd18      	ble.n	8008a2e <_strtod_l+0x736>
 80089fc:	4631      	mov	r1, r6
 80089fe:	4620      	mov	r0, r4
 8008a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a02:	f002 f921 	bl	800ac48 <__pow5mult>
 8008a06:	4606      	mov	r6, r0
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f43f aeb1 	beq.w	8008770 <_strtod_l+0x478>
 8008a0e:	4601      	mov	r1, r0
 8008a10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a12:	4620      	mov	r0, r4
 8008a14:	f002 f86e 	bl	800aaf4 <__multiply>
 8008a18:	900e      	str	r0, [sp, #56]	; 0x38
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	f43f aea8 	beq.w	8008770 <_strtod_l+0x478>
 8008a20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a22:	4620      	mov	r0, r4
 8008a24:	f001 ff4e 	bl	800a8c4 <_Bfree>
 8008a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a2c:	9212      	str	r2, [sp, #72]	; 0x48
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f300 8093 	bgt.w	8008b5a <_strtod_l+0x862>
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dd08      	ble.n	8008a4c <_strtod_l+0x754>
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f002 f902 	bl	800ac48 <__pow5mult>
 8008a44:	4607      	mov	r7, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f ae92 	beq.w	8008770 <_strtod_l+0x478>
 8008a4c:	f1ba 0f00 	cmp.w	sl, #0
 8008a50:	dd08      	ble.n	8008a64 <_strtod_l+0x76c>
 8008a52:	4639      	mov	r1, r7
 8008a54:	4652      	mov	r2, sl
 8008a56:	4620      	mov	r0, r4
 8008a58:	f002 f950 	bl	800acfc <__lshift>
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f43f ae86 	beq.w	8008770 <_strtod_l+0x478>
 8008a64:	f1bb 0f00 	cmp.w	fp, #0
 8008a68:	dd08      	ble.n	8008a7c <_strtod_l+0x784>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	465a      	mov	r2, fp
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f002 f944 	bl	800acfc <__lshift>
 8008a74:	4606      	mov	r6, r0
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f ae7a 	beq.w	8008770 <_strtod_l+0x478>
 8008a7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a7e:	463a      	mov	r2, r7
 8008a80:	4620      	mov	r0, r4
 8008a82:	f002 f9c7 	bl	800ae14 <__mdiff>
 8008a86:	4605      	mov	r5, r0
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	f43f ae71 	beq.w	8008770 <_strtod_l+0x478>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008a94:	60c3      	str	r3, [r0, #12]
 8008a96:	4631      	mov	r1, r6
 8008a98:	f002 f9a0 	bl	800addc <__mcmp>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	da7d      	bge.n	8008b9c <_strtod_l+0x8a4>
 8008aa0:	ea5a 0308 	orrs.w	r3, sl, r8
 8008aa4:	f040 80a3 	bne.w	8008bee <_strtod_l+0x8f6>
 8008aa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f040 809e 	bne.w	8008bee <_strtod_l+0x8f6>
 8008ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ab6:	0d1b      	lsrs	r3, r3, #20
 8008ab8:	051b      	lsls	r3, r3, #20
 8008aba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008abe:	f240 8096 	bls.w	8008bee <_strtod_l+0x8f6>
 8008ac2:	696b      	ldr	r3, [r5, #20]
 8008ac4:	b91b      	cbnz	r3, 8008ace <_strtod_l+0x7d6>
 8008ac6:	692b      	ldr	r3, [r5, #16]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	f340 8090 	ble.w	8008bee <_strtod_l+0x8f6>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f002 f912 	bl	800acfc <__lshift>
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4605      	mov	r5, r0
 8008adc:	f002 f97e 	bl	800addc <__mcmp>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	f340 8084 	ble.w	8008bee <_strtod_l+0x8f6>
 8008ae6:	9904      	ldr	r1, [sp, #16]
 8008ae8:	4a2b      	ldr	r2, [pc, #172]	; (8008b98 <_strtod_l+0x8a0>)
 8008aea:	464b      	mov	r3, r9
 8008aec:	2900      	cmp	r1, #0
 8008aee:	f000 809d 	beq.w	8008c2c <_strtod_l+0x934>
 8008af2:	ea02 0109 	and.w	r1, r2, r9
 8008af6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008afa:	f300 8097 	bgt.w	8008c2c <_strtod_l+0x934>
 8008afe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b02:	f77f aea5 	ble.w	8008850 <_strtod_l+0x558>
 8008b06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008b88 <_strtod_l+0x890>
 8008b0a:	ec49 8b16 	vmov	d6, r8, r9
 8008b0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b12:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b16:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	bf08      	it	eq
 8008b1e:	2322      	moveq	r3, #34	; 0x22
 8008b20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b24:	bf08      	it	eq
 8008b26:	6023      	streq	r3, [r4, #0]
 8008b28:	e62c      	b.n	8008784 <_strtod_l+0x48c>
 8008b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b32:	ea02 0808 	and.w	r8, r2, r8
 8008b36:	e6d9      	b.n	80088ec <_strtod_l+0x5f4>
 8008b38:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008b3c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008b40:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008b44:	33e2      	adds	r3, #226	; 0xe2
 8008b46:	fa00 f303 	lsl.w	r3, r0, r3
 8008b4a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008b4e:	e73f      	b.n	80089d0 <_strtod_l+0x6d8>
 8008b50:	2200      	movs	r2, #0
 8008b52:	2301      	movs	r3, #1
 8008b54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b58:	e73a      	b.n	80089d0 <_strtod_l+0x6d8>
 8008b5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f002 f8cc 	bl	800acfc <__lshift>
 8008b64:	9012      	str	r0, [sp, #72]	; 0x48
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f47f af64 	bne.w	8008a34 <_strtod_l+0x73c>
 8008b6c:	e600      	b.n	8008770 <_strtod_l+0x478>
 8008b6e:	bf00      	nop
 8008b70:	94a03595 	.word	0x94a03595
 8008b74:	3fcfffff 	.word	0x3fcfffff
 8008b78:	94a03595 	.word	0x94a03595
 8008b7c:	3fdfffff 	.word	0x3fdfffff
 8008b80:	35afe535 	.word	0x35afe535
 8008b84:	3fe00000 	.word	0x3fe00000
 8008b88:	00000000 	.word	0x00000000
 8008b8c:	39500000 	.word	0x39500000
 8008b90:	0800bd50 	.word	0x0800bd50
 8008b94:	fffffc02 	.word	0xfffffc02
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	46cb      	mov	fp, r9
 8008b9e:	d15f      	bne.n	8008c60 <_strtod_l+0x968>
 8008ba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ba4:	f1ba 0f00 	cmp.w	sl, #0
 8008ba8:	d02a      	beq.n	8008c00 <_strtod_l+0x908>
 8008baa:	4aa7      	ldr	r2, [pc, #668]	; (8008e48 <_strtod_l+0xb50>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d12b      	bne.n	8008c08 <_strtod_l+0x910>
 8008bb0:	9b04      	ldr	r3, [sp, #16]
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	b1fb      	cbz	r3, 8008bf6 <_strtod_l+0x8fe>
 8008bb6:	4ba5      	ldr	r3, [pc, #660]	; (8008e4c <_strtod_l+0xb54>)
 8008bb8:	ea09 0303 	and.w	r3, r9, r3
 8008bbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8008bc4:	d81a      	bhi.n	8008bfc <_strtod_l+0x904>
 8008bc6:	0d1b      	lsrs	r3, r3, #20
 8008bc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d119      	bne.n	8008c08 <_strtod_l+0x910>
 8008bd4:	4b9e      	ldr	r3, [pc, #632]	; (8008e50 <_strtod_l+0xb58>)
 8008bd6:	459b      	cmp	fp, r3
 8008bd8:	d102      	bne.n	8008be0 <_strtod_l+0x8e8>
 8008bda:	3201      	adds	r2, #1
 8008bdc:	f43f adc8 	beq.w	8008770 <_strtod_l+0x478>
 8008be0:	4b9a      	ldr	r3, [pc, #616]	; (8008e4c <_strtod_l+0xb54>)
 8008be2:	ea0b 0303 	and.w	r3, fp, r3
 8008be6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008bea:	f04f 0800 	mov.w	r8, #0
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d188      	bne.n	8008b06 <_strtod_l+0x80e>
 8008bf4:	e5c6      	b.n	8008784 <_strtod_l+0x48c>
 8008bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfa:	e7e9      	b.n	8008bd0 <_strtod_l+0x8d8>
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e7e7      	b.n	8008bd0 <_strtod_l+0x8d8>
 8008c00:	ea53 0308 	orrs.w	r3, r3, r8
 8008c04:	f43f af6f 	beq.w	8008ae6 <_strtod_l+0x7ee>
 8008c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0a:	b1cb      	cbz	r3, 8008c40 <_strtod_l+0x948>
 8008c0c:	ea13 0f0b 	tst.w	r3, fp
 8008c10:	d0ed      	beq.n	8008bee <_strtod_l+0x8f6>
 8008c12:	9a04      	ldr	r2, [sp, #16]
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f1ba 0f00 	cmp.w	sl, #0
 8008c1c:	d014      	beq.n	8008c48 <_strtod_l+0x950>
 8008c1e:	f7ff fb51 	bl	80082c4 <sulp>
 8008c22:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008c26:	ec59 8b17 	vmov	r8, r9, d7
 8008c2a:	e7e0      	b.n	8008bee <_strtod_l+0x8f6>
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c32:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c36:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c3a:	f04f 38ff 	mov.w	r8, #4294967295
 8008c3e:	e7d6      	b.n	8008bee <_strtod_l+0x8f6>
 8008c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c42:	ea13 0f08 	tst.w	r3, r8
 8008c46:	e7e3      	b.n	8008c10 <_strtod_l+0x918>
 8008c48:	f7ff fb3c 	bl	80082c4 <sulp>
 8008c4c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008c50:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c58:	ec59 8b10 	vmov	r8, r9, d0
 8008c5c:	d1c7      	bne.n	8008bee <_strtod_l+0x8f6>
 8008c5e:	e5f7      	b.n	8008850 <_strtod_l+0x558>
 8008c60:	4631      	mov	r1, r6
 8008c62:	4628      	mov	r0, r5
 8008c64:	f002 fa38 	bl	800b0d8 <__ratio>
 8008c68:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008c6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c74:	d865      	bhi.n	8008d42 <_strtod_l+0xa4a>
 8008c76:	f1ba 0f00 	cmp.w	sl, #0
 8008c7a:	d042      	beq.n	8008d02 <_strtod_l+0xa0a>
 8008c7c:	4b75      	ldr	r3, [pc, #468]	; (8008e54 <_strtod_l+0xb5c>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008c84:	4871      	ldr	r0, [pc, #452]	; (8008e4c <_strtod_l+0xb54>)
 8008c86:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008e60 <_strtod_l+0xb68>
 8008c8a:	ea0b 0100 	and.w	r1, fp, r0
 8008c8e:	4561      	cmp	r1, ip
 8008c90:	f040 808e 	bne.w	8008db0 <_strtod_l+0xab8>
 8008c94:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008c98:	ec49 8b10 	vmov	d0, r8, r9
 8008c9c:	ec43 2b1c 	vmov	d12, r2, r3
 8008ca0:	910a      	str	r1, [sp, #40]	; 0x28
 8008ca2:	f002 f941 	bl	800af28 <__ulp>
 8008ca6:	ec49 8b1e 	vmov	d14, r8, r9
 8008caa:	4868      	ldr	r0, [pc, #416]	; (8008e4c <_strtod_l+0xb54>)
 8008cac:	eeac eb00 	vfma.f64	d14, d12, d0
 8008cb0:	ee1e 3a90 	vmov	r3, s29
 8008cb4:	4a68      	ldr	r2, [pc, #416]	; (8008e58 <_strtod_l+0xb60>)
 8008cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cb8:	4018      	ands	r0, r3
 8008cba:	4290      	cmp	r0, r2
 8008cbc:	ec59 8b1e 	vmov	r8, r9, d14
 8008cc0:	d94e      	bls.n	8008d60 <_strtod_l+0xa68>
 8008cc2:	ee18 3a90 	vmov	r3, s17
 8008cc6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d104      	bne.n	8008cd8 <_strtod_l+0x9e0>
 8008cce:	ee18 3a10 	vmov	r3, s16
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	f43f ad4c 	beq.w	8008770 <_strtod_l+0x478>
 8008cd8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008e50 <_strtod_l+0xb58>
 8008cdc:	f04f 38ff 	mov.w	r8, #4294967295
 8008ce0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f001 fdee 	bl	800a8c4 <_Bfree>
 8008ce8:	4639      	mov	r1, r7
 8008cea:	4620      	mov	r0, r4
 8008cec:	f001 fdea 	bl	800a8c4 <_Bfree>
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f001 fde6 	bl	800a8c4 <_Bfree>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f001 fde2 	bl	800a8c4 <_Bfree>
 8008d00:	e619      	b.n	8008936 <_strtod_l+0x63e>
 8008d02:	f1b8 0f00 	cmp.w	r8, #0
 8008d06:	d112      	bne.n	8008d2e <_strtod_l+0xa36>
 8008d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d0c:	b9b3      	cbnz	r3, 8008d3c <_strtod_l+0xa44>
 8008d0e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008d12:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008d1e:	bf58      	it	pl
 8008d20:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8008d24:	eeb1 7b4d 	vneg.f64	d7, d13
 8008d28:	ec53 2b17 	vmov	r2, r3, d7
 8008d2c:	e7aa      	b.n	8008c84 <_strtod_l+0x98c>
 8008d2e:	f1b8 0f01 	cmp.w	r8, #1
 8008d32:	d103      	bne.n	8008d3c <_strtod_l+0xa44>
 8008d34:	f1b9 0f00 	cmp.w	r9, #0
 8008d38:	f43f ad8a 	beq.w	8008850 <_strtod_l+0x558>
 8008d3c:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <_strtod_l+0xb64>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	e79e      	b.n	8008c80 <_strtod_l+0x988>
 8008d42:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008d46:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008d4a:	f1ba 0f00 	cmp.w	sl, #0
 8008d4e:	d104      	bne.n	8008d5a <_strtod_l+0xa62>
 8008d50:	eeb1 7b4d 	vneg.f64	d7, d13
 8008d54:	ec53 2b17 	vmov	r2, r3, d7
 8008d58:	e794      	b.n	8008c84 <_strtod_l+0x98c>
 8008d5a:	eeb0 7b4d 	vmov.f64	d7, d13
 8008d5e:	e7f9      	b.n	8008d54 <_strtod_l+0xa5c>
 8008d60:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008d64:	9b04      	ldr	r3, [sp, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1ba      	bne.n	8008ce0 <_strtod_l+0x9e8>
 8008d6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d6e:	0d1b      	lsrs	r3, r3, #20
 8008d70:	051b      	lsls	r3, r3, #20
 8008d72:	4299      	cmp	r1, r3
 8008d74:	d1b4      	bne.n	8008ce0 <_strtod_l+0x9e8>
 8008d76:	ec51 0b1d 	vmov	r0, r1, d13
 8008d7a:	f7f7 fcdd 	bl	8000738 <__aeabi_d2lz>
 8008d7e:	f7f7 fc95 	bl	80006ac <__aeabi_l2d>
 8008d82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d86:	ec41 0b17 	vmov	d7, r0, r1
 8008d8a:	ea43 0308 	orr.w	r3, r3, r8
 8008d8e:	ea53 030a 	orrs.w	r3, r3, sl
 8008d92:	ee3d db47 	vsub.f64	d13, d13, d7
 8008d96:	d03c      	beq.n	8008e12 <_strtod_l+0xb1a>
 8008d98:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	f53f acf0 	bmi.w	8008784 <_strtod_l+0x48c>
 8008da4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dac:	dd98      	ble.n	8008ce0 <_strtod_l+0x9e8>
 8008dae:	e4e9      	b.n	8008784 <_strtod_l+0x48c>
 8008db0:	9804      	ldr	r0, [sp, #16]
 8008db2:	b1f0      	cbz	r0, 8008df2 <_strtod_l+0xafa>
 8008db4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008db8:	d81b      	bhi.n	8008df2 <_strtod_l+0xafa>
 8008dba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008e40 <_strtod_l+0xb48>
 8008dbe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc6:	d811      	bhi.n	8008dec <_strtod_l+0xaf4>
 8008dc8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008dcc:	ee1d 3a10 	vmov	r3, s26
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	bf38      	it	cc
 8008dd4:	2301      	movcc	r3, #1
 8008dd6:	ee0d 3a10 	vmov	s26, r3
 8008dda:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008dde:	f1ba 0f00 	cmp.w	sl, #0
 8008de2:	d113      	bne.n	8008e0c <_strtod_l+0xb14>
 8008de4:	eeb1 7b4d 	vneg.f64	d7, d13
 8008de8:	ec53 2b17 	vmov	r2, r3, d7
 8008dec:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008df0:	1a43      	subs	r3, r0, r1
 8008df2:	eeb0 0b48 	vmov.f64	d0, d8
 8008df6:	ec43 2b1c 	vmov	d12, r2, r3
 8008dfa:	910a      	str	r1, [sp, #40]	; 0x28
 8008dfc:	f002 f894 	bl	800af28 <__ulp>
 8008e00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e02:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008e06:	ec59 8b18 	vmov	r8, r9, d8
 8008e0a:	e7ab      	b.n	8008d64 <_strtod_l+0xa6c>
 8008e0c:	eeb0 7b4d 	vmov.f64	d7, d13
 8008e10:	e7ea      	b.n	8008de8 <_strtod_l+0xaf0>
 8008e12:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e1a:	f57f af61 	bpl.w	8008ce0 <_strtod_l+0x9e8>
 8008e1e:	e4b1      	b.n	8008784 <_strtod_l+0x48c>
 8008e20:	2300      	movs	r3, #0
 8008e22:	9308      	str	r3, [sp, #32]
 8008e24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	f7ff baad 	b.w	8008388 <_strtod_l+0x90>
 8008e2e:	2a65      	cmp	r2, #101	; 0x65
 8008e30:	f43f ab9f 	beq.w	8008572 <_strtod_l+0x27a>
 8008e34:	2a45      	cmp	r2, #69	; 0x45
 8008e36:	f43f ab9c 	beq.w	8008572 <_strtod_l+0x27a>
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	f7ff bbd4 	b.w	80085e8 <_strtod_l+0x2f0>
 8008e40:	ffc00000 	.word	0xffc00000
 8008e44:	41dfffff 	.word	0x41dfffff
 8008e48:	000fffff 	.word	0x000fffff
 8008e4c:	7ff00000 	.word	0x7ff00000
 8008e50:	7fefffff 	.word	0x7fefffff
 8008e54:	3ff00000 	.word	0x3ff00000
 8008e58:	7c9fffff 	.word	0x7c9fffff
 8008e5c:	bff00000 	.word	0xbff00000
 8008e60:	7fe00000 	.word	0x7fe00000

08008e64 <_strtod_r>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	; (8008e6c <_strtod_r+0x8>)
 8008e66:	f7ff ba47 	b.w	80082f8 <_strtod_l>
 8008e6a:	bf00      	nop
 8008e6c:	24000078 	.word	0x24000078

08008e70 <_strtol_l.constprop.0>:
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e76:	d001      	beq.n	8008e7c <_strtol_l.constprop.0+0xc>
 8008e78:	2b24      	cmp	r3, #36	; 0x24
 8008e7a:	d906      	bls.n	8008e8a <_strtol_l.constprop.0+0x1a>
 8008e7c:	f7fe fb72 	bl	8007564 <__errno>
 8008e80:	2316      	movs	r3, #22
 8008e82:	6003      	str	r3, [r0, #0]
 8008e84:	2000      	movs	r0, #0
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f70 <_strtol_l.constprop.0+0x100>
 8008e8e:	460d      	mov	r5, r1
 8008e90:	462e      	mov	r6, r5
 8008e92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e96:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008e9a:	f017 0708 	ands.w	r7, r7, #8
 8008e9e:	d1f7      	bne.n	8008e90 <_strtol_l.constprop.0+0x20>
 8008ea0:	2c2d      	cmp	r4, #45	; 0x2d
 8008ea2:	d132      	bne.n	8008f0a <_strtol_l.constprop.0+0x9a>
 8008ea4:	782c      	ldrb	r4, [r5, #0]
 8008ea6:	2701      	movs	r7, #1
 8008ea8:	1cb5      	adds	r5, r6, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d05b      	beq.n	8008f66 <_strtol_l.constprop.0+0xf6>
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d109      	bne.n	8008ec6 <_strtol_l.constprop.0+0x56>
 8008eb2:	2c30      	cmp	r4, #48	; 0x30
 8008eb4:	d107      	bne.n	8008ec6 <_strtol_l.constprop.0+0x56>
 8008eb6:	782c      	ldrb	r4, [r5, #0]
 8008eb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ebc:	2c58      	cmp	r4, #88	; 0x58
 8008ebe:	d14d      	bne.n	8008f5c <_strtol_l.constprop.0+0xec>
 8008ec0:	786c      	ldrb	r4, [r5, #1]
 8008ec2:	2310      	movs	r3, #16
 8008ec4:	3502      	adds	r5, #2
 8008ec6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008eca:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ece:	f04f 0c00 	mov.w	ip, #0
 8008ed2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ed6:	4666      	mov	r6, ip
 8008ed8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008edc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008ee0:	f1be 0f09 	cmp.w	lr, #9
 8008ee4:	d816      	bhi.n	8008f14 <_strtol_l.constprop.0+0xa4>
 8008ee6:	4674      	mov	r4, lr
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	dd24      	ble.n	8008f36 <_strtol_l.constprop.0+0xc6>
 8008eec:	f1bc 0f00 	cmp.w	ip, #0
 8008ef0:	db1e      	blt.n	8008f30 <_strtol_l.constprop.0+0xc0>
 8008ef2:	45b1      	cmp	r9, r6
 8008ef4:	d31c      	bcc.n	8008f30 <_strtol_l.constprop.0+0xc0>
 8008ef6:	d101      	bne.n	8008efc <_strtol_l.constprop.0+0x8c>
 8008ef8:	45a2      	cmp	sl, r4
 8008efa:	db19      	blt.n	8008f30 <_strtol_l.constprop.0+0xc0>
 8008efc:	fb06 4603 	mla	r6, r6, r3, r4
 8008f00:	f04f 0c01 	mov.w	ip, #1
 8008f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f08:	e7e8      	b.n	8008edc <_strtol_l.constprop.0+0x6c>
 8008f0a:	2c2b      	cmp	r4, #43	; 0x2b
 8008f0c:	bf04      	itt	eq
 8008f0e:	782c      	ldrbeq	r4, [r5, #0]
 8008f10:	1cb5      	addeq	r5, r6, #2
 8008f12:	e7ca      	b.n	8008eaa <_strtol_l.constprop.0+0x3a>
 8008f14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008f18:	f1be 0f19 	cmp.w	lr, #25
 8008f1c:	d801      	bhi.n	8008f22 <_strtol_l.constprop.0+0xb2>
 8008f1e:	3c37      	subs	r4, #55	; 0x37
 8008f20:	e7e2      	b.n	8008ee8 <_strtol_l.constprop.0+0x78>
 8008f22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008f26:	f1be 0f19 	cmp.w	lr, #25
 8008f2a:	d804      	bhi.n	8008f36 <_strtol_l.constprop.0+0xc6>
 8008f2c:	3c57      	subs	r4, #87	; 0x57
 8008f2e:	e7db      	b.n	8008ee8 <_strtol_l.constprop.0+0x78>
 8008f30:	f04f 3cff 	mov.w	ip, #4294967295
 8008f34:	e7e6      	b.n	8008f04 <_strtol_l.constprop.0+0x94>
 8008f36:	f1bc 0f00 	cmp.w	ip, #0
 8008f3a:	da05      	bge.n	8008f48 <_strtol_l.constprop.0+0xd8>
 8008f3c:	2322      	movs	r3, #34	; 0x22
 8008f3e:	6003      	str	r3, [r0, #0]
 8008f40:	4646      	mov	r6, r8
 8008f42:	b942      	cbnz	r2, 8008f56 <_strtol_l.constprop.0+0xe6>
 8008f44:	4630      	mov	r0, r6
 8008f46:	e79e      	b.n	8008e86 <_strtol_l.constprop.0+0x16>
 8008f48:	b107      	cbz	r7, 8008f4c <_strtol_l.constprop.0+0xdc>
 8008f4a:	4276      	negs	r6, r6
 8008f4c:	2a00      	cmp	r2, #0
 8008f4e:	d0f9      	beq.n	8008f44 <_strtol_l.constprop.0+0xd4>
 8008f50:	f1bc 0f00 	cmp.w	ip, #0
 8008f54:	d000      	beq.n	8008f58 <_strtol_l.constprop.0+0xe8>
 8008f56:	1e69      	subs	r1, r5, #1
 8008f58:	6011      	str	r1, [r2, #0]
 8008f5a:	e7f3      	b.n	8008f44 <_strtol_l.constprop.0+0xd4>
 8008f5c:	2430      	movs	r4, #48	; 0x30
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1b1      	bne.n	8008ec6 <_strtol_l.constprop.0+0x56>
 8008f62:	2308      	movs	r3, #8
 8008f64:	e7af      	b.n	8008ec6 <_strtol_l.constprop.0+0x56>
 8008f66:	2c30      	cmp	r4, #48	; 0x30
 8008f68:	d0a5      	beq.n	8008eb6 <_strtol_l.constprop.0+0x46>
 8008f6a:	230a      	movs	r3, #10
 8008f6c:	e7ab      	b.n	8008ec6 <_strtol_l.constprop.0+0x56>
 8008f6e:	bf00      	nop
 8008f70:	0800bd79 	.word	0x0800bd79

08008f74 <_strtol_r>:
 8008f74:	f7ff bf7c 	b.w	8008e70 <_strtol_l.constprop.0>

08008f78 <__swbuf_r>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	460e      	mov	r6, r1
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	4605      	mov	r5, r0
 8008f80:	b118      	cbz	r0, 8008f8a <__swbuf_r+0x12>
 8008f82:	6983      	ldr	r3, [r0, #24]
 8008f84:	b90b      	cbnz	r3, 8008f8a <__swbuf_r+0x12>
 8008f86:	f000 ffcb 	bl	8009f20 <__sinit>
 8008f8a:	4b21      	ldr	r3, [pc, #132]	; (8009010 <__swbuf_r+0x98>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	d12b      	bne.n	8008fe8 <__swbuf_r+0x70>
 8008f90:	686c      	ldr	r4, [r5, #4]
 8008f92:	69a3      	ldr	r3, [r4, #24]
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	071a      	lsls	r2, r3, #28
 8008f9a:	d52f      	bpl.n	8008ffc <__swbuf_r+0x84>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	b36b      	cbz	r3, 8008ffc <__swbuf_r+0x84>
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	6820      	ldr	r0, [r4, #0]
 8008fa4:	1ac0      	subs	r0, r0, r3
 8008fa6:	6963      	ldr	r3, [r4, #20]
 8008fa8:	b2f6      	uxtb	r6, r6
 8008faa:	4283      	cmp	r3, r0
 8008fac:	4637      	mov	r7, r6
 8008fae:	dc04      	bgt.n	8008fba <__swbuf_r+0x42>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 ff20 	bl	8009df8 <_fflush_r>
 8008fb8:	bb30      	cbnz	r0, 8009008 <__swbuf_r+0x90>
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	60a3      	str	r3, [r4, #8]
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	6022      	str	r2, [r4, #0]
 8008fc6:	701e      	strb	r6, [r3, #0]
 8008fc8:	6963      	ldr	r3, [r4, #20]
 8008fca:	3001      	adds	r0, #1
 8008fcc:	4283      	cmp	r3, r0
 8008fce:	d004      	beq.n	8008fda <__swbuf_r+0x62>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	07db      	lsls	r3, r3, #31
 8008fd4:	d506      	bpl.n	8008fe4 <__swbuf_r+0x6c>
 8008fd6:	2e0a      	cmp	r6, #10
 8008fd8:	d104      	bne.n	8008fe4 <__swbuf_r+0x6c>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 ff0b 	bl	8009df8 <_fflush_r>
 8008fe2:	b988      	cbnz	r0, 8009008 <__swbuf_r+0x90>
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <__swbuf_r+0x9c>)
 8008fea:	429c      	cmp	r4, r3
 8008fec:	d101      	bne.n	8008ff2 <__swbuf_r+0x7a>
 8008fee:	68ac      	ldr	r4, [r5, #8]
 8008ff0:	e7cf      	b.n	8008f92 <__swbuf_r+0x1a>
 8008ff2:	4b09      	ldr	r3, [pc, #36]	; (8009018 <__swbuf_r+0xa0>)
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	bf08      	it	eq
 8008ff8:	68ec      	ldreq	r4, [r5, #12]
 8008ffa:	e7ca      	b.n	8008f92 <__swbuf_r+0x1a>
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4628      	mov	r0, r5
 8009000:	f000 f80c 	bl	800901c <__swsetup_r>
 8009004:	2800      	cmp	r0, #0
 8009006:	d0cb      	beq.n	8008fa0 <__swbuf_r+0x28>
 8009008:	f04f 37ff 	mov.w	r7, #4294967295
 800900c:	e7ea      	b.n	8008fe4 <__swbuf_r+0x6c>
 800900e:	bf00      	nop
 8009010:	0800bf2c 	.word	0x0800bf2c
 8009014:	0800bf4c 	.word	0x0800bf4c
 8009018:	0800bf0c 	.word	0x0800bf0c

0800901c <__swsetup_r>:
 800901c:	4b32      	ldr	r3, [pc, #200]	; (80090e8 <__swsetup_r+0xcc>)
 800901e:	b570      	push	{r4, r5, r6, lr}
 8009020:	681d      	ldr	r5, [r3, #0]
 8009022:	4606      	mov	r6, r0
 8009024:	460c      	mov	r4, r1
 8009026:	b125      	cbz	r5, 8009032 <__swsetup_r+0x16>
 8009028:	69ab      	ldr	r3, [r5, #24]
 800902a:	b913      	cbnz	r3, 8009032 <__swsetup_r+0x16>
 800902c:	4628      	mov	r0, r5
 800902e:	f000 ff77 	bl	8009f20 <__sinit>
 8009032:	4b2e      	ldr	r3, [pc, #184]	; (80090ec <__swsetup_r+0xd0>)
 8009034:	429c      	cmp	r4, r3
 8009036:	d10f      	bne.n	8009058 <__swsetup_r+0x3c>
 8009038:	686c      	ldr	r4, [r5, #4]
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009040:	0719      	lsls	r1, r3, #28
 8009042:	d42c      	bmi.n	800909e <__swsetup_r+0x82>
 8009044:	06dd      	lsls	r5, r3, #27
 8009046:	d411      	bmi.n	800906c <__swsetup_r+0x50>
 8009048:	2309      	movs	r3, #9
 800904a:	6033      	str	r3, [r6, #0]
 800904c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	f04f 30ff 	mov.w	r0, #4294967295
 8009056:	e03e      	b.n	80090d6 <__swsetup_r+0xba>
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <__swsetup_r+0xd4>)
 800905a:	429c      	cmp	r4, r3
 800905c:	d101      	bne.n	8009062 <__swsetup_r+0x46>
 800905e:	68ac      	ldr	r4, [r5, #8]
 8009060:	e7eb      	b.n	800903a <__swsetup_r+0x1e>
 8009062:	4b24      	ldr	r3, [pc, #144]	; (80090f4 <__swsetup_r+0xd8>)
 8009064:	429c      	cmp	r4, r3
 8009066:	bf08      	it	eq
 8009068:	68ec      	ldreq	r4, [r5, #12]
 800906a:	e7e6      	b.n	800903a <__swsetup_r+0x1e>
 800906c:	0758      	lsls	r0, r3, #29
 800906e:	d512      	bpl.n	8009096 <__swsetup_r+0x7a>
 8009070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009072:	b141      	cbz	r1, 8009086 <__swsetup_r+0x6a>
 8009074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009078:	4299      	cmp	r1, r3
 800907a:	d002      	beq.n	8009082 <__swsetup_r+0x66>
 800907c:	4630      	mov	r0, r6
 800907e:	f002 f8b5 	bl	800b1ec <_free_r>
 8009082:	2300      	movs	r3, #0
 8009084:	6363      	str	r3, [r4, #52]	; 0x34
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	2300      	movs	r3, #0
 8009090:	6063      	str	r3, [r4, #4]
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f043 0308 	orr.w	r3, r3, #8
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	b94b      	cbnz	r3, 80090b6 <__swsetup_r+0x9a>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ac:	d003      	beq.n	80090b6 <__swsetup_r+0x9a>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4630      	mov	r0, r6
 80090b2:	f001 fb6d 	bl	800a790 <__smakebuf_r>
 80090b6:	89a0      	ldrh	r0, [r4, #12]
 80090b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090bc:	f010 0301 	ands.w	r3, r0, #1
 80090c0:	d00a      	beq.n	80090d8 <__swsetup_r+0xbc>
 80090c2:	2300      	movs	r3, #0
 80090c4:	60a3      	str	r3, [r4, #8]
 80090c6:	6963      	ldr	r3, [r4, #20]
 80090c8:	425b      	negs	r3, r3
 80090ca:	61a3      	str	r3, [r4, #24]
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	b943      	cbnz	r3, 80090e2 <__swsetup_r+0xc6>
 80090d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090d4:	d1ba      	bne.n	800904c <__swsetup_r+0x30>
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	0781      	lsls	r1, r0, #30
 80090da:	bf58      	it	pl
 80090dc:	6963      	ldrpl	r3, [r4, #20]
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	e7f4      	b.n	80090cc <__swsetup_r+0xb0>
 80090e2:	2000      	movs	r0, #0
 80090e4:	e7f7      	b.n	80090d6 <__swsetup_r+0xba>
 80090e6:	bf00      	nop
 80090e8:	24000010 	.word	0x24000010
 80090ec:	0800bf2c 	.word	0x0800bf2c
 80090f0:	0800bf4c 	.word	0x0800bf4c
 80090f4:	0800bf0c 	.word	0x0800bf0c

080090f8 <quorem>:
 80090f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	6903      	ldr	r3, [r0, #16]
 80090fe:	690c      	ldr	r4, [r1, #16]
 8009100:	42a3      	cmp	r3, r4
 8009102:	4607      	mov	r7, r0
 8009104:	f2c0 8081 	blt.w	800920a <quorem+0x112>
 8009108:	3c01      	subs	r4, #1
 800910a:	f101 0814 	add.w	r8, r1, #20
 800910e:	f100 0514 	add.w	r5, r0, #20
 8009112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800911c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009120:	3301      	adds	r3, #1
 8009122:	429a      	cmp	r2, r3
 8009124:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800912c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009130:	d331      	bcc.n	8009196 <quorem+0x9e>
 8009132:	f04f 0e00 	mov.w	lr, #0
 8009136:	4640      	mov	r0, r8
 8009138:	46ac      	mov	ip, r5
 800913a:	46f2      	mov	sl, lr
 800913c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009140:	b293      	uxth	r3, r2
 8009142:	fb06 e303 	mla	r3, r6, r3, lr
 8009146:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800914a:	b29b      	uxth	r3, r3
 800914c:	ebaa 0303 	sub.w	r3, sl, r3
 8009150:	f8dc a000 	ldr.w	sl, [ip]
 8009154:	0c12      	lsrs	r2, r2, #16
 8009156:	fa13 f38a 	uxtah	r3, r3, sl
 800915a:	fb06 e202 	mla	r2, r6, r2, lr
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	9b00      	ldr	r3, [sp, #0]
 8009162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009166:	b292      	uxth	r2, r2
 8009168:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800916c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009170:	f8bd 3000 	ldrh.w	r3, [sp]
 8009174:	4581      	cmp	r9, r0
 8009176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800917a:	f84c 3b04 	str.w	r3, [ip], #4
 800917e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009182:	d2db      	bcs.n	800913c <quorem+0x44>
 8009184:	f855 300b 	ldr.w	r3, [r5, fp]
 8009188:	b92b      	cbnz	r3, 8009196 <quorem+0x9e>
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	3b04      	subs	r3, #4
 800918e:	429d      	cmp	r5, r3
 8009190:	461a      	mov	r2, r3
 8009192:	d32e      	bcc.n	80091f2 <quorem+0xfa>
 8009194:	613c      	str	r4, [r7, #16]
 8009196:	4638      	mov	r0, r7
 8009198:	f001 fe20 	bl	800addc <__mcmp>
 800919c:	2800      	cmp	r0, #0
 800919e:	db24      	blt.n	80091ea <quorem+0xf2>
 80091a0:	3601      	adds	r6, #1
 80091a2:	4628      	mov	r0, r5
 80091a4:	f04f 0c00 	mov.w	ip, #0
 80091a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80091ac:	f8d0 e000 	ldr.w	lr, [r0]
 80091b0:	b293      	uxth	r3, r2
 80091b2:	ebac 0303 	sub.w	r3, ip, r3
 80091b6:	0c12      	lsrs	r2, r2, #16
 80091b8:	fa13 f38e 	uxtah	r3, r3, lr
 80091bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ca:	45c1      	cmp	r9, r8
 80091cc:	f840 3b04 	str.w	r3, [r0], #4
 80091d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091d4:	d2e8      	bcs.n	80091a8 <quorem+0xb0>
 80091d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091de:	b922      	cbnz	r2, 80091ea <quorem+0xf2>
 80091e0:	3b04      	subs	r3, #4
 80091e2:	429d      	cmp	r5, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	d30a      	bcc.n	80091fe <quorem+0x106>
 80091e8:	613c      	str	r4, [r7, #16]
 80091ea:	4630      	mov	r0, r6
 80091ec:	b003      	add	sp, #12
 80091ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f2:	6812      	ldr	r2, [r2, #0]
 80091f4:	3b04      	subs	r3, #4
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	d1cc      	bne.n	8009194 <quorem+0x9c>
 80091fa:	3c01      	subs	r4, #1
 80091fc:	e7c7      	b.n	800918e <quorem+0x96>
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	3b04      	subs	r3, #4
 8009202:	2a00      	cmp	r2, #0
 8009204:	d1f0      	bne.n	80091e8 <quorem+0xf0>
 8009206:	3c01      	subs	r4, #1
 8009208:	e7eb      	b.n	80091e2 <quorem+0xea>
 800920a:	2000      	movs	r0, #0
 800920c:	e7ee      	b.n	80091ec <quorem+0xf4>
	...

08009210 <_dtoa_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	ed2d 8b02 	vpush	{d8}
 8009218:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800921a:	b091      	sub	sp, #68	; 0x44
 800921c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009220:	ec59 8b10 	vmov	r8, r9, d0
 8009224:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009226:	9106      	str	r1, [sp, #24]
 8009228:	4606      	mov	r6, r0
 800922a:	9208      	str	r2, [sp, #32]
 800922c:	930c      	str	r3, [sp, #48]	; 0x30
 800922e:	b975      	cbnz	r5, 800924e <_dtoa_r+0x3e>
 8009230:	2010      	movs	r0, #16
 8009232:	f001 faed 	bl	800a810 <malloc>
 8009236:	4602      	mov	r2, r0
 8009238:	6270      	str	r0, [r6, #36]	; 0x24
 800923a:	b920      	cbnz	r0, 8009246 <_dtoa_r+0x36>
 800923c:	4baa      	ldr	r3, [pc, #680]	; (80094e8 <_dtoa_r+0x2d8>)
 800923e:	21ea      	movs	r1, #234	; 0xea
 8009240:	48aa      	ldr	r0, [pc, #680]	; (80094ec <_dtoa_r+0x2dc>)
 8009242:	f002 fbf7 	bl	800ba34 <__assert_func>
 8009246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800924a:	6005      	str	r5, [r0, #0]
 800924c:	60c5      	str	r5, [r0, #12]
 800924e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	b151      	cbz	r1, 800926a <_dtoa_r+0x5a>
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	604a      	str	r2, [r1, #4]
 8009258:	2301      	movs	r3, #1
 800925a:	4093      	lsls	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
 800925e:	4630      	mov	r0, r6
 8009260:	f001 fb30 	bl	800a8c4 <_Bfree>
 8009264:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	f1b9 0300 	subs.w	r3, r9, #0
 800926e:	bfbb      	ittet	lt
 8009270:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009274:	9303      	strlt	r3, [sp, #12]
 8009276:	2300      	movge	r3, #0
 8009278:	2201      	movlt	r2, #1
 800927a:	bfac      	ite	ge
 800927c:	6023      	strge	r3, [r4, #0]
 800927e:	6022      	strlt	r2, [r4, #0]
 8009280:	4b9b      	ldr	r3, [pc, #620]	; (80094f0 <_dtoa_r+0x2e0>)
 8009282:	9c03      	ldr	r4, [sp, #12]
 8009284:	43a3      	bics	r3, r4
 8009286:	d11c      	bne.n	80092c2 <_dtoa_r+0xb2>
 8009288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800928a:	f242 730f 	movw	r3, #9999	; 0x270f
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009294:	ea53 0308 	orrs.w	r3, r3, r8
 8009298:	f000 84fd 	beq.w	8009c96 <_dtoa_r+0xa86>
 800929c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800929e:	b963      	cbnz	r3, 80092ba <_dtoa_r+0xaa>
 80092a0:	4b94      	ldr	r3, [pc, #592]	; (80094f4 <_dtoa_r+0x2e4>)
 80092a2:	e01f      	b.n	80092e4 <_dtoa_r+0xd4>
 80092a4:	4b94      	ldr	r3, [pc, #592]	; (80094f8 <_dtoa_r+0x2e8>)
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	3308      	adds	r3, #8
 80092aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	9801      	ldr	r0, [sp, #4]
 80092b0:	b011      	add	sp, #68	; 0x44
 80092b2:	ecbd 8b02 	vpop	{d8}
 80092b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ba:	4b8e      	ldr	r3, [pc, #568]	; (80094f4 <_dtoa_r+0x2e4>)
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	3303      	adds	r3, #3
 80092c0:	e7f3      	b.n	80092aa <_dtoa_r+0x9a>
 80092c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80092c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80092ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ce:	d10b      	bne.n	80092e8 <_dtoa_r+0xd8>
 80092d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092d2:	2301      	movs	r3, #1
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 84d9 	beq.w	8009c90 <_dtoa_r+0xa80>
 80092de:	4887      	ldr	r0, [pc, #540]	; (80094fc <_dtoa_r+0x2ec>)
 80092e0:	6018      	str	r0, [r3, #0]
 80092e2:	1e43      	subs	r3, r0, #1
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	e7e2      	b.n	80092ae <_dtoa_r+0x9e>
 80092e8:	a90f      	add	r1, sp, #60	; 0x3c
 80092ea:	aa0e      	add	r2, sp, #56	; 0x38
 80092ec:	4630      	mov	r0, r6
 80092ee:	eeb0 0b48 	vmov.f64	d0, d8
 80092f2:	f001 fe95 	bl	800b020 <__d2b>
 80092f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80092fa:	4605      	mov	r5, r0
 80092fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80092fe:	2900      	cmp	r1, #0
 8009300:	d046      	beq.n	8009390 <_dtoa_r+0x180>
 8009302:	ee18 4a90 	vmov	r4, s17
 8009306:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800930a:	ec53 2b18 	vmov	r2, r3, d8
 800930e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009312:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009316:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800931a:	2400      	movs	r4, #0
 800931c:	ec43 2b16 	vmov	d6, r2, r3
 8009320:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009324:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80094d0 <_dtoa_r+0x2c0>
 8009328:	ee36 7b47 	vsub.f64	d7, d6, d7
 800932c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80094d8 <_dtoa_r+0x2c8>
 8009330:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009334:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80094e0 <_dtoa_r+0x2d0>
 8009338:	ee07 1a90 	vmov	s15, r1
 800933c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009340:	eeb0 7b46 	vmov.f64	d7, d6
 8009344:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009348:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800934c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009354:	ee16 ba90 	vmov	fp, s13
 8009358:	940a      	str	r4, [sp, #40]	; 0x28
 800935a:	d508      	bpl.n	800936e <_dtoa_r+0x15e>
 800935c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009360:	eeb4 6b47 	vcmp.f64	d6, d7
 8009364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009368:	bf18      	it	ne
 800936a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800936e:	f1bb 0f16 	cmp.w	fp, #22
 8009372:	d82f      	bhi.n	80093d4 <_dtoa_r+0x1c4>
 8009374:	4b62      	ldr	r3, [pc, #392]	; (8009500 <_dtoa_r+0x2f0>)
 8009376:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800937a:	ed93 7b00 	vldr	d7, [r3]
 800937e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009386:	d501      	bpl.n	800938c <_dtoa_r+0x17c>
 8009388:	f10b 3bff 	add.w	fp, fp, #4294967295
 800938c:	2300      	movs	r3, #0
 800938e:	e022      	b.n	80093d6 <_dtoa_r+0x1c6>
 8009390:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009392:	4401      	add	r1, r0
 8009394:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009398:	2b20      	cmp	r3, #32
 800939a:	bfc1      	itttt	gt
 800939c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80093a0:	fa04 f303 	lslgt.w	r3, r4, r3
 80093a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80093a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80093ac:	bfd6      	itet	le
 80093ae:	f1c3 0320 	rsble	r3, r3, #32
 80093b2:	ea43 0808 	orrgt.w	r8, r3, r8
 80093b6:	fa08 f803 	lslle.w	r8, r8, r3
 80093ba:	ee07 8a90 	vmov	s15, r8
 80093be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80093c2:	3901      	subs	r1, #1
 80093c4:	ee17 4a90 	vmov	r4, s15
 80093c8:	ec53 2b17 	vmov	r2, r3, d7
 80093cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80093d0:	2401      	movs	r4, #1
 80093d2:	e7a3      	b.n	800931c <_dtoa_r+0x10c>
 80093d4:	2301      	movs	r3, #1
 80093d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80093d8:	1a43      	subs	r3, r0, r1
 80093da:	1e5a      	subs	r2, r3, #1
 80093dc:	bf45      	ittet	mi
 80093de:	f1c3 0301 	rsbmi	r3, r3, #1
 80093e2:	9304      	strmi	r3, [sp, #16]
 80093e4:	2300      	movpl	r3, #0
 80093e6:	2300      	movmi	r3, #0
 80093e8:	9205      	str	r2, [sp, #20]
 80093ea:	bf54      	ite	pl
 80093ec:	9304      	strpl	r3, [sp, #16]
 80093ee:	9305      	strmi	r3, [sp, #20]
 80093f0:	f1bb 0f00 	cmp.w	fp, #0
 80093f4:	db18      	blt.n	8009428 <_dtoa_r+0x218>
 80093f6:	9b05      	ldr	r3, [sp, #20]
 80093f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80093fc:	445b      	add	r3, fp
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	2300      	movs	r3, #0
 8009402:	9a06      	ldr	r2, [sp, #24]
 8009404:	2a09      	cmp	r2, #9
 8009406:	d849      	bhi.n	800949c <_dtoa_r+0x28c>
 8009408:	2a05      	cmp	r2, #5
 800940a:	bfc4      	itt	gt
 800940c:	3a04      	subgt	r2, #4
 800940e:	9206      	strgt	r2, [sp, #24]
 8009410:	9a06      	ldr	r2, [sp, #24]
 8009412:	f1a2 0202 	sub.w	r2, r2, #2
 8009416:	bfcc      	ite	gt
 8009418:	2400      	movgt	r4, #0
 800941a:	2401      	movle	r4, #1
 800941c:	2a03      	cmp	r2, #3
 800941e:	d848      	bhi.n	80094b2 <_dtoa_r+0x2a2>
 8009420:	e8df f002 	tbb	[pc, r2]
 8009424:	3a2c2e0b 	.word	0x3a2c2e0b
 8009428:	9b04      	ldr	r3, [sp, #16]
 800942a:	2200      	movs	r2, #0
 800942c:	eba3 030b 	sub.w	r3, r3, fp
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	9209      	str	r2, [sp, #36]	; 0x24
 8009434:	f1cb 0300 	rsb	r3, fp, #0
 8009438:	e7e3      	b.n	8009402 <_dtoa_r+0x1f2>
 800943a:	2200      	movs	r2, #0
 800943c:	9207      	str	r2, [sp, #28]
 800943e:	9a08      	ldr	r2, [sp, #32]
 8009440:	2a00      	cmp	r2, #0
 8009442:	dc39      	bgt.n	80094b8 <_dtoa_r+0x2a8>
 8009444:	f04f 0a01 	mov.w	sl, #1
 8009448:	46d1      	mov	r9, sl
 800944a:	4652      	mov	r2, sl
 800944c:	f8cd a020 	str.w	sl, [sp, #32]
 8009450:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009452:	2100      	movs	r1, #0
 8009454:	6079      	str	r1, [r7, #4]
 8009456:	2004      	movs	r0, #4
 8009458:	f100 0c14 	add.w	ip, r0, #20
 800945c:	4594      	cmp	ip, r2
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	d92f      	bls.n	80094c2 <_dtoa_r+0x2b2>
 8009462:	4630      	mov	r0, r6
 8009464:	930d      	str	r3, [sp, #52]	; 0x34
 8009466:	f001 f9ed 	bl	800a844 <_Balloc>
 800946a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800946c:	9001      	str	r0, [sp, #4]
 800946e:	4602      	mov	r2, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d149      	bne.n	8009508 <_dtoa_r+0x2f8>
 8009474:	4b23      	ldr	r3, [pc, #140]	; (8009504 <_dtoa_r+0x2f4>)
 8009476:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800947a:	e6e1      	b.n	8009240 <_dtoa_r+0x30>
 800947c:	2201      	movs	r2, #1
 800947e:	e7dd      	b.n	800943c <_dtoa_r+0x22c>
 8009480:	2200      	movs	r2, #0
 8009482:	9207      	str	r2, [sp, #28]
 8009484:	9a08      	ldr	r2, [sp, #32]
 8009486:	eb0b 0a02 	add.w	sl, fp, r2
 800948a:	f10a 0901 	add.w	r9, sl, #1
 800948e:	464a      	mov	r2, r9
 8009490:	2a01      	cmp	r2, #1
 8009492:	bfb8      	it	lt
 8009494:	2201      	movlt	r2, #1
 8009496:	e7db      	b.n	8009450 <_dtoa_r+0x240>
 8009498:	2201      	movs	r2, #1
 800949a:	e7f2      	b.n	8009482 <_dtoa_r+0x272>
 800949c:	2401      	movs	r4, #1
 800949e:	2200      	movs	r2, #0
 80094a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80094a4:	f04f 3aff 	mov.w	sl, #4294967295
 80094a8:	2100      	movs	r1, #0
 80094aa:	46d1      	mov	r9, sl
 80094ac:	2212      	movs	r2, #18
 80094ae:	9108      	str	r1, [sp, #32]
 80094b0:	e7ce      	b.n	8009450 <_dtoa_r+0x240>
 80094b2:	2201      	movs	r2, #1
 80094b4:	9207      	str	r2, [sp, #28]
 80094b6:	e7f5      	b.n	80094a4 <_dtoa_r+0x294>
 80094b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80094bc:	46d1      	mov	r9, sl
 80094be:	4652      	mov	r2, sl
 80094c0:	e7c6      	b.n	8009450 <_dtoa_r+0x240>
 80094c2:	3101      	adds	r1, #1
 80094c4:	6079      	str	r1, [r7, #4]
 80094c6:	0040      	lsls	r0, r0, #1
 80094c8:	e7c6      	b.n	8009458 <_dtoa_r+0x248>
 80094ca:	bf00      	nop
 80094cc:	f3af 8000 	nop.w
 80094d0:	636f4361 	.word	0x636f4361
 80094d4:	3fd287a7 	.word	0x3fd287a7
 80094d8:	8b60c8b3 	.word	0x8b60c8b3
 80094dc:	3fc68a28 	.word	0x3fc68a28
 80094e0:	509f79fb 	.word	0x509f79fb
 80094e4:	3fd34413 	.word	0x3fd34413
 80094e8:	0800be86 	.word	0x0800be86
 80094ec:	0800be9d 	.word	0x0800be9d
 80094f0:	7ff00000 	.word	0x7ff00000
 80094f4:	0800be82 	.word	0x0800be82
 80094f8:	0800be79 	.word	0x0800be79
 80094fc:	0800bcfd 	.word	0x0800bcfd
 8009500:	0800c070 	.word	0x0800c070
 8009504:	0800bef8 	.word	0x0800bef8
 8009508:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800950a:	9901      	ldr	r1, [sp, #4]
 800950c:	6011      	str	r1, [r2, #0]
 800950e:	f1b9 0f0e 	cmp.w	r9, #14
 8009512:	d86c      	bhi.n	80095ee <_dtoa_r+0x3de>
 8009514:	2c00      	cmp	r4, #0
 8009516:	d06a      	beq.n	80095ee <_dtoa_r+0x3de>
 8009518:	f1bb 0f00 	cmp.w	fp, #0
 800951c:	f340 80a0 	ble.w	8009660 <_dtoa_r+0x450>
 8009520:	49c1      	ldr	r1, [pc, #772]	; (8009828 <_dtoa_r+0x618>)
 8009522:	f00b 020f 	and.w	r2, fp, #15
 8009526:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800952a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800952e:	ed92 7b00 	vldr	d7, [r2]
 8009532:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009536:	f000 8087 	beq.w	8009648 <_dtoa_r+0x438>
 800953a:	4abc      	ldr	r2, [pc, #752]	; (800982c <_dtoa_r+0x61c>)
 800953c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009540:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009544:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009548:	f001 010f 	and.w	r1, r1, #15
 800954c:	2203      	movs	r2, #3
 800954e:	48b7      	ldr	r0, [pc, #732]	; (800982c <_dtoa_r+0x61c>)
 8009550:	2900      	cmp	r1, #0
 8009552:	d17b      	bne.n	800964c <_dtoa_r+0x43c>
 8009554:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009558:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800955c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009562:	2900      	cmp	r1, #0
 8009564:	f000 80a2 	beq.w	80096ac <_dtoa_r+0x49c>
 8009568:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800956c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009570:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009578:	f140 8098 	bpl.w	80096ac <_dtoa_r+0x49c>
 800957c:	f1b9 0f00 	cmp.w	r9, #0
 8009580:	f000 8094 	beq.w	80096ac <_dtoa_r+0x49c>
 8009584:	f1ba 0f00 	cmp.w	sl, #0
 8009588:	dd2f      	ble.n	80095ea <_dtoa_r+0x3da>
 800958a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800958e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009592:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009596:	f10b 37ff 	add.w	r7, fp, #4294967295
 800959a:	3201      	adds	r2, #1
 800959c:	4650      	mov	r0, sl
 800959e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80095a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80095a6:	ee07 2a90 	vmov	s15, r2
 80095aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80095ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80095b2:	ee15 4a90 	vmov	r4, s11
 80095b6:	ec52 1b15 	vmov	r1, r2, d5
 80095ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80095be:	2800      	cmp	r0, #0
 80095c0:	d177      	bne.n	80096b2 <_dtoa_r+0x4a2>
 80095c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80095c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80095ca:	ec42 1b17 	vmov	d7, r1, r2
 80095ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	f300 8263 	bgt.w	8009aa0 <_dtoa_r+0x890>
 80095da:	eeb1 7b47 	vneg.f64	d7, d7
 80095de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e6:	f100 8258 	bmi.w	8009a9a <_dtoa_r+0x88a>
 80095ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80095ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	f2c0 811d 	blt.w	8009830 <_dtoa_r+0x620>
 80095f6:	f1bb 0f0e 	cmp.w	fp, #14
 80095fa:	f300 8119 	bgt.w	8009830 <_dtoa_r+0x620>
 80095fe:	4b8a      	ldr	r3, [pc, #552]	; (8009828 <_dtoa_r+0x618>)
 8009600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009604:	ed93 6b00 	vldr	d6, [r3]
 8009608:	9b08      	ldr	r3, [sp, #32]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f280 80b7 	bge.w	800977e <_dtoa_r+0x56e>
 8009610:	f1b9 0f00 	cmp.w	r9, #0
 8009614:	f300 80b3 	bgt.w	800977e <_dtoa_r+0x56e>
 8009618:	f040 823f 	bne.w	8009a9a <_dtoa_r+0x88a>
 800961c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009620:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009624:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009628:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800962c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009630:	464c      	mov	r4, r9
 8009632:	464f      	mov	r7, r9
 8009634:	f280 8215 	bge.w	8009a62 <_dtoa_r+0x852>
 8009638:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800963c:	2331      	movs	r3, #49	; 0x31
 800963e:	f808 3b01 	strb.w	r3, [r8], #1
 8009642:	f10b 0b01 	add.w	fp, fp, #1
 8009646:	e211      	b.n	8009a6c <_dtoa_r+0x85c>
 8009648:	2202      	movs	r2, #2
 800964a:	e780      	b.n	800954e <_dtoa_r+0x33e>
 800964c:	07cc      	lsls	r4, r1, #31
 800964e:	d504      	bpl.n	800965a <_dtoa_r+0x44a>
 8009650:	ed90 6b00 	vldr	d6, [r0]
 8009654:	3201      	adds	r2, #1
 8009656:	ee27 7b06 	vmul.f64	d7, d7, d6
 800965a:	1049      	asrs	r1, r1, #1
 800965c:	3008      	adds	r0, #8
 800965e:	e777      	b.n	8009550 <_dtoa_r+0x340>
 8009660:	d022      	beq.n	80096a8 <_dtoa_r+0x498>
 8009662:	f1cb 0100 	rsb	r1, fp, #0
 8009666:	4a70      	ldr	r2, [pc, #448]	; (8009828 <_dtoa_r+0x618>)
 8009668:	f001 000f 	and.w	r0, r1, #15
 800966c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009670:	ed92 7b00 	vldr	d7, [r2]
 8009674:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800967c:	486b      	ldr	r0, [pc, #428]	; (800982c <_dtoa_r+0x61c>)
 800967e:	1109      	asrs	r1, r1, #4
 8009680:	2400      	movs	r4, #0
 8009682:	2202      	movs	r2, #2
 8009684:	b929      	cbnz	r1, 8009692 <_dtoa_r+0x482>
 8009686:	2c00      	cmp	r4, #0
 8009688:	f43f af6a 	beq.w	8009560 <_dtoa_r+0x350>
 800968c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009690:	e766      	b.n	8009560 <_dtoa_r+0x350>
 8009692:	07cf      	lsls	r7, r1, #31
 8009694:	d505      	bpl.n	80096a2 <_dtoa_r+0x492>
 8009696:	ed90 6b00 	vldr	d6, [r0]
 800969a:	3201      	adds	r2, #1
 800969c:	2401      	movs	r4, #1
 800969e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096a2:	1049      	asrs	r1, r1, #1
 80096a4:	3008      	adds	r0, #8
 80096a6:	e7ed      	b.n	8009684 <_dtoa_r+0x474>
 80096a8:	2202      	movs	r2, #2
 80096aa:	e759      	b.n	8009560 <_dtoa_r+0x350>
 80096ac:	465f      	mov	r7, fp
 80096ae:	4648      	mov	r0, r9
 80096b0:	e775      	b.n	800959e <_dtoa_r+0x38e>
 80096b2:	ec42 1b17 	vmov	d7, r1, r2
 80096b6:	4a5c      	ldr	r2, [pc, #368]	; (8009828 <_dtoa_r+0x618>)
 80096b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80096bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	1814      	adds	r4, r2, r0
 80096c4:	9a07      	ldr	r2, [sp, #28]
 80096c6:	b352      	cbz	r2, 800971e <_dtoa_r+0x50e>
 80096c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80096cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80096d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80096d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80096d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096e4:	ee14 2a90 	vmov	r2, s9
 80096e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80096ec:	3230      	adds	r2, #48	; 0x30
 80096ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80096f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	f808 2b01 	strb.w	r2, [r8], #1
 80096fe:	d439      	bmi.n	8009774 <_dtoa_r+0x564>
 8009700:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009704:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970c:	d472      	bmi.n	80097f4 <_dtoa_r+0x5e4>
 800970e:	45a0      	cmp	r8, r4
 8009710:	f43f af6b 	beq.w	80095ea <_dtoa_r+0x3da>
 8009714:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009718:	ee26 6b03 	vmul.f64	d6, d6, d3
 800971c:	e7e0      	b.n	80096e0 <_dtoa_r+0x4d0>
 800971e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009722:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009726:	4621      	mov	r1, r4
 8009728:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800972c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009730:	ee14 2a90 	vmov	r2, s9
 8009734:	3230      	adds	r2, #48	; 0x30
 8009736:	f808 2b01 	strb.w	r2, [r8], #1
 800973a:	45a0      	cmp	r8, r4
 800973c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009740:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009744:	d118      	bne.n	8009778 <_dtoa_r+0x568>
 8009746:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800974a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800974e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009756:	dc4d      	bgt.n	80097f4 <_dtoa_r+0x5e4>
 8009758:	ee35 7b47 	vsub.f64	d7, d5, d7
 800975c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009764:	f57f af41 	bpl.w	80095ea <_dtoa_r+0x3da>
 8009768:	4688      	mov	r8, r1
 800976a:	3901      	subs	r1, #1
 800976c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009770:	2b30      	cmp	r3, #48	; 0x30
 8009772:	d0f9      	beq.n	8009768 <_dtoa_r+0x558>
 8009774:	46bb      	mov	fp, r7
 8009776:	e02a      	b.n	80097ce <_dtoa_r+0x5be>
 8009778:	ee26 6b03 	vmul.f64	d6, d6, d3
 800977c:	e7d6      	b.n	800972c <_dtoa_r+0x51c>
 800977e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009782:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009786:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800978a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800978e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009792:	ee15 3a10 	vmov	r3, s10
 8009796:	3330      	adds	r3, #48	; 0x30
 8009798:	f808 3b01 	strb.w	r3, [r8], #1
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	eba8 0303 	sub.w	r3, r8, r3
 80097a2:	4599      	cmp	r9, r3
 80097a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80097a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80097ac:	d133      	bne.n	8009816 <_dtoa_r+0x606>
 80097ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80097b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80097b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ba:	dc1a      	bgt.n	80097f2 <_dtoa_r+0x5e2>
 80097bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80097c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c4:	d103      	bne.n	80097ce <_dtoa_r+0x5be>
 80097c6:	ee15 3a10 	vmov	r3, s10
 80097ca:	07d9      	lsls	r1, r3, #31
 80097cc:	d411      	bmi.n	80097f2 <_dtoa_r+0x5e2>
 80097ce:	4629      	mov	r1, r5
 80097d0:	4630      	mov	r0, r6
 80097d2:	f001 f877 	bl	800a8c4 <_Bfree>
 80097d6:	2300      	movs	r3, #0
 80097d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097da:	f888 3000 	strb.w	r3, [r8]
 80097de:	f10b 0301 	add.w	r3, fp, #1
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f43f ad61 	beq.w	80092ae <_dtoa_r+0x9e>
 80097ec:	f8c3 8000 	str.w	r8, [r3]
 80097f0:	e55d      	b.n	80092ae <_dtoa_r+0x9e>
 80097f2:	465f      	mov	r7, fp
 80097f4:	4643      	mov	r3, r8
 80097f6:	4698      	mov	r8, r3
 80097f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097fc:	2a39      	cmp	r2, #57	; 0x39
 80097fe:	d106      	bne.n	800980e <_dtoa_r+0x5fe>
 8009800:	9a01      	ldr	r2, [sp, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d1f7      	bne.n	80097f6 <_dtoa_r+0x5e6>
 8009806:	9901      	ldr	r1, [sp, #4]
 8009808:	2230      	movs	r2, #48	; 0x30
 800980a:	3701      	adds	r7, #1
 800980c:	700a      	strb	r2, [r1, #0]
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	3201      	adds	r2, #1
 8009812:	701a      	strb	r2, [r3, #0]
 8009814:	e7ae      	b.n	8009774 <_dtoa_r+0x564>
 8009816:	ee27 7b04 	vmul.f64	d7, d7, d4
 800981a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	d1b2      	bne.n	800978a <_dtoa_r+0x57a>
 8009824:	e7d3      	b.n	80097ce <_dtoa_r+0x5be>
 8009826:	bf00      	nop
 8009828:	0800c070 	.word	0x0800c070
 800982c:	0800c048 	.word	0x0800c048
 8009830:	9907      	ldr	r1, [sp, #28]
 8009832:	2900      	cmp	r1, #0
 8009834:	f000 80d0 	beq.w	80099d8 <_dtoa_r+0x7c8>
 8009838:	9906      	ldr	r1, [sp, #24]
 800983a:	2901      	cmp	r1, #1
 800983c:	f300 80b4 	bgt.w	80099a8 <_dtoa_r+0x798>
 8009840:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009842:	2900      	cmp	r1, #0
 8009844:	f000 80ac 	beq.w	80099a0 <_dtoa_r+0x790>
 8009848:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800984c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009850:	461c      	mov	r4, r3
 8009852:	930a      	str	r3, [sp, #40]	; 0x28
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	4413      	add	r3, r2
 8009858:	9304      	str	r3, [sp, #16]
 800985a:	9b05      	ldr	r3, [sp, #20]
 800985c:	2101      	movs	r1, #1
 800985e:	4413      	add	r3, r2
 8009860:	4630      	mov	r0, r6
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	f001 f930 	bl	800aac8 <__i2b>
 8009868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986a:	4607      	mov	r7, r0
 800986c:	f1b8 0f00 	cmp.w	r8, #0
 8009870:	dd0d      	ble.n	800988e <_dtoa_r+0x67e>
 8009872:	9a05      	ldr	r2, [sp, #20]
 8009874:	2a00      	cmp	r2, #0
 8009876:	dd0a      	ble.n	800988e <_dtoa_r+0x67e>
 8009878:	4542      	cmp	r2, r8
 800987a:	9904      	ldr	r1, [sp, #16]
 800987c:	bfa8      	it	ge
 800987e:	4642      	movge	r2, r8
 8009880:	1a89      	subs	r1, r1, r2
 8009882:	9104      	str	r1, [sp, #16]
 8009884:	9905      	ldr	r1, [sp, #20]
 8009886:	eba8 0802 	sub.w	r8, r8, r2
 800988a:	1a8a      	subs	r2, r1, r2
 800988c:	9205      	str	r2, [sp, #20]
 800988e:	b303      	cbz	r3, 80098d2 <_dtoa_r+0x6c2>
 8009890:	9a07      	ldr	r2, [sp, #28]
 8009892:	2a00      	cmp	r2, #0
 8009894:	f000 80a5 	beq.w	80099e2 <_dtoa_r+0x7d2>
 8009898:	2c00      	cmp	r4, #0
 800989a:	dd13      	ble.n	80098c4 <_dtoa_r+0x6b4>
 800989c:	4639      	mov	r1, r7
 800989e:	4622      	mov	r2, r4
 80098a0:	4630      	mov	r0, r6
 80098a2:	930d      	str	r3, [sp, #52]	; 0x34
 80098a4:	f001 f9d0 	bl	800ac48 <__pow5mult>
 80098a8:	462a      	mov	r2, r5
 80098aa:	4601      	mov	r1, r0
 80098ac:	4607      	mov	r7, r0
 80098ae:	4630      	mov	r0, r6
 80098b0:	f001 f920 	bl	800aaf4 <__multiply>
 80098b4:	4629      	mov	r1, r5
 80098b6:	900a      	str	r0, [sp, #40]	; 0x28
 80098b8:	4630      	mov	r0, r6
 80098ba:	f001 f803 	bl	800a8c4 <_Bfree>
 80098be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098c2:	4615      	mov	r5, r2
 80098c4:	1b1a      	subs	r2, r3, r4
 80098c6:	d004      	beq.n	80098d2 <_dtoa_r+0x6c2>
 80098c8:	4629      	mov	r1, r5
 80098ca:	4630      	mov	r0, r6
 80098cc:	f001 f9bc 	bl	800ac48 <__pow5mult>
 80098d0:	4605      	mov	r5, r0
 80098d2:	2101      	movs	r1, #1
 80098d4:	4630      	mov	r0, r6
 80098d6:	f001 f8f7 	bl	800aac8 <__i2b>
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	f340 8081 	ble.w	80099e6 <_dtoa_r+0x7d6>
 80098e4:	461a      	mov	r2, r3
 80098e6:	4601      	mov	r1, r0
 80098e8:	4630      	mov	r0, r6
 80098ea:	f001 f9ad 	bl	800ac48 <__pow5mult>
 80098ee:	9b06      	ldr	r3, [sp, #24]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	4604      	mov	r4, r0
 80098f4:	dd7a      	ble.n	80099ec <_dtoa_r+0x7dc>
 80098f6:	2300      	movs	r3, #0
 80098f8:	930a      	str	r3, [sp, #40]	; 0x28
 80098fa:	6922      	ldr	r2, [r4, #16]
 80098fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009900:	6910      	ldr	r0, [r2, #16]
 8009902:	f001 f891 	bl	800aa28 <__hi0bits>
 8009906:	f1c0 0020 	rsb	r0, r0, #32
 800990a:	9b05      	ldr	r3, [sp, #20]
 800990c:	4418      	add	r0, r3
 800990e:	f010 001f 	ands.w	r0, r0, #31
 8009912:	f000 808c 	beq.w	8009a2e <_dtoa_r+0x81e>
 8009916:	f1c0 0220 	rsb	r2, r0, #32
 800991a:	2a04      	cmp	r2, #4
 800991c:	f340 8085 	ble.w	8009a2a <_dtoa_r+0x81a>
 8009920:	f1c0 001c 	rsb	r0, r0, #28
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	4403      	add	r3, r0
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	9b05      	ldr	r3, [sp, #20]
 800992c:	4403      	add	r3, r0
 800992e:	4480      	add	r8, r0
 8009930:	9305      	str	r3, [sp, #20]
 8009932:	9b04      	ldr	r3, [sp, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	dd05      	ble.n	8009944 <_dtoa_r+0x734>
 8009938:	4629      	mov	r1, r5
 800993a:	461a      	mov	r2, r3
 800993c:	4630      	mov	r0, r6
 800993e:	f001 f9dd 	bl	800acfc <__lshift>
 8009942:	4605      	mov	r5, r0
 8009944:	9b05      	ldr	r3, [sp, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd05      	ble.n	8009956 <_dtoa_r+0x746>
 800994a:	4621      	mov	r1, r4
 800994c:	461a      	mov	r2, r3
 800994e:	4630      	mov	r0, r6
 8009950:	f001 f9d4 	bl	800acfc <__lshift>
 8009954:	4604      	mov	r4, r0
 8009956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d06a      	beq.n	8009a32 <_dtoa_r+0x822>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f001 fa3c 	bl	800addc <__mcmp>
 8009964:	2800      	cmp	r0, #0
 8009966:	da64      	bge.n	8009a32 <_dtoa_r+0x822>
 8009968:	2300      	movs	r3, #0
 800996a:	4629      	mov	r1, r5
 800996c:	220a      	movs	r2, #10
 800996e:	4630      	mov	r0, r6
 8009970:	f000 ffca 	bl	800a908 <__multadd>
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	f10b 3bff 	add.w	fp, fp, #4294967295
 800997a:	4605      	mov	r5, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 8191 	beq.w	8009ca4 <_dtoa_r+0xa94>
 8009982:	4639      	mov	r1, r7
 8009984:	2300      	movs	r3, #0
 8009986:	220a      	movs	r2, #10
 8009988:	4630      	mov	r0, r6
 800998a:	f000 ffbd 	bl	800a908 <__multadd>
 800998e:	f1ba 0f00 	cmp.w	sl, #0
 8009992:	4607      	mov	r7, r0
 8009994:	f300 808d 	bgt.w	8009ab2 <_dtoa_r+0x8a2>
 8009998:	9b06      	ldr	r3, [sp, #24]
 800999a:	2b02      	cmp	r3, #2
 800999c:	dc50      	bgt.n	8009a40 <_dtoa_r+0x830>
 800999e:	e088      	b.n	8009ab2 <_dtoa_r+0x8a2>
 80099a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099a6:	e751      	b.n	800984c <_dtoa_r+0x63c>
 80099a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	bfbf      	itttt	lt
 80099b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80099b2:	1ae3      	sublt	r3, r4, r3
 80099b4:	18d2      	addlt	r2, r2, r3
 80099b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80099b8:	bfb6      	itet	lt
 80099ba:	4623      	movlt	r3, r4
 80099bc:	1b1c      	subge	r4, r3, r4
 80099be:	2400      	movlt	r4, #0
 80099c0:	f1b9 0f00 	cmp.w	r9, #0
 80099c4:	bfb5      	itete	lt
 80099c6:	9a04      	ldrlt	r2, [sp, #16]
 80099c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80099cc:	eba2 0809 	sublt.w	r8, r2, r9
 80099d0:	464a      	movge	r2, r9
 80099d2:	bfb8      	it	lt
 80099d4:	2200      	movlt	r2, #0
 80099d6:	e73c      	b.n	8009852 <_dtoa_r+0x642>
 80099d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80099dc:	9f07      	ldr	r7, [sp, #28]
 80099de:	461c      	mov	r4, r3
 80099e0:	e744      	b.n	800986c <_dtoa_r+0x65c>
 80099e2:	461a      	mov	r2, r3
 80099e4:	e770      	b.n	80098c8 <_dtoa_r+0x6b8>
 80099e6:	9b06      	ldr	r3, [sp, #24]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	dc18      	bgt.n	8009a1e <_dtoa_r+0x80e>
 80099ec:	9b02      	ldr	r3, [sp, #8]
 80099ee:	b9b3      	cbnz	r3, 8009a1e <_dtoa_r+0x80e>
 80099f0:	9b03      	ldr	r3, [sp, #12]
 80099f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80099f6:	b9a2      	cbnz	r2, 8009a22 <_dtoa_r+0x812>
 80099f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099fc:	0d12      	lsrs	r2, r2, #20
 80099fe:	0512      	lsls	r2, r2, #20
 8009a00:	b18a      	cbz	r2, 8009a26 <_dtoa_r+0x816>
 8009a02:	9b04      	ldr	r3, [sp, #16]
 8009a04:	3301      	adds	r3, #1
 8009a06:	9304      	str	r3, [sp, #16]
 8009a08:	9b05      	ldr	r3, [sp, #20]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	9305      	str	r3, [sp, #20]
 8009a0e:	2301      	movs	r3, #1
 8009a10:	930a      	str	r3, [sp, #40]	; 0x28
 8009a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f47f af70 	bne.w	80098fa <_dtoa_r+0x6ea>
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	e775      	b.n	800990a <_dtoa_r+0x6fa>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	e7f6      	b.n	8009a10 <_dtoa_r+0x800>
 8009a22:	9b02      	ldr	r3, [sp, #8]
 8009a24:	e7f4      	b.n	8009a10 <_dtoa_r+0x800>
 8009a26:	920a      	str	r2, [sp, #40]	; 0x28
 8009a28:	e7f3      	b.n	8009a12 <_dtoa_r+0x802>
 8009a2a:	d082      	beq.n	8009932 <_dtoa_r+0x722>
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	301c      	adds	r0, #28
 8009a30:	e778      	b.n	8009924 <_dtoa_r+0x714>
 8009a32:	f1b9 0f00 	cmp.w	r9, #0
 8009a36:	dc37      	bgt.n	8009aa8 <_dtoa_r+0x898>
 8009a38:	9b06      	ldr	r3, [sp, #24]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	dd34      	ble.n	8009aa8 <_dtoa_r+0x898>
 8009a3e:	46ca      	mov	sl, r9
 8009a40:	f1ba 0f00 	cmp.w	sl, #0
 8009a44:	d10d      	bne.n	8009a62 <_dtoa_r+0x852>
 8009a46:	4621      	mov	r1, r4
 8009a48:	4653      	mov	r3, sl
 8009a4a:	2205      	movs	r2, #5
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f000 ff5b 	bl	800a908 <__multadd>
 8009a52:	4601      	mov	r1, r0
 8009a54:	4604      	mov	r4, r0
 8009a56:	4628      	mov	r0, r5
 8009a58:	f001 f9c0 	bl	800addc <__mcmp>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f73f adeb 	bgt.w	8009638 <_dtoa_r+0x428>
 8009a62:	9b08      	ldr	r3, [sp, #32]
 8009a64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a68:	ea6f 0b03 	mvn.w	fp, r3
 8009a6c:	f04f 0900 	mov.w	r9, #0
 8009a70:	4621      	mov	r1, r4
 8009a72:	4630      	mov	r0, r6
 8009a74:	f000 ff26 	bl	800a8c4 <_Bfree>
 8009a78:	2f00      	cmp	r7, #0
 8009a7a:	f43f aea8 	beq.w	80097ce <_dtoa_r+0x5be>
 8009a7e:	f1b9 0f00 	cmp.w	r9, #0
 8009a82:	d005      	beq.n	8009a90 <_dtoa_r+0x880>
 8009a84:	45b9      	cmp	r9, r7
 8009a86:	d003      	beq.n	8009a90 <_dtoa_r+0x880>
 8009a88:	4649      	mov	r1, r9
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f000 ff1a 	bl	800a8c4 <_Bfree>
 8009a90:	4639      	mov	r1, r7
 8009a92:	4630      	mov	r0, r6
 8009a94:	f000 ff16 	bl	800a8c4 <_Bfree>
 8009a98:	e699      	b.n	80097ce <_dtoa_r+0x5be>
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	4627      	mov	r7, r4
 8009a9e:	e7e0      	b.n	8009a62 <_dtoa_r+0x852>
 8009aa0:	46bb      	mov	fp, r7
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	e5c7      	b.n	8009638 <_dtoa_r+0x428>
 8009aa8:	9b07      	ldr	r3, [sp, #28]
 8009aaa:	46ca      	mov	sl, r9
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8100 	beq.w	8009cb2 <_dtoa_r+0xaa2>
 8009ab2:	f1b8 0f00 	cmp.w	r8, #0
 8009ab6:	dd05      	ble.n	8009ac4 <_dtoa_r+0x8b4>
 8009ab8:	4639      	mov	r1, r7
 8009aba:	4642      	mov	r2, r8
 8009abc:	4630      	mov	r0, r6
 8009abe:	f001 f91d 	bl	800acfc <__lshift>
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d05d      	beq.n	8009b86 <_dtoa_r+0x976>
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	4630      	mov	r0, r6
 8009ace:	f000 feb9 	bl	800a844 <_Balloc>
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	b928      	cbnz	r0, 8009ae2 <_dtoa_r+0x8d2>
 8009ad6:	4b82      	ldr	r3, [pc, #520]	; (8009ce0 <_dtoa_r+0xad0>)
 8009ad8:	4602      	mov	r2, r0
 8009ada:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ade:	f7ff bbaf 	b.w	8009240 <_dtoa_r+0x30>
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	3202      	adds	r2, #2
 8009ae6:	0092      	lsls	r2, r2, #2
 8009ae8:	f107 010c 	add.w	r1, r7, #12
 8009aec:	300c      	adds	r0, #12
 8009aee:	f7fd fd63 	bl	80075b8 <memcpy>
 8009af2:	2201      	movs	r2, #1
 8009af4:	4641      	mov	r1, r8
 8009af6:	4630      	mov	r0, r6
 8009af8:	f001 f900 	bl	800acfc <__lshift>
 8009afc:	9b01      	ldr	r3, [sp, #4]
 8009afe:	3301      	adds	r3, #1
 8009b00:	9304      	str	r3, [sp, #16]
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	4453      	add	r3, sl
 8009b06:	9308      	str	r3, [sp, #32]
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	46b9      	mov	r9, r7
 8009b10:	9307      	str	r3, [sp, #28]
 8009b12:	4607      	mov	r7, r0
 8009b14:	9b04      	ldr	r3, [sp, #16]
 8009b16:	4621      	mov	r1, r4
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	f7ff faeb 	bl	80090f8 <quorem>
 8009b22:	4603      	mov	r3, r0
 8009b24:	3330      	adds	r3, #48	; 0x30
 8009b26:	9005      	str	r0, [sp, #20]
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b2e:	f001 f955 	bl	800addc <__mcmp>
 8009b32:	463a      	mov	r2, r7
 8009b34:	4682      	mov	sl, r0
 8009b36:	4621      	mov	r1, r4
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f001 f96b 	bl	800ae14 <__mdiff>
 8009b3e:	68c2      	ldr	r2, [r0, #12]
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	4680      	mov	r8, r0
 8009b44:	bb0a      	cbnz	r2, 8009b8a <_dtoa_r+0x97a>
 8009b46:	4601      	mov	r1, r0
 8009b48:	4628      	mov	r0, r5
 8009b4a:	f001 f947 	bl	800addc <__mcmp>
 8009b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b50:	4602      	mov	r2, r0
 8009b52:	4641      	mov	r1, r8
 8009b54:	4630      	mov	r0, r6
 8009b56:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009b5a:	f000 feb3 	bl	800a8c4 <_Bfree>
 8009b5e:	9b06      	ldr	r3, [sp, #24]
 8009b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b62:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009b66:	ea43 0102 	orr.w	r1, r3, r2
 8009b6a:	9b07      	ldr	r3, [sp, #28]
 8009b6c:	430b      	orrs	r3, r1
 8009b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b70:	d10d      	bne.n	8009b8e <_dtoa_r+0x97e>
 8009b72:	2b39      	cmp	r3, #57	; 0x39
 8009b74:	d029      	beq.n	8009bca <_dtoa_r+0x9ba>
 8009b76:	f1ba 0f00 	cmp.w	sl, #0
 8009b7a:	dd01      	ble.n	8009b80 <_dtoa_r+0x970>
 8009b7c:	9b05      	ldr	r3, [sp, #20]
 8009b7e:	3331      	adds	r3, #49	; 0x31
 8009b80:	9a02      	ldr	r2, [sp, #8]
 8009b82:	7013      	strb	r3, [r2, #0]
 8009b84:	e774      	b.n	8009a70 <_dtoa_r+0x860>
 8009b86:	4638      	mov	r0, r7
 8009b88:	e7b8      	b.n	8009afc <_dtoa_r+0x8ec>
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	e7e1      	b.n	8009b52 <_dtoa_r+0x942>
 8009b8e:	f1ba 0f00 	cmp.w	sl, #0
 8009b92:	db06      	blt.n	8009ba2 <_dtoa_r+0x992>
 8009b94:	9906      	ldr	r1, [sp, #24]
 8009b96:	ea41 0a0a 	orr.w	sl, r1, sl
 8009b9a:	9907      	ldr	r1, [sp, #28]
 8009b9c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009ba0:	d120      	bne.n	8009be4 <_dtoa_r+0x9d4>
 8009ba2:	2a00      	cmp	r2, #0
 8009ba4:	ddec      	ble.n	8009b80 <_dtoa_r+0x970>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	2201      	movs	r2, #1
 8009baa:	4630      	mov	r0, r6
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	f001 f8a5 	bl	800acfc <__lshift>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	f001 f911 	bl	800addc <__mcmp>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	9b04      	ldr	r3, [sp, #16]
 8009bbe:	dc02      	bgt.n	8009bc6 <_dtoa_r+0x9b6>
 8009bc0:	d1de      	bne.n	8009b80 <_dtoa_r+0x970>
 8009bc2:	07da      	lsls	r2, r3, #31
 8009bc4:	d5dc      	bpl.n	8009b80 <_dtoa_r+0x970>
 8009bc6:	2b39      	cmp	r3, #57	; 0x39
 8009bc8:	d1d8      	bne.n	8009b7c <_dtoa_r+0x96c>
 8009bca:	9a02      	ldr	r2, [sp, #8]
 8009bcc:	2339      	movs	r3, #57	; 0x39
 8009bce:	7013      	strb	r3, [r2, #0]
 8009bd0:	4643      	mov	r3, r8
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009bda:	2a39      	cmp	r2, #57	; 0x39
 8009bdc:	d051      	beq.n	8009c82 <_dtoa_r+0xa72>
 8009bde:	3201      	adds	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	e745      	b.n	8009a70 <_dtoa_r+0x860>
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	dd03      	ble.n	8009bf0 <_dtoa_r+0x9e0>
 8009be8:	2b39      	cmp	r3, #57	; 0x39
 8009bea:	d0ee      	beq.n	8009bca <_dtoa_r+0x9ba>
 8009bec:	3301      	adds	r3, #1
 8009bee:	e7c7      	b.n	8009b80 <_dtoa_r+0x970>
 8009bf0:	9a04      	ldr	r2, [sp, #16]
 8009bf2:	9908      	ldr	r1, [sp, #32]
 8009bf4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bf8:	428a      	cmp	r2, r1
 8009bfa:	d02b      	beq.n	8009c54 <_dtoa_r+0xa44>
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	2300      	movs	r3, #0
 8009c00:	220a      	movs	r2, #10
 8009c02:	4630      	mov	r0, r6
 8009c04:	f000 fe80 	bl	800a908 <__multadd>
 8009c08:	45b9      	cmp	r9, r7
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	f04f 0300 	mov.w	r3, #0
 8009c10:	f04f 020a 	mov.w	r2, #10
 8009c14:	4649      	mov	r1, r9
 8009c16:	4630      	mov	r0, r6
 8009c18:	d107      	bne.n	8009c2a <_dtoa_r+0xa1a>
 8009c1a:	f000 fe75 	bl	800a908 <__multadd>
 8009c1e:	4681      	mov	r9, r0
 8009c20:	4607      	mov	r7, r0
 8009c22:	9b04      	ldr	r3, [sp, #16]
 8009c24:	3301      	adds	r3, #1
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	e774      	b.n	8009b14 <_dtoa_r+0x904>
 8009c2a:	f000 fe6d 	bl	800a908 <__multadd>
 8009c2e:	4639      	mov	r1, r7
 8009c30:	4681      	mov	r9, r0
 8009c32:	2300      	movs	r3, #0
 8009c34:	220a      	movs	r2, #10
 8009c36:	4630      	mov	r0, r6
 8009c38:	f000 fe66 	bl	800a908 <__multadd>
 8009c3c:	4607      	mov	r7, r0
 8009c3e:	e7f0      	b.n	8009c22 <_dtoa_r+0xa12>
 8009c40:	f1ba 0f00 	cmp.w	sl, #0
 8009c44:	9a01      	ldr	r2, [sp, #4]
 8009c46:	bfcc      	ite	gt
 8009c48:	46d0      	movgt	r8, sl
 8009c4a:	f04f 0801 	movle.w	r8, #1
 8009c4e:	4490      	add	r8, r2
 8009c50:	f04f 0900 	mov.w	r9, #0
 8009c54:	4629      	mov	r1, r5
 8009c56:	2201      	movs	r2, #1
 8009c58:	4630      	mov	r0, r6
 8009c5a:	9302      	str	r3, [sp, #8]
 8009c5c:	f001 f84e 	bl	800acfc <__lshift>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4605      	mov	r5, r0
 8009c64:	f001 f8ba 	bl	800addc <__mcmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	dcb1      	bgt.n	8009bd0 <_dtoa_r+0x9c0>
 8009c6c:	d102      	bne.n	8009c74 <_dtoa_r+0xa64>
 8009c6e:	9b02      	ldr	r3, [sp, #8]
 8009c70:	07db      	lsls	r3, r3, #31
 8009c72:	d4ad      	bmi.n	8009bd0 <_dtoa_r+0x9c0>
 8009c74:	4643      	mov	r3, r8
 8009c76:	4698      	mov	r8, r3
 8009c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7c:	2a30      	cmp	r2, #48	; 0x30
 8009c7e:	d0fa      	beq.n	8009c76 <_dtoa_r+0xa66>
 8009c80:	e6f6      	b.n	8009a70 <_dtoa_r+0x860>
 8009c82:	9a01      	ldr	r2, [sp, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d1a4      	bne.n	8009bd2 <_dtoa_r+0x9c2>
 8009c88:	f10b 0b01 	add.w	fp, fp, #1
 8009c8c:	2331      	movs	r3, #49	; 0x31
 8009c8e:	e778      	b.n	8009b82 <_dtoa_r+0x972>
 8009c90:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <_dtoa_r+0xad4>)
 8009c92:	f7ff bb27 	b.w	80092e4 <_dtoa_r+0xd4>
 8009c96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f47f ab03 	bne.w	80092a4 <_dtoa_r+0x94>
 8009c9e:	4b12      	ldr	r3, [pc, #72]	; (8009ce8 <_dtoa_r+0xad8>)
 8009ca0:	f7ff bb20 	b.w	80092e4 <_dtoa_r+0xd4>
 8009ca4:	f1ba 0f00 	cmp.w	sl, #0
 8009ca8:	dc03      	bgt.n	8009cb2 <_dtoa_r+0xaa2>
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	f73f aec7 	bgt.w	8009a40 <_dtoa_r+0x830>
 8009cb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f7ff fa1d 	bl	80090f8 <quorem>
 8009cbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009cc2:	f808 3b01 	strb.w	r3, [r8], #1
 8009cc6:	9a01      	ldr	r2, [sp, #4]
 8009cc8:	eba8 0202 	sub.w	r2, r8, r2
 8009ccc:	4592      	cmp	sl, r2
 8009cce:	ddb7      	ble.n	8009c40 <_dtoa_r+0xa30>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f000 fe16 	bl	800a908 <__multadd>
 8009cdc:	4605      	mov	r5, r0
 8009cde:	e7ea      	b.n	8009cb6 <_dtoa_r+0xaa6>
 8009ce0:	0800bef8 	.word	0x0800bef8
 8009ce4:	0800bcfc 	.word	0x0800bcfc
 8009ce8:	0800be79 	.word	0x0800be79

08009cec <__sflush_r>:
 8009cec:	898a      	ldrh	r2, [r1, #12]
 8009cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	0710      	lsls	r0, r2, #28
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	d458      	bmi.n	8009dac <__sflush_r+0xc0>
 8009cfa:	684b      	ldr	r3, [r1, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dc05      	bgt.n	8009d0c <__sflush_r+0x20>
 8009d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	dc02      	bgt.n	8009d0c <__sflush_r+0x20>
 8009d06:	2000      	movs	r0, #0
 8009d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	d0f9      	beq.n	8009d06 <__sflush_r+0x1a>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d18:	682f      	ldr	r7, [r5, #0]
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	d032      	beq.n	8009d84 <__sflush_r+0x98>
 8009d1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	075a      	lsls	r2, r3, #29
 8009d24:	d505      	bpl.n	8009d32 <__sflush_r+0x46>
 8009d26:	6863      	ldr	r3, [r4, #4]
 8009d28:	1ac0      	subs	r0, r0, r3
 8009d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d2c:	b10b      	cbz	r3, 8009d32 <__sflush_r+0x46>
 8009d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d30:	1ac0      	subs	r0, r0, r3
 8009d32:	2300      	movs	r3, #0
 8009d34:	4602      	mov	r2, r0
 8009d36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d38:	6a21      	ldr	r1, [r4, #32]
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b0      	blx	r6
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	d106      	bne.n	8009d52 <__sflush_r+0x66>
 8009d44:	6829      	ldr	r1, [r5, #0]
 8009d46:	291d      	cmp	r1, #29
 8009d48:	d82c      	bhi.n	8009da4 <__sflush_r+0xb8>
 8009d4a:	4a2a      	ldr	r2, [pc, #168]	; (8009df4 <__sflush_r+0x108>)
 8009d4c:	40ca      	lsrs	r2, r1
 8009d4e:	07d6      	lsls	r6, r2, #31
 8009d50:	d528      	bpl.n	8009da4 <__sflush_r+0xb8>
 8009d52:	2200      	movs	r2, #0
 8009d54:	6062      	str	r2, [r4, #4]
 8009d56:	04d9      	lsls	r1, r3, #19
 8009d58:	6922      	ldr	r2, [r4, #16]
 8009d5a:	6022      	str	r2, [r4, #0]
 8009d5c:	d504      	bpl.n	8009d68 <__sflush_r+0x7c>
 8009d5e:	1c42      	adds	r2, r0, #1
 8009d60:	d101      	bne.n	8009d66 <__sflush_r+0x7a>
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	b903      	cbnz	r3, 8009d68 <__sflush_r+0x7c>
 8009d66:	6560      	str	r0, [r4, #84]	; 0x54
 8009d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d6a:	602f      	str	r7, [r5, #0]
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	d0ca      	beq.n	8009d06 <__sflush_r+0x1a>
 8009d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d74:	4299      	cmp	r1, r3
 8009d76:	d002      	beq.n	8009d7e <__sflush_r+0x92>
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f001 fa37 	bl	800b1ec <_free_r>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	6360      	str	r0, [r4, #52]	; 0x34
 8009d82:	e7c1      	b.n	8009d08 <__sflush_r+0x1c>
 8009d84:	6a21      	ldr	r1, [r4, #32]
 8009d86:	2301      	movs	r3, #1
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b0      	blx	r6
 8009d8c:	1c41      	adds	r1, r0, #1
 8009d8e:	d1c7      	bne.n	8009d20 <__sflush_r+0x34>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c4      	beq.n	8009d20 <__sflush_r+0x34>
 8009d96:	2b1d      	cmp	r3, #29
 8009d98:	d001      	beq.n	8009d9e <__sflush_r+0xb2>
 8009d9a:	2b16      	cmp	r3, #22
 8009d9c:	d101      	bne.n	8009da2 <__sflush_r+0xb6>
 8009d9e:	602f      	str	r7, [r5, #0]
 8009da0:	e7b1      	b.n	8009d06 <__sflush_r+0x1a>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	e7ad      	b.n	8009d08 <__sflush_r+0x1c>
 8009dac:	690f      	ldr	r7, [r1, #16]
 8009dae:	2f00      	cmp	r7, #0
 8009db0:	d0a9      	beq.n	8009d06 <__sflush_r+0x1a>
 8009db2:	0793      	lsls	r3, r2, #30
 8009db4:	680e      	ldr	r6, [r1, #0]
 8009db6:	bf08      	it	eq
 8009db8:	694b      	ldreq	r3, [r1, #20]
 8009dba:	600f      	str	r7, [r1, #0]
 8009dbc:	bf18      	it	ne
 8009dbe:	2300      	movne	r3, #0
 8009dc0:	eba6 0807 	sub.w	r8, r6, r7
 8009dc4:	608b      	str	r3, [r1, #8]
 8009dc6:	f1b8 0f00 	cmp.w	r8, #0
 8009dca:	dd9c      	ble.n	8009d06 <__sflush_r+0x1a>
 8009dcc:	6a21      	ldr	r1, [r4, #32]
 8009dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dd0:	4643      	mov	r3, r8
 8009dd2:	463a      	mov	r2, r7
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b0      	blx	r6
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	dc06      	bgt.n	8009dea <__sflush_r+0xfe>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	e78e      	b.n	8009d08 <__sflush_r+0x1c>
 8009dea:	4407      	add	r7, r0
 8009dec:	eba8 0800 	sub.w	r8, r8, r0
 8009df0:	e7e9      	b.n	8009dc6 <__sflush_r+0xda>
 8009df2:	bf00      	nop
 8009df4:	20400001 	.word	0x20400001

08009df8 <_fflush_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	690b      	ldr	r3, [r1, #16]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b913      	cbnz	r3, 8009e08 <_fflush_r+0x10>
 8009e02:	2500      	movs	r5, #0
 8009e04:	4628      	mov	r0, r5
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	b118      	cbz	r0, 8009e12 <_fflush_r+0x1a>
 8009e0a:	6983      	ldr	r3, [r0, #24]
 8009e0c:	b90b      	cbnz	r3, 8009e12 <_fflush_r+0x1a>
 8009e0e:	f000 f887 	bl	8009f20 <__sinit>
 8009e12:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <_fflush_r+0x6c>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	d11b      	bne.n	8009e50 <_fflush_r+0x58>
 8009e18:	686c      	ldr	r4, [r5, #4]
 8009e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0ef      	beq.n	8009e02 <_fflush_r+0xa>
 8009e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e24:	07d0      	lsls	r0, r2, #31
 8009e26:	d404      	bmi.n	8009e32 <_fflush_r+0x3a>
 8009e28:	0599      	lsls	r1, r3, #22
 8009e2a:	d402      	bmi.n	8009e32 <_fflush_r+0x3a>
 8009e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e2e:	f000 fc88 	bl	800a742 <__retarget_lock_acquire_recursive>
 8009e32:	4628      	mov	r0, r5
 8009e34:	4621      	mov	r1, r4
 8009e36:	f7ff ff59 	bl	8009cec <__sflush_r>
 8009e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e3c:	07da      	lsls	r2, r3, #31
 8009e3e:	4605      	mov	r5, r0
 8009e40:	d4e0      	bmi.n	8009e04 <_fflush_r+0xc>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	059b      	lsls	r3, r3, #22
 8009e46:	d4dd      	bmi.n	8009e04 <_fflush_r+0xc>
 8009e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e4a:	f000 fc7b 	bl	800a744 <__retarget_lock_release_recursive>
 8009e4e:	e7d9      	b.n	8009e04 <_fflush_r+0xc>
 8009e50:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <_fflush_r+0x70>)
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d101      	bne.n	8009e5a <_fflush_r+0x62>
 8009e56:	68ac      	ldr	r4, [r5, #8]
 8009e58:	e7df      	b.n	8009e1a <_fflush_r+0x22>
 8009e5a:	4b04      	ldr	r3, [pc, #16]	; (8009e6c <_fflush_r+0x74>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	bf08      	it	eq
 8009e60:	68ec      	ldreq	r4, [r5, #12]
 8009e62:	e7da      	b.n	8009e1a <_fflush_r+0x22>
 8009e64:	0800bf2c 	.word	0x0800bf2c
 8009e68:	0800bf4c 	.word	0x0800bf4c
 8009e6c:	0800bf0c 	.word	0x0800bf0c

08009e70 <std>:
 8009e70:	2300      	movs	r3, #0
 8009e72:	b510      	push	{r4, lr}
 8009e74:	4604      	mov	r4, r0
 8009e76:	e9c0 3300 	strd	r3, r3, [r0]
 8009e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e7e:	6083      	str	r3, [r0, #8]
 8009e80:	8181      	strh	r1, [r0, #12]
 8009e82:	6643      	str	r3, [r0, #100]	; 0x64
 8009e84:	81c2      	strh	r2, [r0, #14]
 8009e86:	6183      	str	r3, [r0, #24]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	305c      	adds	r0, #92	; 0x5c
 8009e8e:	f7fd fba1 	bl	80075d4 <memset>
 8009e92:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <std+0x38>)
 8009e94:	6263      	str	r3, [r4, #36]	; 0x24
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <std+0x3c>)
 8009e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <std+0x40>)
 8009e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <std+0x44>)
 8009ea0:	6224      	str	r4, [r4, #32]
 8009ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	bf00      	nop
 8009ea8:	0800b949 	.word	0x0800b949
 8009eac:	0800b96b 	.word	0x0800b96b
 8009eb0:	0800b9a3 	.word	0x0800b9a3
 8009eb4:	0800b9c7 	.word	0x0800b9c7

08009eb8 <_cleanup_r>:
 8009eb8:	4901      	ldr	r1, [pc, #4]	; (8009ec0 <_cleanup_r+0x8>)
 8009eba:	f000 b8af 	b.w	800a01c <_fwalk_reent>
 8009ebe:	bf00      	nop
 8009ec0:	08009df9 	.word	0x08009df9

08009ec4 <__sfmoreglue>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	2268      	movs	r2, #104	; 0x68
 8009ec8:	1e4d      	subs	r5, r1, #1
 8009eca:	4355      	muls	r5, r2
 8009ecc:	460e      	mov	r6, r1
 8009ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ed2:	f001 f9f7 	bl	800b2c4 <_malloc_r>
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	b140      	cbz	r0, 8009eec <__sfmoreglue+0x28>
 8009eda:	2100      	movs	r1, #0
 8009edc:	e9c0 1600 	strd	r1, r6, [r0]
 8009ee0:	300c      	adds	r0, #12
 8009ee2:	60a0      	str	r0, [r4, #8]
 8009ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ee8:	f7fd fb74 	bl	80075d4 <memset>
 8009eec:	4620      	mov	r0, r4
 8009eee:	bd70      	pop	{r4, r5, r6, pc}

08009ef0 <__sfp_lock_acquire>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__sfp_lock_acquire+0x8>)
 8009ef2:	f000 bc26 	b.w	800a742 <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	24000911 	.word	0x24000911

08009efc <__sfp_lock_release>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sfp_lock_release+0x8>)
 8009efe:	f000 bc21 	b.w	800a744 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	24000911 	.word	0x24000911

08009f08 <__sinit_lock_acquire>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__sinit_lock_acquire+0x8>)
 8009f0a:	f000 bc1a 	b.w	800a742 <__retarget_lock_acquire_recursive>
 8009f0e:	bf00      	nop
 8009f10:	24000912 	.word	0x24000912

08009f14 <__sinit_lock_release>:
 8009f14:	4801      	ldr	r0, [pc, #4]	; (8009f1c <__sinit_lock_release+0x8>)
 8009f16:	f000 bc15 	b.w	800a744 <__retarget_lock_release_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	24000912 	.word	0x24000912

08009f20 <__sinit>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	4604      	mov	r4, r0
 8009f24:	f7ff fff0 	bl	8009f08 <__sinit_lock_acquire>
 8009f28:	69a3      	ldr	r3, [r4, #24]
 8009f2a:	b11b      	cbz	r3, 8009f34 <__sinit+0x14>
 8009f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f30:	f7ff bff0 	b.w	8009f14 <__sinit_lock_release>
 8009f34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f38:	6523      	str	r3, [r4, #80]	; 0x50
 8009f3a:	4b13      	ldr	r3, [pc, #76]	; (8009f88 <__sinit+0x68>)
 8009f3c:	4a13      	ldr	r2, [pc, #76]	; (8009f8c <__sinit+0x6c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f42:	42a3      	cmp	r3, r4
 8009f44:	bf04      	itt	eq
 8009f46:	2301      	moveq	r3, #1
 8009f48:	61a3      	streq	r3, [r4, #24]
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f820 	bl	8009f90 <__sfp>
 8009f50:	6060      	str	r0, [r4, #4]
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f81c 	bl	8009f90 <__sfp>
 8009f58:	60a0      	str	r0, [r4, #8]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f818 	bl	8009f90 <__sfp>
 8009f60:	2200      	movs	r2, #0
 8009f62:	60e0      	str	r0, [r4, #12]
 8009f64:	2104      	movs	r1, #4
 8009f66:	6860      	ldr	r0, [r4, #4]
 8009f68:	f7ff ff82 	bl	8009e70 <std>
 8009f6c:	68a0      	ldr	r0, [r4, #8]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	2109      	movs	r1, #9
 8009f72:	f7ff ff7d 	bl	8009e70 <std>
 8009f76:	68e0      	ldr	r0, [r4, #12]
 8009f78:	2202      	movs	r2, #2
 8009f7a:	2112      	movs	r1, #18
 8009f7c:	f7ff ff78 	bl	8009e70 <std>
 8009f80:	2301      	movs	r3, #1
 8009f82:	61a3      	str	r3, [r4, #24]
 8009f84:	e7d2      	b.n	8009f2c <__sinit+0xc>
 8009f86:	bf00      	nop
 8009f88:	0800bce8 	.word	0x0800bce8
 8009f8c:	08009eb9 	.word	0x08009eb9

08009f90 <__sfp>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	4607      	mov	r7, r0
 8009f94:	f7ff ffac 	bl	8009ef0 <__sfp_lock_acquire>
 8009f98:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <__sfp+0x84>)
 8009f9a:	681e      	ldr	r6, [r3, #0]
 8009f9c:	69b3      	ldr	r3, [r6, #24]
 8009f9e:	b913      	cbnz	r3, 8009fa6 <__sfp+0x16>
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff ffbd 	bl	8009f20 <__sinit>
 8009fa6:	3648      	adds	r6, #72	; 0x48
 8009fa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	d503      	bpl.n	8009fb8 <__sfp+0x28>
 8009fb0:	6833      	ldr	r3, [r6, #0]
 8009fb2:	b30b      	cbz	r3, 8009ff8 <__sfp+0x68>
 8009fb4:	6836      	ldr	r6, [r6, #0]
 8009fb6:	e7f7      	b.n	8009fa8 <__sfp+0x18>
 8009fb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fbc:	b9d5      	cbnz	r5, 8009ff4 <__sfp+0x64>
 8009fbe:	4b16      	ldr	r3, [pc, #88]	; (800a018 <__sfp+0x88>)
 8009fc0:	60e3      	str	r3, [r4, #12]
 8009fc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fc6:	6665      	str	r5, [r4, #100]	; 0x64
 8009fc8:	f000 fbba 	bl	800a740 <__retarget_lock_init_recursive>
 8009fcc:	f7ff ff96 	bl	8009efc <__sfp_lock_release>
 8009fd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fd8:	6025      	str	r5, [r4, #0]
 8009fda:	61a5      	str	r5, [r4, #24]
 8009fdc:	2208      	movs	r2, #8
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fe4:	f7fd faf6 	bl	80075d4 <memset>
 8009fe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff4:	3468      	adds	r4, #104	; 0x68
 8009ff6:	e7d9      	b.n	8009fac <__sfp+0x1c>
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	f7ff ff62 	bl	8009ec4 <__sfmoreglue>
 800a000:	4604      	mov	r4, r0
 800a002:	6030      	str	r0, [r6, #0]
 800a004:	2800      	cmp	r0, #0
 800a006:	d1d5      	bne.n	8009fb4 <__sfp+0x24>
 800a008:	f7ff ff78 	bl	8009efc <__sfp_lock_release>
 800a00c:	230c      	movs	r3, #12
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	e7ee      	b.n	8009ff0 <__sfp+0x60>
 800a012:	bf00      	nop
 800a014:	0800bce8 	.word	0x0800bce8
 800a018:	ffff0001 	.word	0xffff0001

0800a01c <_fwalk_reent>:
 800a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a020:	4606      	mov	r6, r0
 800a022:	4688      	mov	r8, r1
 800a024:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a028:	2700      	movs	r7, #0
 800a02a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a02e:	f1b9 0901 	subs.w	r9, r9, #1
 800a032:	d505      	bpl.n	800a040 <_fwalk_reent+0x24>
 800a034:	6824      	ldr	r4, [r4, #0]
 800a036:	2c00      	cmp	r4, #0
 800a038:	d1f7      	bne.n	800a02a <_fwalk_reent+0xe>
 800a03a:	4638      	mov	r0, r7
 800a03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a040:	89ab      	ldrh	r3, [r5, #12]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d907      	bls.n	800a056 <_fwalk_reent+0x3a>
 800a046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a04a:	3301      	adds	r3, #1
 800a04c:	d003      	beq.n	800a056 <_fwalk_reent+0x3a>
 800a04e:	4629      	mov	r1, r5
 800a050:	4630      	mov	r0, r6
 800a052:	47c0      	blx	r8
 800a054:	4307      	orrs	r7, r0
 800a056:	3568      	adds	r5, #104	; 0x68
 800a058:	e7e9      	b.n	800a02e <_fwalk_reent+0x12>

0800a05a <rshift>:
 800a05a:	6903      	ldr	r3, [r0, #16]
 800a05c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a064:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a068:	f100 0414 	add.w	r4, r0, #20
 800a06c:	dd45      	ble.n	800a0fa <rshift+0xa0>
 800a06e:	f011 011f 	ands.w	r1, r1, #31
 800a072:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a076:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a07a:	d10c      	bne.n	800a096 <rshift+0x3c>
 800a07c:	f100 0710 	add.w	r7, r0, #16
 800a080:	4629      	mov	r1, r5
 800a082:	42b1      	cmp	r1, r6
 800a084:	d334      	bcc.n	800a0f0 <rshift+0x96>
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	1eea      	subs	r2, r5, #3
 800a08c:	4296      	cmp	r6, r2
 800a08e:	bf38      	it	cc
 800a090:	2300      	movcc	r3, #0
 800a092:	4423      	add	r3, r4
 800a094:	e015      	b.n	800a0c2 <rshift+0x68>
 800a096:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a09a:	f1c1 0820 	rsb	r8, r1, #32
 800a09e:	40cf      	lsrs	r7, r1
 800a0a0:	f105 0e04 	add.w	lr, r5, #4
 800a0a4:	46a1      	mov	r9, r4
 800a0a6:	4576      	cmp	r6, lr
 800a0a8:	46f4      	mov	ip, lr
 800a0aa:	d815      	bhi.n	800a0d8 <rshift+0x7e>
 800a0ac:	1a9a      	subs	r2, r3, r2
 800a0ae:	0092      	lsls	r2, r2, #2
 800a0b0:	3a04      	subs	r2, #4
 800a0b2:	3501      	adds	r5, #1
 800a0b4:	42ae      	cmp	r6, r5
 800a0b6:	bf38      	it	cc
 800a0b8:	2200      	movcc	r2, #0
 800a0ba:	18a3      	adds	r3, r4, r2
 800a0bc:	50a7      	str	r7, [r4, r2]
 800a0be:	b107      	cbz	r7, 800a0c2 <rshift+0x68>
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	1b1a      	subs	r2, r3, r4
 800a0c4:	42a3      	cmp	r3, r4
 800a0c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0ca:	bf08      	it	eq
 800a0cc:	2300      	moveq	r3, #0
 800a0ce:	6102      	str	r2, [r0, #16]
 800a0d0:	bf08      	it	eq
 800a0d2:	6143      	streq	r3, [r0, #20]
 800a0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0d8:	f8dc c000 	ldr.w	ip, [ip]
 800a0dc:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0e0:	ea4c 0707 	orr.w	r7, ip, r7
 800a0e4:	f849 7b04 	str.w	r7, [r9], #4
 800a0e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0ec:	40cf      	lsrs	r7, r1
 800a0ee:	e7da      	b.n	800a0a6 <rshift+0x4c>
 800a0f0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0f4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0f8:	e7c3      	b.n	800a082 <rshift+0x28>
 800a0fa:	4623      	mov	r3, r4
 800a0fc:	e7e1      	b.n	800a0c2 <rshift+0x68>

0800a0fe <__hexdig_fun>:
 800a0fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a102:	2b09      	cmp	r3, #9
 800a104:	d802      	bhi.n	800a10c <__hexdig_fun+0xe>
 800a106:	3820      	subs	r0, #32
 800a108:	b2c0      	uxtb	r0, r0
 800a10a:	4770      	bx	lr
 800a10c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a110:	2b05      	cmp	r3, #5
 800a112:	d801      	bhi.n	800a118 <__hexdig_fun+0x1a>
 800a114:	3847      	subs	r0, #71	; 0x47
 800a116:	e7f7      	b.n	800a108 <__hexdig_fun+0xa>
 800a118:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a11c:	2b05      	cmp	r3, #5
 800a11e:	d801      	bhi.n	800a124 <__hexdig_fun+0x26>
 800a120:	3827      	subs	r0, #39	; 0x27
 800a122:	e7f1      	b.n	800a108 <__hexdig_fun+0xa>
 800a124:	2000      	movs	r0, #0
 800a126:	4770      	bx	lr

0800a128 <__gethex>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	ed2d 8b02 	vpush	{d8}
 800a130:	b089      	sub	sp, #36	; 0x24
 800a132:	ee08 0a10 	vmov	s16, r0
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	4bb4      	ldr	r3, [pc, #720]	; (800a40c <__gethex+0x2e4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	4618      	mov	r0, r3
 800a140:	468b      	mov	fp, r1
 800a142:	4690      	mov	r8, r2
 800a144:	f7f6 f8cc 	bl	80002e0 <strlen>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	f8db 2000 	ldr.w	r2, [fp]
 800a14e:	4403      	add	r3, r0
 800a150:	4682      	mov	sl, r0
 800a152:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a156:	9305      	str	r3, [sp, #20]
 800a158:	1c93      	adds	r3, r2, #2
 800a15a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a15e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a162:	32fe      	adds	r2, #254	; 0xfe
 800a164:	18d1      	adds	r1, r2, r3
 800a166:	461f      	mov	r7, r3
 800a168:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a16c:	9100      	str	r1, [sp, #0]
 800a16e:	2830      	cmp	r0, #48	; 0x30
 800a170:	d0f8      	beq.n	800a164 <__gethex+0x3c>
 800a172:	f7ff ffc4 	bl	800a0fe <__hexdig_fun>
 800a176:	4604      	mov	r4, r0
 800a178:	2800      	cmp	r0, #0
 800a17a:	d13a      	bne.n	800a1f2 <__gethex+0xca>
 800a17c:	9901      	ldr	r1, [sp, #4]
 800a17e:	4652      	mov	r2, sl
 800a180:	4638      	mov	r0, r7
 800a182:	f001 fc24 	bl	800b9ce <strncmp>
 800a186:	4605      	mov	r5, r0
 800a188:	2800      	cmp	r0, #0
 800a18a:	d168      	bne.n	800a25e <__gethex+0x136>
 800a18c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a190:	eb07 060a 	add.w	r6, r7, sl
 800a194:	f7ff ffb3 	bl	800a0fe <__hexdig_fun>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d062      	beq.n	800a262 <__gethex+0x13a>
 800a19c:	4633      	mov	r3, r6
 800a19e:	7818      	ldrb	r0, [r3, #0]
 800a1a0:	2830      	cmp	r0, #48	; 0x30
 800a1a2:	461f      	mov	r7, r3
 800a1a4:	f103 0301 	add.w	r3, r3, #1
 800a1a8:	d0f9      	beq.n	800a19e <__gethex+0x76>
 800a1aa:	f7ff ffa8 	bl	800a0fe <__hexdig_fun>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	fab0 f480 	clz	r4, r0
 800a1b4:	0964      	lsrs	r4, r4, #5
 800a1b6:	4635      	mov	r5, r6
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	463a      	mov	r2, r7
 800a1bc:	4616      	mov	r6, r2
 800a1be:	3201      	adds	r2, #1
 800a1c0:	7830      	ldrb	r0, [r6, #0]
 800a1c2:	f7ff ff9c 	bl	800a0fe <__hexdig_fun>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d1f8      	bne.n	800a1bc <__gethex+0x94>
 800a1ca:	9901      	ldr	r1, [sp, #4]
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f001 fbfd 	bl	800b9ce <strncmp>
 800a1d4:	b980      	cbnz	r0, 800a1f8 <__gethex+0xd0>
 800a1d6:	b94d      	cbnz	r5, 800a1ec <__gethex+0xc4>
 800a1d8:	eb06 050a 	add.w	r5, r6, sl
 800a1dc:	462a      	mov	r2, r5
 800a1de:	4616      	mov	r6, r2
 800a1e0:	3201      	adds	r2, #1
 800a1e2:	7830      	ldrb	r0, [r6, #0]
 800a1e4:	f7ff ff8b 	bl	800a0fe <__hexdig_fun>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d1f8      	bne.n	800a1de <__gethex+0xb6>
 800a1ec:	1bad      	subs	r5, r5, r6
 800a1ee:	00ad      	lsls	r5, r5, #2
 800a1f0:	e004      	b.n	800a1fc <__gethex+0xd4>
 800a1f2:	2400      	movs	r4, #0
 800a1f4:	4625      	mov	r5, r4
 800a1f6:	e7e0      	b.n	800a1ba <__gethex+0x92>
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	d1f7      	bne.n	800a1ec <__gethex+0xc4>
 800a1fc:	7833      	ldrb	r3, [r6, #0]
 800a1fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a202:	2b50      	cmp	r3, #80	; 0x50
 800a204:	d13b      	bne.n	800a27e <__gethex+0x156>
 800a206:	7873      	ldrb	r3, [r6, #1]
 800a208:	2b2b      	cmp	r3, #43	; 0x2b
 800a20a:	d02c      	beq.n	800a266 <__gethex+0x13e>
 800a20c:	2b2d      	cmp	r3, #45	; 0x2d
 800a20e:	d02e      	beq.n	800a26e <__gethex+0x146>
 800a210:	1c71      	adds	r1, r6, #1
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	7808      	ldrb	r0, [r1, #0]
 800a218:	f7ff ff71 	bl	800a0fe <__hexdig_fun>
 800a21c:	1e43      	subs	r3, r0, #1
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b18      	cmp	r3, #24
 800a222:	d82c      	bhi.n	800a27e <__gethex+0x156>
 800a224:	f1a0 0210 	sub.w	r2, r0, #16
 800a228:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a22c:	f7ff ff67 	bl	800a0fe <__hexdig_fun>
 800a230:	1e43      	subs	r3, r0, #1
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b18      	cmp	r3, #24
 800a236:	d91d      	bls.n	800a274 <__gethex+0x14c>
 800a238:	f1b9 0f00 	cmp.w	r9, #0
 800a23c:	d000      	beq.n	800a240 <__gethex+0x118>
 800a23e:	4252      	negs	r2, r2
 800a240:	4415      	add	r5, r2
 800a242:	f8cb 1000 	str.w	r1, [fp]
 800a246:	b1e4      	cbz	r4, 800a282 <__gethex+0x15a>
 800a248:	9b00      	ldr	r3, [sp, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bf14      	ite	ne
 800a24e:	2700      	movne	r7, #0
 800a250:	2706      	moveq	r7, #6
 800a252:	4638      	mov	r0, r7
 800a254:	b009      	add	sp, #36	; 0x24
 800a256:	ecbd 8b02 	vpop	{d8}
 800a25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25e:	463e      	mov	r6, r7
 800a260:	4625      	mov	r5, r4
 800a262:	2401      	movs	r4, #1
 800a264:	e7ca      	b.n	800a1fc <__gethex+0xd4>
 800a266:	f04f 0900 	mov.w	r9, #0
 800a26a:	1cb1      	adds	r1, r6, #2
 800a26c:	e7d3      	b.n	800a216 <__gethex+0xee>
 800a26e:	f04f 0901 	mov.w	r9, #1
 800a272:	e7fa      	b.n	800a26a <__gethex+0x142>
 800a274:	230a      	movs	r3, #10
 800a276:	fb03 0202 	mla	r2, r3, r2, r0
 800a27a:	3a10      	subs	r2, #16
 800a27c:	e7d4      	b.n	800a228 <__gethex+0x100>
 800a27e:	4631      	mov	r1, r6
 800a280:	e7df      	b.n	800a242 <__gethex+0x11a>
 800a282:	1bf3      	subs	r3, r6, r7
 800a284:	3b01      	subs	r3, #1
 800a286:	4621      	mov	r1, r4
 800a288:	2b07      	cmp	r3, #7
 800a28a:	dc0b      	bgt.n	800a2a4 <__gethex+0x17c>
 800a28c:	ee18 0a10 	vmov	r0, s16
 800a290:	f000 fad8 	bl	800a844 <_Balloc>
 800a294:	4604      	mov	r4, r0
 800a296:	b940      	cbnz	r0, 800a2aa <__gethex+0x182>
 800a298:	4b5d      	ldr	r3, [pc, #372]	; (800a410 <__gethex+0x2e8>)
 800a29a:	4602      	mov	r2, r0
 800a29c:	21de      	movs	r1, #222	; 0xde
 800a29e:	485d      	ldr	r0, [pc, #372]	; (800a414 <__gethex+0x2ec>)
 800a2a0:	f001 fbc8 	bl	800ba34 <__assert_func>
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	105b      	asrs	r3, r3, #1
 800a2a8:	e7ee      	b.n	800a288 <__gethex+0x160>
 800a2aa:	f100 0914 	add.w	r9, r0, #20
 800a2ae:	f04f 0b00 	mov.w	fp, #0
 800a2b2:	f1ca 0301 	rsb	r3, sl, #1
 800a2b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2ba:	f8cd b000 	str.w	fp, [sp]
 800a2be:	9306      	str	r3, [sp, #24]
 800a2c0:	42b7      	cmp	r7, r6
 800a2c2:	d340      	bcc.n	800a346 <__gethex+0x21e>
 800a2c4:	9802      	ldr	r0, [sp, #8]
 800a2c6:	9b00      	ldr	r3, [sp, #0]
 800a2c8:	f840 3b04 	str.w	r3, [r0], #4
 800a2cc:	eba0 0009 	sub.w	r0, r0, r9
 800a2d0:	1080      	asrs	r0, r0, #2
 800a2d2:	0146      	lsls	r6, r0, #5
 800a2d4:	6120      	str	r0, [r4, #16]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fba6 	bl	800aa28 <__hi0bits>
 800a2dc:	1a30      	subs	r0, r6, r0
 800a2de:	f8d8 6000 	ldr.w	r6, [r8]
 800a2e2:	42b0      	cmp	r0, r6
 800a2e4:	dd63      	ble.n	800a3ae <__gethex+0x286>
 800a2e6:	1b87      	subs	r7, r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 ff47 	bl	800b17e <__any_on>
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	b1a8      	cbz	r0, 800a320 <__gethex+0x1f8>
 800a2f4:	1e7b      	subs	r3, r7, #1
 800a2f6:	1159      	asrs	r1, r3, #5
 800a2f8:	f003 021f 	and.w	r2, r3, #31
 800a2fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a300:	f04f 0a01 	mov.w	sl, #1
 800a304:	fa0a f202 	lsl.w	r2, sl, r2
 800a308:	420a      	tst	r2, r1
 800a30a:	d009      	beq.n	800a320 <__gethex+0x1f8>
 800a30c:	4553      	cmp	r3, sl
 800a30e:	dd05      	ble.n	800a31c <__gethex+0x1f4>
 800a310:	1eb9      	subs	r1, r7, #2
 800a312:	4620      	mov	r0, r4
 800a314:	f000 ff33 	bl	800b17e <__any_on>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d145      	bne.n	800a3a8 <__gethex+0x280>
 800a31c:	f04f 0a02 	mov.w	sl, #2
 800a320:	4639      	mov	r1, r7
 800a322:	4620      	mov	r0, r4
 800a324:	f7ff fe99 	bl	800a05a <rshift>
 800a328:	443d      	add	r5, r7
 800a32a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a32e:	42ab      	cmp	r3, r5
 800a330:	da4c      	bge.n	800a3cc <__gethex+0x2a4>
 800a332:	ee18 0a10 	vmov	r0, s16
 800a336:	4621      	mov	r1, r4
 800a338:	f000 fac4 	bl	800a8c4 <_Bfree>
 800a33c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a33e:	2300      	movs	r3, #0
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	27a3      	movs	r7, #163	; 0xa3
 800a344:	e785      	b.n	800a252 <__gethex+0x12a>
 800a346:	1e73      	subs	r3, r6, #1
 800a348:	9a05      	ldr	r2, [sp, #20]
 800a34a:	9303      	str	r3, [sp, #12]
 800a34c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a350:	4293      	cmp	r3, r2
 800a352:	d019      	beq.n	800a388 <__gethex+0x260>
 800a354:	f1bb 0f20 	cmp.w	fp, #32
 800a358:	d107      	bne.n	800a36a <__gethex+0x242>
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	9a00      	ldr	r2, [sp, #0]
 800a35e:	f843 2b04 	str.w	r2, [r3], #4
 800a362:	9302      	str	r3, [sp, #8]
 800a364:	2300      	movs	r3, #0
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	469b      	mov	fp, r3
 800a36a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a36e:	f7ff fec6 	bl	800a0fe <__hexdig_fun>
 800a372:	9b00      	ldr	r3, [sp, #0]
 800a374:	f000 000f 	and.w	r0, r0, #15
 800a378:	fa00 f00b 	lsl.w	r0, r0, fp
 800a37c:	4303      	orrs	r3, r0
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	f10b 0b04 	add.w	fp, fp, #4
 800a384:	9b03      	ldr	r3, [sp, #12]
 800a386:	e00d      	b.n	800a3a4 <__gethex+0x27c>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	9a06      	ldr	r2, [sp, #24]
 800a38c:	4413      	add	r3, r2
 800a38e:	42bb      	cmp	r3, r7
 800a390:	d3e0      	bcc.n	800a354 <__gethex+0x22c>
 800a392:	4618      	mov	r0, r3
 800a394:	9901      	ldr	r1, [sp, #4]
 800a396:	9307      	str	r3, [sp, #28]
 800a398:	4652      	mov	r2, sl
 800a39a:	f001 fb18 	bl	800b9ce <strncmp>
 800a39e:	9b07      	ldr	r3, [sp, #28]
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d1d7      	bne.n	800a354 <__gethex+0x22c>
 800a3a4:	461e      	mov	r6, r3
 800a3a6:	e78b      	b.n	800a2c0 <__gethex+0x198>
 800a3a8:	f04f 0a03 	mov.w	sl, #3
 800a3ac:	e7b8      	b.n	800a320 <__gethex+0x1f8>
 800a3ae:	da0a      	bge.n	800a3c6 <__gethex+0x29e>
 800a3b0:	1a37      	subs	r7, r6, r0
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	ee18 0a10 	vmov	r0, s16
 800a3b8:	463a      	mov	r2, r7
 800a3ba:	f000 fc9f 	bl	800acfc <__lshift>
 800a3be:	1bed      	subs	r5, r5, r7
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	f100 0914 	add.w	r9, r0, #20
 800a3c6:	f04f 0a00 	mov.w	sl, #0
 800a3ca:	e7ae      	b.n	800a32a <__gethex+0x202>
 800a3cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3d0:	42a8      	cmp	r0, r5
 800a3d2:	dd72      	ble.n	800a4ba <__gethex+0x392>
 800a3d4:	1b45      	subs	r5, r0, r5
 800a3d6:	42ae      	cmp	r6, r5
 800a3d8:	dc36      	bgt.n	800a448 <__gethex+0x320>
 800a3da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d02a      	beq.n	800a438 <__gethex+0x310>
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d02c      	beq.n	800a440 <__gethex+0x318>
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d11c      	bne.n	800a424 <__gethex+0x2fc>
 800a3ea:	42ae      	cmp	r6, r5
 800a3ec:	d11a      	bne.n	800a424 <__gethex+0x2fc>
 800a3ee:	2e01      	cmp	r6, #1
 800a3f0:	d112      	bne.n	800a418 <__gethex+0x2f0>
 800a3f2:	9a04      	ldr	r2, [sp, #16]
 800a3f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3f8:	6013      	str	r3, [r2, #0]
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	6123      	str	r3, [r4, #16]
 800a3fe:	f8c9 3000 	str.w	r3, [r9]
 800a402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a404:	2762      	movs	r7, #98	; 0x62
 800a406:	601c      	str	r4, [r3, #0]
 800a408:	e723      	b.n	800a252 <__gethex+0x12a>
 800a40a:	bf00      	nop
 800a40c:	0800bfd4 	.word	0x0800bfd4
 800a410:	0800bef8 	.word	0x0800bef8
 800a414:	0800bf6c 	.word	0x0800bf6c
 800a418:	1e71      	subs	r1, r6, #1
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 feaf 	bl	800b17e <__any_on>
 800a420:	2800      	cmp	r0, #0
 800a422:	d1e6      	bne.n	800a3f2 <__gethex+0x2ca>
 800a424:	ee18 0a10 	vmov	r0, s16
 800a428:	4621      	mov	r1, r4
 800a42a:	f000 fa4b 	bl	800a8c4 <_Bfree>
 800a42e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a430:	2300      	movs	r3, #0
 800a432:	6013      	str	r3, [r2, #0]
 800a434:	2750      	movs	r7, #80	; 0x50
 800a436:	e70c      	b.n	800a252 <__gethex+0x12a>
 800a438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1f2      	bne.n	800a424 <__gethex+0x2fc>
 800a43e:	e7d8      	b.n	800a3f2 <__gethex+0x2ca>
 800a440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1d5      	bne.n	800a3f2 <__gethex+0x2ca>
 800a446:	e7ed      	b.n	800a424 <__gethex+0x2fc>
 800a448:	1e6f      	subs	r7, r5, #1
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	d131      	bne.n	800a4b4 <__gethex+0x38c>
 800a450:	b127      	cbz	r7, 800a45c <__gethex+0x334>
 800a452:	4639      	mov	r1, r7
 800a454:	4620      	mov	r0, r4
 800a456:	f000 fe92 	bl	800b17e <__any_on>
 800a45a:	4682      	mov	sl, r0
 800a45c:	117b      	asrs	r3, r7, #5
 800a45e:	2101      	movs	r1, #1
 800a460:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a464:	f007 071f 	and.w	r7, r7, #31
 800a468:	fa01 f707 	lsl.w	r7, r1, r7
 800a46c:	421f      	tst	r7, r3
 800a46e:	4629      	mov	r1, r5
 800a470:	4620      	mov	r0, r4
 800a472:	bf18      	it	ne
 800a474:	f04a 0a02 	orrne.w	sl, sl, #2
 800a478:	1b76      	subs	r6, r6, r5
 800a47a:	f7ff fdee 	bl	800a05a <rshift>
 800a47e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a482:	2702      	movs	r7, #2
 800a484:	f1ba 0f00 	cmp.w	sl, #0
 800a488:	d048      	beq.n	800a51c <__gethex+0x3f4>
 800a48a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d015      	beq.n	800a4be <__gethex+0x396>
 800a492:	2b03      	cmp	r3, #3
 800a494:	d017      	beq.n	800a4c6 <__gethex+0x39e>
 800a496:	2b01      	cmp	r3, #1
 800a498:	d109      	bne.n	800a4ae <__gethex+0x386>
 800a49a:	f01a 0f02 	tst.w	sl, #2
 800a49e:	d006      	beq.n	800a4ae <__gethex+0x386>
 800a4a0:	f8d9 0000 	ldr.w	r0, [r9]
 800a4a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4a8:	f01a 0f01 	tst.w	sl, #1
 800a4ac:	d10e      	bne.n	800a4cc <__gethex+0x3a4>
 800a4ae:	f047 0710 	orr.w	r7, r7, #16
 800a4b2:	e033      	b.n	800a51c <__gethex+0x3f4>
 800a4b4:	f04f 0a01 	mov.w	sl, #1
 800a4b8:	e7d0      	b.n	800a45c <__gethex+0x334>
 800a4ba:	2701      	movs	r7, #1
 800a4bc:	e7e2      	b.n	800a484 <__gethex+0x35c>
 800a4be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4c0:	f1c3 0301 	rsb	r3, r3, #1
 800a4c4:	9315      	str	r3, [sp, #84]	; 0x54
 800a4c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0f0      	beq.n	800a4ae <__gethex+0x386>
 800a4cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4d0:	f104 0314 	add.w	r3, r4, #20
 800a4d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4dc:	f04f 0c00 	mov.w	ip, #0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4ea:	d01c      	beq.n	800a526 <__gethex+0x3fe>
 800a4ec:	3201      	adds	r2, #1
 800a4ee:	6002      	str	r2, [r0, #0]
 800a4f0:	2f02      	cmp	r7, #2
 800a4f2:	f104 0314 	add.w	r3, r4, #20
 800a4f6:	d13f      	bne.n	800a578 <__gethex+0x450>
 800a4f8:	f8d8 2000 	ldr.w	r2, [r8]
 800a4fc:	3a01      	subs	r2, #1
 800a4fe:	42b2      	cmp	r2, r6
 800a500:	d10a      	bne.n	800a518 <__gethex+0x3f0>
 800a502:	1171      	asrs	r1, r6, #5
 800a504:	2201      	movs	r2, #1
 800a506:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a50a:	f006 061f 	and.w	r6, r6, #31
 800a50e:	fa02 f606 	lsl.w	r6, r2, r6
 800a512:	421e      	tst	r6, r3
 800a514:	bf18      	it	ne
 800a516:	4617      	movne	r7, r2
 800a518:	f047 0720 	orr.w	r7, r7, #32
 800a51c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a51e:	601c      	str	r4, [r3, #0]
 800a520:	9b04      	ldr	r3, [sp, #16]
 800a522:	601d      	str	r5, [r3, #0]
 800a524:	e695      	b.n	800a252 <__gethex+0x12a>
 800a526:	4299      	cmp	r1, r3
 800a528:	f843 cc04 	str.w	ip, [r3, #-4]
 800a52c:	d8d8      	bhi.n	800a4e0 <__gethex+0x3b8>
 800a52e:	68a3      	ldr	r3, [r4, #8]
 800a530:	459b      	cmp	fp, r3
 800a532:	db19      	blt.n	800a568 <__gethex+0x440>
 800a534:	6861      	ldr	r1, [r4, #4]
 800a536:	ee18 0a10 	vmov	r0, s16
 800a53a:	3101      	adds	r1, #1
 800a53c:	f000 f982 	bl	800a844 <_Balloc>
 800a540:	4681      	mov	r9, r0
 800a542:	b918      	cbnz	r0, 800a54c <__gethex+0x424>
 800a544:	4b1a      	ldr	r3, [pc, #104]	; (800a5b0 <__gethex+0x488>)
 800a546:	4602      	mov	r2, r0
 800a548:	2184      	movs	r1, #132	; 0x84
 800a54a:	e6a8      	b.n	800a29e <__gethex+0x176>
 800a54c:	6922      	ldr	r2, [r4, #16]
 800a54e:	3202      	adds	r2, #2
 800a550:	f104 010c 	add.w	r1, r4, #12
 800a554:	0092      	lsls	r2, r2, #2
 800a556:	300c      	adds	r0, #12
 800a558:	f7fd f82e 	bl	80075b8 <memcpy>
 800a55c:	4621      	mov	r1, r4
 800a55e:	ee18 0a10 	vmov	r0, s16
 800a562:	f000 f9af 	bl	800a8c4 <_Bfree>
 800a566:	464c      	mov	r4, r9
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a570:	6122      	str	r2, [r4, #16]
 800a572:	2201      	movs	r2, #1
 800a574:	615a      	str	r2, [r3, #20]
 800a576:	e7bb      	b.n	800a4f0 <__gethex+0x3c8>
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	455a      	cmp	r2, fp
 800a57c:	dd0b      	ble.n	800a596 <__gethex+0x46e>
 800a57e:	2101      	movs	r1, #1
 800a580:	4620      	mov	r0, r4
 800a582:	f7ff fd6a 	bl	800a05a <rshift>
 800a586:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a58a:	3501      	adds	r5, #1
 800a58c:	42ab      	cmp	r3, r5
 800a58e:	f6ff aed0 	blt.w	800a332 <__gethex+0x20a>
 800a592:	2701      	movs	r7, #1
 800a594:	e7c0      	b.n	800a518 <__gethex+0x3f0>
 800a596:	f016 061f 	ands.w	r6, r6, #31
 800a59a:	d0fa      	beq.n	800a592 <__gethex+0x46a>
 800a59c:	4453      	add	r3, sl
 800a59e:	f1c6 0620 	rsb	r6, r6, #32
 800a5a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5a6:	f000 fa3f 	bl	800aa28 <__hi0bits>
 800a5aa:	42b0      	cmp	r0, r6
 800a5ac:	dbe7      	blt.n	800a57e <__gethex+0x456>
 800a5ae:	e7f0      	b.n	800a592 <__gethex+0x46a>
 800a5b0:	0800bef8 	.word	0x0800bef8

0800a5b4 <L_shift>:
 800a5b4:	f1c2 0208 	rsb	r2, r2, #8
 800a5b8:	0092      	lsls	r2, r2, #2
 800a5ba:	b570      	push	{r4, r5, r6, lr}
 800a5bc:	f1c2 0620 	rsb	r6, r2, #32
 800a5c0:	6843      	ldr	r3, [r0, #4]
 800a5c2:	6804      	ldr	r4, [r0, #0]
 800a5c4:	fa03 f506 	lsl.w	r5, r3, r6
 800a5c8:	432c      	orrs	r4, r5
 800a5ca:	40d3      	lsrs	r3, r2
 800a5cc:	6004      	str	r4, [r0, #0]
 800a5ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5d2:	4288      	cmp	r0, r1
 800a5d4:	d3f4      	bcc.n	800a5c0 <L_shift+0xc>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}

0800a5d8 <__match>:
 800a5d8:	b530      	push	{r4, r5, lr}
 800a5da:	6803      	ldr	r3, [r0, #0]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e2:	b914      	cbnz	r4, 800a5ea <__match+0x12>
 800a5e4:	6003      	str	r3, [r0, #0]
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	bd30      	pop	{r4, r5, pc}
 800a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5f2:	2d19      	cmp	r5, #25
 800a5f4:	bf98      	it	ls
 800a5f6:	3220      	addls	r2, #32
 800a5f8:	42a2      	cmp	r2, r4
 800a5fa:	d0f0      	beq.n	800a5de <__match+0x6>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	e7f3      	b.n	800a5e8 <__match+0x10>

0800a600 <__hexnan>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	680b      	ldr	r3, [r1, #0]
 800a606:	115e      	asrs	r6, r3, #5
 800a608:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a60c:	f013 031f 	ands.w	r3, r3, #31
 800a610:	b087      	sub	sp, #28
 800a612:	bf18      	it	ne
 800a614:	3604      	addne	r6, #4
 800a616:	2500      	movs	r5, #0
 800a618:	1f37      	subs	r7, r6, #4
 800a61a:	4690      	mov	r8, r2
 800a61c:	6802      	ldr	r2, [r0, #0]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	4682      	mov	sl, r0
 800a622:	f846 5c04 	str.w	r5, [r6, #-4]
 800a626:	46b9      	mov	r9, r7
 800a628:	463c      	mov	r4, r7
 800a62a:	9502      	str	r5, [sp, #8]
 800a62c:	46ab      	mov	fp, r5
 800a62e:	7851      	ldrb	r1, [r2, #1]
 800a630:	1c53      	adds	r3, r2, #1
 800a632:	9303      	str	r3, [sp, #12]
 800a634:	b341      	cbz	r1, 800a688 <__hexnan+0x88>
 800a636:	4608      	mov	r0, r1
 800a638:	9205      	str	r2, [sp, #20]
 800a63a:	9104      	str	r1, [sp, #16]
 800a63c:	f7ff fd5f 	bl	800a0fe <__hexdig_fun>
 800a640:	2800      	cmp	r0, #0
 800a642:	d14f      	bne.n	800a6e4 <__hexnan+0xe4>
 800a644:	9904      	ldr	r1, [sp, #16]
 800a646:	9a05      	ldr	r2, [sp, #20]
 800a648:	2920      	cmp	r1, #32
 800a64a:	d818      	bhi.n	800a67e <__hexnan+0x7e>
 800a64c:	9b02      	ldr	r3, [sp, #8]
 800a64e:	459b      	cmp	fp, r3
 800a650:	dd13      	ble.n	800a67a <__hexnan+0x7a>
 800a652:	454c      	cmp	r4, r9
 800a654:	d206      	bcs.n	800a664 <__hexnan+0x64>
 800a656:	2d07      	cmp	r5, #7
 800a658:	dc04      	bgt.n	800a664 <__hexnan+0x64>
 800a65a:	462a      	mov	r2, r5
 800a65c:	4649      	mov	r1, r9
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff ffa8 	bl	800a5b4 <L_shift>
 800a664:	4544      	cmp	r4, r8
 800a666:	d950      	bls.n	800a70a <__hexnan+0x10a>
 800a668:	2300      	movs	r3, #0
 800a66a:	f1a4 0904 	sub.w	r9, r4, #4
 800a66e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a672:	f8cd b008 	str.w	fp, [sp, #8]
 800a676:	464c      	mov	r4, r9
 800a678:	461d      	mov	r5, r3
 800a67a:	9a03      	ldr	r2, [sp, #12]
 800a67c:	e7d7      	b.n	800a62e <__hexnan+0x2e>
 800a67e:	2929      	cmp	r1, #41	; 0x29
 800a680:	d156      	bne.n	800a730 <__hexnan+0x130>
 800a682:	3202      	adds	r2, #2
 800a684:	f8ca 2000 	str.w	r2, [sl]
 800a688:	f1bb 0f00 	cmp.w	fp, #0
 800a68c:	d050      	beq.n	800a730 <__hexnan+0x130>
 800a68e:	454c      	cmp	r4, r9
 800a690:	d206      	bcs.n	800a6a0 <__hexnan+0xa0>
 800a692:	2d07      	cmp	r5, #7
 800a694:	dc04      	bgt.n	800a6a0 <__hexnan+0xa0>
 800a696:	462a      	mov	r2, r5
 800a698:	4649      	mov	r1, r9
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7ff ff8a 	bl	800a5b4 <L_shift>
 800a6a0:	4544      	cmp	r4, r8
 800a6a2:	d934      	bls.n	800a70e <__hexnan+0x10e>
 800a6a4:	f1a8 0204 	sub.w	r2, r8, #4
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6b2:	429f      	cmp	r7, r3
 800a6b4:	d2f9      	bcs.n	800a6aa <__hexnan+0xaa>
 800a6b6:	1b3b      	subs	r3, r7, r4
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	3304      	adds	r3, #4
 800a6be:	3401      	adds	r4, #1
 800a6c0:	3e03      	subs	r6, #3
 800a6c2:	42b4      	cmp	r4, r6
 800a6c4:	bf88      	it	hi
 800a6c6:	2304      	movhi	r3, #4
 800a6c8:	4443      	add	r3, r8
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f843 2b04 	str.w	r2, [r3], #4
 800a6d0:	429f      	cmp	r7, r3
 800a6d2:	d2fb      	bcs.n	800a6cc <__hexnan+0xcc>
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	b91b      	cbnz	r3, 800a6e0 <__hexnan+0xe0>
 800a6d8:	4547      	cmp	r7, r8
 800a6da:	d127      	bne.n	800a72c <__hexnan+0x12c>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	603b      	str	r3, [r7, #0]
 800a6e0:	2005      	movs	r0, #5
 800a6e2:	e026      	b.n	800a732 <__hexnan+0x132>
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	2d08      	cmp	r5, #8
 800a6e8:	f10b 0b01 	add.w	fp, fp, #1
 800a6ec:	dd06      	ble.n	800a6fc <__hexnan+0xfc>
 800a6ee:	4544      	cmp	r4, r8
 800a6f0:	d9c3      	bls.n	800a67a <__hexnan+0x7a>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6f8:	2501      	movs	r5, #1
 800a6fa:	3c04      	subs	r4, #4
 800a6fc:	6822      	ldr	r2, [r4, #0]
 800a6fe:	f000 000f 	and.w	r0, r0, #15
 800a702:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a706:	6022      	str	r2, [r4, #0]
 800a708:	e7b7      	b.n	800a67a <__hexnan+0x7a>
 800a70a:	2508      	movs	r5, #8
 800a70c:	e7b5      	b.n	800a67a <__hexnan+0x7a>
 800a70e:	9b01      	ldr	r3, [sp, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0df      	beq.n	800a6d4 <__hexnan+0xd4>
 800a714:	f04f 32ff 	mov.w	r2, #4294967295
 800a718:	f1c3 0320 	rsb	r3, r3, #32
 800a71c:	fa22 f303 	lsr.w	r3, r2, r3
 800a720:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a724:	401a      	ands	r2, r3
 800a726:	f846 2c04 	str.w	r2, [r6, #-4]
 800a72a:	e7d3      	b.n	800a6d4 <__hexnan+0xd4>
 800a72c:	3f04      	subs	r7, #4
 800a72e:	e7d1      	b.n	800a6d4 <__hexnan+0xd4>
 800a730:	2004      	movs	r0, #4
 800a732:	b007      	add	sp, #28
 800a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a738 <_localeconv_r>:
 800a738:	4800      	ldr	r0, [pc, #0]	; (800a73c <_localeconv_r+0x4>)
 800a73a:	4770      	bx	lr
 800a73c:	24000168 	.word	0x24000168

0800a740 <__retarget_lock_init_recursive>:
 800a740:	4770      	bx	lr

0800a742 <__retarget_lock_acquire_recursive>:
 800a742:	4770      	bx	lr

0800a744 <__retarget_lock_release_recursive>:
 800a744:	4770      	bx	lr

0800a746 <__swhatbuf_r>:
 800a746:	b570      	push	{r4, r5, r6, lr}
 800a748:	460e      	mov	r6, r1
 800a74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74e:	2900      	cmp	r1, #0
 800a750:	b096      	sub	sp, #88	; 0x58
 800a752:	4614      	mov	r4, r2
 800a754:	461d      	mov	r5, r3
 800a756:	da08      	bge.n	800a76a <__swhatbuf_r+0x24>
 800a758:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	602a      	str	r2, [r5, #0]
 800a760:	061a      	lsls	r2, r3, #24
 800a762:	d410      	bmi.n	800a786 <__swhatbuf_r+0x40>
 800a764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a768:	e00e      	b.n	800a788 <__swhatbuf_r+0x42>
 800a76a:	466a      	mov	r2, sp
 800a76c:	f001 f9a2 	bl	800bab4 <_fstat_r>
 800a770:	2800      	cmp	r0, #0
 800a772:	dbf1      	blt.n	800a758 <__swhatbuf_r+0x12>
 800a774:	9a01      	ldr	r2, [sp, #4]
 800a776:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a77a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a77e:	425a      	negs	r2, r3
 800a780:	415a      	adcs	r2, r3
 800a782:	602a      	str	r2, [r5, #0]
 800a784:	e7ee      	b.n	800a764 <__swhatbuf_r+0x1e>
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	2000      	movs	r0, #0
 800a78a:	6023      	str	r3, [r4, #0]
 800a78c:	b016      	add	sp, #88	; 0x58
 800a78e:	bd70      	pop	{r4, r5, r6, pc}

0800a790 <__smakebuf_r>:
 800a790:	898b      	ldrh	r3, [r1, #12]
 800a792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a794:	079d      	lsls	r5, r3, #30
 800a796:	4606      	mov	r6, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	d507      	bpl.n	800a7ac <__smakebuf_r+0x1c>
 800a79c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	6123      	str	r3, [r4, #16]
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	6163      	str	r3, [r4, #20]
 800a7a8:	b002      	add	sp, #8
 800a7aa:	bd70      	pop	{r4, r5, r6, pc}
 800a7ac:	ab01      	add	r3, sp, #4
 800a7ae:	466a      	mov	r2, sp
 800a7b0:	f7ff ffc9 	bl	800a746 <__swhatbuf_r>
 800a7b4:	9900      	ldr	r1, [sp, #0]
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f000 fd83 	bl	800b2c4 <_malloc_r>
 800a7be:	b948      	cbnz	r0, 800a7d4 <__smakebuf_r+0x44>
 800a7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c4:	059a      	lsls	r2, r3, #22
 800a7c6:	d4ef      	bmi.n	800a7a8 <__smakebuf_r+0x18>
 800a7c8:	f023 0303 	bic.w	r3, r3, #3
 800a7cc:	f043 0302 	orr.w	r3, r3, #2
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	e7e3      	b.n	800a79c <__smakebuf_r+0xc>
 800a7d4:	4b0d      	ldr	r3, [pc, #52]	; (800a80c <__smakebuf_r+0x7c>)
 800a7d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	6020      	str	r0, [r4, #0]
 800a7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	9b00      	ldr	r3, [sp, #0]
 800a7e4:	6163      	str	r3, [r4, #20]
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	6120      	str	r0, [r4, #16]
 800a7ea:	b15b      	cbz	r3, 800a804 <__smakebuf_r+0x74>
 800a7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f001 f971 	bl	800bad8 <_isatty_r>
 800a7f6:	b128      	cbz	r0, 800a804 <__smakebuf_r+0x74>
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	f023 0303 	bic.w	r3, r3, #3
 800a7fe:	f043 0301 	orr.w	r3, r3, #1
 800a802:	81a3      	strh	r3, [r4, #12]
 800a804:	89a0      	ldrh	r0, [r4, #12]
 800a806:	4305      	orrs	r5, r0
 800a808:	81a5      	strh	r5, [r4, #12]
 800a80a:	e7cd      	b.n	800a7a8 <__smakebuf_r+0x18>
 800a80c:	08009eb9 	.word	0x08009eb9

0800a810 <malloc>:
 800a810:	4b02      	ldr	r3, [pc, #8]	; (800a81c <malloc+0xc>)
 800a812:	4601      	mov	r1, r0
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	f000 bd55 	b.w	800b2c4 <_malloc_r>
 800a81a:	bf00      	nop
 800a81c:	24000010 	.word	0x24000010

0800a820 <__ascii_mbtowc>:
 800a820:	b082      	sub	sp, #8
 800a822:	b901      	cbnz	r1, 800a826 <__ascii_mbtowc+0x6>
 800a824:	a901      	add	r1, sp, #4
 800a826:	b142      	cbz	r2, 800a83a <__ascii_mbtowc+0x1a>
 800a828:	b14b      	cbz	r3, 800a83e <__ascii_mbtowc+0x1e>
 800a82a:	7813      	ldrb	r3, [r2, #0]
 800a82c:	600b      	str	r3, [r1, #0]
 800a82e:	7812      	ldrb	r2, [r2, #0]
 800a830:	1e10      	subs	r0, r2, #0
 800a832:	bf18      	it	ne
 800a834:	2001      	movne	r0, #1
 800a836:	b002      	add	sp, #8
 800a838:	4770      	bx	lr
 800a83a:	4610      	mov	r0, r2
 800a83c:	e7fb      	b.n	800a836 <__ascii_mbtowc+0x16>
 800a83e:	f06f 0001 	mvn.w	r0, #1
 800a842:	e7f8      	b.n	800a836 <__ascii_mbtowc+0x16>

0800a844 <_Balloc>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a848:	4604      	mov	r4, r0
 800a84a:	460d      	mov	r5, r1
 800a84c:	b976      	cbnz	r6, 800a86c <_Balloc+0x28>
 800a84e:	2010      	movs	r0, #16
 800a850:	f7ff ffde 	bl	800a810 <malloc>
 800a854:	4602      	mov	r2, r0
 800a856:	6260      	str	r0, [r4, #36]	; 0x24
 800a858:	b920      	cbnz	r0, 800a864 <_Balloc+0x20>
 800a85a:	4b18      	ldr	r3, [pc, #96]	; (800a8bc <_Balloc+0x78>)
 800a85c:	4818      	ldr	r0, [pc, #96]	; (800a8c0 <_Balloc+0x7c>)
 800a85e:	2166      	movs	r1, #102	; 0x66
 800a860:	f001 f8e8 	bl	800ba34 <__assert_func>
 800a864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a868:	6006      	str	r6, [r0, #0]
 800a86a:	60c6      	str	r6, [r0, #12]
 800a86c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a86e:	68f3      	ldr	r3, [r6, #12]
 800a870:	b183      	cbz	r3, 800a894 <_Balloc+0x50>
 800a872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a87a:	b9b8      	cbnz	r0, 800a8ac <_Balloc+0x68>
 800a87c:	2101      	movs	r1, #1
 800a87e:	fa01 f605 	lsl.w	r6, r1, r5
 800a882:	1d72      	adds	r2, r6, #5
 800a884:	0092      	lsls	r2, r2, #2
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fc9a 	bl	800b1c0 <_calloc_r>
 800a88c:	b160      	cbz	r0, 800a8a8 <_Balloc+0x64>
 800a88e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a892:	e00e      	b.n	800a8b2 <_Balloc+0x6e>
 800a894:	2221      	movs	r2, #33	; 0x21
 800a896:	2104      	movs	r1, #4
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 fc91 	bl	800b1c0 <_calloc_r>
 800a89e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8a0:	60f0      	str	r0, [r6, #12]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e4      	bne.n	800a872 <_Balloc+0x2e>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	6802      	ldr	r2, [r0, #0]
 800a8ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8b8:	e7f7      	b.n	800a8aa <_Balloc+0x66>
 800a8ba:	bf00      	nop
 800a8bc:	0800be86 	.word	0x0800be86
 800a8c0:	0800bfe8 	.word	0x0800bfe8

0800a8c4 <_Bfree>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	b976      	cbnz	r6, 800a8ec <_Bfree+0x28>
 800a8ce:	2010      	movs	r0, #16
 800a8d0:	f7ff ff9e 	bl	800a810 <malloc>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	6268      	str	r0, [r5, #36]	; 0x24
 800a8d8:	b920      	cbnz	r0, 800a8e4 <_Bfree+0x20>
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <_Bfree+0x3c>)
 800a8dc:	4809      	ldr	r0, [pc, #36]	; (800a904 <_Bfree+0x40>)
 800a8de:	218a      	movs	r1, #138	; 0x8a
 800a8e0:	f001 f8a8 	bl	800ba34 <__assert_func>
 800a8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8e8:	6006      	str	r6, [r0, #0]
 800a8ea:	60c6      	str	r6, [r0, #12]
 800a8ec:	b13c      	cbz	r4, 800a8fe <_Bfree+0x3a>
 800a8ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8f0:	6862      	ldr	r2, [r4, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8f8:	6021      	str	r1, [r4, #0]
 800a8fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	0800be86 	.word	0x0800be86
 800a904:	0800bfe8 	.word	0x0800bfe8

0800a908 <__multadd>:
 800a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90c:	690d      	ldr	r5, [r1, #16]
 800a90e:	4607      	mov	r7, r0
 800a910:	460c      	mov	r4, r1
 800a912:	461e      	mov	r6, r3
 800a914:	f101 0c14 	add.w	ip, r1, #20
 800a918:	2000      	movs	r0, #0
 800a91a:	f8dc 3000 	ldr.w	r3, [ip]
 800a91e:	b299      	uxth	r1, r3
 800a920:	fb02 6101 	mla	r1, r2, r1, r6
 800a924:	0c1e      	lsrs	r6, r3, #16
 800a926:	0c0b      	lsrs	r3, r1, #16
 800a928:	fb02 3306 	mla	r3, r2, r6, r3
 800a92c:	b289      	uxth	r1, r1
 800a92e:	3001      	adds	r0, #1
 800a930:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a934:	4285      	cmp	r5, r0
 800a936:	f84c 1b04 	str.w	r1, [ip], #4
 800a93a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a93e:	dcec      	bgt.n	800a91a <__multadd+0x12>
 800a940:	b30e      	cbz	r6, 800a986 <__multadd+0x7e>
 800a942:	68a3      	ldr	r3, [r4, #8]
 800a944:	42ab      	cmp	r3, r5
 800a946:	dc19      	bgt.n	800a97c <__multadd+0x74>
 800a948:	6861      	ldr	r1, [r4, #4]
 800a94a:	4638      	mov	r0, r7
 800a94c:	3101      	adds	r1, #1
 800a94e:	f7ff ff79 	bl	800a844 <_Balloc>
 800a952:	4680      	mov	r8, r0
 800a954:	b928      	cbnz	r0, 800a962 <__multadd+0x5a>
 800a956:	4602      	mov	r2, r0
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <__multadd+0x84>)
 800a95a:	480d      	ldr	r0, [pc, #52]	; (800a990 <__multadd+0x88>)
 800a95c:	21b5      	movs	r1, #181	; 0xb5
 800a95e:	f001 f869 	bl	800ba34 <__assert_func>
 800a962:	6922      	ldr	r2, [r4, #16]
 800a964:	3202      	adds	r2, #2
 800a966:	f104 010c 	add.w	r1, r4, #12
 800a96a:	0092      	lsls	r2, r2, #2
 800a96c:	300c      	adds	r0, #12
 800a96e:	f7fc fe23 	bl	80075b8 <memcpy>
 800a972:	4621      	mov	r1, r4
 800a974:	4638      	mov	r0, r7
 800a976:	f7ff ffa5 	bl	800a8c4 <_Bfree>
 800a97a:	4644      	mov	r4, r8
 800a97c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a980:	3501      	adds	r5, #1
 800a982:	615e      	str	r6, [r3, #20]
 800a984:	6125      	str	r5, [r4, #16]
 800a986:	4620      	mov	r0, r4
 800a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a98c:	0800bef8 	.word	0x0800bef8
 800a990:	0800bfe8 	.word	0x0800bfe8

0800a994 <__s2b>:
 800a994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a998:	460c      	mov	r4, r1
 800a99a:	4615      	mov	r5, r2
 800a99c:	461f      	mov	r7, r3
 800a99e:	2209      	movs	r2, #9
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	db09      	blt.n	800a9c4 <__s2b+0x30>
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff ff47 	bl	800a844 <_Balloc>
 800a9b6:	b940      	cbnz	r0, 800a9ca <__s2b+0x36>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	4b19      	ldr	r3, [pc, #100]	; (800aa20 <__s2b+0x8c>)
 800a9bc:	4819      	ldr	r0, [pc, #100]	; (800aa24 <__s2b+0x90>)
 800a9be:	21ce      	movs	r1, #206	; 0xce
 800a9c0:	f001 f838 	bl	800ba34 <__assert_func>
 800a9c4:	0052      	lsls	r2, r2, #1
 800a9c6:	3101      	adds	r1, #1
 800a9c8:	e7f0      	b.n	800a9ac <__s2b+0x18>
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	6143      	str	r3, [r0, #20]
 800a9ce:	2d09      	cmp	r5, #9
 800a9d0:	f04f 0301 	mov.w	r3, #1
 800a9d4:	6103      	str	r3, [r0, #16]
 800a9d6:	dd16      	ble.n	800aa06 <__s2b+0x72>
 800a9d8:	f104 0909 	add.w	r9, r4, #9
 800a9dc:	46c8      	mov	r8, r9
 800a9de:	442c      	add	r4, r5
 800a9e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a9e4:	4601      	mov	r1, r0
 800a9e6:	3b30      	subs	r3, #48	; 0x30
 800a9e8:	220a      	movs	r2, #10
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7ff ff8c 	bl	800a908 <__multadd>
 800a9f0:	45a0      	cmp	r8, r4
 800a9f2:	d1f5      	bne.n	800a9e0 <__s2b+0x4c>
 800a9f4:	f1a5 0408 	sub.w	r4, r5, #8
 800a9f8:	444c      	add	r4, r9
 800a9fa:	1b2d      	subs	r5, r5, r4
 800a9fc:	1963      	adds	r3, r4, r5
 800a9fe:	42bb      	cmp	r3, r7
 800aa00:	db04      	blt.n	800aa0c <__s2b+0x78>
 800aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa06:	340a      	adds	r4, #10
 800aa08:	2509      	movs	r5, #9
 800aa0a:	e7f6      	b.n	800a9fa <__s2b+0x66>
 800aa0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa10:	4601      	mov	r1, r0
 800aa12:	3b30      	subs	r3, #48	; 0x30
 800aa14:	220a      	movs	r2, #10
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ff76 	bl	800a908 <__multadd>
 800aa1c:	e7ee      	b.n	800a9fc <__s2b+0x68>
 800aa1e:	bf00      	nop
 800aa20:	0800bef8 	.word	0x0800bef8
 800aa24:	0800bfe8 	.word	0x0800bfe8

0800aa28 <__hi0bits>:
 800aa28:	0c03      	lsrs	r3, r0, #16
 800aa2a:	041b      	lsls	r3, r3, #16
 800aa2c:	b9d3      	cbnz	r3, 800aa64 <__hi0bits+0x3c>
 800aa2e:	0400      	lsls	r0, r0, #16
 800aa30:	2310      	movs	r3, #16
 800aa32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa36:	bf04      	itt	eq
 800aa38:	0200      	lsleq	r0, r0, #8
 800aa3a:	3308      	addeq	r3, #8
 800aa3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa40:	bf04      	itt	eq
 800aa42:	0100      	lsleq	r0, r0, #4
 800aa44:	3304      	addeq	r3, #4
 800aa46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa4a:	bf04      	itt	eq
 800aa4c:	0080      	lsleq	r0, r0, #2
 800aa4e:	3302      	addeq	r3, #2
 800aa50:	2800      	cmp	r0, #0
 800aa52:	db05      	blt.n	800aa60 <__hi0bits+0x38>
 800aa54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa58:	f103 0301 	add.w	r3, r3, #1
 800aa5c:	bf08      	it	eq
 800aa5e:	2320      	moveq	r3, #32
 800aa60:	4618      	mov	r0, r3
 800aa62:	4770      	bx	lr
 800aa64:	2300      	movs	r3, #0
 800aa66:	e7e4      	b.n	800aa32 <__hi0bits+0xa>

0800aa68 <__lo0bits>:
 800aa68:	6803      	ldr	r3, [r0, #0]
 800aa6a:	f013 0207 	ands.w	r2, r3, #7
 800aa6e:	4601      	mov	r1, r0
 800aa70:	d00b      	beq.n	800aa8a <__lo0bits+0x22>
 800aa72:	07da      	lsls	r2, r3, #31
 800aa74:	d423      	bmi.n	800aabe <__lo0bits+0x56>
 800aa76:	0798      	lsls	r0, r3, #30
 800aa78:	bf49      	itett	mi
 800aa7a:	085b      	lsrmi	r3, r3, #1
 800aa7c:	089b      	lsrpl	r3, r3, #2
 800aa7e:	2001      	movmi	r0, #1
 800aa80:	600b      	strmi	r3, [r1, #0]
 800aa82:	bf5c      	itt	pl
 800aa84:	600b      	strpl	r3, [r1, #0]
 800aa86:	2002      	movpl	r0, #2
 800aa88:	4770      	bx	lr
 800aa8a:	b298      	uxth	r0, r3
 800aa8c:	b9a8      	cbnz	r0, 800aaba <__lo0bits+0x52>
 800aa8e:	0c1b      	lsrs	r3, r3, #16
 800aa90:	2010      	movs	r0, #16
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	b90a      	cbnz	r2, 800aa9a <__lo0bits+0x32>
 800aa96:	3008      	adds	r0, #8
 800aa98:	0a1b      	lsrs	r3, r3, #8
 800aa9a:	071a      	lsls	r2, r3, #28
 800aa9c:	bf04      	itt	eq
 800aa9e:	091b      	lsreq	r3, r3, #4
 800aaa0:	3004      	addeq	r0, #4
 800aaa2:	079a      	lsls	r2, r3, #30
 800aaa4:	bf04      	itt	eq
 800aaa6:	089b      	lsreq	r3, r3, #2
 800aaa8:	3002      	addeq	r0, #2
 800aaaa:	07da      	lsls	r2, r3, #31
 800aaac:	d403      	bmi.n	800aab6 <__lo0bits+0x4e>
 800aaae:	085b      	lsrs	r3, r3, #1
 800aab0:	f100 0001 	add.w	r0, r0, #1
 800aab4:	d005      	beq.n	800aac2 <__lo0bits+0x5a>
 800aab6:	600b      	str	r3, [r1, #0]
 800aab8:	4770      	bx	lr
 800aaba:	4610      	mov	r0, r2
 800aabc:	e7e9      	b.n	800aa92 <__lo0bits+0x2a>
 800aabe:	2000      	movs	r0, #0
 800aac0:	4770      	bx	lr
 800aac2:	2020      	movs	r0, #32
 800aac4:	4770      	bx	lr
	...

0800aac8 <__i2b>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	460c      	mov	r4, r1
 800aacc:	2101      	movs	r1, #1
 800aace:	f7ff feb9 	bl	800a844 <_Balloc>
 800aad2:	4602      	mov	r2, r0
 800aad4:	b928      	cbnz	r0, 800aae2 <__i2b+0x1a>
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <__i2b+0x24>)
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <__i2b+0x28>)
 800aada:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aade:	f000 ffa9 	bl	800ba34 <__assert_func>
 800aae2:	2301      	movs	r3, #1
 800aae4:	6144      	str	r4, [r0, #20]
 800aae6:	6103      	str	r3, [r0, #16]
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	bf00      	nop
 800aaec:	0800bef8 	.word	0x0800bef8
 800aaf0:	0800bfe8 	.word	0x0800bfe8

0800aaf4 <__multiply>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	4691      	mov	r9, r2
 800aafa:	690a      	ldr	r2, [r1, #16]
 800aafc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	bfb8      	it	lt
 800ab04:	460b      	movlt	r3, r1
 800ab06:	460c      	mov	r4, r1
 800ab08:	bfbc      	itt	lt
 800ab0a:	464c      	movlt	r4, r9
 800ab0c:	4699      	movlt	r9, r3
 800ab0e:	6927      	ldr	r7, [r4, #16]
 800ab10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab14:	68a3      	ldr	r3, [r4, #8]
 800ab16:	6861      	ldr	r1, [r4, #4]
 800ab18:	eb07 060a 	add.w	r6, r7, sl
 800ab1c:	42b3      	cmp	r3, r6
 800ab1e:	b085      	sub	sp, #20
 800ab20:	bfb8      	it	lt
 800ab22:	3101      	addlt	r1, #1
 800ab24:	f7ff fe8e 	bl	800a844 <_Balloc>
 800ab28:	b930      	cbnz	r0, 800ab38 <__multiply+0x44>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	4b44      	ldr	r3, [pc, #272]	; (800ac40 <__multiply+0x14c>)
 800ab2e:	4845      	ldr	r0, [pc, #276]	; (800ac44 <__multiply+0x150>)
 800ab30:	f240 115d 	movw	r1, #349	; 0x15d
 800ab34:	f000 ff7e 	bl	800ba34 <__assert_func>
 800ab38:	f100 0514 	add.w	r5, r0, #20
 800ab3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab40:	462b      	mov	r3, r5
 800ab42:	2200      	movs	r2, #0
 800ab44:	4543      	cmp	r3, r8
 800ab46:	d321      	bcc.n	800ab8c <__multiply+0x98>
 800ab48:	f104 0314 	add.w	r3, r4, #20
 800ab4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab50:	f109 0314 	add.w	r3, r9, #20
 800ab54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab58:	9202      	str	r2, [sp, #8]
 800ab5a:	1b3a      	subs	r2, r7, r4
 800ab5c:	3a15      	subs	r2, #21
 800ab5e:	f022 0203 	bic.w	r2, r2, #3
 800ab62:	3204      	adds	r2, #4
 800ab64:	f104 0115 	add.w	r1, r4, #21
 800ab68:	428f      	cmp	r7, r1
 800ab6a:	bf38      	it	cc
 800ab6c:	2204      	movcc	r2, #4
 800ab6e:	9201      	str	r2, [sp, #4]
 800ab70:	9a02      	ldr	r2, [sp, #8]
 800ab72:	9303      	str	r3, [sp, #12]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d80c      	bhi.n	800ab92 <__multiply+0x9e>
 800ab78:	2e00      	cmp	r6, #0
 800ab7a:	dd03      	ble.n	800ab84 <__multiply+0x90>
 800ab7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d05a      	beq.n	800ac3a <__multiply+0x146>
 800ab84:	6106      	str	r6, [r0, #16]
 800ab86:	b005      	add	sp, #20
 800ab88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	f843 2b04 	str.w	r2, [r3], #4
 800ab90:	e7d8      	b.n	800ab44 <__multiply+0x50>
 800ab92:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab96:	f1ba 0f00 	cmp.w	sl, #0
 800ab9a:	d024      	beq.n	800abe6 <__multiply+0xf2>
 800ab9c:	f104 0e14 	add.w	lr, r4, #20
 800aba0:	46a9      	mov	r9, r5
 800aba2:	f04f 0c00 	mov.w	ip, #0
 800aba6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800abaa:	f8d9 1000 	ldr.w	r1, [r9]
 800abae:	fa1f fb82 	uxth.w	fp, r2
 800abb2:	b289      	uxth	r1, r1
 800abb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800abb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800abbc:	f8d9 2000 	ldr.w	r2, [r9]
 800abc0:	4461      	add	r1, ip
 800abc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abc6:	fb0a c20b 	mla	r2, sl, fp, ip
 800abca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800abce:	b289      	uxth	r1, r1
 800abd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800abd4:	4577      	cmp	r7, lr
 800abd6:	f849 1b04 	str.w	r1, [r9], #4
 800abda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abde:	d8e2      	bhi.n	800aba6 <__multiply+0xb2>
 800abe0:	9a01      	ldr	r2, [sp, #4]
 800abe2:	f845 c002 	str.w	ip, [r5, r2]
 800abe6:	9a03      	ldr	r2, [sp, #12]
 800abe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800abec:	3304      	adds	r3, #4
 800abee:	f1b9 0f00 	cmp.w	r9, #0
 800abf2:	d020      	beq.n	800ac36 <__multiply+0x142>
 800abf4:	6829      	ldr	r1, [r5, #0]
 800abf6:	f104 0c14 	add.w	ip, r4, #20
 800abfa:	46ae      	mov	lr, r5
 800abfc:	f04f 0a00 	mov.w	sl, #0
 800ac00:	f8bc b000 	ldrh.w	fp, [ip]
 800ac04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac08:	fb09 220b 	mla	r2, r9, fp, r2
 800ac0c:	4492      	add	sl, r2
 800ac0e:	b289      	uxth	r1, r1
 800ac10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac14:	f84e 1b04 	str.w	r1, [lr], #4
 800ac18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac1c:	f8be 1000 	ldrh.w	r1, [lr]
 800ac20:	0c12      	lsrs	r2, r2, #16
 800ac22:	fb09 1102 	mla	r1, r9, r2, r1
 800ac26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac2a:	4567      	cmp	r7, ip
 800ac2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac30:	d8e6      	bhi.n	800ac00 <__multiply+0x10c>
 800ac32:	9a01      	ldr	r2, [sp, #4]
 800ac34:	50a9      	str	r1, [r5, r2]
 800ac36:	3504      	adds	r5, #4
 800ac38:	e79a      	b.n	800ab70 <__multiply+0x7c>
 800ac3a:	3e01      	subs	r6, #1
 800ac3c:	e79c      	b.n	800ab78 <__multiply+0x84>
 800ac3e:	bf00      	nop
 800ac40:	0800bef8 	.word	0x0800bef8
 800ac44:	0800bfe8 	.word	0x0800bfe8

0800ac48 <__pow5mult>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	4615      	mov	r5, r2
 800ac4e:	f012 0203 	ands.w	r2, r2, #3
 800ac52:	4606      	mov	r6, r0
 800ac54:	460f      	mov	r7, r1
 800ac56:	d007      	beq.n	800ac68 <__pow5mult+0x20>
 800ac58:	4c25      	ldr	r4, [pc, #148]	; (800acf0 <__pow5mult+0xa8>)
 800ac5a:	3a01      	subs	r2, #1
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac62:	f7ff fe51 	bl	800a908 <__multadd>
 800ac66:	4607      	mov	r7, r0
 800ac68:	10ad      	asrs	r5, r5, #2
 800ac6a:	d03d      	beq.n	800ace8 <__pow5mult+0xa0>
 800ac6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac6e:	b97c      	cbnz	r4, 800ac90 <__pow5mult+0x48>
 800ac70:	2010      	movs	r0, #16
 800ac72:	f7ff fdcd 	bl	800a810 <malloc>
 800ac76:	4602      	mov	r2, r0
 800ac78:	6270      	str	r0, [r6, #36]	; 0x24
 800ac7a:	b928      	cbnz	r0, 800ac88 <__pow5mult+0x40>
 800ac7c:	4b1d      	ldr	r3, [pc, #116]	; (800acf4 <__pow5mult+0xac>)
 800ac7e:	481e      	ldr	r0, [pc, #120]	; (800acf8 <__pow5mult+0xb0>)
 800ac80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac84:	f000 fed6 	bl	800ba34 <__assert_func>
 800ac88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac8c:	6004      	str	r4, [r0, #0]
 800ac8e:	60c4      	str	r4, [r0, #12]
 800ac90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac98:	b94c      	cbnz	r4, 800acae <__pow5mult+0x66>
 800ac9a:	f240 2171 	movw	r1, #625	; 0x271
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f7ff ff12 	bl	800aac8 <__i2b>
 800aca4:	2300      	movs	r3, #0
 800aca6:	f8c8 0008 	str.w	r0, [r8, #8]
 800acaa:	4604      	mov	r4, r0
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	f04f 0900 	mov.w	r9, #0
 800acb2:	07eb      	lsls	r3, r5, #31
 800acb4:	d50a      	bpl.n	800accc <__pow5mult+0x84>
 800acb6:	4639      	mov	r1, r7
 800acb8:	4622      	mov	r2, r4
 800acba:	4630      	mov	r0, r6
 800acbc:	f7ff ff1a 	bl	800aaf4 <__multiply>
 800acc0:	4639      	mov	r1, r7
 800acc2:	4680      	mov	r8, r0
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff fdfd 	bl	800a8c4 <_Bfree>
 800acca:	4647      	mov	r7, r8
 800accc:	106d      	asrs	r5, r5, #1
 800acce:	d00b      	beq.n	800ace8 <__pow5mult+0xa0>
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	b938      	cbnz	r0, 800ace4 <__pow5mult+0x9c>
 800acd4:	4622      	mov	r2, r4
 800acd6:	4621      	mov	r1, r4
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff ff0b 	bl	800aaf4 <__multiply>
 800acde:	6020      	str	r0, [r4, #0]
 800ace0:	f8c0 9000 	str.w	r9, [r0]
 800ace4:	4604      	mov	r4, r0
 800ace6:	e7e4      	b.n	800acb2 <__pow5mult+0x6a>
 800ace8:	4638      	mov	r0, r7
 800acea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acee:	bf00      	nop
 800acf0:	0800c138 	.word	0x0800c138
 800acf4:	0800be86 	.word	0x0800be86
 800acf8:	0800bfe8 	.word	0x0800bfe8

0800acfc <__lshift>:
 800acfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad00:	460c      	mov	r4, r1
 800ad02:	6849      	ldr	r1, [r1, #4]
 800ad04:	6923      	ldr	r3, [r4, #16]
 800ad06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad0a:	68a3      	ldr	r3, [r4, #8]
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	4691      	mov	r9, r2
 800ad10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad14:	f108 0601 	add.w	r6, r8, #1
 800ad18:	42b3      	cmp	r3, r6
 800ad1a:	db0b      	blt.n	800ad34 <__lshift+0x38>
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	f7ff fd91 	bl	800a844 <_Balloc>
 800ad22:	4605      	mov	r5, r0
 800ad24:	b948      	cbnz	r0, 800ad3a <__lshift+0x3e>
 800ad26:	4602      	mov	r2, r0
 800ad28:	4b2a      	ldr	r3, [pc, #168]	; (800add4 <__lshift+0xd8>)
 800ad2a:	482b      	ldr	r0, [pc, #172]	; (800add8 <__lshift+0xdc>)
 800ad2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad30:	f000 fe80 	bl	800ba34 <__assert_func>
 800ad34:	3101      	adds	r1, #1
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	e7ee      	b.n	800ad18 <__lshift+0x1c>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f100 0114 	add.w	r1, r0, #20
 800ad40:	f100 0210 	add.w	r2, r0, #16
 800ad44:	4618      	mov	r0, r3
 800ad46:	4553      	cmp	r3, sl
 800ad48:	db37      	blt.n	800adba <__lshift+0xbe>
 800ad4a:	6920      	ldr	r0, [r4, #16]
 800ad4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad50:	f104 0314 	add.w	r3, r4, #20
 800ad54:	f019 091f 	ands.w	r9, r9, #31
 800ad58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad60:	d02f      	beq.n	800adc2 <__lshift+0xc6>
 800ad62:	f1c9 0e20 	rsb	lr, r9, #32
 800ad66:	468a      	mov	sl, r1
 800ad68:	f04f 0c00 	mov.w	ip, #0
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	fa02 f209 	lsl.w	r2, r2, r9
 800ad72:	ea42 020c 	orr.w	r2, r2, ip
 800ad76:	f84a 2b04 	str.w	r2, [sl], #4
 800ad7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad7e:	4298      	cmp	r0, r3
 800ad80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ad84:	d8f2      	bhi.n	800ad6c <__lshift+0x70>
 800ad86:	1b03      	subs	r3, r0, r4
 800ad88:	3b15      	subs	r3, #21
 800ad8a:	f023 0303 	bic.w	r3, r3, #3
 800ad8e:	3304      	adds	r3, #4
 800ad90:	f104 0215 	add.w	r2, r4, #21
 800ad94:	4290      	cmp	r0, r2
 800ad96:	bf38      	it	cc
 800ad98:	2304      	movcc	r3, #4
 800ad9a:	f841 c003 	str.w	ip, [r1, r3]
 800ad9e:	f1bc 0f00 	cmp.w	ip, #0
 800ada2:	d001      	beq.n	800ada8 <__lshift+0xac>
 800ada4:	f108 0602 	add.w	r6, r8, #2
 800ada8:	3e01      	subs	r6, #1
 800adaa:	4638      	mov	r0, r7
 800adac:	612e      	str	r6, [r5, #16]
 800adae:	4621      	mov	r1, r4
 800adb0:	f7ff fd88 	bl	800a8c4 <_Bfree>
 800adb4:	4628      	mov	r0, r5
 800adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adba:	f842 0f04 	str.w	r0, [r2, #4]!
 800adbe:	3301      	adds	r3, #1
 800adc0:	e7c1      	b.n	800ad46 <__lshift+0x4a>
 800adc2:	3904      	subs	r1, #4
 800adc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800adcc:	4298      	cmp	r0, r3
 800adce:	d8f9      	bhi.n	800adc4 <__lshift+0xc8>
 800add0:	e7ea      	b.n	800ada8 <__lshift+0xac>
 800add2:	bf00      	nop
 800add4:	0800bef8 	.word	0x0800bef8
 800add8:	0800bfe8 	.word	0x0800bfe8

0800addc <__mcmp>:
 800addc:	b530      	push	{r4, r5, lr}
 800adde:	6902      	ldr	r2, [r0, #16]
 800ade0:	690c      	ldr	r4, [r1, #16]
 800ade2:	1b12      	subs	r2, r2, r4
 800ade4:	d10e      	bne.n	800ae04 <__mcmp+0x28>
 800ade6:	f100 0314 	add.w	r3, r0, #20
 800adea:	3114      	adds	r1, #20
 800adec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800adf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800adf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800adf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800adfc:	42a5      	cmp	r5, r4
 800adfe:	d003      	beq.n	800ae08 <__mcmp+0x2c>
 800ae00:	d305      	bcc.n	800ae0e <__mcmp+0x32>
 800ae02:	2201      	movs	r2, #1
 800ae04:	4610      	mov	r0, r2
 800ae06:	bd30      	pop	{r4, r5, pc}
 800ae08:	4283      	cmp	r3, r0
 800ae0a:	d3f3      	bcc.n	800adf4 <__mcmp+0x18>
 800ae0c:	e7fa      	b.n	800ae04 <__mcmp+0x28>
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	e7f7      	b.n	800ae04 <__mcmp+0x28>

0800ae14 <__mdiff>:
 800ae14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4690      	mov	r8, r2
 800ae22:	f7ff ffdb 	bl	800addc <__mcmp>
 800ae26:	1e05      	subs	r5, r0, #0
 800ae28:	d110      	bne.n	800ae4c <__mdiff+0x38>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff fd09 	bl	800a844 <_Balloc>
 800ae32:	b930      	cbnz	r0, 800ae42 <__mdiff+0x2e>
 800ae34:	4b3a      	ldr	r3, [pc, #232]	; (800af20 <__mdiff+0x10c>)
 800ae36:	4602      	mov	r2, r0
 800ae38:	f240 2132 	movw	r1, #562	; 0x232
 800ae3c:	4839      	ldr	r0, [pc, #228]	; (800af24 <__mdiff+0x110>)
 800ae3e:	f000 fdf9 	bl	800ba34 <__assert_func>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4c:	bfa4      	itt	ge
 800ae4e:	4643      	movge	r3, r8
 800ae50:	46a0      	movge	r8, r4
 800ae52:	4630      	mov	r0, r6
 800ae54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae58:	bfa6      	itte	ge
 800ae5a:	461c      	movge	r4, r3
 800ae5c:	2500      	movge	r5, #0
 800ae5e:	2501      	movlt	r5, #1
 800ae60:	f7ff fcf0 	bl	800a844 <_Balloc>
 800ae64:	b920      	cbnz	r0, 800ae70 <__mdiff+0x5c>
 800ae66:	4b2e      	ldr	r3, [pc, #184]	; (800af20 <__mdiff+0x10c>)
 800ae68:	4602      	mov	r2, r0
 800ae6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae6e:	e7e5      	b.n	800ae3c <__mdiff+0x28>
 800ae70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae74:	6926      	ldr	r6, [r4, #16]
 800ae76:	60c5      	str	r5, [r0, #12]
 800ae78:	f104 0914 	add.w	r9, r4, #20
 800ae7c:	f108 0514 	add.w	r5, r8, #20
 800ae80:	f100 0e14 	add.w	lr, r0, #20
 800ae84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae8c:	f108 0210 	add.w	r2, r8, #16
 800ae90:	46f2      	mov	sl, lr
 800ae92:	2100      	movs	r1, #0
 800ae94:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae9c:	fa1f f883 	uxth.w	r8, r3
 800aea0:	fa11 f18b 	uxtah	r1, r1, fp
 800aea4:	0c1b      	lsrs	r3, r3, #16
 800aea6:	eba1 0808 	sub.w	r8, r1, r8
 800aeaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aeae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aeb2:	fa1f f888 	uxth.w	r8, r8
 800aeb6:	1419      	asrs	r1, r3, #16
 800aeb8:	454e      	cmp	r6, r9
 800aeba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aebe:	f84a 3b04 	str.w	r3, [sl], #4
 800aec2:	d8e7      	bhi.n	800ae94 <__mdiff+0x80>
 800aec4:	1b33      	subs	r3, r6, r4
 800aec6:	3b15      	subs	r3, #21
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	3304      	adds	r3, #4
 800aece:	3415      	adds	r4, #21
 800aed0:	42a6      	cmp	r6, r4
 800aed2:	bf38      	it	cc
 800aed4:	2304      	movcc	r3, #4
 800aed6:	441d      	add	r5, r3
 800aed8:	4473      	add	r3, lr
 800aeda:	469e      	mov	lr, r3
 800aedc:	462e      	mov	r6, r5
 800aede:	4566      	cmp	r6, ip
 800aee0:	d30e      	bcc.n	800af00 <__mdiff+0xec>
 800aee2:	f10c 0203 	add.w	r2, ip, #3
 800aee6:	1b52      	subs	r2, r2, r5
 800aee8:	f022 0203 	bic.w	r2, r2, #3
 800aeec:	3d03      	subs	r5, #3
 800aeee:	45ac      	cmp	ip, r5
 800aef0:	bf38      	it	cc
 800aef2:	2200      	movcc	r2, #0
 800aef4:	441a      	add	r2, r3
 800aef6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aefa:	b17b      	cbz	r3, 800af1c <__mdiff+0x108>
 800aefc:	6107      	str	r7, [r0, #16]
 800aefe:	e7a3      	b.n	800ae48 <__mdiff+0x34>
 800af00:	f856 8b04 	ldr.w	r8, [r6], #4
 800af04:	fa11 f288 	uxtah	r2, r1, r8
 800af08:	1414      	asrs	r4, r2, #16
 800af0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af0e:	b292      	uxth	r2, r2
 800af10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af14:	f84e 2b04 	str.w	r2, [lr], #4
 800af18:	1421      	asrs	r1, r4, #16
 800af1a:	e7e0      	b.n	800aede <__mdiff+0xca>
 800af1c:	3f01      	subs	r7, #1
 800af1e:	e7ea      	b.n	800aef6 <__mdiff+0xe2>
 800af20:	0800bef8 	.word	0x0800bef8
 800af24:	0800bfe8 	.word	0x0800bfe8

0800af28 <__ulp>:
 800af28:	b082      	sub	sp, #8
 800af2a:	ed8d 0b00 	vstr	d0, [sp]
 800af2e:	9b01      	ldr	r3, [sp, #4]
 800af30:	4912      	ldr	r1, [pc, #72]	; (800af7c <__ulp+0x54>)
 800af32:	4019      	ands	r1, r3
 800af34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800af38:	2900      	cmp	r1, #0
 800af3a:	dd05      	ble.n	800af48 <__ulp+0x20>
 800af3c:	2200      	movs	r2, #0
 800af3e:	460b      	mov	r3, r1
 800af40:	ec43 2b10 	vmov	d0, r2, r3
 800af44:	b002      	add	sp, #8
 800af46:	4770      	bx	lr
 800af48:	4249      	negs	r1, r1
 800af4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800af4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800af52:	f04f 0200 	mov.w	r2, #0
 800af56:	f04f 0300 	mov.w	r3, #0
 800af5a:	da04      	bge.n	800af66 <__ulp+0x3e>
 800af5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af60:	fa41 f300 	asr.w	r3, r1, r0
 800af64:	e7ec      	b.n	800af40 <__ulp+0x18>
 800af66:	f1a0 0114 	sub.w	r1, r0, #20
 800af6a:	291e      	cmp	r1, #30
 800af6c:	bfda      	itte	le
 800af6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800af72:	fa20 f101 	lsrle.w	r1, r0, r1
 800af76:	2101      	movgt	r1, #1
 800af78:	460a      	mov	r2, r1
 800af7a:	e7e1      	b.n	800af40 <__ulp+0x18>
 800af7c:	7ff00000 	.word	0x7ff00000

0800af80 <__b2d>:
 800af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af82:	6905      	ldr	r5, [r0, #16]
 800af84:	f100 0714 	add.w	r7, r0, #20
 800af88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af8c:	1f2e      	subs	r6, r5, #4
 800af8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800af92:	4620      	mov	r0, r4
 800af94:	f7ff fd48 	bl	800aa28 <__hi0bits>
 800af98:	f1c0 0320 	rsb	r3, r0, #32
 800af9c:	280a      	cmp	r0, #10
 800af9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b01c <__b2d+0x9c>
 800afa2:	600b      	str	r3, [r1, #0]
 800afa4:	dc14      	bgt.n	800afd0 <__b2d+0x50>
 800afa6:	f1c0 0e0b 	rsb	lr, r0, #11
 800afaa:	fa24 f10e 	lsr.w	r1, r4, lr
 800afae:	42b7      	cmp	r7, r6
 800afb0:	ea41 030c 	orr.w	r3, r1, ip
 800afb4:	bf34      	ite	cc
 800afb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800afba:	2100      	movcs	r1, #0
 800afbc:	3015      	adds	r0, #21
 800afbe:	fa04 f000 	lsl.w	r0, r4, r0
 800afc2:	fa21 f10e 	lsr.w	r1, r1, lr
 800afc6:	ea40 0201 	orr.w	r2, r0, r1
 800afca:	ec43 2b10 	vmov	d0, r2, r3
 800afce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd0:	42b7      	cmp	r7, r6
 800afd2:	bf3a      	itte	cc
 800afd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800afd8:	f1a5 0608 	subcc.w	r6, r5, #8
 800afdc:	2100      	movcs	r1, #0
 800afde:	380b      	subs	r0, #11
 800afe0:	d017      	beq.n	800b012 <__b2d+0x92>
 800afe2:	f1c0 0c20 	rsb	ip, r0, #32
 800afe6:	fa04 f500 	lsl.w	r5, r4, r0
 800afea:	42be      	cmp	r6, r7
 800afec:	fa21 f40c 	lsr.w	r4, r1, ip
 800aff0:	ea45 0504 	orr.w	r5, r5, r4
 800aff4:	bf8c      	ite	hi
 800aff6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800affa:	2400      	movls	r4, #0
 800affc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b000:	fa01 f000 	lsl.w	r0, r1, r0
 800b004:	fa24 f40c 	lsr.w	r4, r4, ip
 800b008:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b00c:	ea40 0204 	orr.w	r2, r0, r4
 800b010:	e7db      	b.n	800afca <__b2d+0x4a>
 800b012:	ea44 030c 	orr.w	r3, r4, ip
 800b016:	460a      	mov	r2, r1
 800b018:	e7d7      	b.n	800afca <__b2d+0x4a>
 800b01a:	bf00      	nop
 800b01c:	3ff00000 	.word	0x3ff00000

0800b020 <__d2b>:
 800b020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b024:	4689      	mov	r9, r1
 800b026:	2101      	movs	r1, #1
 800b028:	ec57 6b10 	vmov	r6, r7, d0
 800b02c:	4690      	mov	r8, r2
 800b02e:	f7ff fc09 	bl	800a844 <_Balloc>
 800b032:	4604      	mov	r4, r0
 800b034:	b930      	cbnz	r0, 800b044 <__d2b+0x24>
 800b036:	4602      	mov	r2, r0
 800b038:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <__d2b+0xb0>)
 800b03a:	4826      	ldr	r0, [pc, #152]	; (800b0d4 <__d2b+0xb4>)
 800b03c:	f240 310a 	movw	r1, #778	; 0x30a
 800b040:	f000 fcf8 	bl	800ba34 <__assert_func>
 800b044:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b04c:	bb35      	cbnz	r5, 800b09c <__d2b+0x7c>
 800b04e:	2e00      	cmp	r6, #0
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	d028      	beq.n	800b0a6 <__d2b+0x86>
 800b054:	4668      	mov	r0, sp
 800b056:	9600      	str	r6, [sp, #0]
 800b058:	f7ff fd06 	bl	800aa68 <__lo0bits>
 800b05c:	9900      	ldr	r1, [sp, #0]
 800b05e:	b300      	cbz	r0, 800b0a2 <__d2b+0x82>
 800b060:	9a01      	ldr	r2, [sp, #4]
 800b062:	f1c0 0320 	rsb	r3, r0, #32
 800b066:	fa02 f303 	lsl.w	r3, r2, r3
 800b06a:	430b      	orrs	r3, r1
 800b06c:	40c2      	lsrs	r2, r0
 800b06e:	6163      	str	r3, [r4, #20]
 800b070:	9201      	str	r2, [sp, #4]
 800b072:	9b01      	ldr	r3, [sp, #4]
 800b074:	61a3      	str	r3, [r4, #24]
 800b076:	2b00      	cmp	r3, #0
 800b078:	bf14      	ite	ne
 800b07a:	2202      	movne	r2, #2
 800b07c:	2201      	moveq	r2, #1
 800b07e:	6122      	str	r2, [r4, #16]
 800b080:	b1d5      	cbz	r5, 800b0b8 <__d2b+0x98>
 800b082:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b086:	4405      	add	r5, r0
 800b088:	f8c9 5000 	str.w	r5, [r9]
 800b08c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b090:	f8c8 0000 	str.w	r0, [r8]
 800b094:	4620      	mov	r0, r4
 800b096:	b003      	add	sp, #12
 800b098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b09c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0a0:	e7d5      	b.n	800b04e <__d2b+0x2e>
 800b0a2:	6161      	str	r1, [r4, #20]
 800b0a4:	e7e5      	b.n	800b072 <__d2b+0x52>
 800b0a6:	a801      	add	r0, sp, #4
 800b0a8:	f7ff fcde 	bl	800aa68 <__lo0bits>
 800b0ac:	9b01      	ldr	r3, [sp, #4]
 800b0ae:	6163      	str	r3, [r4, #20]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	6122      	str	r2, [r4, #16]
 800b0b4:	3020      	adds	r0, #32
 800b0b6:	e7e3      	b.n	800b080 <__d2b+0x60>
 800b0b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0c0:	f8c9 0000 	str.w	r0, [r9]
 800b0c4:	6918      	ldr	r0, [r3, #16]
 800b0c6:	f7ff fcaf 	bl	800aa28 <__hi0bits>
 800b0ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0ce:	e7df      	b.n	800b090 <__d2b+0x70>
 800b0d0:	0800bef8 	.word	0x0800bef8
 800b0d4:	0800bfe8 	.word	0x0800bfe8

0800b0d8 <__ratio>:
 800b0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	4688      	mov	r8, r1
 800b0de:	4669      	mov	r1, sp
 800b0e0:	4681      	mov	r9, r0
 800b0e2:	f7ff ff4d 	bl	800af80 <__b2d>
 800b0e6:	a901      	add	r1, sp, #4
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	ec55 4b10 	vmov	r4, r5, d0
 800b0ee:	ee10 aa10 	vmov	sl, s0
 800b0f2:	f7ff ff45 	bl	800af80 <__b2d>
 800b0f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b0fe:	1a59      	subs	r1, r3, r1
 800b100:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b10a:	ec57 6b10 	vmov	r6, r7, d0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	bfd6      	itet	le
 800b112:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b116:	462a      	movgt	r2, r5
 800b118:	463a      	movle	r2, r7
 800b11a:	46ab      	mov	fp, r5
 800b11c:	bfd6      	itet	le
 800b11e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b122:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b126:	ee00 3a90 	vmovle	s1, r3
 800b12a:	ec4b ab17 	vmov	d7, sl, fp
 800b12e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b132:	b003      	add	sp, #12
 800b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b138 <__copybits>:
 800b138:	3901      	subs	r1, #1
 800b13a:	b570      	push	{r4, r5, r6, lr}
 800b13c:	1149      	asrs	r1, r1, #5
 800b13e:	6914      	ldr	r4, [r2, #16]
 800b140:	3101      	adds	r1, #1
 800b142:	f102 0314 	add.w	r3, r2, #20
 800b146:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b14a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b14e:	1f05      	subs	r5, r0, #4
 800b150:	42a3      	cmp	r3, r4
 800b152:	d30c      	bcc.n	800b16e <__copybits+0x36>
 800b154:	1aa3      	subs	r3, r4, r2
 800b156:	3b11      	subs	r3, #17
 800b158:	f023 0303 	bic.w	r3, r3, #3
 800b15c:	3211      	adds	r2, #17
 800b15e:	42a2      	cmp	r2, r4
 800b160:	bf88      	it	hi
 800b162:	2300      	movhi	r3, #0
 800b164:	4418      	add	r0, r3
 800b166:	2300      	movs	r3, #0
 800b168:	4288      	cmp	r0, r1
 800b16a:	d305      	bcc.n	800b178 <__copybits+0x40>
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b172:	f845 6f04 	str.w	r6, [r5, #4]!
 800b176:	e7eb      	b.n	800b150 <__copybits+0x18>
 800b178:	f840 3b04 	str.w	r3, [r0], #4
 800b17c:	e7f4      	b.n	800b168 <__copybits+0x30>

0800b17e <__any_on>:
 800b17e:	f100 0214 	add.w	r2, r0, #20
 800b182:	6900      	ldr	r0, [r0, #16]
 800b184:	114b      	asrs	r3, r1, #5
 800b186:	4298      	cmp	r0, r3
 800b188:	b510      	push	{r4, lr}
 800b18a:	db11      	blt.n	800b1b0 <__any_on+0x32>
 800b18c:	dd0a      	ble.n	800b1a4 <__any_on+0x26>
 800b18e:	f011 011f 	ands.w	r1, r1, #31
 800b192:	d007      	beq.n	800b1a4 <__any_on+0x26>
 800b194:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b198:	fa24 f001 	lsr.w	r0, r4, r1
 800b19c:	fa00 f101 	lsl.w	r1, r0, r1
 800b1a0:	428c      	cmp	r4, r1
 800b1a2:	d10b      	bne.n	800b1bc <__any_on+0x3e>
 800b1a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d803      	bhi.n	800b1b4 <__any_on+0x36>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	bd10      	pop	{r4, pc}
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	e7f7      	b.n	800b1a4 <__any_on+0x26>
 800b1b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	d0f5      	beq.n	800b1a8 <__any_on+0x2a>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	e7f6      	b.n	800b1ae <__any_on+0x30>

0800b1c0 <_calloc_r>:
 800b1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1c2:	fba1 2402 	umull	r2, r4, r1, r2
 800b1c6:	b94c      	cbnz	r4, 800b1dc <_calloc_r+0x1c>
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	9201      	str	r2, [sp, #4]
 800b1cc:	f000 f87a 	bl	800b2c4 <_malloc_r>
 800b1d0:	9a01      	ldr	r2, [sp, #4]
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	b930      	cbnz	r0, 800b1e4 <_calloc_r+0x24>
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	b003      	add	sp, #12
 800b1da:	bd30      	pop	{r4, r5, pc}
 800b1dc:	220c      	movs	r2, #12
 800b1de:	6002      	str	r2, [r0, #0]
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	e7f8      	b.n	800b1d6 <_calloc_r+0x16>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	f7fc f9f5 	bl	80075d4 <memset>
 800b1ea:	e7f4      	b.n	800b1d6 <_calloc_r+0x16>

0800b1ec <_free_r>:
 800b1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ee:	2900      	cmp	r1, #0
 800b1f0:	d044      	beq.n	800b27c <_free_r+0x90>
 800b1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f6:	9001      	str	r0, [sp, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f1a1 0404 	sub.w	r4, r1, #4
 800b1fe:	bfb8      	it	lt
 800b200:	18e4      	addlt	r4, r4, r3
 800b202:	f000 fca5 	bl	800bb50 <__malloc_lock>
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <_free_r+0x94>)
 800b208:	9801      	ldr	r0, [sp, #4]
 800b20a:	6813      	ldr	r3, [r2, #0]
 800b20c:	b933      	cbnz	r3, 800b21c <_free_r+0x30>
 800b20e:	6063      	str	r3, [r4, #4]
 800b210:	6014      	str	r4, [r2, #0]
 800b212:	b003      	add	sp, #12
 800b214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b218:	f000 bca0 	b.w	800bb5c <__malloc_unlock>
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d908      	bls.n	800b232 <_free_r+0x46>
 800b220:	6825      	ldr	r5, [r4, #0]
 800b222:	1961      	adds	r1, r4, r5
 800b224:	428b      	cmp	r3, r1
 800b226:	bf01      	itttt	eq
 800b228:	6819      	ldreq	r1, [r3, #0]
 800b22a:	685b      	ldreq	r3, [r3, #4]
 800b22c:	1949      	addeq	r1, r1, r5
 800b22e:	6021      	streq	r1, [r4, #0]
 800b230:	e7ed      	b.n	800b20e <_free_r+0x22>
 800b232:	461a      	mov	r2, r3
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	b10b      	cbz	r3, 800b23c <_free_r+0x50>
 800b238:	42a3      	cmp	r3, r4
 800b23a:	d9fa      	bls.n	800b232 <_free_r+0x46>
 800b23c:	6811      	ldr	r1, [r2, #0]
 800b23e:	1855      	adds	r5, r2, r1
 800b240:	42a5      	cmp	r5, r4
 800b242:	d10b      	bne.n	800b25c <_free_r+0x70>
 800b244:	6824      	ldr	r4, [r4, #0]
 800b246:	4421      	add	r1, r4
 800b248:	1854      	adds	r4, r2, r1
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	6011      	str	r1, [r2, #0]
 800b24e:	d1e0      	bne.n	800b212 <_free_r+0x26>
 800b250:	681c      	ldr	r4, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	6053      	str	r3, [r2, #4]
 800b256:	4421      	add	r1, r4
 800b258:	6011      	str	r1, [r2, #0]
 800b25a:	e7da      	b.n	800b212 <_free_r+0x26>
 800b25c:	d902      	bls.n	800b264 <_free_r+0x78>
 800b25e:	230c      	movs	r3, #12
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	e7d6      	b.n	800b212 <_free_r+0x26>
 800b264:	6825      	ldr	r5, [r4, #0]
 800b266:	1961      	adds	r1, r4, r5
 800b268:	428b      	cmp	r3, r1
 800b26a:	bf04      	itt	eq
 800b26c:	6819      	ldreq	r1, [r3, #0]
 800b26e:	685b      	ldreq	r3, [r3, #4]
 800b270:	6063      	str	r3, [r4, #4]
 800b272:	bf04      	itt	eq
 800b274:	1949      	addeq	r1, r1, r5
 800b276:	6021      	streq	r1, [r4, #0]
 800b278:	6054      	str	r4, [r2, #4]
 800b27a:	e7ca      	b.n	800b212 <_free_r+0x26>
 800b27c:	b003      	add	sp, #12
 800b27e:	bd30      	pop	{r4, r5, pc}
 800b280:	24000914 	.word	0x24000914

0800b284 <sbrk_aligned>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	4e0e      	ldr	r6, [pc, #56]	; (800b2c0 <sbrk_aligned+0x3c>)
 800b288:	460c      	mov	r4, r1
 800b28a:	6831      	ldr	r1, [r6, #0]
 800b28c:	4605      	mov	r5, r0
 800b28e:	b911      	cbnz	r1, 800b296 <sbrk_aligned+0x12>
 800b290:	f000 fb4a 	bl	800b928 <_sbrk_r>
 800b294:	6030      	str	r0, [r6, #0]
 800b296:	4621      	mov	r1, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 fb45 	bl	800b928 <_sbrk_r>
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	d00a      	beq.n	800b2b8 <sbrk_aligned+0x34>
 800b2a2:	1cc4      	adds	r4, r0, #3
 800b2a4:	f024 0403 	bic.w	r4, r4, #3
 800b2a8:	42a0      	cmp	r0, r4
 800b2aa:	d007      	beq.n	800b2bc <sbrk_aligned+0x38>
 800b2ac:	1a21      	subs	r1, r4, r0
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f000 fb3a 	bl	800b928 <_sbrk_r>
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d101      	bne.n	800b2bc <sbrk_aligned+0x38>
 800b2b8:	f04f 34ff 	mov.w	r4, #4294967295
 800b2bc:	4620      	mov	r0, r4
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	24000918 	.word	0x24000918

0800b2c4 <_malloc_r>:
 800b2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c8:	1ccd      	adds	r5, r1, #3
 800b2ca:	f025 0503 	bic.w	r5, r5, #3
 800b2ce:	3508      	adds	r5, #8
 800b2d0:	2d0c      	cmp	r5, #12
 800b2d2:	bf38      	it	cc
 800b2d4:	250c      	movcc	r5, #12
 800b2d6:	2d00      	cmp	r5, #0
 800b2d8:	4607      	mov	r7, r0
 800b2da:	db01      	blt.n	800b2e0 <_malloc_r+0x1c>
 800b2dc:	42a9      	cmp	r1, r5
 800b2de:	d905      	bls.n	800b2ec <_malloc_r+0x28>
 800b2e0:	230c      	movs	r3, #12
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	2600      	movs	r6, #0
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ec:	4e2e      	ldr	r6, [pc, #184]	; (800b3a8 <_malloc_r+0xe4>)
 800b2ee:	f000 fc2f 	bl	800bb50 <__malloc_lock>
 800b2f2:	6833      	ldr	r3, [r6, #0]
 800b2f4:	461c      	mov	r4, r3
 800b2f6:	bb34      	cbnz	r4, 800b346 <_malloc_r+0x82>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f7ff ffc2 	bl	800b284 <sbrk_aligned>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	4604      	mov	r4, r0
 800b304:	d14d      	bne.n	800b3a2 <_malloc_r+0xde>
 800b306:	6834      	ldr	r4, [r6, #0]
 800b308:	4626      	mov	r6, r4
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	d140      	bne.n	800b390 <_malloc_r+0xcc>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	4631      	mov	r1, r6
 800b312:	4638      	mov	r0, r7
 800b314:	eb04 0803 	add.w	r8, r4, r3
 800b318:	f000 fb06 	bl	800b928 <_sbrk_r>
 800b31c:	4580      	cmp	r8, r0
 800b31e:	d13a      	bne.n	800b396 <_malloc_r+0xd2>
 800b320:	6821      	ldr	r1, [r4, #0]
 800b322:	3503      	adds	r5, #3
 800b324:	1a6d      	subs	r5, r5, r1
 800b326:	f025 0503 	bic.w	r5, r5, #3
 800b32a:	3508      	adds	r5, #8
 800b32c:	2d0c      	cmp	r5, #12
 800b32e:	bf38      	it	cc
 800b330:	250c      	movcc	r5, #12
 800b332:	4629      	mov	r1, r5
 800b334:	4638      	mov	r0, r7
 800b336:	f7ff ffa5 	bl	800b284 <sbrk_aligned>
 800b33a:	3001      	adds	r0, #1
 800b33c:	d02b      	beq.n	800b396 <_malloc_r+0xd2>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	442b      	add	r3, r5
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	e00e      	b.n	800b364 <_malloc_r+0xa0>
 800b346:	6822      	ldr	r2, [r4, #0]
 800b348:	1b52      	subs	r2, r2, r5
 800b34a:	d41e      	bmi.n	800b38a <_malloc_r+0xc6>
 800b34c:	2a0b      	cmp	r2, #11
 800b34e:	d916      	bls.n	800b37e <_malloc_r+0xba>
 800b350:	1961      	adds	r1, r4, r5
 800b352:	42a3      	cmp	r3, r4
 800b354:	6025      	str	r5, [r4, #0]
 800b356:	bf18      	it	ne
 800b358:	6059      	strne	r1, [r3, #4]
 800b35a:	6863      	ldr	r3, [r4, #4]
 800b35c:	bf08      	it	eq
 800b35e:	6031      	streq	r1, [r6, #0]
 800b360:	5162      	str	r2, [r4, r5]
 800b362:	604b      	str	r3, [r1, #4]
 800b364:	4638      	mov	r0, r7
 800b366:	f104 060b 	add.w	r6, r4, #11
 800b36a:	f000 fbf7 	bl	800bb5c <__malloc_unlock>
 800b36e:	f026 0607 	bic.w	r6, r6, #7
 800b372:	1d23      	adds	r3, r4, #4
 800b374:	1af2      	subs	r2, r6, r3
 800b376:	d0b6      	beq.n	800b2e6 <_malloc_r+0x22>
 800b378:	1b9b      	subs	r3, r3, r6
 800b37a:	50a3      	str	r3, [r4, r2]
 800b37c:	e7b3      	b.n	800b2e6 <_malloc_r+0x22>
 800b37e:	6862      	ldr	r2, [r4, #4]
 800b380:	42a3      	cmp	r3, r4
 800b382:	bf0c      	ite	eq
 800b384:	6032      	streq	r2, [r6, #0]
 800b386:	605a      	strne	r2, [r3, #4]
 800b388:	e7ec      	b.n	800b364 <_malloc_r+0xa0>
 800b38a:	4623      	mov	r3, r4
 800b38c:	6864      	ldr	r4, [r4, #4]
 800b38e:	e7b2      	b.n	800b2f6 <_malloc_r+0x32>
 800b390:	4634      	mov	r4, r6
 800b392:	6876      	ldr	r6, [r6, #4]
 800b394:	e7b9      	b.n	800b30a <_malloc_r+0x46>
 800b396:	230c      	movs	r3, #12
 800b398:	603b      	str	r3, [r7, #0]
 800b39a:	4638      	mov	r0, r7
 800b39c:	f000 fbde 	bl	800bb5c <__malloc_unlock>
 800b3a0:	e7a1      	b.n	800b2e6 <_malloc_r+0x22>
 800b3a2:	6025      	str	r5, [r4, #0]
 800b3a4:	e7de      	b.n	800b364 <_malloc_r+0xa0>
 800b3a6:	bf00      	nop
 800b3a8:	24000914 	.word	0x24000914

0800b3ac <__ssputs_r>:
 800b3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	688e      	ldr	r6, [r1, #8]
 800b3b2:	429e      	cmp	r6, r3
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	4690      	mov	r8, r2
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	d838      	bhi.n	800b430 <__ssputs_r+0x84>
 800b3be:	898a      	ldrh	r2, [r1, #12]
 800b3c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3c4:	d032      	beq.n	800b42c <__ssputs_r+0x80>
 800b3c6:	6825      	ldr	r5, [r4, #0]
 800b3c8:	6909      	ldr	r1, [r1, #16]
 800b3ca:	eba5 0901 	sub.w	r9, r5, r1
 800b3ce:	6965      	ldr	r5, [r4, #20]
 800b3d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3d8:	3301      	adds	r3, #1
 800b3da:	444b      	add	r3, r9
 800b3dc:	106d      	asrs	r5, r5, #1
 800b3de:	429d      	cmp	r5, r3
 800b3e0:	bf38      	it	cc
 800b3e2:	461d      	movcc	r5, r3
 800b3e4:	0553      	lsls	r3, r2, #21
 800b3e6:	d531      	bpl.n	800b44c <__ssputs_r+0xa0>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7ff ff6b 	bl	800b2c4 <_malloc_r>
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	b950      	cbnz	r0, 800b408 <__ssputs_r+0x5c>
 800b3f2:	230c      	movs	r3, #12
 800b3f4:	f8ca 3000 	str.w	r3, [sl]
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3fe:	81a3      	strh	r3, [r4, #12]
 800b400:	f04f 30ff 	mov.w	r0, #4294967295
 800b404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b408:	6921      	ldr	r1, [r4, #16]
 800b40a:	464a      	mov	r2, r9
 800b40c:	f7fc f8d4 	bl	80075b8 <memcpy>
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b41a:	81a3      	strh	r3, [r4, #12]
 800b41c:	6126      	str	r6, [r4, #16]
 800b41e:	6165      	str	r5, [r4, #20]
 800b420:	444e      	add	r6, r9
 800b422:	eba5 0509 	sub.w	r5, r5, r9
 800b426:	6026      	str	r6, [r4, #0]
 800b428:	60a5      	str	r5, [r4, #8]
 800b42a:	463e      	mov	r6, r7
 800b42c:	42be      	cmp	r6, r7
 800b42e:	d900      	bls.n	800b432 <__ssputs_r+0x86>
 800b430:	463e      	mov	r6, r7
 800b432:	6820      	ldr	r0, [r4, #0]
 800b434:	4632      	mov	r2, r6
 800b436:	4641      	mov	r1, r8
 800b438:	f000 fb70 	bl	800bb1c <memmove>
 800b43c:	68a3      	ldr	r3, [r4, #8]
 800b43e:	1b9b      	subs	r3, r3, r6
 800b440:	60a3      	str	r3, [r4, #8]
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	4433      	add	r3, r6
 800b446:	6023      	str	r3, [r4, #0]
 800b448:	2000      	movs	r0, #0
 800b44a:	e7db      	b.n	800b404 <__ssputs_r+0x58>
 800b44c:	462a      	mov	r2, r5
 800b44e:	f000 fb8b 	bl	800bb68 <_realloc_r>
 800b452:	4606      	mov	r6, r0
 800b454:	2800      	cmp	r0, #0
 800b456:	d1e1      	bne.n	800b41c <__ssputs_r+0x70>
 800b458:	6921      	ldr	r1, [r4, #16]
 800b45a:	4650      	mov	r0, sl
 800b45c:	f7ff fec6 	bl	800b1ec <_free_r>
 800b460:	e7c7      	b.n	800b3f2 <__ssputs_r+0x46>
	...

0800b464 <_svfiprintf_r>:
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	4698      	mov	r8, r3
 800b46a:	898b      	ldrh	r3, [r1, #12]
 800b46c:	061b      	lsls	r3, r3, #24
 800b46e:	b09d      	sub	sp, #116	; 0x74
 800b470:	4607      	mov	r7, r0
 800b472:	460d      	mov	r5, r1
 800b474:	4614      	mov	r4, r2
 800b476:	d50e      	bpl.n	800b496 <_svfiprintf_r+0x32>
 800b478:	690b      	ldr	r3, [r1, #16]
 800b47a:	b963      	cbnz	r3, 800b496 <_svfiprintf_r+0x32>
 800b47c:	2140      	movs	r1, #64	; 0x40
 800b47e:	f7ff ff21 	bl	800b2c4 <_malloc_r>
 800b482:	6028      	str	r0, [r5, #0]
 800b484:	6128      	str	r0, [r5, #16]
 800b486:	b920      	cbnz	r0, 800b492 <_svfiprintf_r+0x2e>
 800b488:	230c      	movs	r3, #12
 800b48a:	603b      	str	r3, [r7, #0]
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	e0d1      	b.n	800b636 <_svfiprintf_r+0x1d2>
 800b492:	2340      	movs	r3, #64	; 0x40
 800b494:	616b      	str	r3, [r5, #20]
 800b496:	2300      	movs	r3, #0
 800b498:	9309      	str	r3, [sp, #36]	; 0x24
 800b49a:	2320      	movs	r3, #32
 800b49c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a4:	2330      	movs	r3, #48	; 0x30
 800b4a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b650 <_svfiprintf_r+0x1ec>
 800b4aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4ae:	f04f 0901 	mov.w	r9, #1
 800b4b2:	4623      	mov	r3, r4
 800b4b4:	469a      	mov	sl, r3
 800b4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ba:	b10a      	cbz	r2, 800b4c0 <_svfiprintf_r+0x5c>
 800b4bc:	2a25      	cmp	r2, #37	; 0x25
 800b4be:	d1f9      	bne.n	800b4b4 <_svfiprintf_r+0x50>
 800b4c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b4c4:	d00b      	beq.n	800b4de <_svfiprintf_r+0x7a>
 800b4c6:	465b      	mov	r3, fp
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	4638      	mov	r0, r7
 800b4ce:	f7ff ff6d 	bl	800b3ac <__ssputs_r>
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	f000 80aa 	beq.w	800b62c <_svfiprintf_r+0x1c8>
 800b4d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4da:	445a      	add	r2, fp
 800b4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4de:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 80a2 	beq.w	800b62c <_svfiprintf_r+0x1c8>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f2:	f10a 0a01 	add.w	sl, sl, #1
 800b4f6:	9304      	str	r3, [sp, #16]
 800b4f8:	9307      	str	r3, [sp, #28]
 800b4fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b500:	4654      	mov	r4, sl
 800b502:	2205      	movs	r2, #5
 800b504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b508:	4851      	ldr	r0, [pc, #324]	; (800b650 <_svfiprintf_r+0x1ec>)
 800b50a:	f7f4 fef1 	bl	80002f0 <memchr>
 800b50e:	9a04      	ldr	r2, [sp, #16]
 800b510:	b9d8      	cbnz	r0, 800b54a <_svfiprintf_r+0xe6>
 800b512:	06d0      	lsls	r0, r2, #27
 800b514:	bf44      	itt	mi
 800b516:	2320      	movmi	r3, #32
 800b518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b51c:	0711      	lsls	r1, r2, #28
 800b51e:	bf44      	itt	mi
 800b520:	232b      	movmi	r3, #43	; 0x2b
 800b522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b526:	f89a 3000 	ldrb.w	r3, [sl]
 800b52a:	2b2a      	cmp	r3, #42	; 0x2a
 800b52c:	d015      	beq.n	800b55a <_svfiprintf_r+0xf6>
 800b52e:	9a07      	ldr	r2, [sp, #28]
 800b530:	4654      	mov	r4, sl
 800b532:	2000      	movs	r0, #0
 800b534:	f04f 0c0a 	mov.w	ip, #10
 800b538:	4621      	mov	r1, r4
 800b53a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b53e:	3b30      	subs	r3, #48	; 0x30
 800b540:	2b09      	cmp	r3, #9
 800b542:	d94e      	bls.n	800b5e2 <_svfiprintf_r+0x17e>
 800b544:	b1b0      	cbz	r0, 800b574 <_svfiprintf_r+0x110>
 800b546:	9207      	str	r2, [sp, #28]
 800b548:	e014      	b.n	800b574 <_svfiprintf_r+0x110>
 800b54a:	eba0 0308 	sub.w	r3, r0, r8
 800b54e:	fa09 f303 	lsl.w	r3, r9, r3
 800b552:	4313      	orrs	r3, r2
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	46a2      	mov	sl, r4
 800b558:	e7d2      	b.n	800b500 <_svfiprintf_r+0x9c>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	1d19      	adds	r1, r3, #4
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	9103      	str	r1, [sp, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	bfbb      	ittet	lt
 800b566:	425b      	neglt	r3, r3
 800b568:	f042 0202 	orrlt.w	r2, r2, #2
 800b56c:	9307      	strge	r3, [sp, #28]
 800b56e:	9307      	strlt	r3, [sp, #28]
 800b570:	bfb8      	it	lt
 800b572:	9204      	strlt	r2, [sp, #16]
 800b574:	7823      	ldrb	r3, [r4, #0]
 800b576:	2b2e      	cmp	r3, #46	; 0x2e
 800b578:	d10c      	bne.n	800b594 <_svfiprintf_r+0x130>
 800b57a:	7863      	ldrb	r3, [r4, #1]
 800b57c:	2b2a      	cmp	r3, #42	; 0x2a
 800b57e:	d135      	bne.n	800b5ec <_svfiprintf_r+0x188>
 800b580:	9b03      	ldr	r3, [sp, #12]
 800b582:	1d1a      	adds	r2, r3, #4
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	9203      	str	r2, [sp, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bfb8      	it	lt
 800b58c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b590:	3402      	adds	r4, #2
 800b592:	9305      	str	r3, [sp, #20]
 800b594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b660 <_svfiprintf_r+0x1fc>
 800b598:	7821      	ldrb	r1, [r4, #0]
 800b59a:	2203      	movs	r2, #3
 800b59c:	4650      	mov	r0, sl
 800b59e:	f7f4 fea7 	bl	80002f0 <memchr>
 800b5a2:	b140      	cbz	r0, 800b5b6 <_svfiprintf_r+0x152>
 800b5a4:	2340      	movs	r3, #64	; 0x40
 800b5a6:	eba0 000a 	sub.w	r0, r0, sl
 800b5aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b5ae:	9b04      	ldr	r3, [sp, #16]
 800b5b0:	4303      	orrs	r3, r0
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	9304      	str	r3, [sp, #16]
 800b5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ba:	4826      	ldr	r0, [pc, #152]	; (800b654 <_svfiprintf_r+0x1f0>)
 800b5bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5c0:	2206      	movs	r2, #6
 800b5c2:	f7f4 fe95 	bl	80002f0 <memchr>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d038      	beq.n	800b63c <_svfiprintf_r+0x1d8>
 800b5ca:	4b23      	ldr	r3, [pc, #140]	; (800b658 <_svfiprintf_r+0x1f4>)
 800b5cc:	bb1b      	cbnz	r3, 800b616 <_svfiprintf_r+0x1b2>
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	3307      	adds	r3, #7
 800b5d2:	f023 0307 	bic.w	r3, r3, #7
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	9303      	str	r3, [sp, #12]
 800b5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5dc:	4433      	add	r3, r6
 800b5de:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e0:	e767      	b.n	800b4b2 <_svfiprintf_r+0x4e>
 800b5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	e7a5      	b.n	800b538 <_svfiprintf_r+0xd4>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	3401      	adds	r4, #1
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	f04f 0c0a 	mov.w	ip, #10
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5fe:	3a30      	subs	r2, #48	; 0x30
 800b600:	2a09      	cmp	r2, #9
 800b602:	d903      	bls.n	800b60c <_svfiprintf_r+0x1a8>
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0c5      	beq.n	800b594 <_svfiprintf_r+0x130>
 800b608:	9105      	str	r1, [sp, #20]
 800b60a:	e7c3      	b.n	800b594 <_svfiprintf_r+0x130>
 800b60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b610:	4604      	mov	r4, r0
 800b612:	2301      	movs	r3, #1
 800b614:	e7f0      	b.n	800b5f8 <_svfiprintf_r+0x194>
 800b616:	ab03      	add	r3, sp, #12
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	462a      	mov	r2, r5
 800b61c:	4b0f      	ldr	r3, [pc, #60]	; (800b65c <_svfiprintf_r+0x1f8>)
 800b61e:	a904      	add	r1, sp, #16
 800b620:	4638      	mov	r0, r7
 800b622:	f7fc f871 	bl	8007708 <_printf_float>
 800b626:	1c42      	adds	r2, r0, #1
 800b628:	4606      	mov	r6, r0
 800b62a:	d1d6      	bne.n	800b5da <_svfiprintf_r+0x176>
 800b62c:	89ab      	ldrh	r3, [r5, #12]
 800b62e:	065b      	lsls	r3, r3, #25
 800b630:	f53f af2c 	bmi.w	800b48c <_svfiprintf_r+0x28>
 800b634:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b636:	b01d      	add	sp, #116	; 0x74
 800b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	ab03      	add	r3, sp, #12
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	462a      	mov	r2, r5
 800b642:	4b06      	ldr	r3, [pc, #24]	; (800b65c <_svfiprintf_r+0x1f8>)
 800b644:	a904      	add	r1, sp, #16
 800b646:	4638      	mov	r0, r7
 800b648:	f7fc faea 	bl	8007c20 <_printf_i>
 800b64c:	e7eb      	b.n	800b626 <_svfiprintf_r+0x1c2>
 800b64e:	bf00      	nop
 800b650:	0800c144 	.word	0x0800c144
 800b654:	0800c14e 	.word	0x0800c14e
 800b658:	08007709 	.word	0x08007709
 800b65c:	0800b3ad 	.word	0x0800b3ad
 800b660:	0800c14a 	.word	0x0800c14a

0800b664 <__sfputc_r>:
 800b664:	6893      	ldr	r3, [r2, #8]
 800b666:	3b01      	subs	r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	b410      	push	{r4}
 800b66c:	6093      	str	r3, [r2, #8]
 800b66e:	da08      	bge.n	800b682 <__sfputc_r+0x1e>
 800b670:	6994      	ldr	r4, [r2, #24]
 800b672:	42a3      	cmp	r3, r4
 800b674:	db01      	blt.n	800b67a <__sfputc_r+0x16>
 800b676:	290a      	cmp	r1, #10
 800b678:	d103      	bne.n	800b682 <__sfputc_r+0x1e>
 800b67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b67e:	f7fd bc7b 	b.w	8008f78 <__swbuf_r>
 800b682:	6813      	ldr	r3, [r2, #0]
 800b684:	1c58      	adds	r0, r3, #1
 800b686:	6010      	str	r0, [r2, #0]
 800b688:	7019      	strb	r1, [r3, #0]
 800b68a:	4608      	mov	r0, r1
 800b68c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <__sfputs_r>:
 800b692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b694:	4606      	mov	r6, r0
 800b696:	460f      	mov	r7, r1
 800b698:	4614      	mov	r4, r2
 800b69a:	18d5      	adds	r5, r2, r3
 800b69c:	42ac      	cmp	r4, r5
 800b69e:	d101      	bne.n	800b6a4 <__sfputs_r+0x12>
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	e007      	b.n	800b6b4 <__sfputs_r+0x22>
 800b6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a8:	463a      	mov	r2, r7
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7ff ffda 	bl	800b664 <__sfputc_r>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d1f3      	bne.n	800b69c <__sfputs_r+0xa>
 800b6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6b8 <_vfiprintf_r>:
 800b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	460d      	mov	r5, r1
 800b6be:	b09d      	sub	sp, #116	; 0x74
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	4698      	mov	r8, r3
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	b118      	cbz	r0, 800b6d0 <_vfiprintf_r+0x18>
 800b6c8:	6983      	ldr	r3, [r0, #24]
 800b6ca:	b90b      	cbnz	r3, 800b6d0 <_vfiprintf_r+0x18>
 800b6cc:	f7fe fc28 	bl	8009f20 <__sinit>
 800b6d0:	4b89      	ldr	r3, [pc, #548]	; (800b8f8 <_vfiprintf_r+0x240>)
 800b6d2:	429d      	cmp	r5, r3
 800b6d4:	d11b      	bne.n	800b70e <_vfiprintf_r+0x56>
 800b6d6:	6875      	ldr	r5, [r6, #4]
 800b6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6da:	07d9      	lsls	r1, r3, #31
 800b6dc:	d405      	bmi.n	800b6ea <_vfiprintf_r+0x32>
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	059a      	lsls	r2, r3, #22
 800b6e2:	d402      	bmi.n	800b6ea <_vfiprintf_r+0x32>
 800b6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e6:	f7ff f82c 	bl	800a742 <__retarget_lock_acquire_recursive>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	071b      	lsls	r3, r3, #28
 800b6ee:	d501      	bpl.n	800b6f4 <_vfiprintf_r+0x3c>
 800b6f0:	692b      	ldr	r3, [r5, #16]
 800b6f2:	b9eb      	cbnz	r3, 800b730 <_vfiprintf_r+0x78>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f7fd fc90 	bl	800901c <__swsetup_r>
 800b6fc:	b1c0      	cbz	r0, 800b730 <_vfiprintf_r+0x78>
 800b6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b700:	07dc      	lsls	r4, r3, #31
 800b702:	d50e      	bpl.n	800b722 <_vfiprintf_r+0x6a>
 800b704:	f04f 30ff 	mov.w	r0, #4294967295
 800b708:	b01d      	add	sp, #116	; 0x74
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	4b7b      	ldr	r3, [pc, #492]	; (800b8fc <_vfiprintf_r+0x244>)
 800b710:	429d      	cmp	r5, r3
 800b712:	d101      	bne.n	800b718 <_vfiprintf_r+0x60>
 800b714:	68b5      	ldr	r5, [r6, #8]
 800b716:	e7df      	b.n	800b6d8 <_vfiprintf_r+0x20>
 800b718:	4b79      	ldr	r3, [pc, #484]	; (800b900 <_vfiprintf_r+0x248>)
 800b71a:	429d      	cmp	r5, r3
 800b71c:	bf08      	it	eq
 800b71e:	68f5      	ldreq	r5, [r6, #12]
 800b720:	e7da      	b.n	800b6d8 <_vfiprintf_r+0x20>
 800b722:	89ab      	ldrh	r3, [r5, #12]
 800b724:	0598      	lsls	r0, r3, #22
 800b726:	d4ed      	bmi.n	800b704 <_vfiprintf_r+0x4c>
 800b728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b72a:	f7ff f80b 	bl	800a744 <__retarget_lock_release_recursive>
 800b72e:	e7e9      	b.n	800b704 <_vfiprintf_r+0x4c>
 800b730:	2300      	movs	r3, #0
 800b732:	9309      	str	r3, [sp, #36]	; 0x24
 800b734:	2320      	movs	r3, #32
 800b736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b73a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b73e:	2330      	movs	r3, #48	; 0x30
 800b740:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b904 <_vfiprintf_r+0x24c>
 800b744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b748:	f04f 0901 	mov.w	r9, #1
 800b74c:	4623      	mov	r3, r4
 800b74e:	469a      	mov	sl, r3
 800b750:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b754:	b10a      	cbz	r2, 800b75a <_vfiprintf_r+0xa2>
 800b756:	2a25      	cmp	r2, #37	; 0x25
 800b758:	d1f9      	bne.n	800b74e <_vfiprintf_r+0x96>
 800b75a:	ebba 0b04 	subs.w	fp, sl, r4
 800b75e:	d00b      	beq.n	800b778 <_vfiprintf_r+0xc0>
 800b760:	465b      	mov	r3, fp
 800b762:	4622      	mov	r2, r4
 800b764:	4629      	mov	r1, r5
 800b766:	4630      	mov	r0, r6
 800b768:	f7ff ff93 	bl	800b692 <__sfputs_r>
 800b76c:	3001      	adds	r0, #1
 800b76e:	f000 80aa 	beq.w	800b8c6 <_vfiprintf_r+0x20e>
 800b772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b774:	445a      	add	r2, fp
 800b776:	9209      	str	r2, [sp, #36]	; 0x24
 800b778:	f89a 3000 	ldrb.w	r3, [sl]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 80a2 	beq.w	800b8c6 <_vfiprintf_r+0x20e>
 800b782:	2300      	movs	r3, #0
 800b784:	f04f 32ff 	mov.w	r2, #4294967295
 800b788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b78c:	f10a 0a01 	add.w	sl, sl, #1
 800b790:	9304      	str	r3, [sp, #16]
 800b792:	9307      	str	r3, [sp, #28]
 800b794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b798:	931a      	str	r3, [sp, #104]	; 0x68
 800b79a:	4654      	mov	r4, sl
 800b79c:	2205      	movs	r2, #5
 800b79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a2:	4858      	ldr	r0, [pc, #352]	; (800b904 <_vfiprintf_r+0x24c>)
 800b7a4:	f7f4 fda4 	bl	80002f0 <memchr>
 800b7a8:	9a04      	ldr	r2, [sp, #16]
 800b7aa:	b9d8      	cbnz	r0, 800b7e4 <_vfiprintf_r+0x12c>
 800b7ac:	06d1      	lsls	r1, r2, #27
 800b7ae:	bf44      	itt	mi
 800b7b0:	2320      	movmi	r3, #32
 800b7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b6:	0713      	lsls	r3, r2, #28
 800b7b8:	bf44      	itt	mi
 800b7ba:	232b      	movmi	r3, #43	; 0x2b
 800b7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c6:	d015      	beq.n	800b7f4 <_vfiprintf_r+0x13c>
 800b7c8:	9a07      	ldr	r2, [sp, #28]
 800b7ca:	4654      	mov	r4, sl
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f04f 0c0a 	mov.w	ip, #10
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d8:	3b30      	subs	r3, #48	; 0x30
 800b7da:	2b09      	cmp	r3, #9
 800b7dc:	d94e      	bls.n	800b87c <_vfiprintf_r+0x1c4>
 800b7de:	b1b0      	cbz	r0, 800b80e <_vfiprintf_r+0x156>
 800b7e0:	9207      	str	r2, [sp, #28]
 800b7e2:	e014      	b.n	800b80e <_vfiprintf_r+0x156>
 800b7e4:	eba0 0308 	sub.w	r3, r0, r8
 800b7e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	9304      	str	r3, [sp, #16]
 800b7f0:	46a2      	mov	sl, r4
 800b7f2:	e7d2      	b.n	800b79a <_vfiprintf_r+0xe2>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	1d19      	adds	r1, r3, #4
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	9103      	str	r1, [sp, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bfbb      	ittet	lt
 800b800:	425b      	neglt	r3, r3
 800b802:	f042 0202 	orrlt.w	r2, r2, #2
 800b806:	9307      	strge	r3, [sp, #28]
 800b808:	9307      	strlt	r3, [sp, #28]
 800b80a:	bfb8      	it	lt
 800b80c:	9204      	strlt	r2, [sp, #16]
 800b80e:	7823      	ldrb	r3, [r4, #0]
 800b810:	2b2e      	cmp	r3, #46	; 0x2e
 800b812:	d10c      	bne.n	800b82e <_vfiprintf_r+0x176>
 800b814:	7863      	ldrb	r3, [r4, #1]
 800b816:	2b2a      	cmp	r3, #42	; 0x2a
 800b818:	d135      	bne.n	800b886 <_vfiprintf_r+0x1ce>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	1d1a      	adds	r2, r3, #4
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	9203      	str	r2, [sp, #12]
 800b822:	2b00      	cmp	r3, #0
 800b824:	bfb8      	it	lt
 800b826:	f04f 33ff 	movlt.w	r3, #4294967295
 800b82a:	3402      	adds	r4, #2
 800b82c:	9305      	str	r3, [sp, #20]
 800b82e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b914 <_vfiprintf_r+0x25c>
 800b832:	7821      	ldrb	r1, [r4, #0]
 800b834:	2203      	movs	r2, #3
 800b836:	4650      	mov	r0, sl
 800b838:	f7f4 fd5a 	bl	80002f0 <memchr>
 800b83c:	b140      	cbz	r0, 800b850 <_vfiprintf_r+0x198>
 800b83e:	2340      	movs	r3, #64	; 0x40
 800b840:	eba0 000a 	sub.w	r0, r0, sl
 800b844:	fa03 f000 	lsl.w	r0, r3, r0
 800b848:	9b04      	ldr	r3, [sp, #16]
 800b84a:	4303      	orrs	r3, r0
 800b84c:	3401      	adds	r4, #1
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b854:	482c      	ldr	r0, [pc, #176]	; (800b908 <_vfiprintf_r+0x250>)
 800b856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b85a:	2206      	movs	r2, #6
 800b85c:	f7f4 fd48 	bl	80002f0 <memchr>
 800b860:	2800      	cmp	r0, #0
 800b862:	d03f      	beq.n	800b8e4 <_vfiprintf_r+0x22c>
 800b864:	4b29      	ldr	r3, [pc, #164]	; (800b90c <_vfiprintf_r+0x254>)
 800b866:	bb1b      	cbnz	r3, 800b8b0 <_vfiprintf_r+0x1f8>
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	3307      	adds	r3, #7
 800b86c:	f023 0307 	bic.w	r3, r3, #7
 800b870:	3308      	adds	r3, #8
 800b872:	9303      	str	r3, [sp, #12]
 800b874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b876:	443b      	add	r3, r7
 800b878:	9309      	str	r3, [sp, #36]	; 0x24
 800b87a:	e767      	b.n	800b74c <_vfiprintf_r+0x94>
 800b87c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b880:	460c      	mov	r4, r1
 800b882:	2001      	movs	r0, #1
 800b884:	e7a5      	b.n	800b7d2 <_vfiprintf_r+0x11a>
 800b886:	2300      	movs	r3, #0
 800b888:	3401      	adds	r4, #1
 800b88a:	9305      	str	r3, [sp, #20]
 800b88c:	4619      	mov	r1, r3
 800b88e:	f04f 0c0a 	mov.w	ip, #10
 800b892:	4620      	mov	r0, r4
 800b894:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b898:	3a30      	subs	r2, #48	; 0x30
 800b89a:	2a09      	cmp	r2, #9
 800b89c:	d903      	bls.n	800b8a6 <_vfiprintf_r+0x1ee>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0c5      	beq.n	800b82e <_vfiprintf_r+0x176>
 800b8a2:	9105      	str	r1, [sp, #20]
 800b8a4:	e7c3      	b.n	800b82e <_vfiprintf_r+0x176>
 800b8a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e7f0      	b.n	800b892 <_vfiprintf_r+0x1da>
 800b8b0:	ab03      	add	r3, sp, #12
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	4b16      	ldr	r3, [pc, #88]	; (800b910 <_vfiprintf_r+0x258>)
 800b8b8:	a904      	add	r1, sp, #16
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7fb ff24 	bl	8007708 <_printf_float>
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	1c78      	adds	r0, r7, #1
 800b8c4:	d1d6      	bne.n	800b874 <_vfiprintf_r+0x1bc>
 800b8c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c8:	07d9      	lsls	r1, r3, #31
 800b8ca:	d405      	bmi.n	800b8d8 <_vfiprintf_r+0x220>
 800b8cc:	89ab      	ldrh	r3, [r5, #12]
 800b8ce:	059a      	lsls	r2, r3, #22
 800b8d0:	d402      	bmi.n	800b8d8 <_vfiprintf_r+0x220>
 800b8d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d4:	f7fe ff36 	bl	800a744 <__retarget_lock_release_recursive>
 800b8d8:	89ab      	ldrh	r3, [r5, #12]
 800b8da:	065b      	lsls	r3, r3, #25
 800b8dc:	f53f af12 	bmi.w	800b704 <_vfiprintf_r+0x4c>
 800b8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8e2:	e711      	b.n	800b708 <_vfiprintf_r+0x50>
 800b8e4:	ab03      	add	r3, sp, #12
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	462a      	mov	r2, r5
 800b8ea:	4b09      	ldr	r3, [pc, #36]	; (800b910 <_vfiprintf_r+0x258>)
 800b8ec:	a904      	add	r1, sp, #16
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7fc f996 	bl	8007c20 <_printf_i>
 800b8f4:	e7e4      	b.n	800b8c0 <_vfiprintf_r+0x208>
 800b8f6:	bf00      	nop
 800b8f8:	0800bf2c 	.word	0x0800bf2c
 800b8fc:	0800bf4c 	.word	0x0800bf4c
 800b900:	0800bf0c 	.word	0x0800bf0c
 800b904:	0800c144 	.word	0x0800c144
 800b908:	0800c14e 	.word	0x0800c14e
 800b90c:	08007709 	.word	0x08007709
 800b910:	0800b693 	.word	0x0800b693
 800b914:	0800c14a 	.word	0x0800c14a

0800b918 <nan>:
 800b918:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b920 <nan+0x8>
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	00000000 	.word	0x00000000
 800b924:	7ff80000 	.word	0x7ff80000

0800b928 <_sbrk_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d06      	ldr	r5, [pc, #24]	; (800b944 <_sbrk_r+0x1c>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	f7f6 f86c 	bl	8001a10 <_sbrk>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_sbrk_r+0x1a>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_sbrk_r+0x1a>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	2400091c 	.word	0x2400091c

0800b948 <__sread>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	460c      	mov	r4, r1
 800b94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b950:	f000 f93a 	bl	800bbc8 <_read_r>
 800b954:	2800      	cmp	r0, #0
 800b956:	bfab      	itete	ge
 800b958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b95a:	89a3      	ldrhlt	r3, [r4, #12]
 800b95c:	181b      	addge	r3, r3, r0
 800b95e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b962:	bfac      	ite	ge
 800b964:	6563      	strge	r3, [r4, #84]	; 0x54
 800b966:	81a3      	strhlt	r3, [r4, #12]
 800b968:	bd10      	pop	{r4, pc}

0800b96a <__swrite>:
 800b96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96e:	461f      	mov	r7, r3
 800b970:	898b      	ldrh	r3, [r1, #12]
 800b972:	05db      	lsls	r3, r3, #23
 800b974:	4605      	mov	r5, r0
 800b976:	460c      	mov	r4, r1
 800b978:	4616      	mov	r6, r2
 800b97a:	d505      	bpl.n	800b988 <__swrite+0x1e>
 800b97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b980:	2302      	movs	r3, #2
 800b982:	2200      	movs	r2, #0
 800b984:	f000 f8b8 	bl	800baf8 <_lseek_r>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b98e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	4632      	mov	r2, r6
 800b996:	463b      	mov	r3, r7
 800b998:	4628      	mov	r0, r5
 800b99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b99e:	f000 b837 	b.w	800ba10 <_write_r>

0800b9a2 <__sseek>:
 800b9a2:	b510      	push	{r4, lr}
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9aa:	f000 f8a5 	bl	800baf8 <_lseek_r>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	bf15      	itete	ne
 800b9b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9be:	81a3      	strheq	r3, [r4, #12]
 800b9c0:	bf18      	it	ne
 800b9c2:	81a3      	strhne	r3, [r4, #12]
 800b9c4:	bd10      	pop	{r4, pc}

0800b9c6 <__sclose>:
 800b9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ca:	f000 b851 	b.w	800ba70 <_close_r>

0800b9ce <strncmp>:
 800b9ce:	b510      	push	{r4, lr}
 800b9d0:	b17a      	cbz	r2, 800b9f2 <strncmp+0x24>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	3901      	subs	r1, #1
 800b9d6:	1884      	adds	r4, r0, r2
 800b9d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b9dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b9e0:	4290      	cmp	r0, r2
 800b9e2:	d101      	bne.n	800b9e8 <strncmp+0x1a>
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	d101      	bne.n	800b9ec <strncmp+0x1e>
 800b9e8:	1a80      	subs	r0, r0, r2
 800b9ea:	bd10      	pop	{r4, pc}
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d1f3      	bne.n	800b9d8 <strncmp+0xa>
 800b9f0:	e7fa      	b.n	800b9e8 <strncmp+0x1a>
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	e7f9      	b.n	800b9ea <strncmp+0x1c>

0800b9f6 <__ascii_wctomb>:
 800b9f6:	b149      	cbz	r1, 800ba0c <__ascii_wctomb+0x16>
 800b9f8:	2aff      	cmp	r2, #255	; 0xff
 800b9fa:	bf85      	ittet	hi
 800b9fc:	238a      	movhi	r3, #138	; 0x8a
 800b9fe:	6003      	strhi	r3, [r0, #0]
 800ba00:	700a      	strbls	r2, [r1, #0]
 800ba02:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba06:	bf98      	it	ls
 800ba08:	2001      	movls	r0, #1
 800ba0a:	4770      	bx	lr
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4770      	bx	lr

0800ba10 <_write_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4d07      	ldr	r5, [pc, #28]	; (800ba30 <_write_r+0x20>)
 800ba14:	4604      	mov	r4, r0
 800ba16:	4608      	mov	r0, r1
 800ba18:	4611      	mov	r1, r2
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	602a      	str	r2, [r5, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f7f5 ffa5 	bl	800196e <_write>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_write_r+0x1e>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_write_r+0x1e>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	2400091c 	.word	0x2400091c

0800ba34 <__assert_func>:
 800ba34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba36:	4614      	mov	r4, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <__assert_func+0x2c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4605      	mov	r5, r0
 800ba40:	68d8      	ldr	r0, [r3, #12]
 800ba42:	b14c      	cbz	r4, 800ba58 <__assert_func+0x24>
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <__assert_func+0x30>)
 800ba46:	9100      	str	r1, [sp, #0]
 800ba48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba4c:	4906      	ldr	r1, [pc, #24]	; (800ba68 <__assert_func+0x34>)
 800ba4e:	462b      	mov	r3, r5
 800ba50:	f000 f81e 	bl	800ba90 <fiprintf>
 800ba54:	f000 f8ca 	bl	800bbec <abort>
 800ba58:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <__assert_func+0x38>)
 800ba5a:	461c      	mov	r4, r3
 800ba5c:	e7f3      	b.n	800ba46 <__assert_func+0x12>
 800ba5e:	bf00      	nop
 800ba60:	24000010 	.word	0x24000010
 800ba64:	0800c155 	.word	0x0800c155
 800ba68:	0800c162 	.word	0x0800c162
 800ba6c:	0800c190 	.word	0x0800c190

0800ba70 <_close_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d06      	ldr	r5, [pc, #24]	; (800ba8c <_close_r+0x1c>)
 800ba74:	2300      	movs	r3, #0
 800ba76:	4604      	mov	r4, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	602b      	str	r3, [r5, #0]
 800ba7c:	f7f5 ff93 	bl	80019a6 <_close>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_close_r+0x1a>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_close_r+0x1a>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	2400091c 	.word	0x2400091c

0800ba90 <fiprintf>:
 800ba90:	b40e      	push	{r1, r2, r3}
 800ba92:	b503      	push	{r0, r1, lr}
 800ba94:	4601      	mov	r1, r0
 800ba96:	ab03      	add	r3, sp, #12
 800ba98:	4805      	ldr	r0, [pc, #20]	; (800bab0 <fiprintf+0x20>)
 800ba9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba9e:	6800      	ldr	r0, [r0, #0]
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	f7ff fe09 	bl	800b6b8 <_vfiprintf_r>
 800baa6:	b002      	add	sp, #8
 800baa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800baac:	b003      	add	sp, #12
 800baae:	4770      	bx	lr
 800bab0:	24000010 	.word	0x24000010

0800bab4 <_fstat_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	; (800bad4 <_fstat_r+0x20>)
 800bab8:	2300      	movs	r3, #0
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	4611      	mov	r1, r2
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	f7f5 ff7c 	bl	80019be <_fstat>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	d102      	bne.n	800bad0 <_fstat_r+0x1c>
 800baca:	682b      	ldr	r3, [r5, #0]
 800bacc:	b103      	cbz	r3, 800bad0 <_fstat_r+0x1c>
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	bd38      	pop	{r3, r4, r5, pc}
 800bad2:	bf00      	nop
 800bad4:	2400091c 	.word	0x2400091c

0800bad8 <_isatty_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d06      	ldr	r5, [pc, #24]	; (800baf4 <_isatty_r+0x1c>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	602b      	str	r3, [r5, #0]
 800bae4:	f7f5 ff7b 	bl	80019de <_isatty>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d102      	bne.n	800baf2 <_isatty_r+0x1a>
 800baec:	682b      	ldr	r3, [r5, #0]
 800baee:	b103      	cbz	r3, 800baf2 <_isatty_r+0x1a>
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	2400091c 	.word	0x2400091c

0800baf8 <_lseek_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4d07      	ldr	r5, [pc, #28]	; (800bb18 <_lseek_r+0x20>)
 800bafc:	4604      	mov	r4, r0
 800bafe:	4608      	mov	r0, r1
 800bb00:	4611      	mov	r1, r2
 800bb02:	2200      	movs	r2, #0
 800bb04:	602a      	str	r2, [r5, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	f7f5 ff74 	bl	80019f4 <_lseek>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d102      	bne.n	800bb16 <_lseek_r+0x1e>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	b103      	cbz	r3, 800bb16 <_lseek_r+0x1e>
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	2400091c 	.word	0x2400091c

0800bb1c <memmove>:
 800bb1c:	4288      	cmp	r0, r1
 800bb1e:	b510      	push	{r4, lr}
 800bb20:	eb01 0402 	add.w	r4, r1, r2
 800bb24:	d902      	bls.n	800bb2c <memmove+0x10>
 800bb26:	4284      	cmp	r4, r0
 800bb28:	4623      	mov	r3, r4
 800bb2a:	d807      	bhi.n	800bb3c <memmove+0x20>
 800bb2c:	1e43      	subs	r3, r0, #1
 800bb2e:	42a1      	cmp	r1, r4
 800bb30:	d008      	beq.n	800bb44 <memmove+0x28>
 800bb32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb3a:	e7f8      	b.n	800bb2e <memmove+0x12>
 800bb3c:	4402      	add	r2, r0
 800bb3e:	4601      	mov	r1, r0
 800bb40:	428a      	cmp	r2, r1
 800bb42:	d100      	bne.n	800bb46 <memmove+0x2a>
 800bb44:	bd10      	pop	{r4, pc}
 800bb46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb4e:	e7f7      	b.n	800bb40 <memmove+0x24>

0800bb50 <__malloc_lock>:
 800bb50:	4801      	ldr	r0, [pc, #4]	; (800bb58 <__malloc_lock+0x8>)
 800bb52:	f7fe bdf6 	b.w	800a742 <__retarget_lock_acquire_recursive>
 800bb56:	bf00      	nop
 800bb58:	24000910 	.word	0x24000910

0800bb5c <__malloc_unlock>:
 800bb5c:	4801      	ldr	r0, [pc, #4]	; (800bb64 <__malloc_unlock+0x8>)
 800bb5e:	f7fe bdf1 	b.w	800a744 <__retarget_lock_release_recursive>
 800bb62:	bf00      	nop
 800bb64:	24000910 	.word	0x24000910

0800bb68 <_realloc_r>:
 800bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	4614      	mov	r4, r2
 800bb70:	460e      	mov	r6, r1
 800bb72:	b921      	cbnz	r1, 800bb7e <_realloc_r+0x16>
 800bb74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb78:	4611      	mov	r1, r2
 800bb7a:	f7ff bba3 	b.w	800b2c4 <_malloc_r>
 800bb7e:	b92a      	cbnz	r2, 800bb8c <_realloc_r+0x24>
 800bb80:	f7ff fb34 	bl	800b1ec <_free_r>
 800bb84:	4625      	mov	r5, r4
 800bb86:	4628      	mov	r0, r5
 800bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8c:	f000 f835 	bl	800bbfa <_malloc_usable_size_r>
 800bb90:	4284      	cmp	r4, r0
 800bb92:	4607      	mov	r7, r0
 800bb94:	d802      	bhi.n	800bb9c <_realloc_r+0x34>
 800bb96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb9a:	d812      	bhi.n	800bbc2 <_realloc_r+0x5a>
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	4640      	mov	r0, r8
 800bba0:	f7ff fb90 	bl	800b2c4 <_malloc_r>
 800bba4:	4605      	mov	r5, r0
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d0ed      	beq.n	800bb86 <_realloc_r+0x1e>
 800bbaa:	42bc      	cmp	r4, r7
 800bbac:	4622      	mov	r2, r4
 800bbae:	4631      	mov	r1, r6
 800bbb0:	bf28      	it	cs
 800bbb2:	463a      	movcs	r2, r7
 800bbb4:	f7fb fd00 	bl	80075b8 <memcpy>
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4640      	mov	r0, r8
 800bbbc:	f7ff fb16 	bl	800b1ec <_free_r>
 800bbc0:	e7e1      	b.n	800bb86 <_realloc_r+0x1e>
 800bbc2:	4635      	mov	r5, r6
 800bbc4:	e7df      	b.n	800bb86 <_realloc_r+0x1e>
	...

0800bbc8 <_read_r>:
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	4d07      	ldr	r5, [pc, #28]	; (800bbe8 <_read_r+0x20>)
 800bbcc:	4604      	mov	r4, r0
 800bbce:	4608      	mov	r0, r1
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	602a      	str	r2, [r5, #0]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	f7f5 feac 	bl	8001934 <_read>
 800bbdc:	1c43      	adds	r3, r0, #1
 800bbde:	d102      	bne.n	800bbe6 <_read_r+0x1e>
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	b103      	cbz	r3, 800bbe6 <_read_r+0x1e>
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}
 800bbe8:	2400091c 	.word	0x2400091c

0800bbec <abort>:
 800bbec:	b508      	push	{r3, lr}
 800bbee:	2006      	movs	r0, #6
 800bbf0:	f000 f834 	bl	800bc5c <raise>
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	f7f5 fe93 	bl	8001920 <_exit>

0800bbfa <_malloc_usable_size_r>:
 800bbfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbfe:	1f18      	subs	r0, r3, #4
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfbc      	itt	lt
 800bc04:	580b      	ldrlt	r3, [r1, r0]
 800bc06:	18c0      	addlt	r0, r0, r3
 800bc08:	4770      	bx	lr

0800bc0a <_raise_r>:
 800bc0a:	291f      	cmp	r1, #31
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4604      	mov	r4, r0
 800bc10:	460d      	mov	r5, r1
 800bc12:	d904      	bls.n	800bc1e <_raise_r+0x14>
 800bc14:	2316      	movs	r3, #22
 800bc16:	6003      	str	r3, [r0, #0]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc20:	b112      	cbz	r2, 800bc28 <_raise_r+0x1e>
 800bc22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc26:	b94b      	cbnz	r3, 800bc3c <_raise_r+0x32>
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 f831 	bl	800bc90 <_getpid_r>
 800bc2e:	462a      	mov	r2, r5
 800bc30:	4601      	mov	r1, r0
 800bc32:	4620      	mov	r0, r4
 800bc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc38:	f000 b818 	b.w	800bc6c <_kill_r>
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d00a      	beq.n	800bc56 <_raise_r+0x4c>
 800bc40:	1c59      	adds	r1, r3, #1
 800bc42:	d103      	bne.n	800bc4c <_raise_r+0x42>
 800bc44:	2316      	movs	r3, #22
 800bc46:	6003      	str	r3, [r0, #0]
 800bc48:	2001      	movs	r0, #1
 800bc4a:	e7e7      	b.n	800bc1c <_raise_r+0x12>
 800bc4c:	2400      	movs	r4, #0
 800bc4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc52:	4628      	mov	r0, r5
 800bc54:	4798      	blx	r3
 800bc56:	2000      	movs	r0, #0
 800bc58:	e7e0      	b.n	800bc1c <_raise_r+0x12>
	...

0800bc5c <raise>:
 800bc5c:	4b02      	ldr	r3, [pc, #8]	; (800bc68 <raise+0xc>)
 800bc5e:	4601      	mov	r1, r0
 800bc60:	6818      	ldr	r0, [r3, #0]
 800bc62:	f7ff bfd2 	b.w	800bc0a <_raise_r>
 800bc66:	bf00      	nop
 800bc68:	24000010 	.word	0x24000010

0800bc6c <_kill_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d07      	ldr	r5, [pc, #28]	; (800bc8c <_kill_r+0x20>)
 800bc70:	2300      	movs	r3, #0
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	4611      	mov	r1, r2
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	f7f5 fe41 	bl	8001900 <_kill>
 800bc7e:	1c43      	adds	r3, r0, #1
 800bc80:	d102      	bne.n	800bc88 <_kill_r+0x1c>
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	b103      	cbz	r3, 800bc88 <_kill_r+0x1c>
 800bc86:	6023      	str	r3, [r4, #0]
 800bc88:	bd38      	pop	{r3, r4, r5, pc}
 800bc8a:	bf00      	nop
 800bc8c:	2400091c 	.word	0x2400091c

0800bc90 <_getpid_r>:
 800bc90:	f7f5 be2e 	b.w	80018f0 <_getpid>

0800bc94 <_init>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr

0800bca0 <_fini>:
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	bf00      	nop
 800bca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca6:	bc08      	pop	{r3}
 800bca8:	469e      	mov	lr, r3
 800bcaa:	4770      	bx	lr
