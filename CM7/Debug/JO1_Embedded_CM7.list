
JO1_Embedded_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e8  080096e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080096f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  24000078  08009764  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000804  08009764  00020804  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019113  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe3  00000000  00000000  000391b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  0003d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ba4e  00000000  00000000  0003e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001787f  00000000  00000000  0007a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018080f  00000000  00000000  000918bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002120cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005824  00000000  00000000  0021211c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009070 	.word	0x08009070

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08009070 	.word	0x08009070

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <main+0xbc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	60fa      	str	r2, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fa1d 	bl	8000c28 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f001 fe05 	bl	80023fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f84b 	bl	800088c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <main+0xbc>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a1f      	ldr	r2, [pc, #124]	; (800087c <main+0xbc>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <main+0xbc>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f002 f961 	bl	8002adc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f002 f977 	bl	8002b10 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <main+0xbc>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	60fa      	str	r2, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 f9ef 	bl	8000c28 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f97b 	bl	8000b44 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f8fb 	bl	8000a48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000852:	f000 f945 	bl	8000ae0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8000856:	f000 f8a1 	bl	800099c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  NRF24_SetupRoutine(&hspi4, &huart3);
 800085a:	4909      	ldr	r1, [pc, #36]	; (8000880 <main+0xc0>)
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <main+0xc4>)
 800085e:	f000 f9eb 	bl	8000c38 <NRF24_SetupRoutine>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	coords = NRF24_ReadJohnDeereSystem();
 8000862:	4c09      	ldr	r4, [pc, #36]	; (8000888 <main+0xc8>)
 8000864:	463b      	mov	r3, r7
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fa2c 	bl	8000cc4 <NRF24_ReadJohnDeereSystem>
 800086c:	4622      	mov	r2, r4
 800086e:	463b      	mov	r3, r7
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	6010      	str	r0, [r2, #0]
 8000874:	889b      	ldrh	r3, [r3, #4]
 8000876:	8093      	strh	r3, [r2, #4]
 8000878:	e7f3      	b.n	8000862 <main+0xa2>
 800087a:	bf00      	nop
 800087c:	58024400 	.word	0x58024400
 8000880:	2400011c 	.word	0x2400011c
 8000884:	24000094 	.word	0x24000094
 8000888:	240006b8 	.word	0x240006b8

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09c      	sub	sp, #112	; 0x70
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	224c      	movs	r2, #76	; 0x4c
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f007 fa0e 	bl	8007cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2220      	movs	r2, #32
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f007 fa08 	bl	8007cbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008ac:	2004      	movs	r0, #4
 80008ae:	f002 fa8b 	bl	8002dc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <SystemClock_Config+0x104>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a35      	ldr	r2, [pc, #212]	; (8000990 <SystemClock_Config+0x104>)
 80008bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <SystemClock_Config+0x104>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4b31      	ldr	r3, [pc, #196]	; (8000994 <SystemClock_Config+0x108>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	4a30      	ldr	r2, [pc, #192]	; (8000994 <SystemClock_Config+0x108>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008d8:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <SystemClock_Config+0x108>)
 80008da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e4:	bf00      	nop
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <SystemClock_Config+0x104>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f2:	d1f8      	bne.n	80008e6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <SystemClock_Config+0x10c>)
 80008f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f8:	f023 0303 	bic.w	r3, r3, #3
 80008fc:	4a26      	ldr	r2, [pc, #152]	; (8000998 <SystemClock_Config+0x10c>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000904:	2303      	movs	r3, #3
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000908:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800090e:	2301      	movs	r3, #1
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	2302      	movs	r3, #2
 800091c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000922:	2378      	movs	r3, #120	; 0x78
 8000924:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000932:	230c      	movs	r3, #12
 8000934:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000936:	2300      	movs	r3, #0
 8000938:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4618      	mov	r0, r3
 8000944:	f002 faaa 	bl	8002e9c <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800094e:	f000 f96b 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	233f      	movs	r3, #63	; 0x3f
 8000954:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2303      	movs	r3, #3
 8000958:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800095e:	2308      	movs	r3, #8
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000966:	2340      	movs	r3, #64	; 0x40
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000970:	2340      	movs	r3, #64	; 0x40
 8000972:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2104      	movs	r1, #4
 8000978:	4618      	mov	r0, r3
 800097a:	f002 febd 	bl	80036f8 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000984:	f000 f950 	bl	8000c28 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3770      	adds	r7, #112	; 0x70
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58024800 	.word	0x58024800
 8000994:	58000400 	.word	0x58000400
 8000998:	58024400 	.word	0x58024400

0800099c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009a2:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <MX_SPI4_Init+0xa8>)
 80009a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009ac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009b6:	2207      	movs	r2, #7
 80009b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009cc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009d0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80009d4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_SPI4_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_SPI4_Init+0xa4>)
 8000a2e:	f004 fd57 	bl	80054e0 <HAL_SPI_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000a38:	f000 f8f6 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000094 	.word	0x24000094
 8000a44:	40013400 	.word	0x40013400

08000a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a4e:	4a23      	ldr	r2, [pc, #140]	; (8000adc <MX_USART3_UART_Init+0x94>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a90:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a92:	f005 fcca 	bl	800642a <HAL_UART_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 f8c4 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000aa4:	f006 fcfe 	bl	80074a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 f8bb 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000ab6:	f006 fd33 	bl	8007520 <HAL_UARTEx_SetRxFifoThreshold>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f000 f8b2 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000ac6:	f006 fcb4 	bl	8007432 <HAL_UARTEx_DisableFifoMode>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f8aa 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2400011c 	.word	0x2400011c
 8000adc:	40004800 	.word	0x40004800

08000ae0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	2209      	movs	r2, #9
 8000aee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b28:	f002 f806 	bl	8002b38 <HAL_PCD_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b32:	f000 f879 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	240001ac 	.word	0x240001ac
 8000b40:	40080000 	.word	0x40080000

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	21c0      	movs	r1, #192	; 0xc0
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000bf6:	f001 ff57 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000bfa:	23c0      	movs	r3, #192	; 0xc0
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_GPIO_Init+0xe0>)
 8000c12:	f001 fd99 	bl	8002748 <HAL_GPIO_Init>

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	58024400 	.word	0x58024400
 8000c24:	58020800 	.word	0x58020800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
 8000c32:	0000      	movs	r0, r0
 8000c34:	0000      	movs	r0, r0
	...

08000c38 <NRF24_SetupRoutine>:
static UART_HandleTypeDef nrf24_huart;

//**** User definitions and functions ****//

void NRF24_SetupRoutine(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b0a5      	sub	sp, #148	; 0x94
 8000c3c:	af22      	add	r7, sp, #136	; 0x88
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    // Dereference huart since nrf24_DebugUART_Init expects a non-pointer
    nrf24_DebugUART_Init(*huart);
 8000c42:	683c      	ldr	r4, [r7, #0]
 8000c44:	4668      	mov	r0, sp
 8000c46:	f104 0310 	add.w	r3, r4, #16
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f007 f827 	bl	8007ca0 <memcpy>
 8000c52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c56:	f001 f941 	bl	8001edc <nrf24_DebugUART_Init>

    // Dereference hspi since NRF24_begin expects a non-pointer
    NRF24_begin(GPIOC, NRF_CSN_Pin, NRF_CE_Pin, *hspi);
 8000c5a:	687c      	ldr	r4, [r7, #4]
 8000c5c:	4668      	mov	r0, sp
 8000c5e:	1d23      	adds	r3, r4, #4
 8000c60:	2284      	movs	r2, #132	; 0x84
 8000c62:	4619      	mov	r1, r3
 8000c64:	f007 f81c 	bl	8007ca0 <memcpy>
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	2240      	movs	r2, #64	; 0x40
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <NRF24_SetupRoutine+0x88>)
 8000c70:	f000 f9c4 	bl	8000ffc <NRF24_begin>

    NRF24_setAutoAck(false);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fbeb 	bl	8001450 <NRF24_setAutoAck>
    NRF24_enableAckPayload();
 8000c7a:	f000 fb89 	bl	8001390 <NRF24_enableAckPayload>
    NRF24_enableDynamicPayloads();
 8000c7e:	f000 fbb5 	bl	80013ec <NRF24_enableDynamicPayloads>
    NRF24_setPayloadSize(32);
 8000c82:	2020      	movs	r0, #32
 8000c84:	f000 fb58 	bl	8001338 <NRF24_setPayloadSize>

    NRF24_setPALevel(RF24_PA_0dB);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 fbf6 	bl	800147a <NRF24_setPALevel>
    NRF24_setDataRate(RF24_2MBPS);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fc2c 	bl	80014ec <NRF24_setDataRate>
    NRF24_setChannel(52);
 8000c94:	2034      	movs	r0, #52	; 0x34
 8000c96:	f000 fb3a 	bl	800130e <NRF24_setChannel>

    NRF24_openReadingPipe(1, 0x11223344AA);
 8000c9a:	a307      	add	r3, pc, #28	; (adr r3, 8000cb8 <NRF24_SetupRoutine+0x80>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 facb 	bl	800123c <NRF24_openReadingPipe>
    NRF24_startListening();
 8000ca6:	f000 fa7b 	bl	80011a0 <NRF24_startListening>
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	223344aa 	.word	0x223344aa
 8000cbc:	00000011 	.word	0x00000011
 8000cc0:	58020800 	.word	0x58020800

08000cc4 <NRF24_ReadJohnDeereSystem>:

Coordinates NRF24_ReadJohnDeereSystem(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    Coordinates coordinates = {0, 0, 0};  // Initialize to default values
 8000ccc:	2300      	movs	r3, #0
 8000cce:	813b      	strh	r3, [r7, #8]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	817b      	strh	r3, [r7, #10]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	81bb      	strh	r3, [r7, #12]

    if (NRF24_available())
 8000cd8:	f000 fa88 	bl	80011ec <NRF24_available>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d032      	beq.n	8000d48 <NRF24_ReadJohnDeereSystem+0x84>
    {
        NRF24_read(buffer, 6);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fa87 	bl	80011fc <NRF24_read>

        if (buffer[0] == 0xFF && buffer[1] == 0xFF)
 8000cee:	7c3b      	ldrb	r3, [r7, #16]
 8000cf0:	2bff      	cmp	r3, #255	; 0xff
 8000cf2:	d106      	bne.n	8000d02 <NRF24_ReadJohnDeereSystem+0x3e>
 8000cf4:	7c7b      	ldrb	r3, [r7, #17]
 8000cf6:	2bff      	cmp	r3, #255	; 0xff
 8000cf8:	d103      	bne.n	8000d02 <NRF24_ReadJohnDeereSystem+0x3e>
        {
            printf("Coordinates were not found\r\n");
 8000cfa:	4819      	ldr	r0, [pc, #100]	; (8000d60 <NRF24_ReadJohnDeereSystem+0x9c>)
 8000cfc:	f007 f86c 	bl	8007dd8 <puts>
 8000d00:	e022      	b.n	8000d48 <NRF24_ReadJohnDeereSystem+0x84>
        }
        else
        {
            coordinates.x = (buffer[0] << 8 | buffer[1]);
 8000d02:	7c3b      	ldrb	r3, [r7, #16]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	7c7b      	ldrb	r3, [r7, #17]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	813b      	strh	r3, [r7, #8]
            coordinates.y = (buffer[2] << 8 | buffer[3]);
 8000d14:	7cbb      	ldrb	r3, [r7, #18]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	7cfb      	ldrb	r3, [r7, #19]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	817b      	strh	r3, [r7, #10]
            coordinates.angle = (buffer[2] << 8 | buffer[5]);
 8000d26:	7cbb      	ldrb	r3, [r7, #18]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	7d7b      	ldrb	r3, [r7, #21]
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	81bb      	strh	r3, [r7, #12]

            printf("x = %u y = %u a = %u\r\n", coordinates.x, coordinates.y, coordinates.angle);
 8000d38:	893b      	ldrh	r3, [r7, #8]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	897b      	ldrh	r3, [r7, #10]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4808      	ldr	r0, [pc, #32]	; (8000d64 <NRF24_ReadJohnDeereSystem+0xa0>)
 8000d44:	f006 ffc2 	bl	8007ccc <iprintf>
        }
    }

    return coordinates;  // Return the coordinates struct
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	6010      	str	r0, [r2, #0]
 8000d54:	889b      	ldrh	r3, [r3, #4]
 8000d56:	8093      	strh	r3, [r2, #4]
}
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08009088 	.word	0x08009088
 8000d64:	080090a4 	.word	0x080090a4

08000d68 <NRF24_DelayMicroSeconds>:

//**** Functions prototypes ****//

//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <NRF24_DelayMicroSeconds+0x3c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <NRF24_DelayMicroSeconds+0x40>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	0c9a      	lsrs	r2, r3, #18
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000d88:	bf00      	nop
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	60fa      	str	r2, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1fa      	bne.n	8000d8a <NRF24_DelayMicroSeconds+0x22>
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	24000000 	.word	0x24000000
 8000da8:	165e9f81 	.word	0x165e9f81

08000dac <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d008      	beq.n	8000dcc <NRF24_csn+0x20>
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <NRF24_csn+0x38>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <NRF24_csn+0x3c>)
 8000dc0:	8811      	ldrh	r1, [r2, #0]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fe6f 	bl	8002aa8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000dca:	e007      	b.n	8000ddc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <NRF24_csn+0x38>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <NRF24_csn+0x3c>)
 8000dd2:	8811      	ldrh	r1, [r2, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fe66 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	240006cc 	.word	0x240006cc
 8000de8:	240006d0 	.word	0x240006d0

08000dec <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d008      	beq.n	8000e0c <NRF24_ce+0x20>
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <NRF24_ce+0x38>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <NRF24_ce+0x3c>)
 8000e00:	8811      	ldrh	r1, [r2, #0]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fe4f 	bl	8002aa8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000e0a:	e007      	b.n	8000e1c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <NRF24_ce+0x38>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <NRF24_ce+0x3c>)
 8000e12:	8811      	ldrh	r1, [r2, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fe46 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	240006cc 	.word	0x240006cc
 8000e28:	240006d2 	.word	0x240006d2

08000e2c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffb8 	bl	8000dac <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000e46:	f107 010c 	add.w	r1, r7, #12
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <NRF24_read_register+0x4c>)
 8000e50:	f004 fc4c 	bl	80056ec <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	1c59      	adds	r1, r3, #1
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <NRF24_read_register+0x4c>)
 8000e60:	f004 fe36 	bl	8005ad0 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000e64:	7b7b      	ldrb	r3, [r7, #13]
 8000e66:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ff9f 	bl	8000dac <NRF24_csn>
	return retData;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	240006d4 	.word	0x240006d4

08000e7c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff ff8d 	bl	8000dac <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000e9c:	f107 010c 	add.w	r1, r7, #12
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <NRF24_read_registerN+0x4c>)
 8000ea6:	f004 fc21 	bl	80056ec <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	6839      	ldr	r1, [r7, #0]
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <NRF24_read_registerN+0x4c>)
 8000eb4:	f004 fe0c 	bl	8005ad0 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff ff77 	bl	8000dac <NRF24_csn>
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	240006d4 	.word	0x240006d4

08000ecc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff ff65 	bl	8000dac <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f043 0320 	orr.w	r3, r3, #32
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000ef0:	f107 010c 	add.w	r1, r7, #12
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <NRF24_write_register+0x40>)
 8000efa:	f004 fbf7 	bl	80056ec <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff ff54 	bl	8000dac <NRF24_csn>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	240006d4 	.word	0x240006d4

08000f10 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff43 	bl	8000dac <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000f30:	f107 010c 	add.w	r1, r7, #12
 8000f34:	2364      	movs	r3, #100	; 0x64
 8000f36:	2201      	movs	r2, #1
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <NRF24_write_registerN+0x4c>)
 8000f3a:	f004 fbd7 	bl	80056ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	6839      	ldr	r1, [r7, #0]
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <NRF24_write_registerN+0x4c>)
 8000f48:	f004 fbd0 	bl	80056ec <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff ff2d 	bl	8000dac <NRF24_csn>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	240006d4 	.word	0x240006d4

08000f60 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000f6c:	f000 f9fc 	bl	8001368 <NRF24_getPayloadSize>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d303      	bcc.n	8000f82 <NRF24_read_payload+0x22>
 8000f7a:	f000 f9f5 	bl	8001368 <NRF24_getPayloadSize>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e000      	b.n	8000f84 <NRF24_read_payload+0x24>
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff ff10 	bl	8000dac <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000f8c:	2361      	movs	r3, #97	; 0x61
 8000f8e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000f90:	f107 010e 	add.w	r1, r7, #14
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	2201      	movs	r2, #1
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <NRF24_read_payload+0x5c>)
 8000f9a:	f004 fba7 	bl	80056ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <NRF24_read_payload+0x5c>)
 8000fa8:	f004 fd92 	bl	8005ad0 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff fefd 	bl	8000dac <NRF24_csn>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	240006d4 	.word	0x240006d4

08000fc0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000fc4:	21ff      	movs	r1, #255	; 0xff
 8000fc6:	20e1      	movs	r0, #225	; 0xe1
 8000fc8:	f7ff ff80 	bl	8000ecc <NRF24_write_register>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000fd4:	21ff      	movs	r1, #255	; 0xff
 8000fd6:	20e2      	movs	r0, #226	; 0xe2
 8000fd8:	f7ff ff78 	bl	8000ecc <NRF24_write_register>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000fe6:	2007      	movs	r0, #7
 8000fe8:	f7ff ff20 	bl	8000e2c <NRF24_read_register>
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001010:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <NRF24_begin+0x194>)
 8001012:	4618      	mov	r0, r3
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2288      	movs	r2, #136	; 0x88
 800101a:	4619      	mov	r1, r3
 800101c:	f006 fe40 	bl	8007ca0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001020:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <NRF24_begin+0x198>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001026:	4a5c      	ldr	r2, [pc, #368]	; (8001198 <NRF24_begin+0x19c>)
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800102c:	4a5b      	ldr	r2, [pc, #364]	; (800119c <NRF24_begin+0x1a0>)
 800102e:	883b      	ldrh	r3, [r7, #0]
 8001030:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff feba 	bl	8000dac <NRF24_csn>
	NRF24_ce(0);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fed7 	bl	8000dec <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800103e:	2005      	movs	r0, #5
 8001040:	f001 fa6e 	bl	8002520 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001044:	2108      	movs	r1, #8
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff ff40 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800104c:	213f      	movs	r1, #63	; 0x3f
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff ff3c 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001054:	2103      	movs	r1, #3
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff ff38 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800105c:	2103      	movs	r1, #3
 800105e:	2003      	movs	r0, #3
 8001060:	f7ff ff34 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001064:	2103      	movs	r1, #3
 8001066:	2004      	movs	r0, #4
 8001068:	f7ff ff30 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800106c:	2102      	movs	r1, #2
 800106e:	2005      	movs	r0, #5
 8001070:	f7ff ff2c 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001074:	210f      	movs	r1, #15
 8001076:	2006      	movs	r0, #6
 8001078:	f7ff ff28 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800107c:	210e      	movs	r1, #14
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff ff24 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001084:	2100      	movs	r1, #0
 8001086:	2008      	movs	r0, #8
 8001088:	f7ff ff20 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800108c:	2100      	movs	r1, #0
 800108e:	2009      	movs	r0, #9
 8001090:	f7ff ff1c 	bl	8000ecc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001094:	23e7      	movs	r3, #231	; 0xe7
 8001096:	733b      	strb	r3, [r7, #12]
 8001098:	23e7      	movs	r3, #231	; 0xe7
 800109a:	72fb      	strb	r3, [r7, #11]
 800109c:	23e7      	movs	r3, #231	; 0xe7
 800109e:	72bb      	strb	r3, [r7, #10]
 80010a0:	23e7      	movs	r3, #231	; 0xe7
 80010a2:	727b      	strb	r3, [r7, #9]
 80010a4:	23e7      	movs	r3, #231	; 0xe7
 80010a6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2205      	movs	r2, #5
 80010ae:	4619      	mov	r1, r3
 80010b0:	200a      	movs	r0, #10
 80010b2:	f7ff ff2d 	bl	8000f10 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80010b6:	23c2      	movs	r3, #194	; 0xc2
 80010b8:	733b      	strb	r3, [r7, #12]
 80010ba:	23c2      	movs	r3, #194	; 0xc2
 80010bc:	72fb      	strb	r3, [r7, #11]
 80010be:	23c2      	movs	r3, #194	; 0xc2
 80010c0:	72bb      	strb	r3, [r7, #10]
 80010c2:	23c2      	movs	r3, #194	; 0xc2
 80010c4:	727b      	strb	r3, [r7, #9]
 80010c6:	23c2      	movs	r3, #194	; 0xc2
 80010c8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2205      	movs	r2, #5
 80010d0:	4619      	mov	r1, r3
 80010d2:	200b      	movs	r0, #11
 80010d4:	f7ff ff1c 	bl	8000f10 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80010d8:	21c3      	movs	r1, #195	; 0xc3
 80010da:	200c      	movs	r0, #12
 80010dc:	f7ff fef6 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80010e0:	21c4      	movs	r1, #196	; 0xc4
 80010e2:	200d      	movs	r0, #13
 80010e4:	f7ff fef2 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80010e8:	21c5      	movs	r1, #197	; 0xc5
 80010ea:	200e      	movs	r0, #14
 80010ec:	f7ff feee 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80010f0:	21c6      	movs	r1, #198	; 0xc6
 80010f2:	200f      	movs	r0, #15
 80010f4:	f7ff feea 	bl	8000ecc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80010f8:	23e7      	movs	r3, #231	; 0xe7
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	23e7      	movs	r3, #231	; 0xe7
 80010fe:	72fb      	strb	r3, [r7, #11]
 8001100:	23e7      	movs	r3, #231	; 0xe7
 8001102:	72bb      	strb	r3, [r7, #10]
 8001104:	23e7      	movs	r3, #231	; 0xe7
 8001106:	727b      	strb	r3, [r7, #9]
 8001108:	23e7      	movs	r3, #231	; 0xe7
 800110a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2205      	movs	r2, #5
 8001112:	4619      	mov	r1, r3
 8001114:	2010      	movs	r0, #16
 8001116:	f7ff fefb 	bl	8000f10 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	2011      	movs	r0, #17
 800111e:	f7ff fed5 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001122:	2100      	movs	r1, #0
 8001124:	2012      	movs	r0, #18
 8001126:	f7ff fed1 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800112a:	2100      	movs	r1, #0
 800112c:	2013      	movs	r0, #19
 800112e:	f7ff fecd 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	2014      	movs	r0, #20
 8001136:	f7ff fec9 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800113a:	2100      	movs	r1, #0
 800113c:	2015      	movs	r0, #21
 800113e:	f7ff fec5 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	2016      	movs	r0, #22
 8001146:	f7ff fec1 	bl	8000ecc <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800114a:	f000 fa85 	bl	8001658 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	201c      	movs	r0, #28
 8001152:	f7ff febb 	bl	8000ecc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	201d      	movs	r0, #29
 800115a:	f7ff feb7 	bl	8000ecc <NRF24_write_register>
	printRadioSettings();
 800115e:	f000 fa95 	bl	800168c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001162:	210f      	movs	r1, #15
 8001164:	200f      	movs	r0, #15
 8001166:	f000 f8b7 	bl	80012d8 <NRF24_setRetries>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800116a:	2002      	movs	r0, #2
 800116c:	f000 fa04 	bl	8001578 <NRF24_setCRCLength>
	//Reset status register
	NRF24_resetStatus();
 8001170:	f000 fa69 	bl	8001646 <NRF24_resetStatus>
	//Flush buffers
	NRF24_flush_tx();
 8001174:	f7ff ff24 	bl	8000fc0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001178:	f7ff ff2a 	bl	8000fd0 <NRF24_flush_rx>

	NRF24_powerDown();
 800117c:	f000 fa24 	bl	80015c8 <NRF24_powerDown>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118a:	b002      	add	sp, #8
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	240006d4 	.word	0x240006d4
 8001194:	240006cc 	.word	0x240006cc
 8001198:	240006d0 	.word	0x240006d0
 800119c:	240006d2 	.word	0x240006d2

080011a0 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fe41 	bl	8000e2c <NRF24_read_register>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f043 0303 	orr.w	r3, r3, #3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fe89 	bl	8000ecc <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <NRF24_startListening+0x48>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	d004      	beq.n	80011ce <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80011c4:	2205      	movs	r2, #5
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <NRF24_startListening+0x48>)
 80011c8:	200a      	movs	r0, #10
 80011ca:	f7ff fea1 	bl	8000f10 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80011ce:	f7ff fef7 	bl	8000fc0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80011d2:	f7ff fefd 	bl	8000fd0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff fe08 	bl	8000dec <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80011dc:	2096      	movs	r0, #150	; 0x96
 80011de:	f7ff fdc3 	bl	8000d68 <NRF24_DelayMicroSeconds>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	240006c0 	.word	0x240006c0

080011ec <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f9f8 	bl	80015e6 <NRF24_availablePipe>
 80011f6:	4603      	mov	r3, r0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	bd80      	pop	{r7, pc}

080011fc <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4619      	mov	r1, r3
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fea7 	bl	8000f60 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001212:	2017      	movs	r0, #23
 8001214:	f7ff fe0a 	bl	8000e2c <NRF24_read_register>
 8001218:	4603      	mov	r3, r0
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001220:	f7ff fed6 	bl	8000fd0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001224:	f000 f8ac 	bl	8001380 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4601      	mov	r1, r0
 8001244:	e9c7 2300 	strd	r2, r3, [r7]
 8001248:	460b      	mov	r3, r1
 800124a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d104      	bne.n	800125c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001256:	491c      	ldr	r1, [pc, #112]	; (80012c8 <NRF24_openReadingPipe+0x8c>)
 8001258:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b06      	cmp	r3, #6
 8001260:	d82d      	bhi.n	80012be <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d808      	bhi.n	800127a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <NRF24_openReadingPipe+0x90>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	4639      	mov	r1, r7
 8001270:	2205      	movs	r2, #5
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fe4c 	bl	8000f10 <NRF24_write_registerN>
 8001278:	e007      	b.n	800128a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <NRF24_openReadingPipe+0x90>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	4639      	mov	r1, r7
 8001282:	2201      	movs	r2, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe43 	bl	8000f10 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <NRF24_openReadingPipe+0x94>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <NRF24_openReadingPipe+0x98>)
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe18 	bl	8000ecc <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff fdc5 	bl	8000e2c <NRF24_read_register>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	2002      	movs	r0, #2
 80012ba:	f7ff fe07 	bl	8000ecc <NRF24_write_register>
	}

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	240006c0 	.word	0x240006c0
 80012cc:	08009610 	.word	0x08009610
 80012d0:	08009618 	.word	0x08009618
 80012d4:	240006c8 	.word	0x240006c8

080012d8 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	4613      	mov	r3, r2
 80012e6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4619      	mov	r1, r3
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff fde3 	bl	8000ecc <NRF24_write_register>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001318:	237f      	movs	r3, #127	; 0x7f
 800131a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4293      	cmp	r3, r2
 8001322:	bf28      	it	cs
 8001324:	4613      	movcs	r3, r2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	2005      	movs	r0, #5
 800132c:	f7ff fdce 	bl	8000ecc <NRF24_write_register>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001342:	2320      	movs	r3, #32
 8001344:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4293      	cmp	r3, r2
 800134c:	bf28      	it	cs
 800134e:	4613      	movcs	r3, r2
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <NRF24_setPayloadSize+0x2c>)
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	240006c8 	.word	0x240006c8

08001368 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	return payload_size;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <NRF24_getPayloadSize+0x14>)
 800136e:	781b      	ldrb	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	240006c8 	.word	0x240006c8

08001380 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001384:	2060      	movs	r0, #96	; 0x60
 8001386:	f7ff fd51 	bl	8000e2c <NRF24_read_register>
 800138a:	4603      	mov	r3, r0
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}

08001390 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001394:	201d      	movs	r0, #29
 8001396:	f7ff fd49 	bl	8000e2c <NRF24_read_register>
 800139a:	4603      	mov	r3, r0
 800139c:	f043 0306 	orr.w	r3, r3, #6
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4619      	mov	r1, r3
 80013a4:	201d      	movs	r0, #29
 80013a6:	f7ff fd91 	bl	8000ecc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80013aa:	201d      	movs	r0, #29
 80013ac:	f7ff fd3e 	bl	8000e2c <NRF24_read_register>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80013b6:	f000 f94f 	bl	8001658 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80013ba:	201d      	movs	r0, #29
 80013bc:	f7ff fd36 	bl	8000e2c <NRF24_read_register>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f043 0306 	orr.w	r3, r3, #6
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4619      	mov	r1, r3
 80013ca:	201d      	movs	r0, #29
 80013cc:	f7ff fd7e 	bl	8000ecc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80013d0:	201c      	movs	r0, #28
 80013d2:	f7ff fd2b 	bl	8000e2c <NRF24_read_register>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f043 0303 	orr.w	r3, r3, #3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	201c      	movs	r0, #28
 80013e2:	f7ff fd73 	bl	8000ecc <NRF24_write_register>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80013f0:	201d      	movs	r0, #29
 80013f2:	f7ff fd1b 	bl	8000e2c <NRF24_read_register>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	201d      	movs	r0, #29
 8001402:	f7ff fd63 	bl	8000ecc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001406:	201d      	movs	r0, #29
 8001408:	f7ff fd10 	bl	8000e2c <NRF24_read_register>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001412:	f000 f921 	bl	8001658 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001416:	201d      	movs	r0, #29
 8001418:	f7ff fd08 	bl	8000e2c <NRF24_read_register>
 800141c:	4603      	mov	r3, r0
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	201d      	movs	r0, #29
 8001428:	f7ff fd50 	bl	8000ecc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800142c:	201c      	movs	r0, #28
 800142e:	f7ff fcfd 	bl	8000e2c <NRF24_read_register>
 8001432:	4603      	mov	r3, r0
 8001434:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	201c      	movs	r0, #28
 800143e:	f7ff fd45 	bl	8000ecc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001442:	4b02      	ldr	r3, [pc, #8]	; (800144c <NRF24_enableDynamicPayloads+0x60>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	240006c9 	.word	0x240006c9

08001450 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001460:	213f      	movs	r1, #63	; 0x3f
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff fd32 	bl	8000ecc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001468:	e003      	b.n	8001472 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800146a:	2100      	movs	r1, #0
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fd2d 	bl	8000ecc <NRF24_write_register>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001484:	2006      	movs	r0, #6
 8001486:	f7ff fcd1 	bl	8000e2c <NRF24_read_register>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	f023 0306 	bic.w	r3, r3, #6
 8001494:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d104      	bne.n	80014a6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	f043 0306 	orr.w	r3, r3, #6
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e019      	b.n	80014da <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d104      	bne.n	80014b6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e011      	b.n	80014da <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e009      	b.n	80014da <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d103      	bne.n	80014da <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f043 0306 	orr.w	r3, r3, #6
 80014d8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4619      	mov	r1, r3
 80014de:	2006      	movs	r0, #6
 80014e0:	f7ff fcf4 	bl	8000ecc <NRF24_write_register>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80014fa:	2006      	movs	r0, #6
 80014fc:	f7ff fc96 	bl	8000e2c <NRF24_read_register>
 8001500:	4603      	mov	r3, r0
 8001502:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <NRF24_setDataRate+0x88>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001510:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d107      	bne.n	8001528 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <NRF24_setDataRate+0x88>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	f043 0320 	orr.w	r3, r3, #32
 8001524:	73bb      	strb	r3, [r7, #14]
 8001526:	e00d      	b.n	8001544 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <NRF24_setDataRate+0x88>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	73bb      	strb	r3, [r7, #14]
 800153c:	e002      	b.n	8001544 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <NRF24_setDataRate+0x88>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	4619      	mov	r1, r3
 8001548:	2006      	movs	r0, #6
 800154a:	f7ff fcbf 	bl	8000ecc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800154e:	2006      	movs	r0, #6
 8001550:	f7ff fc6c 	bl	8000e2c <NRF24_read_register>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	7bbb      	ldrb	r3, [r7, #14]
 800155a:	4293      	cmp	r3, r2
 800155c:	d102      	bne.n	8001564 <NRF24_setDataRate+0x78>
  {
    result = true;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e002      	b.n	800156a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <NRF24_setDataRate+0x88>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	240006ca 	.word	0x240006ca

08001578 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fc52 	bl	8000e2c <NRF24_read_register>
 8001588:	4603      	mov	r3, r0
 800158a:	f023 030c 	bic.w	r3, r3, #12
 800158e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00f      	beq.n	80015b6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d104      	bne.n	80015a6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e007      	b.n	80015b6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	4619      	mov	r1, r3
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fc86 	bl	8000ecc <NRF24_write_register>
}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fc2d 	bl	8000e2c <NRF24_read_register>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f023 0302 	bic.w	r3, r3, #2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fc75 	bl	8000ecc <NRF24_write_register>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80015ee:	f7ff fcf7 	bl	8000fe0 <NRF24_get_status>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d017      	beq.n	800163c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	b2da      	uxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	2007      	movs	r0, #7
 8001626:	f7ff fc51 	bl	8000ecc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001634:	2120      	movs	r1, #32
 8001636:	2007      	movs	r0, #7
 8001638:	f7ff fc48 	bl	8000ecc <NRF24_write_register>
    }
  }
  return result;
 800163c:	7bbb      	ldrb	r3, [r7, #14]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800164a:	2170      	movs	r1, #112	; 0x70
 800164c:	2007      	movs	r0, #7
 800164e:	f7ff fc3d 	bl	8000ecc <NRF24_write_register>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fba4 	bl	8000dac <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001664:	2350      	movs	r3, #80	; 0x50
 8001666:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001668:	2373      	movs	r3, #115	; 0x73
 800166a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800166c:	1d39      	adds	r1, r7, #4
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	2202      	movs	r2, #2
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <NRF24_ACTIVATE_cmd+0x30>)
 8001674:	f004 f83a 	bl	80056ec <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff fb97 	bl	8000dac <NRF24_csn>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	240006d4 	.word	0x240006d4

0800168c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	b0a1      	sub	sp, #132	; 0x84
 8001690:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	49c3      	ldr	r1, [pc, #780]	; (80019a4 <printRadioSettings+0x318>)
 8001698:	4618      	mov	r0, r3
 800169a:	f006 fba5 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fe1c 	bl	80002e0 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f107 0108 	add.w	r1, r7, #8
 80016b0:	230a      	movs	r3, #10
 80016b2:	48bd      	ldr	r0, [pc, #756]	; (80019a8 <printRadioSettings+0x31c>)
 80016b4:	f004 ff09 	bl	80064ca <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fbb7 	bl	8000e2c <NRF24_read_register>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80016c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80016d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <printRadioSettings+0x5e>
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	49b2      	ldr	r1, [pc, #712]	; (80019ac <printRadioSettings+0x320>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 fb80 	bl	8007de8 <siprintf>
 80016e8:	e00c      	b.n	8001704 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	49b0      	ldr	r1, [pc, #704]	; (80019b0 <printRadioSettings+0x324>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 fb79 	bl	8007de8 <siprintf>
 80016f6:	e005      	b.n	8001704 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	49ad      	ldr	r1, [pc, #692]	; (80019b4 <printRadioSettings+0x328>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 fb72 	bl	8007de8 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fde9 	bl	80002e0 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	f107 0108 	add.w	r1, r7, #8
 8001716:	230a      	movs	r3, #10
 8001718:	48a3      	ldr	r0, [pc, #652]	; (80019a8 <printRadioSettings+0x31c>)
 800171a:	f004 fed6 	bl	80064ca <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff fb84 	bl	8000e2c <NRF24_read_register>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800172a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800172e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfcc      	ite	gt
 8001736:	2301      	movgt	r3, #1
 8001738:	2300      	movle	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800173e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001742:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001746:	2b00      	cmp	r3, #0
 8001748:	bfcc      	ite	gt
 800174a:	2301      	movgt	r3, #1
 800174c:	2300      	movle	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001752:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001756:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800175a:	2b00      	cmp	r3, #0
 800175c:	bfcc      	ite	gt
 800175e:	2301      	movgt	r3, #1
 8001760:	2300      	movle	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001766:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800176e:	2b00      	cmp	r3, #0
 8001770:	bfcc      	ite	gt
 8001772:	2301      	movgt	r3, #1
 8001774:	2300      	movle	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800177e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001782:	2b00      	cmp	r3, #0
 8001784:	bfcc      	ite	gt
 8001786:	2301      	movgt	r3, #1
 8001788:	2300      	movle	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800178e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001792:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001796:	2b00      	cmp	r3, #0
 8001798:	bfcc      	ite	gt
 800179a:	2301      	movgt	r3, #1
 800179c:	2300      	movle	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f107 0008 	add.w	r0, r7, #8
 80017a4:	9303      	str	r3, [sp, #12]
 80017a6:	9402      	str	r4, [sp, #8]
 80017a8:	9101      	str	r1, [sp, #4]
 80017aa:	9200      	str	r2, [sp, #0]
 80017ac:	4633      	mov	r3, r6
 80017ae:	462a      	mov	r2, r5
 80017b0:	4981      	ldr	r1, [pc, #516]	; (80019b8 <printRadioSettings+0x32c>)
 80017b2:	f006 fb19 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd90 	bl	80002e0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f107 0108 	add.w	r1, r7, #8
 80017c8:	230a      	movs	r3, #10
 80017ca:	4877      	ldr	r0, [pc, #476]	; (80019a8 <printRadioSettings+0x31c>)
 80017cc:	f004 fe7d 	bl	80064ca <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7ff fb2b 	bl	8000e2c <NRF24_read_register>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfcc      	ite	gt
 80017e8:	2301      	movgt	r3, #1
 80017ea:	2300      	movle	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfcc      	ite	gt
 80017fc:	2301      	movgt	r3, #1
 80017fe:	2300      	movle	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001808:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfcc      	ite	gt
 8001810:	2301      	movgt	r3, #1
 8001812:	2300      	movle	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001818:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfcc      	ite	gt
 8001824:	2301      	movgt	r3, #1
 8001826:	2300      	movle	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800182c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001830:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001834:	2b00      	cmp	r3, #0
 8001836:	bfcc      	ite	gt
 8001838:	2301      	movgt	r3, #1
 800183a:	2300      	movle	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001840:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001844:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001848:	2b00      	cmp	r3, #0
 800184a:	bfcc      	ite	gt
 800184c:	2301      	movgt	r3, #1
 800184e:	2300      	movle	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f107 0008 	add.w	r0, r7, #8
 8001856:	9303      	str	r3, [sp, #12]
 8001858:	9402      	str	r4, [sp, #8]
 800185a:	9101      	str	r1, [sp, #4]
 800185c:	9200      	str	r2, [sp, #0]
 800185e:	4633      	mov	r3, r6
 8001860:	462a      	mov	r2, r5
 8001862:	4956      	ldr	r1, [pc, #344]	; (80019bc <printRadioSettings+0x330>)
 8001864:	f006 fac0 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fd37 	bl	80002e0 <strlen>
 8001872:	4603      	mov	r3, r0
 8001874:	b29a      	uxth	r2, r3
 8001876:	f107 0108 	add.w	r1, r7, #8
 800187a:	230a      	movs	r3, #10
 800187c:	484a      	ldr	r0, [pc, #296]	; (80019a8 <printRadioSettings+0x31c>)
 800187e:	f004 fe24 	bl	80064ca <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001882:	2003      	movs	r0, #3
 8001884:	f7ff fad2 	bl	8000e2c <NRF24_read_register>
 8001888:	4603      	mov	r3, r0
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001892:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001896:	3302      	adds	r3, #2
 8001898:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800189c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	4946      	ldr	r1, [pc, #280]	; (80019c0 <printRadioSettings+0x334>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fa9e 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fd15 	bl	80002e0 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	f107 0108 	add.w	r1, r7, #8
 80018be:	230a      	movs	r3, #10
 80018c0:	4839      	ldr	r0, [pc, #228]	; (80019a8 <printRadioSettings+0x31c>)
 80018c2:	f004 fe02 	bl	80064ca <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80018c6:	2005      	movs	r0, #5
 80018c8:	f7ff fab0 	bl	8000e2c <NRF24_read_register>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80018d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4939      	ldr	r1, [pc, #228]	; (80019c4 <printRadioSettings+0x338>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f006 fa81 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	482b      	ldr	r0, [pc, #172]	; (80019a8 <printRadioSettings+0x31c>)
 80018fc:	f004 fde5 	bl	80064ca <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001900:	2006      	movs	r0, #6
 8001902:	f7ff fa93 	bl	8000e2c <NRF24_read_register>
 8001906:	4603      	mov	r3, r0
 8001908:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800190c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <printRadioSettings+0x29a>
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	492a      	ldr	r1, [pc, #168]	; (80019c8 <printRadioSettings+0x33c>)
 800191e:	4618      	mov	r0, r3
 8001920:	f006 fa62 	bl	8007de8 <siprintf>
 8001924:	e005      	b.n	8001932 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4928      	ldr	r1, [pc, #160]	; (80019cc <printRadioSettings+0x340>)
 800192c:	4618      	mov	r0, r3
 800192e:	f006 fa5b 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fcd2 	bl	80002e0 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	b29a      	uxth	r2, r3
 8001940:	f107 0108 	add.w	r1, r7, #8
 8001944:	230a      	movs	r3, #10
 8001946:	4818      	ldr	r0, [pc, #96]	; (80019a8 <printRadioSettings+0x31c>)
 8001948:	f004 fdbf 	bl	80064ca <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800194c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001950:	f003 0306 	and.w	r3, r3, #6
 8001954:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001958:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001962:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <printRadioSettings+0x2ec>
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4918      	ldr	r1, [pc, #96]	; (80019d0 <printRadioSettings+0x344>)
 8001970:	4618      	mov	r0, r3
 8001972:	f006 fa39 	bl	8007de8 <siprintf>
 8001976:	e03b      	b.n	80019f0 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001978:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <printRadioSettings+0x302>
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	4913      	ldr	r1, [pc, #76]	; (80019d4 <printRadioSettings+0x348>)
 8001986:	4618      	mov	r0, r3
 8001988:	f006 fa2e 	bl	8007de8 <siprintf>
 800198c:	e030      	b.n	80019f0 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800198e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001992:	2b02      	cmp	r3, #2
 8001994:	d122      	bne.n	80019dc <printRadioSettings+0x350>
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	490f      	ldr	r1, [pc, #60]	; (80019d8 <printRadioSettings+0x34c>)
 800199c:	4618      	mov	r0, r3
 800199e:	f006 fa23 	bl	8007de8 <siprintf>
 80019a2:	e025      	b.n	80019f0 <printRadioSettings+0x364>
 80019a4:	080090bc 	.word	0x080090bc
 80019a8:	2400075c 	.word	0x2400075c
 80019ac:	080090f0 	.word	0x080090f0
 80019b0:	0800910c 	.word	0x0800910c
 80019b4:	08009128 	.word	0x08009128
 80019b8:	0800913c 	.word	0x0800913c
 80019bc:	08009180 	.word	0x08009180
 80019c0:	080091cc 	.word	0x080091cc
 80019c4:	080091e8 	.word	0x080091e8
 80019c8:	080091fc 	.word	0x080091fc
 80019cc:	08009214 	.word	0x08009214
 80019d0:	0800922c 	.word	0x0800922c
 80019d4:	08009240 	.word	0x08009240
 80019d8:	08009254 	.word	0x08009254
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80019dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d105      	bne.n	80019f0 <printRadioSettings+0x364>
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	49d7      	ldr	r1, [pc, #860]	; (8001d48 <printRadioSettings+0x6bc>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f006 f9fc 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fc73 	bl	80002e0 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	f107 0108 	add.w	r1, r7, #8
 8001a02:	230a      	movs	r3, #10
 8001a04:	48d1      	ldr	r0, [pc, #836]	; (8001d4c <printRadioSettings+0x6c0>)
 8001a06:	f004 fd60 	bl	80064ca <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	4619      	mov	r1, r3
 8001a10:	200a      	movs	r0, #10
 8001a12:	f7ff fa33 	bl	8000e7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	461c      	mov	r4, r3
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	78bb      	ldrb	r3, [r7, #2]
 8001a20:	787a      	ldrb	r2, [r7, #1]
 8001a22:	7839      	ldrb	r1, [r7, #0]
 8001a24:	f107 0008 	add.w	r0, r7, #8
 8001a28:	9102      	str	r1, [sp, #8]
 8001a2a:	9201      	str	r2, [sp, #4]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	462b      	mov	r3, r5
 8001a30:	4622      	mov	r2, r4
 8001a32:	49c7      	ldr	r1, [pc, #796]	; (8001d50 <printRadioSettings+0x6c4>)
 8001a34:	f006 f9d8 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fc4f 	bl	80002e0 <strlen>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f107 0108 	add.w	r1, r7, #8
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	48bf      	ldr	r0, [pc, #764]	; (8001d4c <printRadioSettings+0x6c0>)
 8001a4e:	f004 fd3c 	bl	80064ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001a52:	463b      	mov	r3, r7
 8001a54:	2205      	movs	r2, #5
 8001a56:	4619      	mov	r1, r3
 8001a58:	200b      	movs	r0, #11
 8001a5a:	f7ff fa0f 	bl	8000e7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001a5e:	793b      	ldrb	r3, [r7, #4]
 8001a60:	461c      	mov	r4, r3
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	461d      	mov	r5, r3
 8001a66:	78bb      	ldrb	r3, [r7, #2]
 8001a68:	787a      	ldrb	r2, [r7, #1]
 8001a6a:	7839      	ldrb	r1, [r7, #0]
 8001a6c:	f107 0008 	add.w	r0, r7, #8
 8001a70:	9102      	str	r1, [sp, #8]
 8001a72:	9201      	str	r2, [sp, #4]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	462b      	mov	r3, r5
 8001a78:	4622      	mov	r2, r4
 8001a7a:	49b6      	ldr	r1, [pc, #728]	; (8001d54 <printRadioSettings+0x6c8>)
 8001a7c:	f006 f9b4 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fc2b 	bl	80002e0 <strlen>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f107 0108 	add.w	r1, r7, #8
 8001a92:	230a      	movs	r3, #10
 8001a94:	48ad      	ldr	r0, [pc, #692]	; (8001d4c <printRadioSettings+0x6c0>)
 8001a96:	f004 fd18 	bl	80064ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	200c      	movs	r0, #12
 8001aa2:	f7ff f9eb 	bl	8000e7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001aa6:	783b      	ldrb	r3, [r7, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	49aa      	ldr	r1, [pc, #680]	; (8001d58 <printRadioSettings+0x6cc>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f006 f999 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fc10 	bl	80002e0 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	230a      	movs	r3, #10
 8001aca:	48a0      	ldr	r0, [pc, #640]	; (8001d4c <printRadioSettings+0x6c0>)
 8001acc:	f004 fcfd 	bl	80064ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	200d      	movs	r0, #13
 8001ad8:	f7ff f9d0 	bl	8000e7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001adc:	783b      	ldrb	r3, [r7, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	499d      	ldr	r1, [pc, #628]	; (8001d5c <printRadioSettings+0x6d0>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f006 f97e 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fbf5 	bl	80002e0 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f107 0108 	add.w	r1, r7, #8
 8001afe:	230a      	movs	r3, #10
 8001b00:	4892      	ldr	r0, [pc, #584]	; (8001d4c <printRadioSettings+0x6c0>)
 8001b02:	f004 fce2 	bl	80064ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001b06:	463b      	mov	r3, r7
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	200e      	movs	r0, #14
 8001b0e:	f7ff f9b5 	bl	8000e7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001b12:	783b      	ldrb	r3, [r7, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	4991      	ldr	r1, [pc, #580]	; (8001d60 <printRadioSettings+0x6d4>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f006 f963 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fbda 	bl	80002e0 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f107 0108 	add.w	r1, r7, #8
 8001b34:	230a      	movs	r3, #10
 8001b36:	4885      	ldr	r0, [pc, #532]	; (8001d4c <printRadioSettings+0x6c0>)
 8001b38:	f004 fcc7 	bl	80064ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4619      	mov	r1, r3
 8001b42:	200f      	movs	r0, #15
 8001b44:	f7ff f99a 	bl	8000e7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001b48:	783b      	ldrb	r3, [r7, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	4984      	ldr	r1, [pc, #528]	; (8001d64 <printRadioSettings+0x6d8>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f006 f948 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fbbf 	bl	80002e0 <strlen>
 8001b62:	4603      	mov	r3, r0
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	f107 0108 	add.w	r1, r7, #8
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	4877      	ldr	r0, [pc, #476]	; (8001d4c <printRadioSettings+0x6c0>)
 8001b6e:	f004 fcac 	bl	80064ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001b72:	463b      	mov	r3, r7
 8001b74:	2205      	movs	r2, #5
 8001b76:	4619      	mov	r1, r3
 8001b78:	2010      	movs	r0, #16
 8001b7a:	f7ff f97f 	bl	8000e7c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001b7e:	793b      	ldrb	r3, [r7, #4]
 8001b80:	461c      	mov	r4, r3
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	461d      	mov	r5, r3
 8001b86:	78bb      	ldrb	r3, [r7, #2]
 8001b88:	787a      	ldrb	r2, [r7, #1]
 8001b8a:	7839      	ldrb	r1, [r7, #0]
 8001b8c:	f107 0008 	add.w	r0, r7, #8
 8001b90:	9102      	str	r1, [sp, #8]
 8001b92:	9201      	str	r2, [sp, #4]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	462b      	mov	r3, r5
 8001b98:	4622      	mov	r2, r4
 8001b9a:	4973      	ldr	r1, [pc, #460]	; (8001d68 <printRadioSettings+0x6dc>)
 8001b9c:	f006 f924 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fb9b 	bl	80002e0 <strlen>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	f107 0108 	add.w	r1, r7, #8
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	4865      	ldr	r0, [pc, #404]	; (8001d4c <printRadioSettings+0x6c0>)
 8001bb6:	f004 fc88 	bl	80064ca <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001bba:	2011      	movs	r0, #17
 8001bbc:	f7ff f936 	bl	8000e2c <NRF24_read_register>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001bc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4966      	ldr	r1, [pc, #408]	; (8001d6c <printRadioSettings+0x6e0>)
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 f907 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fb7e 	bl	80002e0 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	230a      	movs	r3, #10
 8001bee:	4857      	ldr	r0, [pc, #348]	; (8001d4c <printRadioSettings+0x6c0>)
 8001bf0:	f004 fc6b 	bl	80064ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001bf4:	2012      	movs	r0, #18
 8001bf6:	f7ff f919 	bl	8000e2c <NRF24_read_register>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001c00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4958      	ldr	r1, [pc, #352]	; (8001d70 <printRadioSettings+0x6e4>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f006 f8ea 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fb61 	bl	80002e0 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f107 0108 	add.w	r1, r7, #8
 8001c26:	230a      	movs	r3, #10
 8001c28:	4848      	ldr	r0, [pc, #288]	; (8001d4c <printRadioSettings+0x6c0>)
 8001c2a:	f004 fc4e 	bl	80064ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001c2e:	2013      	movs	r0, #19
 8001c30:	f7ff f8fc 	bl	8000e2c <NRF24_read_register>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001c3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	494b      	ldr	r1, [pc, #300]	; (8001d74 <printRadioSettings+0x6e8>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f006 f8cd 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fb44 	bl	80002e0 <strlen>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f107 0108 	add.w	r1, r7, #8
 8001c60:	230a      	movs	r3, #10
 8001c62:	483a      	ldr	r0, [pc, #232]	; (8001d4c <printRadioSettings+0x6c0>)
 8001c64:	f004 fc31 	bl	80064ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001c68:	2014      	movs	r0, #20
 8001c6a:	f7ff f8df 	bl	8000e2c <NRF24_read_register>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001c74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	493d      	ldr	r1, [pc, #244]	; (8001d78 <printRadioSettings+0x6ec>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 f8b0 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fb27 	bl	80002e0 <strlen>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	f107 0108 	add.w	r1, r7, #8
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	482b      	ldr	r0, [pc, #172]	; (8001d4c <printRadioSettings+0x6c0>)
 8001c9e:	f004 fc14 	bl	80064ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001ca2:	2015      	movs	r0, #21
 8001ca4:	f7ff f8c2 	bl	8000e2c <NRF24_read_register>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001cae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	4930      	ldr	r1, [pc, #192]	; (8001d7c <printRadioSettings+0x6f0>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f006 f893 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fb0a 	bl	80002e0 <strlen>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f107 0108 	add.w	r1, r7, #8
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	481d      	ldr	r0, [pc, #116]	; (8001d4c <printRadioSettings+0x6c0>)
 8001cd8:	f004 fbf7 	bl	80064ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001cdc:	2016      	movs	r0, #22
 8001cde:	f7ff f8a5 	bl	8000e2c <NRF24_read_register>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ce8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	4922      	ldr	r1, [pc, #136]	; (8001d80 <printRadioSettings+0x6f4>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f006 f876 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe faed 	bl	80002e0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	f107 0108 	add.w	r1, r7, #8
 8001d0e:	230a      	movs	r3, #10
 8001d10:	480e      	ldr	r0, [pc, #56]	; (8001d4c <printRadioSettings+0x6c0>)
 8001d12:	f004 fbda 	bl	80064ca <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001d16:	201c      	movs	r0, #28
 8001d18:	f7ff f888 	bl	8000e2c <NRF24_read_register>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d26:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bfcc      	ite	gt
 8001d2e:	2301      	movgt	r3, #1
 8001d30:	2300      	movle	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001d36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d3a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bfcc      	ite	gt
 8001d42:	2301      	movgt	r3, #1
 8001d44:	2300      	movle	r3, #0
 8001d46:	e01d      	b.n	8001d84 <printRadioSettings+0x6f8>
 8001d48:	08009268 	.word	0x08009268
 8001d4c:	2400075c 	.word	0x2400075c
 8001d50:	0800927c 	.word	0x0800927c
 8001d54:	080092ac 	.word	0x080092ac
 8001d58:	080092dc 	.word	0x080092dc
 8001d5c:	08009304 	.word	0x08009304
 8001d60:	0800932c 	.word	0x0800932c
 8001d64:	08009354 	.word	0x08009354
 8001d68:	0800937c 	.word	0x0800937c
 8001d6c:	080093a8 	.word	0x080093a8
 8001d70:	080093c4 	.word	0x080093c4
 8001d74:	080093e0 	.word	0x080093e0
 8001d78:	080093fc 	.word	0x080093fc
 8001d7c:	08009418 	.word	0x08009418
 8001d80:	08009434 	.word	0x08009434
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001d88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d8c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bfcc      	ite	gt
 8001d94:	2301      	movgt	r3, #1
 8001d96:	2300      	movle	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001d9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001da0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bfcc      	ite	gt
 8001da8:	2301      	movgt	r3, #1
 8001daa:	2300      	movle	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001db0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001db4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bfcc      	ite	gt
 8001dbc:	2301      	movgt	r3, #1
 8001dbe:	2300      	movle	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001dc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dc8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bfcc      	ite	gt
 8001dd0:	2301      	movgt	r3, #1
 8001dd2:	2300      	movle	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f107 0008 	add.w	r0, r7, #8
 8001dda:	9303      	str	r3, [sp, #12]
 8001ddc:	9402      	str	r4, [sp, #8]
 8001dde:	9101      	str	r1, [sp, #4]
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	4633      	mov	r3, r6
 8001de4:	462a      	mov	r2, r5
 8001de6:	4936      	ldr	r1, [pc, #216]	; (8001ec0 <printRadioSettings+0x834>)
 8001de8:	f005 fffe 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fa75 	bl	80002e0 <strlen>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	f107 0108 	add.w	r1, r7, #8
 8001dfe:	230a      	movs	r3, #10
 8001e00:	4830      	ldr	r0, [pc, #192]	; (8001ec4 <printRadioSettings+0x838>)
 8001e02:	f004 fb62 	bl	80064ca <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001e06:	201d      	movs	r0, #29
 8001e08:	f7ff f810 	bl	8000e2c <NRF24_read_register>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001e12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <printRadioSettings+0x7a0>
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4929      	ldr	r1, [pc, #164]	; (8001ec8 <printRadioSettings+0x83c>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 ffdf 	bl	8007de8 <siprintf>
 8001e2a:	e005      	b.n	8001e38 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4926      	ldr	r1, [pc, #152]	; (8001ecc <printRadioSettings+0x840>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f005 ffd8 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fa4f 	bl	80002e0 <strlen>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	f107 0108 	add.w	r1, r7, #8
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <printRadioSettings+0x838>)
 8001e4e:	f004 fb3c 	bl	80064ca <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001e52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <printRadioSettings+0x7e0>
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <printRadioSettings+0x844>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f005 ffbf 	bl	8007de8 <siprintf>
 8001e6a:	e005      	b.n	8001e78 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	4918      	ldr	r1, [pc, #96]	; (8001ed4 <printRadioSettings+0x848>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f005 ffb8 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fa2f 	bl	80002e0 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f107 0108 	add.w	r1, r7, #8
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <printRadioSettings+0x838>)
 8001e8e:	f004 fb1c 	bl	80064ca <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	4910      	ldr	r1, [pc, #64]	; (8001ed8 <printRadioSettings+0x84c>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f005 ffa5 	bl	8007de8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fa1c 	bl	80002e0 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f107 0108 	add.w	r1, r7, #8
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <printRadioSettings+0x838>)
 8001eb4:	f004 fb09 	bl	80064ca <HAL_UART_Transmit>
}
 8001eb8:	bf00      	nop
 8001eba:	3774      	adds	r7, #116	; 0x74
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec0:	08009450 	.word	0x08009450
 8001ec4:	2400075c 	.word	0x2400075c
 8001ec8:	0800949c 	.word	0x0800949c
 8001ecc:	080094b4 	.word	0x080094b4
 8001ed0:	080094cc 	.word	0x080094cc
 8001ed4:	080094e8 	.word	0x080094e8
 8001ed8:	080090bc 	.word	0x080090bc

08001edc <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001edc:	b084      	sub	sp, #16
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	f107 0c08 	add.w	ip, r7, #8
 8001ee6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <nrf24_DebugUART_Init+0x2c>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	2290      	movs	r2, #144	; 0x90
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f005 fed3 	bl	8007ca0 <memcpy>
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f02:	b004      	add	sp, #16
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2400075c 	.word	0x2400075c

08001f0c <__io_putchar>:
 * @param ch The character to be transmitted.
 * @return The transmitted character.
 */

PUTCHAR_PROTOTYPE
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001f14:	1d39      	adds	r1, r7, #4
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4803      	ldr	r0, [pc, #12]	; (8001f2c <__io_putchar+0x20>)
 8001f1e:	f004 fad4 	bl	80064ca <HAL_UART_Transmit>
	return ch;
 8001f22:	687b      	ldr	r3, [r7, #4]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2400011c 	.word	0x2400011c

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_MspInit+0x30>)
 8001f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f3c:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_MspInit+0x30>)
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_MspInit+0x30>)
 8001f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58024400 	.word	0x58024400

08001f64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0b8      	sub	sp, #224	; 0xe0
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	22bc      	movs	r2, #188	; 0xbc
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f005 fe99 	bl	8007cbc <memset>
  if(hspi->Instance==SPI4)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a25      	ldr	r2, [pc, #148]	; (8002024 <HAL_SPI_MspInit+0xc0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d142      	bne.n	800201a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8001f9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f9e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 ff33 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001fb0:	f7fe fe3a 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_SPI_MspInit+0xc4>)
 8001fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fba:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_SPI_MspInit+0xc4>)
 8001fbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_SPI_MspInit+0xc4>)
 8001fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_SPI_MspInit+0xc4>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd8:	4a13      	ldr	r2, [pc, #76]	; (8002028 <HAL_SPI_MspInit+0xc4>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_SPI_MspInit+0xc4>)
 8001fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SPI4_SCK_Pin|NRF_SPI4_MISO_Pin|NRF_SPI4_MOSI_Pin;
 8001ff0:	2364      	movs	r3, #100	; 0x64
 8001ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002008:	2305      	movs	r3, #5
 800200a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_SPI_MspInit+0xc8>)
 8002016:	f000 fb97 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	37e0      	adds	r7, #224	; 0xe0
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40013400 	.word	0x40013400
 8002028:	58024400 	.word	0x58024400
 800202c:	58021000 	.word	0x58021000

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0b8      	sub	sp, #224	; 0xe0
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	22bc      	movs	r2, #188	; 0xbc
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f005 fe33 	bl	8007cbc <memset>
  if(huart->Instance==USART3)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <HAL_UART_MspInit+0xc0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d142      	bne.n	80020e6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	4618      	mov	r0, r3
 8002070:	f001 fece 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800207a:	f7fe fdd5 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_UART_MspInit+0xc4>)
 8002080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_UART_MspInit+0xc4>)
 8002086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_UART_MspInit+0xc4>)
 8002090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_UART_MspInit+0xc4>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_UART_MspInit+0xc4>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_UART_MspInit+0xc4>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80020ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020d4:	2307      	movs	r3, #7
 80020d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020de:	4619      	mov	r1, r3
 80020e0:	4805      	ldr	r0, [pc, #20]	; (80020f8 <HAL_UART_MspInit+0xc8>)
 80020e2:	f000 fb31 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020e6:	bf00      	nop
 80020e8:	37e0      	adds	r7, #224	; 0xe0
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40004800 	.word	0x40004800
 80020f4:	58024400 	.word	0x58024400
 80020f8:	58020c00 	.word	0x58020c00

080020fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b0b8      	sub	sp, #224	; 0xe0
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	22bc      	movs	r2, #188	; 0xbc
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f005 fdcd 	bl	8007cbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a36      	ldr	r2, [pc, #216]	; (8002200 <HAL_PCD_MspInit+0x104>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d165      	bne.n	80021f8 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800212c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002130:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002136:	2318      	movs	r3, #24
 8002138:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800213a:	2302      	movs	r3, #2
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800213e:	2304      	movs	r3, #4
 8002140:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002142:	2302      	movs	r3, #2
 8002144:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002146:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800214a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fe57 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002168:	f7fe fd5e 	bl	8000c28 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800216c:	f000 fe86 	bl	8002e7c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_PCD_MspInit+0x108>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_PCD_MspInit+0x108>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_PCD_MspInit+0x108>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800218e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80021a8:	230a      	movs	r3, #10
 80021aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021b2:	4619      	mov	r1, r3
 80021b4:	4814      	ldr	r0, [pc, #80]	; (8002208 <HAL_PCD_MspInit+0x10c>)
 80021b6:	f000 fac7 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <HAL_PCD_MspInit+0x10c>)
 80021d6:	f000 fab7 	bl	8002748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_PCD_MspInit+0x108>)
 80021dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021e0:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_PCD_MspInit+0x108>)
 80021e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_PCD_MspInit+0x108>)
 80021ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	37e0      	adds	r7, #224	; 0xe0
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40080000 	.word	0x40080000
 8002204:	58024400 	.word	0x58024400
 8002208:	58020000 	.word	0x58020000

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <NMI_Handler+0x4>

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <MemManage_Handler+0x4>

0800221e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <UsageFault_Handler+0x4>

0800222a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002258:	f000 f942 	bl	80024e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e00a      	b.n	8002288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002272:	f3af 8000 	nop.w
 8002276:	4601      	mov	r1, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60ba      	str	r2, [r7, #8]
 800227e:	b2ca      	uxtb	r2, r1
 8002280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbf0      	blt.n	8002272 <_read+0x12>
	}

return len;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e009      	b.n	80022c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fe29 	bl	8001f0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf1      	blt.n	80022ac <_write+0x12>
	}
	return len;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_close>:

int _close(int file)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
	return -1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fa:	605a      	str	r2, [r3, #4]
	return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_isatty>:

int _isatty(int file)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
	return 1;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
	return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800236c:	f005 fc6e 	bl	8007c4c <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	24080000 	.word	0x24080000
 800239c:	00000400 	.word	0x00000400
 80023a0:	240007ec 	.word	0x240007ec
 80023a4:	24000808 	.word	0x24000808

080023a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023ac:	f7fe f972 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023b2:	490d      	ldr	r1, [pc, #52]	; (80023e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b8:	e002      	b.n	80023c0 <LoopCopyDataInit>

080023ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023be:	3304      	adds	r3, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c4:	d3f9      	bcc.n	80023ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023c8:	4c0a      	ldr	r4, [pc, #40]	; (80023f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023cc:	e001      	b.n	80023d2 <LoopFillZerobss>

080023ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d0:	3204      	adds	r2, #4

080023d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d4:	d3fb      	bcc.n	80023ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d6:	f005 fc3f 	bl	8007c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023da:	f7fe f9f1 	bl	80007c0 <main>
  bx  lr
 80023de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023e8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80023ec:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 80023f0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80023f4:	24000804 	.word	0x24000804

080023f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f8:	e7fe      	b.n	80023f8 <ADC3_IRQHandler>
	...

080023fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002402:	2003      	movs	r0, #3
 8002404:	f000 f96e 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002408:	f001 fb2c 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_Init+0x68>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	4913      	ldr	r1, [pc, #76]	; (8002468 <HAL_Init+0x6c>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_Init+0x68>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_Init+0x6c>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HAL_Init+0x70>)
 800243e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <HAL_Init+0x74>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002446:	2000      	movs	r0, #0
 8002448:	f000 f814 	bl	8002474 <HAL_InitTick>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e002      	b.n	800245c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002456:	f7ff fd6b 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	58024400 	.word	0x58024400
 8002468:	08009600 	.word	0x08009600
 800246c:	24000004 	.word	0x24000004
 8002470:	24000000 	.word	0x24000000

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_InitTick+0x60>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e021      	b.n	80024cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_InitTick+0x64>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_InitTick+0x60>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002496:	fbb3 f3f1 	udiv	r3, r3, r1
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f945 	bl	800272e <HAL_SYSTICK_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00e      	b.n	80024cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	d80a      	bhi.n	80024ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b4:	2200      	movs	r2, #0
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f000 f91d 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <HAL_InitTick+0x68>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2400000c 	.word	0x2400000c
 80024d8:	24000000 	.word	0x24000000
 80024dc:	24000008 	.word	0x24000008

080024e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x20>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x24>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_IncTick+0x24>)
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2400000c 	.word	0x2400000c
 8002504:	240007f0 	.word	0x240007f0

08002508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_GetTick+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	240007f0 	.word	0x240007f0

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff ffee 	bl	8002508 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d005      	beq.n	8002546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_Delay+0x44>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002546:	bf00      	nop
 8002548:	f7ff ffde 	bl	8002508 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f7      	bhi.n	8002548 <HAL_Delay+0x28>
  {
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2400000c 	.word	0x2400000c

08002568 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_GetREVID+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0c1b      	lsrs	r3, r3, #16
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	5c001000 	.word	0x5c001000

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x40>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	05fa0000 	.word	0x05fa0000

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff47 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff5e 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff90 	bl	8002638 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5f 	bl	80025e4 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffb2 	bl	80026a0 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002756:	4b89      	ldr	r3, [pc, #548]	; (800297c <HAL_GPIO_Init+0x234>)
 8002758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800275a:	e194      	b.n	8002a86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8186 	beq.w	8002a80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d005      	beq.n	800278c <HAL_GPIO_Init+0x44>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d017      	beq.n	800282a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d123      	bne.n	800287e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	69b9      	ldr	r1, [r7, #24]
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80e0 	beq.w	8002a80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c0:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <HAL_GPIO_Init+0x238>)
 80028c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028c6:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <HAL_GPIO_Init+0x238>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_GPIO_Init+0x238>)
 80028d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028de:	4a29      	ldr	r2, [pc, #164]	; (8002984 <HAL_GPIO_Init+0x23c>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a20      	ldr	r2, [pc, #128]	; (8002988 <HAL_GPIO_Init+0x240>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d052      	beq.n	80029b0 <HAL_GPIO_Init+0x268>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_GPIO_Init+0x244>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_GPIO_Init+0x22e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_GPIO_Init+0x248>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02b      	beq.n	8002972 <HAL_GPIO_Init+0x22a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x24c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d025      	beq.n	800296e <HAL_GPIO_Init+0x226>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_GPIO_Init+0x250>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01f      	beq.n	800296a <HAL_GPIO_Init+0x222>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_GPIO_Init+0x254>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x21e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_GPIO_Init+0x258>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x21a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <HAL_GPIO_Init+0x25c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x216>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_GPIO_Init+0x260>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x212>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_GPIO_Init+0x264>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x20e>
 8002952:	2309      	movs	r3, #9
 8002954:	e02d      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 8002956:	230a      	movs	r3, #10
 8002958:	e02b      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 800295a:	2308      	movs	r3, #8
 800295c:	e029      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 800295e:	2307      	movs	r3, #7
 8002960:	e027      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 8002962:	2306      	movs	r3, #6
 8002964:	e025      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 8002966:	2305      	movs	r3, #5
 8002968:	e023      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 800296a:	2304      	movs	r3, #4
 800296c:	e021      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 800296e:	2303      	movs	r3, #3
 8002970:	e01f      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 8002972:	2302      	movs	r3, #2
 8002974:	e01d      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 8002976:	2301      	movs	r3, #1
 8002978:	e01b      	b.n	80029b2 <HAL_GPIO_Init+0x26a>
 800297a:	bf00      	nop
 800297c:	58000080 	.word	0x58000080
 8002980:	58024400 	.word	0x58024400
 8002984:	58000400 	.word	0x58000400
 8002988:	58020000 	.word	0x58020000
 800298c:	58020400 	.word	0x58020400
 8002990:	58020800 	.word	0x58020800
 8002994:	58020c00 	.word	0x58020c00
 8002998:	58021000 	.word	0x58021000
 800299c:	58021400 	.word	0x58021400
 80029a0:	58021800 	.word	0x58021800
 80029a4:	58021c00 	.word	0x58021c00
 80029a8:	58022000 	.word	0x58022000
 80029ac:	58022400 	.word	0x58022400
 80029b0:	2300      	movs	r3, #0
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	f002 0203 	and.w	r2, r2, #3
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	4093      	lsls	r3, r2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c2:	4938      	ldr	r1, [pc, #224]	; (8002aa4 <HAL_GPIO_Init+0x35c>)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	3301      	adds	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f ae63 	bne.w	800275c <HAL_GPIO_Init+0x14>
  }
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	3724      	adds	r7, #36	; 0x24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	58000400 	.word	0x58000400

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ac4:	e003      	b.n	8002ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	041a      	lsls	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	619a      	str	r2, [r3, #24]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002ae4:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_HSEM_FastTake+0x2c>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3320      	adds	r3, #32
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_HSEM_FastTake+0x30>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	58026400 	.word	0x58026400
 8002b0c:	80000300 	.word	0x80000300

08002b10 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002b1a:	4906      	ldr	r1, [pc, #24]	; (8002b34 <HAL_HSEM_Release+0x24>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	58026400 	.word	0x58026400

08002b38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	b08f      	sub	sp, #60	; 0x3c
 8002b3c:	af0a      	add	r7, sp, #40	; 0x28
 8002b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e116      	b.n	8002d78 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fac9 	bl	80020fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fdc3 	bl	8007714 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	687e      	ldr	r6, [r7, #4]
 8002b96:	466d      	mov	r5, sp
 8002b98:	f106 0410 	add.w	r4, r6, #16
 8002b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bac:	1d33      	adds	r3, r6, #4
 8002bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f004 fd41 	bl	8007638 <USB_CoreInit>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d7      	b.n	8002d78 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fdb1 	bl	8007736 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e04a      	b.n	8002c70 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	333d      	adds	r3, #61	; 0x3d
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	333c      	adds	r3, #60	; 0x3c
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	b298      	uxth	r0, r3
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3344      	adds	r3, #68	; 0x44
 8002c16:	4602      	mov	r2, r0
 8002c18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3340      	adds	r3, #64	; 0x40
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3348      	adds	r3, #72	; 0x48
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	334c      	adds	r3, #76	; 0x4c
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3354      	adds	r3, #84	; 0x54
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3af      	bcc.n	8002bda <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e044      	b.n	8002d0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	3301      	adds	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d3b5      	bcc.n	8002c80 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	687e      	ldr	r6, [r7, #4]
 8002d1c:	466d      	mov	r5, sp
 8002d1e:	f106 0410 	add.w	r4, r6, #16
 8002d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d32:	1d33      	adds	r3, r6, #4
 8002d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	f004 fd4a 	bl	80077d0 <USB_DevInit>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e014      	b.n	8002d78 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f80a 	bl	8002d80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 ff08 	bl	8007b86 <USB_DevDisconnect>

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	10000003 	.word	0x10000003

08002dc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002dd0:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d00a      	beq.n	8002df2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d001      	beq.n	8002dee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e040      	b.n	8002e70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e03e      	b.n	8002e70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002dfa:	491f      	ldr	r1, [pc, #124]	; (8002e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e02:	f7ff fb81 	bl	8002508 <HAL_GetTick>
 8002e06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e08:	e009      	b.n	8002e1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e0a:	f7ff fb7d 	bl	8002508 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e18:	d901      	bls.n	8002e1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e028      	b.n	8002e70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b1e      	cmp	r3, #30
 8002e30:	d008      	beq.n	8002e44 <HAL_PWREx_ConfigSupply+0x7c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b2e      	cmp	r3, #46	; 0x2e
 8002e36:	d005      	beq.n	8002e44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b1d      	cmp	r3, #29
 8002e3c:	d002      	beq.n	8002e44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b2d      	cmp	r3, #45	; 0x2d
 8002e42:	d114      	bne.n	8002e6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e44:	f7ff fb60 	bl	8002508 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e4a:	e009      	b.n	8002e60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e4c:	f7ff fb5c 	bl	8002508 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e5a:	d901      	bls.n	8002e60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e007      	b.n	8002e70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d1ee      	bne.n	8002e4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	58024800 	.word	0x58024800

08002e7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	58024800 	.word	0x58024800

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f000 bc1d 	b.w	80036ea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8087 	beq.w	8002fcc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ebe:	4b99      	ldr	r3, [pc, #612]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ec8:	4b96      	ldr	r3, [pc, #600]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d007      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x48>
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	2b18      	cmp	r3, #24
 8002ed8:	d110      	bne.n	8002efc <HAL_RCC_OscConfig+0x60>
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d06c      	beq.n	8002fca <HAL_RCC_OscConfig+0x12e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d168      	bne.n	8002fca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e3f6      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x78>
 8002f06:	4b87      	ldr	r3, [pc, #540]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a86      	ldr	r2, [pc, #536]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e02e      	b.n	8002f72 <HAL_RCC_OscConfig+0xd6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x9a>
 8002f1c:	4b81      	ldr	r3, [pc, #516]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a80      	ldr	r2, [pc, #512]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a7d      	ldr	r2, [pc, #500]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e01d      	b.n	8002f72 <HAL_RCC_OscConfig+0xd6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCC_OscConfig+0xbe>
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b75      	ldr	r3, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a74      	ldr	r2, [pc, #464]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e00b      	b.n	8002f72 <HAL_RCC_OscConfig+0xd6>
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a71      	ldr	r2, [pc, #452]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7ff fac5 	bl	8002508 <HAL_GetTick>
 8002f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f82:	f7ff fac1 	bl	8002508 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	; 0x64
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e3aa      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f94:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0xe6>
 8002fa0:	e014      	b.n	8002fcc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7ff fab1 	bl	8002508 <HAL_GetTick>
 8002fa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002faa:	f7ff faad 	bl	8002508 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e396      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x10e>
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80cb 	beq.w	8003170 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b52      	ldr	r3, [pc, #328]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fe4:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_RCC_OscConfig+0x164>
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	2b18      	cmp	r3, #24
 8002ff4:	d156      	bne.n	80030a4 <HAL_RCC_OscConfig+0x208>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d151      	bne.n	80030a4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003000:	4b48      	ldr	r3, [pc, #288]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_OscConfig+0x17c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e368      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003018:	4b42      	ldr	r3, [pc, #264]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 0219 	bic.w	r2, r3, #25
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	493f      	ldr	r1, [pc, #252]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800302a:	f7ff fa6d 	bl	8002508 <HAL_GetTick>
 800302e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7ff fa69 	bl	8002508 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e352      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003044:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	f7ff fa8a 	bl	8002568 <HAL_GetREVID>
 8003054:	4603      	mov	r3, r0
 8003056:	f241 0203 	movw	r2, #4099	; 0x1003
 800305a:	4293      	cmp	r3, r2
 800305c:	d817      	bhi.n	800308e <HAL_RCC_OscConfig+0x1f2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d108      	bne.n	8003078 <HAL_RCC_OscConfig+0x1dc>
 8003066:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800306e:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003076:	e07b      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	031b      	lsls	r3, r3, #12
 8003086:	4927      	ldr	r1, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308c:	e070      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	061b      	lsls	r3, r3, #24
 800309c:	4921      	ldr	r1, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a2:	e065      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d048      	beq.n	800313e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 0219 	bic.w	r2, r3, #25
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	491a      	ldr	r1, [pc, #104]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7ff fa23 	bl	8002508 <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c6:	f7ff fa1f 	bl	8002508 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e308      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	f7ff fa40 	bl	8002568 <HAL_GetREVID>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d81a      	bhi.n	8003128 <HAL_RCC_OscConfig+0x28c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x270>
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	6053      	str	r3, [r2, #4]
 800310a:	e031      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	031b      	lsls	r3, r3, #12
 800311a:	4902      	ldr	r1, [pc, #8]	; (8003124 <HAL_RCC_OscConfig+0x288>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e026      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
 8003128:	4b9a      	ldr	r3, [pc, #616]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	4997      	ldr	r1, [pc, #604]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	e018      	b.n	8003170 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b95      	ldr	r3, [pc, #596]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a94      	ldr	r2, [pc, #592]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7ff f9dd 	bl	8002508 <HAL_GetTick>
 800314e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003152:	f7ff f9d9 	bl	8002508 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e2c2      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003164:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a9 	beq.w	80032d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003186:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003188:	4b82      	ldr	r3, [pc, #520]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d007      	beq.n	80031a4 <HAL_RCC_OscConfig+0x308>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b18      	cmp	r3, #24
 8003198:	d13a      	bne.n	8003210 <HAL_RCC_OscConfig+0x374>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d135      	bne.n	8003210 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031a4:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x320>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e296      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031bc:	f7ff f9d4 	bl	8002568 <HAL_GetREVID>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d817      	bhi.n	80031fa <HAL_RCC_OscConfig+0x35e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x348>
 80031d2:	4b70      	ldr	r3, [pc, #448]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031da:	4a6e      	ldr	r2, [pc, #440]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031e2:	e075      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e4:	4b6b      	ldr	r3, [pc, #428]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	069b      	lsls	r3, r3, #26
 80031f2:	4968      	ldr	r1, [pc, #416]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031f8:	e06a      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031fa:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	4962      	ldr	r1, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800320a:	4313      	orrs	r3, r2
 800320c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800320e:	e05f      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d042      	beq.n	800329e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7ff f970 	bl	8002508 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800322c:	f7ff f96c 	bl	8002508 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e255      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800323e:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800324a:	f7ff f98d 	bl	8002568 <HAL_GetREVID>
 800324e:	4603      	mov	r3, r0
 8003250:	f241 0203 	movw	r2, #4099	; 0x1003
 8003254:	4293      	cmp	r3, r2
 8003256:	d817      	bhi.n	8003288 <HAL_RCC_OscConfig+0x3ec>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	2b20      	cmp	r3, #32
 800325e:	d108      	bne.n	8003272 <HAL_RCC_OscConfig+0x3d6>
 8003260:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003268:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800326a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800326e:	6053      	str	r3, [r2, #4]
 8003270:	e02e      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
 8003272:	4b48      	ldr	r3, [pc, #288]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	069b      	lsls	r3, r3, #26
 8003280:	4944      	ldr	r1, [pc, #272]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
 8003286:	e023      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
 8003288:	4b42      	ldr	r3, [pc, #264]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	493f      	ldr	r1, [pc, #252]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
 800329c:	e018      	b.n	80032d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7ff f92d 	bl	8002508 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032b2:	f7ff f929 	bl	8002508 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e212      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032c4:	4b33      	ldr	r3, [pc, #204]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d036      	beq.n	800334a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d019      	beq.n	8003318 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e4:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7ff f90a 	bl	8002508 <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f8:	f7ff f906 	bl	8002508 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1ef      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x45c>
 8003316:	e018      	b.n	800334a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003318:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331c:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7ff f8f0 	bl	8002508 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7ff f8ec 	bl	8002508 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1d5      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d039      	beq.n	80033ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01c      	beq.n	8003398 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003368:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800336a:	f7ff f8cd 	bl	8002508 <HAL_GetTick>
 800336e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003372:	f7ff f8c9 	bl	8002508 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e1b2      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x4d6>
 8003390:	e01b      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
 8003392:	bf00      	nop
 8003394:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003398:	4b9b      	ldr	r3, [pc, #620]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a9a      	ldr	r2, [pc, #616]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800339e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033a4:	f7ff f8b0 	bl	8002508 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033ac:	f7ff f8ac 	bl	8002508 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e195      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033be:	4b92      	ldr	r3, [pc, #584]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8081 	beq.w	80034da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033d8:	4b8c      	ldr	r3, [pc, #560]	; (800360c <HAL_RCC_OscConfig+0x770>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a8b      	ldr	r2, [pc, #556]	; (800360c <HAL_RCC_OscConfig+0x770>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e4:	f7ff f890 	bl	8002508 <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7ff f88c 	bl	8002508 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e175      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033fe:	4b83      	ldr	r3, [pc, #524]	; (800360c <HAL_RCC_OscConfig+0x770>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x584>
 8003412:	4b7d      	ldr	r3, [pc, #500]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a7c      	ldr	r2, [pc, #496]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	e02d      	b.n	800347c <HAL_RCC_OscConfig+0x5e0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_OscConfig+0x5a6>
 8003428:	4b77      	ldr	r3, [pc, #476]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a76      	ldr	r2, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	4b74      	ldr	r3, [pc, #464]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a73      	ldr	r2, [pc, #460]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x5e0>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c8>
 800344a:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a6e      	ldr	r2, [pc, #440]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
 8003456:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a6b      	ldr	r2, [pc, #428]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0x5e0>
 8003464:	4b68      	ldr	r3, [pc, #416]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a67      	ldr	r2, [pc, #412]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	4b65      	ldr	r3, [pc, #404]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a64      	ldr	r2, [pc, #400]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003476:	f023 0304 	bic.w	r3, r3, #4
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7ff f840 	bl	8002508 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7ff f83c 	bl	8002508 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e123      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a2:	4b59      	ldr	r3, [pc, #356]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ee      	beq.n	800348c <HAL_RCC_OscConfig+0x5f0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7ff f82a 	bl	8002508 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7ff f826 	bl	8002508 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e10d      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ce:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ee      	bne.n	80034b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8102 	beq.w	80036e8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034e4:	4b48      	ldr	r3, [pc, #288]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	f000 80bd 	beq.w	800366c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	f040 809e 	bne.w	8003638 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a41      	ldr	r2, [pc, #260]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fffe 	bl	8002508 <HAL_GetTick>
 800350c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe fffa 	bl	8002508 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0e3      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003522:	4b39      	ldr	r3, [pc, #228]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <HAL_RCC_OscConfig+0x774>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	430a      	orrs	r2, r1
 8003542:	4931      	ldr	r1, [pc, #196]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	628b      	str	r3, [r1, #40]	; 0x28
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	3b01      	subs	r3, #1
 800354e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	3b01      	subs	r3, #1
 8003558:	025b      	lsls	r3, r3, #9
 800355a:	b29b      	uxth	r3, r3
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	3b01      	subs	r3, #1
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	3b01      	subs	r3, #1
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003578:	4923      	ldr	r1, [pc, #140]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800358c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003596:	00d2      	lsls	r2, r2, #3
 8003598:	491b      	ldr	r1, [pc, #108]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f023 020c 	bic.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4917      	ldr	r1, [pc, #92]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f023 0202 	bic.w	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	4912      	ldr	r1, [pc, #72]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <HAL_RCC_OscConfig+0x76c>)
 80035f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe ff83 	bl	8002508 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003604:	e011      	b.n	800362a <HAL_RCC_OscConfig+0x78e>
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
 800360c:	58024800 	.word	0x58024800
 8003610:	fffffc0c 	.word	0xfffffc0c
 8003614:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe ff76 	bl	8002508 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e05f      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800362a:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <HAL_RCC_OscConfig+0x858>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x77c>
 8003636:	e057      	b.n	80036e8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_RCC_OscConfig+0x858>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <HAL_RCC_OscConfig+0x858>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe ff60 	bl	8002508 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe ff5c 	bl	8002508 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e045      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800365e:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_RCC_OscConfig+0x858>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x7b0>
 800366a:	e03d      	b.n	80036e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_RCC_OscConfig+0x858>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCC_OscConfig+0x858>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b01      	cmp	r3, #1
 800367e:	d031      	beq.n	80036e4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f003 0203 	and.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d12a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d122      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	0a5b      	lsrs	r3, r3, #9
 80036b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0c1b      	lsrs	r3, r3, #16
 80036c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0e1b      	lsrs	r3, r3, #24
 80036d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3730      	adds	r7, #48	; 0x30
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	58024400 	.word	0x58024400

080036f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e19c      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b8a      	ldr	r3, [pc, #552]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b87      	ldr	r3, [pc, #540]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 020f 	bic.w	r2, r3, #15
 8003722:	4985      	ldr	r1, [pc, #532]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b83      	ldr	r3, [pc, #524]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e184      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	4b7b      	ldr	r3, [pc, #492]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003754:	429a      	cmp	r2, r3
 8003756:	d908      	bls.n	800376a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003758:	4b78      	ldr	r3, [pc, #480]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	4975      	ldr	r1, [pc, #468]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003766:	4313      	orrs	r3, r2
 8003768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d010      	beq.n	8003798 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003782:	429a      	cmp	r2, r3
 8003784:	d908      	bls.n	8003798 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	496a      	ldr	r1, [pc, #424]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	4b64      	ldr	r3, [pc, #400]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d908      	bls.n	80037c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037b4:	4b61      	ldr	r3, [pc, #388]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	495e      	ldr	r1, [pc, #376]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037de:	429a      	cmp	r2, r3
 80037e0:	d908      	bls.n	80037f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037e2:	4b56      	ldr	r3, [pc, #344]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4953      	ldr	r1, [pc, #332]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4b4d      	ldr	r3, [pc, #308]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	429a      	cmp	r2, r3
 800380e:	d908      	bls.n	8003822 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b4a      	ldr	r3, [pc, #296]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f023 020f 	bic.w	r2, r3, #15
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4947      	ldr	r1, [pc, #284]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800381e:	4313      	orrs	r3, r2
 8003820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d055      	beq.n	80038da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800382e:	4b43      	ldr	r3, [pc, #268]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4940      	ldr	r1, [pc, #256]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800383c:	4313      	orrs	r3, r2
 800383e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d107      	bne.n	8003858 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003848:	4b3c      	ldr	r3, [pc, #240]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d121      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0f6      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d107      	bne.n	8003870 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d115      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0ea      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003878:	4b30      	ldr	r3, [pc, #192]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0de      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0d6      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003898:	4b28      	ldr	r3, [pc, #160]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f023 0207 	bic.w	r2, r3, #7
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4925      	ldr	r1, [pc, #148]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe fe2d 	bl	8002508 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fe fe29 	bl	8002508 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0be      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d1eb      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d010      	beq.n	8003908 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d208      	bcs.n	8003908 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f6:	4b11      	ldr	r3, [pc, #68]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f023 020f 	bic.w	r2, r3, #15
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	490e      	ldr	r1, [pc, #56]	; (800393c <HAL_RCC_ClockConfig+0x244>)
 8003904:	4313      	orrs	r3, r2
 8003906:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d214      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 020f 	bic.w	r2, r3, #15
 800391e:	4906      	ldr	r1, [pc, #24]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <HAL_RCC_ClockConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e086      	b.n	8003a46 <HAL_RCC_ClockConfig+0x34e>
 8003938:	52002000 	.word	0x52002000
 800393c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d010      	beq.n	800396e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003958:	429a      	cmp	r2, r3
 800395a:	d208      	bcs.n	800396e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800395c:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	4939      	ldr	r1, [pc, #228]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 800396a:	4313      	orrs	r3, r2
 800396c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d010      	beq.n	800399c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003986:	429a      	cmp	r2, r3
 8003988:	d208      	bcs.n	800399c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	492e      	ldr	r1, [pc, #184]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 8003998:	4313      	orrs	r3, r2
 800399a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d208      	bcs.n	80039ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4922      	ldr	r1, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d010      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d208      	bcs.n	80039f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	4917      	ldr	r1, [pc, #92]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039f8:	f000 f834 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	4912      	ldr	r1, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x35c>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_RCC_ClockConfig+0x358>)
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <HAL_RCC_ClockConfig+0x35c>)
 8003a20:	5cd3      	ldrb	r3, [r2, r3]
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x360>)
 8003a2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x364>)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_RCC_ClockConfig+0x368>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fd1a 	bl	8002474 <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	58024400 	.word	0x58024400
 8003a54:	08009600 	.word	0x08009600
 8003a58:	24000004 	.word	0x24000004
 8003a5c:	24000000 	.word	0x24000000
 8003a60:	24000008 	.word	0x24000008

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a6a:	4bb3      	ldr	r3, [pc, #716]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a72:	2b18      	cmp	r3, #24
 8003a74:	f200 8155 	bhi.w	8003d22 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003ae5 	.word	0x08003ae5
 8003a84:	08003d23 	.word	0x08003d23
 8003a88:	08003d23 	.word	0x08003d23
 8003a8c:	08003d23 	.word	0x08003d23
 8003a90:	08003d23 	.word	0x08003d23
 8003a94:	08003d23 	.word	0x08003d23
 8003a98:	08003d23 	.word	0x08003d23
 8003a9c:	08003d23 	.word	0x08003d23
 8003aa0:	08003b0b 	.word	0x08003b0b
 8003aa4:	08003d23 	.word	0x08003d23
 8003aa8:	08003d23 	.word	0x08003d23
 8003aac:	08003d23 	.word	0x08003d23
 8003ab0:	08003d23 	.word	0x08003d23
 8003ab4:	08003d23 	.word	0x08003d23
 8003ab8:	08003d23 	.word	0x08003d23
 8003abc:	08003d23 	.word	0x08003d23
 8003ac0:	08003b11 	.word	0x08003b11
 8003ac4:	08003d23 	.word	0x08003d23
 8003ac8:	08003d23 	.word	0x08003d23
 8003acc:	08003d23 	.word	0x08003d23
 8003ad0:	08003d23 	.word	0x08003d23
 8003ad4:	08003d23 	.word	0x08003d23
 8003ad8:	08003d23 	.word	0x08003d23
 8003adc:	08003d23 	.word	0x08003d23
 8003ae0:	08003b17 	.word	0x08003b17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ae4:	4b94      	ldr	r3, [pc, #592]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003af0:	4b91      	ldr	r3, [pc, #580]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	4a90      	ldr	r2, [pc, #576]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003b02:	e111      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b04:	4b8d      	ldr	r3, [pc, #564]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b06:	61bb      	str	r3, [r7, #24]
    break;
 8003b08:	e10e      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b0a:	4b8d      	ldr	r3, [pc, #564]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b0c:	61bb      	str	r3, [r7, #24]
    break;
 8003b0e:	e10b      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003b10:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b12:	61bb      	str	r3, [r7, #24]
    break;
 8003b14:	e108      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b16:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003b20:	4b85      	ldr	r3, [pc, #532]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b2c:	4b82      	ldr	r3, [pc, #520]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b36:	4b80      	ldr	r3, [pc, #512]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	08db      	lsrs	r3, r3, #3
 8003b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80e1 	beq.w	8003d1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	f000 8083 	beq.w	8003c68 <HAL_RCC_GetSysClockFreq+0x204>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	f200 80a1 	bhi.w	8003cac <HAL_RCC_GetSysClockFreq+0x248>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x114>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d056      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b76:	e099      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b78:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d02d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b84:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	4a6b      	ldr	r2, [pc, #428]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
 8003b94:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bae:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bc2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003bde:	e087      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c22:	e065      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c36:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c66:	e043      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7a:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003caa:	e021      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	0a5b      	lsrs	r3, r3, #9
 8003cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	ee07 3a90 	vmov	s15, r3
 8003d04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d14:	ee17 3a90 	vmov	r3, s15
 8003d18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003d1a:	e005      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
    break;
 8003d20:	e002      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d24:	61bb      	str	r3, [r7, #24]
    break;
 8003d26:	bf00      	nop
  }

  return sysclockfreq;
 8003d28:	69bb      	ldr	r3, [r7, #24]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	03d09000 	.word	0x03d09000
 8003d40:	003d0900 	.word	0x003d0900
 8003d44:	007a1200 	.word	0x007a1200
 8003d48:	46000000 	.word	0x46000000
 8003d4c:	4c742400 	.word	0x4c742400
 8003d50:	4a742400 	.word	0x4a742400
 8003d54:	4af42400 	.word	0x4af42400

08003d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d5e:	f7ff fe81 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490f      	ldr	r1, [pc, #60]	; (8003dac <HAL_RCC_GetHCLKFreq+0x54>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	4a09      	ldr	r2, [pc, #36]	; (8003dac <HAL_RCC_GetHCLKFreq+0x54>)
 8003d86:	5cd3      	ldrb	r3, [r2, r3]
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	58024400 	.word	0x58024400
 8003dac:	08009600 	.word	0x08009600
 8003db0:	24000004 	.word	0x24000004
 8003db4:	24000000 	.word	0x24000000

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003dbc:	f7ff ffcc 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4904      	ldr	r1, [pc, #16]	; (8003de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	08009600 	.word	0x08009600

08003de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003de8:	f7ff ffb6 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4904      	ldr	r1, [pc, #16]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	08009600 	.word	0x08009600

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d03f      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e34:	d02a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e3a:	d824      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e40:	d018      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e46:	d81e      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e50:	d007      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e52:	e018      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e54:	4ba3      	ldr	r3, [pc, #652]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4aa2      	ldr	r2, [pc, #648]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e60:	e015      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 f9d5 	bl	8005218 <RCCEx_PLL2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e72:	e00c      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3324      	adds	r3, #36	; 0x24
 8003e78:	2102      	movs	r1, #2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fa7e 	bl	800537c <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8a:	e000      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e94:	4b93      	ldr	r3, [pc, #588]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea0:	4990      	ldr	r1, [pc, #576]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ea6:	e001      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d03d      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d826      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003edd 	.word	0x08003edd
 8003ecc:	08003eeb 	.word	0x08003eeb
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003edc:	4b81      	ldr	r3, [pc, #516]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4a80      	ldr	r2, [pc, #512]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e015      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f991 	bl	8005218 <RCCEx_PLL2_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003efa:	e00c      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3324      	adds	r3, #36	; 0x24
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fa3a 	bl	800537c <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
      break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f1c:	4b71      	ldr	r3, [pc, #452]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	f023 0207 	bic.w	r2, r3, #7
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	496e      	ldr	r1, [pc, #440]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f2e:	e001      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d042      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f48:	d02b      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d825      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003f50:	2bc0      	cmp	r3, #192	; 0xc0
 8003f52:	d028      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f54:	2bc0      	cmp	r3, #192	; 0xc0
 8003f56:	d821      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	d016      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003f5c:	2b80      	cmp	r3, #128	; 0x80
 8003f5e:	d81d      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d007      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003f68:	e018      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6a:	4b5e      	ldr	r3, [pc, #376]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f76:	e017      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f94a 	bl	8005218 <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f88:	e00e      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3324      	adds	r3, #36	; 0x24
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f9f3 	bl	800537c <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f9a:	e005      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003fae:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	494a      	ldr	r1, [pc, #296]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	650b      	str	r3, [r1, #80]	; 0x50
 8003fc0:	e001      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d049      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fdc:	d030      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003fde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fe2:	d82a      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003fe4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003fe8:	d02c      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003fea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003fee:	d824      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff4:	d018      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffa:	d81e      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004004:	d007      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004006:	e018      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a35      	ldr	r2, [pc, #212]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004014:	e017      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f8fb 	bl	8005218 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004026:	e00e      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f001 f9a4 	bl	800537c <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004038:	e005      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	75fb      	strb	r3, [r7, #23]
      break;
 800403e:	e002      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004040:	bf00      	nop
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800405a:	4922      	ldr	r1, [pc, #136]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	658b      	str	r3, [r1, #88]	; 0x58
 8004060:	e001      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04b      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800407c:	d030      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800407e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004082:	d82a      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004084:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004088:	d02e      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800408a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800408e:	d824      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004094:	d018      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800409a:	d81e      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80040a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a4:	d007      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80040a6:	e018      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040b4:	e019      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f8ab 	bl	8005218 <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040c6:	e010      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3324      	adds	r3, #36	; 0x24
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f954 	bl	800537c <RCCEx_PLL3_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d8:	e007      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
      break;
 80040de:	e004      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80040e0:	bf00      	nop
 80040e2:	e002      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80040e4:	58024400 	.word	0x58024400
      break;
 80040e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040f0:	4b99      	ldr	r3, [pc, #612]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040fe:	4996      	ldr	r1, [pc, #600]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004100:	4313      	orrs	r3, r2
 8004102:	658b      	str	r3, [r1, #88]	; 0x58
 8004104:	e001      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d032      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d01c      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800411e:	2b30      	cmp	r3, #48	; 0x30
 8004120:	d817      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004122:	2b20      	cmp	r3, #32
 8004124:	d00c      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004126:	2b20      	cmp	r3, #32
 8004128:	d813      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d016      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800412e:	2b10      	cmp	r3, #16
 8004130:	d10f      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004132:	4b89      	ldr	r3, [pc, #548]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	4a88      	ldr	r2, [pc, #544]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800413e:	e00e      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f001 f866 	bl	8005218 <RCCEx_PLL2_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004150:	e005      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	75fb      	strb	r3, [r7, #23]
      break;
 8004156:	e002      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800415c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004164:	4b7c      	ldr	r3, [pc, #496]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	4979      	ldr	r1, [pc, #484]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004172:	4313      	orrs	r3, r2
 8004174:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004176:	e001      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d047      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004190:	d030      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004196:	d82a      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800419c:	d02c      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800419e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a2:	d824      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80041a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a8:	d018      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80041aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ae:	d81e      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d007      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80041ba:	e018      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041c8:	e017      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 f821 	bl	8005218 <RCCEx_PLL2_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041da:	e00e      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3324      	adds	r3, #36	; 0x24
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 f8ca 	bl	800537c <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041ec:	e005      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80041f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004200:	4b55      	ldr	r3, [pc, #340]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	4952      	ldr	r1, [pc, #328]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800420e:	4313      	orrs	r3, r2
 8004210:	650b      	str	r3, [r1, #80]	; 0x50
 8004212:	e001      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d049      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800422c:	d02e      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800422e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004232:	d828      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004234:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004238:	d02a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800423a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800423e:	d822      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004240:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004244:	d026      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004246:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800424a:	d81c      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800424c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004250:	d010      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004256:	d816      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01d      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d111      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f000 ffd5 	bl	8005218 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004272:	e012      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f87e 	bl	800537c <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004284:	e009      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
      break;
 800428a:	e006      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800428c:	bf00      	nop
 800428e:	e004      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004290:	bf00      	nop
 8004292:	e002      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ac:	492a      	ldr	r1, [pc, #168]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	650b      	str	r3, [r1, #80]	; 0x50
 80042b2:	e001      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d04d      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ce:	d02e      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80042d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042d4:	d828      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d02a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d822      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80042e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042e6:	d026      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80042e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042ec:	d81c      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80042ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f2:	d010      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80042f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f8:	d816      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01d      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80042fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004302:	d111      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f000 ff84 	bl	8005218 <RCCEx_PLL2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004314:	e012      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3324      	adds	r3, #36	; 0x24
 800431a:	2101      	movs	r1, #1
 800431c:	4618      	mov	r0, r3
 800431e:	f001 f82d 	bl	800537c <RCCEx_PLL3_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004326:	e009      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	75fb      	strb	r3, [r7, #23]
      break;
 800432c:	e006      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800432e:	bf00      	nop
 8004330:	e004      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800433a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004350:	4901      	ldr	r1, [pc, #4]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004352:	4313      	orrs	r3, r2
 8004354:	658b      	str	r3, [r1, #88]	; 0x58
 8004356:	e003      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02f      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004374:	d00e      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437a:	d814      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d015      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004384:	d10f      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004386:	4baf      	ldr	r3, [pc, #700]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	4aae      	ldr	r2, [pc, #696]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800438c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004392:	e00c      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f000 ff3c 	bl	8005218 <RCCEx_PLL2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
      break;
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80043ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043b4:	4ba3      	ldr	r3, [pc, #652]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	49a0      	ldr	r1, [pc, #640]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	650b      	str	r3, [r1, #80]	; 0x50
 80043c6:	e001      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d032      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d81b      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800441f 	.word	0x0800441f
 80043ec:	080043f9 	.word	0x080043f9
 80043f0:	08004407 	.word	0x08004407
 80043f4:	0800441f 	.word	0x0800441f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4b92      	ldr	r3, [pc, #584]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4a91      	ldr	r2, [pc, #580]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004404:	e00c      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3304      	adds	r3, #4
 800440a:	2102      	movs	r1, #2
 800440c:	4618      	mov	r0, r3
 800440e:	f000 ff03 	bl	8005218 <RCCEx_PLL2_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
      break;
 800441c:	e000      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800441e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004426:	4b87      	ldr	r3, [pc, #540]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4984      	ldr	r1, [pc, #528]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004434:	4313      	orrs	r3, r2
 8004436:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004438:	e001      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8086 	beq.w	8004558 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800444c:	4b7e      	ldr	r3, [pc, #504]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a7d      	ldr	r2, [pc, #500]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004458:	f7fe f856 	bl	8002508 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800445e:	e009      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004460:	f7fe f852 	bl	8002508 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d902      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	75fb      	strb	r3, [r7, #23]
        break;
 8004472:	e005      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004474:	4b74      	ldr	r3, [pc, #464]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ef      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d166      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004486:	4b6f      	ldr	r3, [pc, #444]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004488:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004490:	4053      	eors	r3, r2
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d013      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800449a:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044a4:	4b67      	ldr	r3, [pc, #412]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a66      	ldr	r2, [pc, #408]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044b0:	4b64      	ldr	r3, [pc, #400]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a63      	ldr	r2, [pc, #396]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80044bc:	4a61      	ldr	r2, [pc, #388]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044cc:	d115      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe f81b 	bl	8002508 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044d4:	e00b      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fe f817 	bl	8002508 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d902      	bls.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	75fb      	strb	r3, [r7, #23]
            break;
 80044ec:	e005      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ee:	4b55      	ldr	r3, [pc, #340]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0ed      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d126      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450e:	d10d      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004510:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800451e:	0919      	lsrs	r1, r3, #4
 8004520:	4b4a      	ldr	r3, [pc, #296]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004522:	400b      	ands	r3, r1
 8004524:	4947      	ldr	r1, [pc, #284]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]
 800452a:	e005      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800452c:	4b45      	ldr	r3, [pc, #276]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	4a44      	ldr	r2, [pc, #272]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004532:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004536:	6113      	str	r3, [r2, #16]
 8004538:	4b42      	ldr	r3, [pc, #264]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800453a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004546:	493f      	ldr	r1, [pc, #252]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004548:	4313      	orrs	r3, r2
 800454a:	670b      	str	r3, [r1, #112]	; 0x70
 800454c:	e004      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	75bb      	strb	r3, [r7, #22]
 8004552:	e001      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8085 	beq.w	8004670 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800456a:	2b28      	cmp	r3, #40	; 0x28
 800456c:	d866      	bhi.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	08004651 	.word	0x08004651
 8004578:	0800463d 	.word	0x0800463d
 800457c:	0800463d 	.word	0x0800463d
 8004580:	0800463d 	.word	0x0800463d
 8004584:	0800463d 	.word	0x0800463d
 8004588:	0800463d 	.word	0x0800463d
 800458c:	0800463d 	.word	0x0800463d
 8004590:	0800463d 	.word	0x0800463d
 8004594:	08004619 	.word	0x08004619
 8004598:	0800463d 	.word	0x0800463d
 800459c:	0800463d 	.word	0x0800463d
 80045a0:	0800463d 	.word	0x0800463d
 80045a4:	0800463d 	.word	0x0800463d
 80045a8:	0800463d 	.word	0x0800463d
 80045ac:	0800463d 	.word	0x0800463d
 80045b0:	0800463d 	.word	0x0800463d
 80045b4:	0800462b 	.word	0x0800462b
 80045b8:	0800463d 	.word	0x0800463d
 80045bc:	0800463d 	.word	0x0800463d
 80045c0:	0800463d 	.word	0x0800463d
 80045c4:	0800463d 	.word	0x0800463d
 80045c8:	0800463d 	.word	0x0800463d
 80045cc:	0800463d 	.word	0x0800463d
 80045d0:	0800463d 	.word	0x0800463d
 80045d4:	08004651 	.word	0x08004651
 80045d8:	0800463d 	.word	0x0800463d
 80045dc:	0800463d 	.word	0x0800463d
 80045e0:	0800463d 	.word	0x0800463d
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	0800463d 	.word	0x0800463d
 80045f4:	08004651 	.word	0x08004651
 80045f8:	0800463d 	.word	0x0800463d
 80045fc:	0800463d 	.word	0x0800463d
 8004600:	0800463d 	.word	0x0800463d
 8004604:	0800463d 	.word	0x0800463d
 8004608:	0800463d 	.word	0x0800463d
 800460c:	0800463d 	.word	0x0800463d
 8004610:	0800463d 	.word	0x0800463d
 8004614:	08004651 	.word	0x08004651
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	2101      	movs	r1, #1
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fdfa 	bl	8005218 <RCCEx_PLL2_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004628:	e013      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3324      	adds	r3, #36	; 0x24
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fea3 	bl	800537c <RCCEx_PLL3_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800463a:	e00a      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
      break;
 8004640:	e007      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004642:	bf00      	nop
 8004644:	58024400 	.word	0x58024400
 8004648:	58024800 	.word	0x58024800
 800464c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004658:	4b96      	ldr	r3, [pc, #600]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004664:	4993      	ldr	r1, [pc, #588]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	654b      	str	r3, [r1, #84]	; 0x54
 800466a:	e001      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d038      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004680:	2b05      	cmp	r3, #5
 8004682:	d821      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046cf 	.word	0x080046cf
 8004690:	080046a5 	.word	0x080046a5
 8004694:	080046b7 	.word	0x080046b7
 8004698:	080046cf 	.word	0x080046cf
 800469c:	080046cf 	.word	0x080046cf
 80046a0:	080046cf 	.word	0x080046cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fdb4 	bl	8005218 <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046b4:	e00c      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3324      	adds	r3, #36	; 0x24
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fe5d 	bl	800537c <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046c6:	e003      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80046ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046d6:	4b77      	ldr	r3, [pc, #476]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f023 0207 	bic.w	r2, r3, #7
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e2:	4974      	ldr	r1, [pc, #464]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	654b      	str	r3, [r1, #84]	; 0x54
 80046e8:	e001      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d03a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004700:	2b05      	cmp	r3, #5
 8004702:	d821      	bhi.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	0800474f 	.word	0x0800474f
 8004710:	08004725 	.word	0x08004725
 8004714:	08004737 	.word	0x08004737
 8004718:	0800474f 	.word	0x0800474f
 800471c:	0800474f 	.word	0x0800474f
 8004720:	0800474f 	.word	0x0800474f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fd74 	bl	8005218 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004734:	e00c      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3324      	adds	r3, #36	; 0x24
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fe1d 	bl	800537c <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004746:	e003      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
      break;
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004756:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f023 0207 	bic.w	r2, r3, #7
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	4953      	ldr	r1, [pc, #332]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	658b      	str	r3, [r1, #88]	; 0x58
 800476a:	e001      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d04b      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004786:	d02e      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800478c:	d828      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d02a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d822      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800479a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800479e:	d026      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80047a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047a4:	d81c      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80047a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047aa:	d010      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b0:	d816      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01d      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80047b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ba:	d111      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fd28 	bl	8005218 <RCCEx_PLL2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80047cc:	e012      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3324      	adds	r3, #36	; 0x24
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fdd1 	bl	800537c <RCCEx_PLL3_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80047de:	e009      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
      break;
 80047e4:	e006      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80047e6:	bf00      	nop
 80047e8:	e004      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80047ea:	bf00      	nop
 80047ec:	e002      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80047f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004808:	492a      	ldr	r1, [pc, #168]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	654b      	str	r3, [r1, #84]	; 0x54
 800480e:	e001      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d04d      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004826:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800482a:	d02e      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800482c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004830:	d828      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	d02a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d822      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800483e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004842:	d026      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004848:	d81c      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800484a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484e:	d010      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004854:	d816      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01d      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	d111      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fcd6 	bl	8005218 <RCCEx_PLL2_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004870:	e012      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3324      	adds	r3, #36	; 0x24
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fd7f 	bl	800537c <RCCEx_PLL3_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004882:	e009      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	75fb      	strb	r3, [r7, #23]
      break;
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800488a:	bf00      	nop
 800488c:	e004      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10c      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ac:	4901      	ldr	r1, [pc, #4]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	658b      	str	r3, [r1, #88]	; 0x58
 80048b2:	e003      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80048b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d04b      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048d2:	d02e      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80048d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048d8:	d828      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d02a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80048e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e4:	d822      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80048e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048ea:	d026      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80048ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048f0:	d81c      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80048f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f6:	d010      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80048f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048fc:	d816      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01d      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004906:	d111      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fc82 	bl	8005218 <RCCEx_PLL2_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004918:	e012      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3324      	adds	r3, #36	; 0x24
 800491e:	2102      	movs	r1, #2
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fd2b 	bl	800537c <RCCEx_PLL3_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800492a:	e009      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
      break;
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004932:	bf00      	nop
 8004934:	e004      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004936:	bf00      	nop
 8004938:	e002      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800493e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004946:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004954:	4999      	ldr	r1, [pc, #612]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004956:	4313      	orrs	r3, r2
 8004958:	658b      	str	r3, [r1, #88]	; 0x58
 800495a:	e001      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004976:	d10a      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3324      	adds	r3, #36	; 0x24
 800497c:	2102      	movs	r1, #2
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fcfc 	bl	800537c <RCCEx_PLL3_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800498e:	4b8b      	ldr	r3, [pc, #556]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800499c:	4987      	ldr	r1, [pc, #540]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d10a      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3324      	adds	r3, #36	; 0x24
 80049be:	2102      	movs	r1, #2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fcdb 	bl	800537c <RCCEx_PLL3_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049d0:	4b7a      	ldr	r3, [pc, #488]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049de:	4977      	ldr	r1, [pc, #476]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d034      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049fa:	d01d      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80049fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a00:	d817      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0a:	d009      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004a0c:	e011      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3304      	adds	r3, #4
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fbff 	bl	8005218 <RCCEx_PLL2_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a1e:	e00c      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3324      	adds	r3, #36	; 0x24
 8004a24:	2102      	movs	r1, #2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fca8 	bl	800537c <RCCEx_PLL3_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
      break;
 8004a36:	e000      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a40:	4b5e      	ldr	r3, [pc, #376]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a4e:	495b      	ldr	r1, [pc, #364]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	658b      	str	r3, [r1, #88]	; 0x58
 8004a54:	e001      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d033      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a70:	d01c      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004a72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a76:	d816      	bhi.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a82:	d007      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004a84:	e00f      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a86:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a4c      	ldr	r2, [pc, #304]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a92:	e00c      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fc6e 	bl	800537c <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004aa4:	e003      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ab4:	4b41      	ldr	r3, [pc, #260]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac2:	493e      	ldr	r1, [pc, #248]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	654b      	str	r3, [r1, #84]	; 0x54
 8004ac8:	e001      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
 8004acc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d029      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae6:	d007      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004ae8:	e00f      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aea:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	4a33      	ldr	r2, [pc, #204]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004af6:	e00b      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2102      	movs	r1, #2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fb8a 	bl	8005218 <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b08:	e002      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b16:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	4926      	ldr	r1, [pc, #152]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b28:	e001      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3324      	adds	r3, #36	; 0x24
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fc1b 	bl	800537c <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d033      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b64:	d017      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6a:	d811      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b70:	d013      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b76:	d80b      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d010      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b80:	d106      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b82:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004b8e:	e007      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	e004      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004b96:	bf00      	nop
 8004b98:	e002      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb2:	4902      	ldr	r1, [pc, #8]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	654b      	str	r3, [r1, #84]	; 0x54
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004bba:	bf00      	nop
 8004bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	492e      	ldr	r1, [pc, #184]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bee:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bfc:	4926      	ldr	r1, [pc, #152]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c1a:	491f      	ldr	r1, [pc, #124]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c36:	6113      	str	r3, [r2, #16]
 8004c38:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c42:	4915      	ldr	r1, [pc, #84]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da08      	bge.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	490e      	ldr	r1, [pc, #56]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	4906      	ldr	r1, [pc, #24]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004c82:	7dbb      	ldrb	r3, [r7, #22]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400

08004c9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ca0:	f7ff f85a 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	08009600 	.word	0x08009600

08004cc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cd0:	4ba1      	ldr	r3, [pc, #644]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004cda:	4b9f      	ldr	r3, [pc, #636]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	0b1b      	lsrs	r3, r3, #12
 8004ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ce6:	4b9c      	ldr	r3, [pc, #624]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004cf2:	4b99      	ldr	r3, [pc, #612]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	08db      	lsrs	r3, r3, #3
 8004cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8111 	beq.w	8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f000 8083 	beq.w	8004e24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	f200 80a1 	bhi.w	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d056      	beq.n	8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d32:	e099      	b.n	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d34:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d02d      	beq.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d40:	4b85      	ldr	r3, [pc, #532]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	4a84      	ldr	r2, [pc, #528]	; (8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b7b      	ldr	r3, [pc, #492]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004d9a:	e087      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dae:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dde:	e065      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df2:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e22:	e043      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	4b48      	ldr	r3, [pc, #288]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e66:	e021      	b.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	0a5b      	lsrs	r3, r3, #9
 8004eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed2:	ee17 2a90 	vmov	r2, s15
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004eda:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f00:	ee17 2a90 	vmov	r2, s15
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	0e1b      	lsrs	r3, r3, #24
 8004f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2e:	ee17 2a90 	vmov	r2, s15
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f36:	e008      	b.n	8004f4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
}
 8004f4a:	bf00      	nop
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	03d09000 	.word	0x03d09000
 8004f60:	46000000 	.word	0x46000000
 8004f64:	4c742400 	.word	0x4c742400
 8004f68:	4a742400 	.word	0x4a742400
 8004f6c:	4af42400 	.word	0x4af42400

08004f70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f78:	4ba1      	ldr	r3, [pc, #644]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004f82:	4b9f      	ldr	r3, [pc, #636]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	0d1b      	lsrs	r3, r3, #20
 8004f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f8e:	4b9c      	ldr	r3, [pc, #624]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004f9a:	4b99      	ldr	r3, [pc, #612]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	08db      	lsrs	r3, r3, #3
 8004fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8111 	beq.w	80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	f000 8083 	beq.w	80050cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	f200 80a1 	bhi.w	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d056      	beq.n	8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004fda:	e099      	b.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fdc:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02d      	beq.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fe8:	4b85      	ldr	r3, [pc, #532]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	4a84      	ldr	r2, [pc, #528]	; (8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b7b      	ldr	r3, [pc, #492]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005042:	e087      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800520c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a03 	vldr	s12, [r7, #12]
 800506a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005086:	e065      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b59      	ldr	r3, [pc, #356]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ca:	e043      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b48      	ldr	r3, [pc, #288]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800510e:	e021      	b.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b37      	ldr	r3, [pc, #220]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a03 	vldr	s12, [r7, #12]
 8005136:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005152:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005154:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	0a5b      	lsrs	r3, r3, #9
 800515a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800516a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800516e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517a:	ee17 2a90 	vmov	r2, s15
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005182:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800519c:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a8:	ee17 2a90 	vmov	r2, s15
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80051b0:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d6:	ee17 2a90 	vmov	r2, s15
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051de:	e008      	b.n	80051f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	609a      	str	r2, [r3, #8]
}
 80051f2:	bf00      	nop
 80051f4:	3724      	adds	r7, #36	; 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	03d09000 	.word	0x03d09000
 8005208:	46000000 	.word	0x46000000
 800520c:	4c742400 	.word	0x4c742400
 8005210:	4a742400 	.word	0x4a742400
 8005214:	4af42400 	.word	0x4af42400

08005218 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005226:	4b53      	ldr	r3, [pc, #332]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d101      	bne.n	8005236 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e099      	b.n	800536a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005236:	4b4f      	ldr	r3, [pc, #316]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4e      	ldr	r2, [pc, #312]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800523c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005242:	f7fd f961 	bl	8002508 <HAL_GetTick>
 8005246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005248:	e008      	b.n	800525c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800524a:	f7fd f95d 	bl	8002508 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e086      	b.n	800536a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800525c:	4b45      	ldr	r3, [pc, #276]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005268:	4b42      	ldr	r3, [pc, #264]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	031b      	lsls	r3, r3, #12
 8005276:	493f      	ldr	r1, [pc, #252]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	628b      	str	r3, [r1, #40]	; 0x28
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	3b01      	subs	r3, #1
 8005282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	3b01      	subs	r3, #1
 800528c:	025b      	lsls	r3, r3, #9
 800528e:	b29b      	uxth	r3, r3
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	3b01      	subs	r3, #1
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052ac:	4931      	ldr	r1, [pc, #196]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052b2:	4b30      	ldr	r3, [pc, #192]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	492d      	ldr	r1, [pc, #180]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	f023 0220 	bic.w	r2, r3, #32
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	4928      	ldr	r1, [pc, #160]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80052d6:	4b27      	ldr	r3, [pc, #156]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	4a26      	ldr	r2, [pc, #152]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052dc:	f023 0310 	bic.w	r3, r3, #16
 80052e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e6:	4b24      	ldr	r3, [pc, #144]	; (8005378 <RCCEx_PLL2_Config+0x160>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	69d2      	ldr	r2, [r2, #28]
 80052ee:	00d2      	lsls	r2, r2, #3
 80052f0:	4920      	ldr	r1, [pc, #128]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 80052fc:	f043 0310 	orr.w	r3, r3, #16
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800530e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005314:	e00f      	b.n	8005336 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d106      	bne.n	800532a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800531c:	4b15      	ldr	r3, [pc, #84]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	4a14      	ldr	r2, [pc, #80]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005328:	e005      	b.n	8005336 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a0e      	ldr	r2, [pc, #56]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800533c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005342:	f7fd f8e1 	bl	8002508 <HAL_GetTick>
 8005346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005348:	e008      	b.n	800535c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800534a:	f7fd f8dd 	bl	8002508 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <RCCEx_PLL2_Config+0x15c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	58024400 	.word	0x58024400
 8005378:	ffff0007 	.word	0xffff0007

0800537c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800538a:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d101      	bne.n	800539a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e099      	b.n	80054ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800539a:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a6:	f7fd f8af 	bl	8002508 <HAL_GetTick>
 80053aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053ac:	e008      	b.n	80053c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053ae:	f7fd f8ab 	bl	8002508 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e086      	b.n	80054ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053c0:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f0      	bne.n	80053ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053cc:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	051b      	lsls	r3, r3, #20
 80053da:	493f      	ldr	r1, [pc, #252]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	628b      	str	r3, [r1, #40]	; 0x28
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	025b      	lsls	r3, r3, #9
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	3b01      	subs	r3, #1
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005410:	4931      	ldr	r1, [pc, #196]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005412:	4313      	orrs	r3, r2
 8005414:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	492d      	ldr	r1, [pc, #180]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005424:	4313      	orrs	r3, r2
 8005426:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005428:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4928      	ldr	r1, [pc, #160]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800543a:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	4a26      	ldr	r2, [pc, #152]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <RCCEx_PLL3_Config+0x160>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	69d2      	ldr	r2, [r2, #28]
 8005452:	00d2      	lsls	r2, r2, #3
 8005454:	4920      	ldr	r1, [pc, #128]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005456:	4313      	orrs	r3, r2
 8005458:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800545a:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005478:	e00f      	b.n	800549a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d106      	bne.n	800548e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005480:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800548a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800548c:	e005      	b.n	800549a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 8005494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800549a:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80054a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a6:	f7fd f82f 	bl	8002508 <HAL_GetTick>
 80054aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054ac:	e008      	b.n	80054c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054ae:	f7fd f82b 	bl	8002508 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e006      	b.n	80054ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
 80054dc:	ffff0007 	.word	0xffff0007

080054e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0f1      	b.n	80056d6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a78      	ldr	r2, [pc, #480]	; (80056e0 <HAL_SPI_Init+0x200>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <HAL_SPI_Init+0x42>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a77      	ldr	r2, [pc, #476]	; (80056e4 <HAL_SPI_Init+0x204>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00a      	beq.n	8005522 <HAL_SPI_Init+0x42>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a75      	ldr	r2, [pc, #468]	; (80056e8 <HAL_SPI_Init+0x208>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d005      	beq.n	8005522 <HAL_SPI_Init+0x42>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d901      	bls.n	8005522 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0d9      	b.n	80056d6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 ff66 	bl	80063f4 <SPI_GetPacketSize>
 8005528:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a6c      	ldr	r2, [pc, #432]	; (80056e0 <HAL_SPI_Init+0x200>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00c      	beq.n	800554e <HAL_SPI_Init+0x6e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a6a      	ldr	r2, [pc, #424]	; (80056e4 <HAL_SPI_Init+0x204>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <HAL_SPI_Init+0x6e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a69      	ldr	r2, [pc, #420]	; (80056e8 <HAL_SPI_Init+0x208>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d002      	beq.n	800554e <HAL_SPI_Init+0x6e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b08      	cmp	r3, #8
 800554c:	d811      	bhi.n	8005572 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005552:	4a63      	ldr	r2, [pc, #396]	; (80056e0 <HAL_SPI_Init+0x200>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a61      	ldr	r2, [pc, #388]	; (80056e4 <HAL_SPI_Init+0x204>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_SPI_Init+0x8c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a60      	ldr	r2, [pc, #384]	; (80056e8 <HAL_SPI_Init+0x208>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d104      	bne.n	8005576 <HAL_SPI_Init+0x96>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b10      	cmp	r3, #16
 8005570:	d901      	bls.n	8005576 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0af      	b.n	80056d6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc fcea 	bl	8001f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80055b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055bc:	d119      	bne.n	80055f2 <HAL_SPI_Init+0x112>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c6:	d103      	bne.n	80055d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10c      	bne.n	80055f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80055dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e0:	d107      	bne.n	80055f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005604:	ea42 0103 	orr.w	r1, r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005652:	ea42 0103 	orr.w	r1, r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d113      	bne.n	8005692 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800567c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005690:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40013000 	.word	0x40013000
 80056e4:	40003800 	.word	0x40003800
 80056e8:	40003c00 	.word	0x40003c00

080056ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	; 0x28
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3320      	adds	r3, #32
 8005702:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_SPI_Transmit+0x2a>
 8005712:	2302      	movs	r3, #2
 8005714:	e1d7      	b.n	8005ac6 <HAL_SPI_Transmit+0x3da>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800571e:	f7fc fef3 	bl	8002508 <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	d007      	beq.n	8005740 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800573c:	7efb      	ldrb	r3, [r7, #27]
 800573e:	e1c2      	b.n	8005ac6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_SPI_Transmit+0x60>
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005758:	7efb      	ldrb	r3, [r7, #27]
 800575a:	e1b4      	b.n	8005ac6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2203      	movs	r2, #3
 8005760:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80057ac:	d107      	bne.n	80057be <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	4b96      	ldr	r3, [pc, #600]	; (8005a20 <HAL_SPI_Transmit+0x334>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	88f9      	ldrh	r1, [r7, #6]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	430b      	orrs	r3, r1
 80057d0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ea:	d107      	bne.n	80057fc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b0f      	cmp	r3, #15
 8005802:	d947      	bls.n	8005894 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005804:	e03f      	b.n	8005886 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d114      	bne.n	800583e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800583c:	e023      	b.n	8005886 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583e:	f7fc fe63 	bl	8002508 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d803      	bhi.n	8005856 <HAL_SPI_Transmit+0x16a>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d102      	bne.n	800585c <HAL_SPI_Transmit+0x170>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d114      	bne.n	8005886 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fcfb 	bl	8006258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e11f      	b.n	8005ac6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1b9      	bne.n	8005806 <HAL_SPI_Transmit+0x11a>
 8005892:	e0f2      	b.n	8005a7a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2b07      	cmp	r3, #7
 800589a:	f240 80e7 	bls.w	8005a6c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800589e:	e05d      	b.n	800595c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d132      	bne.n	8005914 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d918      	bls.n	80058ec <HAL_SPI_Transmit+0x200>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d014      	beq.n	80058ec <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b02      	subs	r3, #2
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058ea:	e037      	b.n	800595c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	1c9a      	adds	r2, r3, #2
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005912:	e023      	b.n	800595c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005914:	f7fc fdf8 	bl	8002508 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d803      	bhi.n	800592c <HAL_SPI_Transmit+0x240>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d102      	bne.n	8005932 <HAL_SPI_Transmit+0x246>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d114      	bne.n	800595c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fc90 	bl	8006258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e0b4      	b.n	8005ac6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d19b      	bne.n	80058a0 <HAL_SPI_Transmit+0x1b4>
 8005968:	e087      	b.n	8005a7a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b02      	cmp	r3, #2
 8005976:	d155      	bne.n	8005a24 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b03      	cmp	r3, #3
 8005982:	d918      	bls.n	80059b6 <HAL_SPI_Transmit+0x2ca>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d914      	bls.n	80059b6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599c:	1d1a      	adds	r2, r3, #4
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b04      	subs	r3, #4
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059b4:	e05a      	b.n	8005a6c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d917      	bls.n	80059f2 <HAL_SPI_Transmit+0x306>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d013      	beq.n	80059f2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	1c9a      	adds	r2, r3, #2
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b02      	subs	r3, #2
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059f0:	e03c      	b.n	8005a6c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3320      	adds	r3, #32
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a1c:	e026      	b.n	8005a6c <HAL_SPI_Transmit+0x380>
 8005a1e:	bf00      	nop
 8005a20:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a24:	f7fc fd70 	bl	8002508 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d803      	bhi.n	8005a3c <HAL_SPI_Transmit+0x350>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d102      	bne.n	8005a42 <HAL_SPI_Transmit+0x356>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d114      	bne.n	8005a6c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fc08 	bl	8006258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e02c      	b.n	8005ac6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f47f af78 	bne.w	800596a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2108      	movs	r1, #8
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fc87 	bl	8006398 <SPI_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fbd9 	bl	8006258 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005ac4:	7efb      	ldrb	r3, [r7, #27]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop

08005ad0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3330      	adds	r3, #48	; 0x30
 8005aea:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af4:	d112      	bne.n	8005b1c <HAL_SPI_Receive+0x4c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10e      	bne.n	8005b1c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2204      	movs	r2, #4
 8005b02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f978 	bl	8005e08 <HAL_SPI_TransmitReceive>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	e16f      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_Receive+0x5a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e168      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b32:	f7fc fce9 	bl	8002508 <HAL_GetTick>
 8005b36:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d007      	beq.n	8005b54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
 8005b46:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b50:	7ffb      	ldrb	r3, [r7, #31]
 8005b52:	e153      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_SPI_Receive+0x90>
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d107      	bne.n	8005b70 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
 8005b6e:	e145      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2204      	movs	r2, #4
 8005b74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005bc0:	d107      	bne.n	8005bd2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4b8a      	ldr	r3, [pc, #552]	; (8005e04 <HAL_SPI_Receive+0x334>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	88f9      	ldrh	r1, [r7, #6]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	430b      	orrs	r3, r1
 8005be4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bfe:	d107      	bne.n	8005c10 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b0f      	cmp	r3, #15
 8005c16:	d948      	bls.n	8005caa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005c18:	e040      	b.n	8005c9c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695a      	ldr	r2, [r3, #20]
 8005c20:	f248 0308 	movw	r3, #32776	; 0x8008
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c34:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c52:	e023      	b.n	8005c9c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c54:	f7fc fc58 	bl	8002508 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d803      	bhi.n	8005c6c <HAL_SPI_Receive+0x19c>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6a:	d102      	bne.n	8005c72 <HAL_SPI_Receive+0x1a2>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d114      	bne.n	8005c9c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 faf0 	bl	8006258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0af      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1b8      	bne.n	8005c1a <HAL_SPI_Receive+0x14a>
 8005ca8:	e095      	b.n	8005dd6 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b07      	cmp	r3, #7
 8005cb0:	f240 808b 	bls.w	8005dca <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005cb4:	e03f      	b.n	8005d36 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d114      	bne.n	8005cee <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	8812      	ldrh	r2, [r2, #0]
 8005ccc:	b292      	uxth	r2, r2
 8005cce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005cec:	e023      	b.n	8005d36 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cee:	f7fc fc0b 	bl	8002508 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d803      	bhi.n	8005d06 <HAL_SPI_Receive+0x236>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d102      	bne.n	8005d0c <HAL_SPI_Receive+0x23c>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d114      	bne.n	8005d36 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 faa3 	bl	8006258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e062      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1b9      	bne.n	8005cb6 <HAL_SPI_Receive+0x1e6>
 8005d42:	e048      	b.n	8005dd6 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d117      	bne.n	8005d82 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005d80:	e023      	b.n	8005dca <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d82:	f7fc fbc1 	bl	8002508 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d803      	bhi.n	8005d9a <HAL_SPI_Receive+0x2ca>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d102      	bne.n	8005da0 <HAL_SPI_Receive+0x2d0>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d114      	bne.n	8005dca <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fa59 	bl	8006258 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e018      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1b6      	bne.n	8005d44 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fa3e 	bl	8006258 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	ffff0000 	.word	0xffff0000

08005e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08e      	sub	sp, #56	; 0x38
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3320      	adds	r3, #32
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3330      	adds	r3, #48	; 0x30
 8005e2a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x32>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e209      	b.n	800624e <HAL_SPI_TransmitReceive+0x446>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e42:	f7fc fb61 	bl	8002508 <HAL_GetTick>
 8005e46:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005e48:	887b      	ldrh	r3, [r7, #2]
 8005e4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005e4c:	887b      	ldrh	r3, [r7, #2]
 8005e4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e56:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e5e:	7efb      	ldrb	r3, [r7, #27]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d014      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0x86>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6a:	d106      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005e74:	7efb      	ldrb	r3, [r7, #27]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d009      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005e88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e8c:	e1df      	b.n	800624e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x98>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x98>
 8005e9a:	887b      	ldrh	r3, [r7, #2]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005eb2:	e1cc      	b.n	800624e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d003      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2205      	movs	r2, #5
 8005ec4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	887a      	ldrh	r2, [r7, #2]
 8005ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	887a      	ldrh	r2, [r7, #2]
 8005ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4b82      	ldr	r3, [pc, #520]	; (8006118 <HAL_SPI_TransmitReceive+0x310>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	8879      	ldrh	r1, [r7, #2]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f34:	d107      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b0f      	cmp	r3, #15
 8005f4c:	d970      	bls.n	8006030 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f4e:	e068      	b.n	8006022 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d11a      	bne.n	8005f94 <HAL_SPI_TransmitReceive+0x18c>
 8005f5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d017      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f74:	1d1a      	adds	r2, r3, #4
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f92:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	f248 0308 	movw	r3, #32776	; 0x8008
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01a      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x1d2>
 8005fa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d017      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fb4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fda:	f7fc fa95 	bl	8002508 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d803      	bhi.n	8005ff2 <HAL_SPI_TransmitReceive+0x1ea>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x1f0>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d114      	bne.n	8006022 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f92d 	bl	8006258 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e115      	b.n	800624e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006024:	2b00      	cmp	r3, #0
 8006026:	d193      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x148>
 8006028:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d190      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x148>
 800602e:	e0e7      	b.n	8006200 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b07      	cmp	r3, #7
 8006036:	f240 80dd 	bls.w	80061f4 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800603a:	e066      	b.n	800610a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d119      	bne.n	800607e <HAL_SPI_TransmitReceive+0x276>
 800604a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800604c:	2b00      	cmp	r3, #0
 800604e:	d016      	beq.n	800607e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	881a      	ldrh	r2, [r3, #0]
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605e:	1c9a      	adds	r2, r3, #2
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800607c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b01      	cmp	r3, #1
 800608a:	d11a      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x2ba>
 800608c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d017      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	8812      	ldrh	r2, [r2, #0]
 800609a:	b292      	uxth	r2, r2
 800609c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a2:	1c9a      	adds	r2, r3, #2
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c2:	f7fc fa21 	bl	8002508 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d803      	bhi.n	80060da <HAL_SPI_TransmitReceive+0x2d2>
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d102      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x2d8>
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d114      	bne.n	800610a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f8b9 	bl	8006258 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e0a1      	b.n	800624e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800610a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800610c:	2b00      	cmp	r3, #0
 800610e:	d195      	bne.n	800603c <HAL_SPI_TransmitReceive+0x234>
 8006110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d192      	bne.n	800603c <HAL_SPI_TransmitReceive+0x234>
 8006116:	e073      	b.n	8006200 <HAL_SPI_TransmitReceive+0x3f8>
 8006118:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d11b      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x35a>
 800612a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800612c:	2b00      	cmp	r3, #0
 800612e:	d018      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3320      	adds	r3, #32
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006160:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	d11d      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x3a4>
 8006170:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d01a      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80061aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ac:	f7fc f9ac 	bl	8002508 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d803      	bhi.n	80061c4 <HAL_SPI_TransmitReceive+0x3bc>
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d102      	bne.n	80061ca <HAL_SPI_TransmitReceive+0x3c2>
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d114      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f844 	bl	8006258 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e02c      	b.n	800624e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80061f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d190      	bne.n	800611c <HAL_SPI_TransmitReceive+0x314>
 80061fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d18d      	bne.n	800611c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2200      	movs	r2, #0
 8006208:	2108      	movs	r1, #8
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f8c4 	bl	8006398 <SPI_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621c:	f043 0220 	orr.w	r2, r3, #32
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f816 	bl	8006258 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e001      	b.n	800624e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800624a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800624e:	4618      	mov	r0, r3
 8006250:	3730      	adds	r7, #48	; 0x30
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop

08006258 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0208 	orr.w	r2, r2, #8
 8006276:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0210 	orr.w	r2, r2, #16
 8006286:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6919      	ldr	r1, [r3, #16]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b3c      	ldr	r3, [pc, #240]	; (8006394 <SPI_CloseTransfer+0x13c>)
 80062a4:	400b      	ands	r3, r1
 80062a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d014      	beq.n	80062ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00f      	beq.n	80062ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0220 	orr.w	r2, r2, #32
 80062ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d014      	beq.n	8006324 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00f      	beq.n	8006324 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800630a:	f043 0204 	orr.w	r2, r3, #4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006322:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006334:	f043 0201 	orr.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635e:	f043 0208 	orr.w	r2, r3, #8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006376:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	fffffc90 	.word	0xfffffc90

08006398 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	4613      	mov	r3, r2
 80063a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063a8:	e010      	b.n	80063cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063aa:	f7fc f8ad 	bl	8002508 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d803      	bhi.n	80063c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d102      	bne.n	80063c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e00f      	b.n	80063ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d0df      	beq.n	80063aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	3307      	adds	r3, #7
 8006412:	08db      	lsrs	r3, r3, #3
 8006414:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	fb02 f303 	mul.w	r3, r2, r3
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e042      	b.n	80064c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fb fdee 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8c3 	bl	80065f8 <UART_SetConfig>
 8006472:	4603      	mov	r3, r0
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e022      	b.n	80064c2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fe1f 	bl	80070c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006498:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0201 	orr.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fea6 	bl	800720c <UART_CheckIdleState>
 80064c0:	4603      	mov	r3, r0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b08a      	sub	sp, #40	; 0x28
 80064ce:	af02      	add	r7, sp, #8
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	f040 8083 	bne.w	80065ec <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_Transmit+0x28>
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e07b      	b.n	80065ee <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Transmit+0x3a>
 8006500:	2302      	movs	r3, #2
 8006502:	e074      	b.n	80065ee <HAL_UART_Transmit+0x124>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2221      	movs	r2, #33	; 0x21
 8006518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800651c:	f7fb fff4 	bl	8002508 <HAL_GetTick>
 8006520:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653a:	d108      	bne.n	800654e <HAL_UART_Transmit+0x84>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	e003      	b.n	8006556 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800655e:	e02c      	b.n	80065ba <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2200      	movs	r2, #0
 8006568:	2180      	movs	r1, #128	; 0x80
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fe99 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e039      	b.n	80065ee <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10b      	bne.n	8006598 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800658e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	3302      	adds	r3, #2
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e007      	b.n	80065a8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	3301      	adds	r3, #1
 80065a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1cc      	bne.n	8006560 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	2140      	movs	r1, #64	; 0x40
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fe66 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e006      	b.n	80065ee <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065fc:	b092      	sub	sp, #72	; 0x48
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	431a      	orrs	r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	431a      	orrs	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	4313      	orrs	r3, r2
 800661e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4bbe      	ldr	r3, [pc, #760]	; (8006920 <UART_SetConfig+0x328>)
 8006628:	4013      	ands	r3, r2
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006630:	430b      	orrs	r3, r1
 8006632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4ab3      	ldr	r2, [pc, #716]	; (8006924 <UART_SetConfig+0x32c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006660:	4313      	orrs	r3, r2
 8006662:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	4baf      	ldr	r3, [pc, #700]	; (8006928 <UART_SetConfig+0x330>)
 800666c:	4013      	ands	r3, r2
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006674:	430b      	orrs	r3, r1
 8006676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	f023 010f 	bic.w	r1, r3, #15
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4aa6      	ldr	r2, [pc, #664]	; (800692c <UART_SetConfig+0x334>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d177      	bne.n	8006788 <UART_SetConfig+0x190>
 8006698:	4ba5      	ldr	r3, [pc, #660]	; (8006930 <UART_SetConfig+0x338>)
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a0:	2b28      	cmp	r3, #40	; 0x28
 80066a2:	d86d      	bhi.n	8006780 <UART_SetConfig+0x188>
 80066a4:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <UART_SetConfig+0xb4>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	08006751 	.word	0x08006751
 80066b0:	08006781 	.word	0x08006781
 80066b4:	08006781 	.word	0x08006781
 80066b8:	08006781 	.word	0x08006781
 80066bc:	08006781 	.word	0x08006781
 80066c0:	08006781 	.word	0x08006781
 80066c4:	08006781 	.word	0x08006781
 80066c8:	08006781 	.word	0x08006781
 80066cc:	08006759 	.word	0x08006759
 80066d0:	08006781 	.word	0x08006781
 80066d4:	08006781 	.word	0x08006781
 80066d8:	08006781 	.word	0x08006781
 80066dc:	08006781 	.word	0x08006781
 80066e0:	08006781 	.word	0x08006781
 80066e4:	08006781 	.word	0x08006781
 80066e8:	08006781 	.word	0x08006781
 80066ec:	08006761 	.word	0x08006761
 80066f0:	08006781 	.word	0x08006781
 80066f4:	08006781 	.word	0x08006781
 80066f8:	08006781 	.word	0x08006781
 80066fc:	08006781 	.word	0x08006781
 8006700:	08006781 	.word	0x08006781
 8006704:	08006781 	.word	0x08006781
 8006708:	08006781 	.word	0x08006781
 800670c:	08006769 	.word	0x08006769
 8006710:	08006781 	.word	0x08006781
 8006714:	08006781 	.word	0x08006781
 8006718:	08006781 	.word	0x08006781
 800671c:	08006781 	.word	0x08006781
 8006720:	08006781 	.word	0x08006781
 8006724:	08006781 	.word	0x08006781
 8006728:	08006781 	.word	0x08006781
 800672c:	08006771 	.word	0x08006771
 8006730:	08006781 	.word	0x08006781
 8006734:	08006781 	.word	0x08006781
 8006738:	08006781 	.word	0x08006781
 800673c:	08006781 	.word	0x08006781
 8006740:	08006781 	.word	0x08006781
 8006744:	08006781 	.word	0x08006781
 8006748:	08006781 	.word	0x08006781
 800674c:	08006779 	.word	0x08006779
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006756:	e222      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e21e      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e21a      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676e:	e216      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006770:	2320      	movs	r3, #32
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e212      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006778:	2340      	movs	r3, #64	; 0x40
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e20e      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e20a      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a69      	ldr	r2, [pc, #420]	; (8006934 <UART_SetConfig+0x33c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d130      	bne.n	80067f4 <UART_SetConfig+0x1fc>
 8006792:	4b67      	ldr	r3, [pc, #412]	; (8006930 <UART_SetConfig+0x338>)
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b05      	cmp	r3, #5
 800679c:	d826      	bhi.n	80067ec <UART_SetConfig+0x1f4>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <UART_SetConfig+0x1ac>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067bd 	.word	0x080067bd
 80067a8:	080067c5 	.word	0x080067c5
 80067ac:	080067cd 	.word	0x080067cd
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e1ec      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e1e8      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e1e4      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067da:	e1e0      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80067dc:	2320      	movs	r3, #32
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e1dc      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ea:	e1d8      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f2:	e1d4      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a4f      	ldr	r2, [pc, #316]	; (8006938 <UART_SetConfig+0x340>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d130      	bne.n	8006860 <UART_SetConfig+0x268>
 80067fe:	4b4c      	ldr	r3, [pc, #304]	; (8006930 <UART_SetConfig+0x338>)
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b05      	cmp	r3, #5
 8006808:	d826      	bhi.n	8006858 <UART_SetConfig+0x260>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x218>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006829 	.word	0x08006829
 8006814:	08006831 	.word	0x08006831
 8006818:	08006839 	.word	0x08006839
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e1b6      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e1b2      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e1ae      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e1aa      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006848:	2320      	movs	r3, #32
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e1a6      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006856:	e1a2      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685e:	e19e      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a35      	ldr	r2, [pc, #212]	; (800693c <UART_SetConfig+0x344>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d130      	bne.n	80068cc <UART_SetConfig+0x2d4>
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <UART_SetConfig+0x338>)
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b05      	cmp	r3, #5
 8006874:	d826      	bhi.n	80068c4 <UART_SetConfig+0x2cc>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x284>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006895 	.word	0x08006895
 8006880:	0800689d 	.word	0x0800689d
 8006884:	080068a5 	.word	0x080068a5
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068bd 	.word	0x080068bd
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e180      	b.n	8006b9e <UART_SetConfig+0x5a6>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e17c      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e178      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e174      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80068b4:	2320      	movs	r3, #32
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ba:	e170      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80068bc:	2340      	movs	r3, #64	; 0x40
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c2:	e16c      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ca:	e168      	b.n	8006b9e <UART_SetConfig+0x5a6>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <UART_SetConfig+0x348>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d142      	bne.n	800695c <UART_SetConfig+0x364>
 80068d6:	4b16      	ldr	r3, [pc, #88]	; (8006930 <UART_SetConfig+0x338>)
 80068d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	2b05      	cmp	r3, #5
 80068e0:	d838      	bhi.n	8006954 <UART_SetConfig+0x35c>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0x2f0>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	08006901 	.word	0x08006901
 80068ec:	08006909 	.word	0x08006909
 80068f0:	08006911 	.word	0x08006911
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006945 	.word	0x08006945
 80068fc:	0800694d 	.word	0x0800694d
 8006900:	2300      	movs	r3, #0
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e14a      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006908:	2304      	movs	r3, #4
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690e:	e146      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006910:	2308      	movs	r3, #8
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006916:	e142      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006918:	2310      	movs	r3, #16
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691e:	e13e      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006920:	cfff69f3 	.word	0xcfff69f3
 8006924:	58000c00 	.word	0x58000c00
 8006928:	11fff4ff 	.word	0x11fff4ff
 800692c:	40011000 	.word	0x40011000
 8006930:	58024400 	.word	0x58024400
 8006934:	40004400 	.word	0x40004400
 8006938:	40004800 	.word	0x40004800
 800693c:	40004c00 	.word	0x40004c00
 8006940:	40005000 	.word	0x40005000
 8006944:	2320      	movs	r3, #32
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694a:	e128      	b.n	8006b9e <UART_SetConfig+0x5a6>
 800694c:	2340      	movs	r3, #64	; 0x40
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006952:	e124      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006954:	2380      	movs	r3, #128	; 0x80
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695a:	e120      	b.n	8006b9e <UART_SetConfig+0x5a6>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4acb      	ldr	r2, [pc, #812]	; (8006c90 <UART_SetConfig+0x698>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d176      	bne.n	8006a54 <UART_SetConfig+0x45c>
 8006966:	4bcb      	ldr	r3, [pc, #812]	; (8006c94 <UART_SetConfig+0x69c>)
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800696e:	2b28      	cmp	r3, #40	; 0x28
 8006970:	d86c      	bhi.n	8006a4c <UART_SetConfig+0x454>
 8006972:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <UART_SetConfig+0x380>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	08006a1d 	.word	0x08006a1d
 800697c:	08006a4d 	.word	0x08006a4d
 8006980:	08006a4d 	.word	0x08006a4d
 8006984:	08006a4d 	.word	0x08006a4d
 8006988:	08006a4d 	.word	0x08006a4d
 800698c:	08006a4d 	.word	0x08006a4d
 8006990:	08006a4d 	.word	0x08006a4d
 8006994:	08006a4d 	.word	0x08006a4d
 8006998:	08006a25 	.word	0x08006a25
 800699c:	08006a4d 	.word	0x08006a4d
 80069a0:	08006a4d 	.word	0x08006a4d
 80069a4:	08006a4d 	.word	0x08006a4d
 80069a8:	08006a4d 	.word	0x08006a4d
 80069ac:	08006a4d 	.word	0x08006a4d
 80069b0:	08006a4d 	.word	0x08006a4d
 80069b4:	08006a4d 	.word	0x08006a4d
 80069b8:	08006a2d 	.word	0x08006a2d
 80069bc:	08006a4d 	.word	0x08006a4d
 80069c0:	08006a4d 	.word	0x08006a4d
 80069c4:	08006a4d 	.word	0x08006a4d
 80069c8:	08006a4d 	.word	0x08006a4d
 80069cc:	08006a4d 	.word	0x08006a4d
 80069d0:	08006a4d 	.word	0x08006a4d
 80069d4:	08006a4d 	.word	0x08006a4d
 80069d8:	08006a35 	.word	0x08006a35
 80069dc:	08006a4d 	.word	0x08006a4d
 80069e0:	08006a4d 	.word	0x08006a4d
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006a4d 	.word	0x08006a4d
 80069f0:	08006a4d 	.word	0x08006a4d
 80069f4:	08006a4d 	.word	0x08006a4d
 80069f8:	08006a3d 	.word	0x08006a3d
 80069fc:	08006a4d 	.word	0x08006a4d
 8006a00:	08006a4d 	.word	0x08006a4d
 8006a04:	08006a4d 	.word	0x08006a4d
 8006a08:	08006a4d 	.word	0x08006a4d
 8006a0c:	08006a4d 	.word	0x08006a4d
 8006a10:	08006a4d 	.word	0x08006a4d
 8006a14:	08006a4d 	.word	0x08006a4d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a22:	e0bc      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2a:	e0b8      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a32:	e0b4      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3a:	e0b0      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e0ac      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4a:	e0a8      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a4c:	2380      	movs	r3, #128	; 0x80
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a52:	e0a4      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a8f      	ldr	r2, [pc, #572]	; (8006c98 <UART_SetConfig+0x6a0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d130      	bne.n	8006ac0 <UART_SetConfig+0x4c8>
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	; (8006c94 <UART_SetConfig+0x69c>)
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d826      	bhi.n	8006ab8 <UART_SetConfig+0x4c0>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <UART_SetConfig+0x478>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a89 	.word	0x08006a89
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	08006a99 	.word	0x08006a99
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e086      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e082      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e07e      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e07a      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e076      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006ab0:	2340      	movs	r3, #64	; 0x40
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e072      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006abe:	e06e      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a75      	ldr	r2, [pc, #468]	; (8006c9c <UART_SetConfig+0x6a4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d130      	bne.n	8006b2c <UART_SetConfig+0x534>
 8006aca:	4b72      	ldr	r3, [pc, #456]	; (8006c94 <UART_SetConfig+0x69c>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d826      	bhi.n	8006b24 <UART_SetConfig+0x52c>
 8006ad6:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <UART_SetConfig+0x4e4>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006af5 	.word	0x08006af5
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	08006b05 	.word	0x08006b05
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e050      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e04c      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e048      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e044      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b14:	2320      	movs	r3, #32
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e040      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e03c      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2a:	e038      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a5b      	ldr	r2, [pc, #364]	; (8006ca0 <UART_SetConfig+0x6a8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d130      	bne.n	8006b98 <UART_SetConfig+0x5a0>
 8006b36:	4b57      	ldr	r3, [pc, #348]	; (8006c94 <UART_SetConfig+0x69c>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d826      	bhi.n	8006b90 <UART_SetConfig+0x598>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0x550>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b61 	.word	0x08006b61
 8006b4c:	08006b69 	.word	0x08006b69
 8006b50:	08006b71 	.word	0x08006b71
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	2302      	movs	r3, #2
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e01a      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e016      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b70:	2308      	movs	r3, #8
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e012      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e00e      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b80:	2320      	movs	r3, #32
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e00a      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b88:	2340      	movs	r3, #64	; 0x40
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e006      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e002      	b.n	8006b9e <UART_SetConfig+0x5a6>
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a3f      	ldr	r2, [pc, #252]	; (8006ca0 <UART_SetConfig+0x6a8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	f040 80f8 	bne.w	8006d9a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006baa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	dc46      	bgt.n	8006c40 <UART_SetConfig+0x648>
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	f2c0 8082 	blt.w	8006cbc <UART_SetConfig+0x6c4>
 8006bb8:	3b02      	subs	r3, #2
 8006bba:	2b1e      	cmp	r3, #30
 8006bbc:	d87e      	bhi.n	8006cbc <UART_SetConfig+0x6c4>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <UART_SetConfig+0x5cc>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006c47 	.word	0x08006c47
 8006bc8:	08006cbd 	.word	0x08006cbd
 8006bcc:	08006c4f 	.word	0x08006c4f
 8006bd0:	08006cbd 	.word	0x08006cbd
 8006bd4:	08006cbd 	.word	0x08006cbd
 8006bd8:	08006cbd 	.word	0x08006cbd
 8006bdc:	08006c5f 	.word	0x08006c5f
 8006be0:	08006cbd 	.word	0x08006cbd
 8006be4:	08006cbd 	.word	0x08006cbd
 8006be8:	08006cbd 	.word	0x08006cbd
 8006bec:	08006cbd 	.word	0x08006cbd
 8006bf0:	08006cbd 	.word	0x08006cbd
 8006bf4:	08006cbd 	.word	0x08006cbd
 8006bf8:	08006cbd 	.word	0x08006cbd
 8006bfc:	08006c6f 	.word	0x08006c6f
 8006c00:	08006cbd 	.word	0x08006cbd
 8006c04:	08006cbd 	.word	0x08006cbd
 8006c08:	08006cbd 	.word	0x08006cbd
 8006c0c:	08006cbd 	.word	0x08006cbd
 8006c10:	08006cbd 	.word	0x08006cbd
 8006c14:	08006cbd 	.word	0x08006cbd
 8006c18:	08006cbd 	.word	0x08006cbd
 8006c1c:	08006cbd 	.word	0x08006cbd
 8006c20:	08006cbd 	.word	0x08006cbd
 8006c24:	08006cbd 	.word	0x08006cbd
 8006c28:	08006cbd 	.word	0x08006cbd
 8006c2c:	08006cbd 	.word	0x08006cbd
 8006c30:	08006cbd 	.word	0x08006cbd
 8006c34:	08006cbd 	.word	0x08006cbd
 8006c38:	08006cbd 	.word	0x08006cbd
 8006c3c:	08006caf 	.word	0x08006caf
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d037      	beq.n	8006cb4 <UART_SetConfig+0x6bc>
 8006c44:	e03a      	b.n	8006cbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c46:	f7fe f829 	bl	8004c9c <HAL_RCCEx_GetD3PCLK1Freq>
 8006c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c4c:	e03c      	b.n	8006cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe f838 	bl	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c5c:	e034      	b.n	8006cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c5e:	f107 0318 	add.w	r3, r7, #24
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe f984 	bl	8004f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c6c:	e02c      	b.n	8006cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <UART_SetConfig+0x69c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d016      	beq.n	8006ca8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <UART_SetConfig+0x69c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	08db      	lsrs	r3, r3, #3
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	4a07      	ldr	r2, [pc, #28]	; (8006ca4 <UART_SetConfig+0x6ac>)
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c8c:	e01c      	b.n	8006cc8 <UART_SetConfig+0x6d0>
 8006c8e:	bf00      	nop
 8006c90:	40011400 	.word	0x40011400
 8006c94:	58024400 	.word	0x58024400
 8006c98:	40007800 	.word	0x40007800
 8006c9c:	40007c00 	.word	0x40007c00
 8006ca0:	58000c00 	.word	0x58000c00
 8006ca4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ca8:	4b9d      	ldr	r3, [pc, #628]	; (8006f20 <UART_SetConfig+0x928>)
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cac:	e00c      	b.n	8006cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cae:	4b9d      	ldr	r3, [pc, #628]	; (8006f24 <UART_SetConfig+0x92c>)
 8006cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb2:	e009      	b.n	8006cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cba:	e005      	b.n	8006cc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006cc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 81de 	beq.w	800708c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	4a94      	ldr	r2, [pc, #592]	; (8006f28 <UART_SetConfig+0x930>)
 8006cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d305      	bcc.n	8006d00 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d903      	bls.n	8006d08 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d06:	e1c1      	b.n	800708c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	60fa      	str	r2, [r7, #12]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	4a84      	ldr	r2, [pc, #528]	; (8006f28 <UART_SetConfig+0x930>)
 8006d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d2a:	f7f9 fb31 	bl	8000390 <__aeabi_uldivmod>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	020b      	lsls	r3, r1, #8
 8006d40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d44:	0202      	lsls	r2, r0, #8
 8006d46:	6979      	ldr	r1, [r7, #20]
 8006d48:	6849      	ldr	r1, [r1, #4]
 8006d4a:	0849      	lsrs	r1, r1, #1
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4605      	mov	r5, r0
 8006d52:	eb12 0804 	adds.w	r8, r2, r4
 8006d56:	eb43 0905 	adc.w	r9, r3, r5
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	469a      	mov	sl, r3
 8006d62:	4693      	mov	fp, r2
 8006d64:	4652      	mov	r2, sl
 8006d66:	465b      	mov	r3, fp
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	f7f9 fb10 	bl	8000390 <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4613      	mov	r3, r2
 8006d76:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7e:	d308      	bcc.n	8006d92 <UART_SetConfig+0x79a>
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d86:	d204      	bcs.n	8006d92 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	e17c      	b.n	800708c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d98:	e178      	b.n	800708c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da2:	f040 80c5 	bne.w	8006f30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006da6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	dc48      	bgt.n	8006e40 <UART_SetConfig+0x848>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	db7b      	blt.n	8006eaa <UART_SetConfig+0x8b2>
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d879      	bhi.n	8006eaa <UART_SetConfig+0x8b2>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <UART_SetConfig+0x7c4>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006e47 	.word	0x08006e47
 8006dc0:	08006e4f 	.word	0x08006e4f
 8006dc4:	08006eab 	.word	0x08006eab
 8006dc8:	08006eab 	.word	0x08006eab
 8006dcc:	08006e57 	.word	0x08006e57
 8006dd0:	08006eab 	.word	0x08006eab
 8006dd4:	08006eab 	.word	0x08006eab
 8006dd8:	08006eab 	.word	0x08006eab
 8006ddc:	08006e67 	.word	0x08006e67
 8006de0:	08006eab 	.word	0x08006eab
 8006de4:	08006eab 	.word	0x08006eab
 8006de8:	08006eab 	.word	0x08006eab
 8006dec:	08006eab 	.word	0x08006eab
 8006df0:	08006eab 	.word	0x08006eab
 8006df4:	08006eab 	.word	0x08006eab
 8006df8:	08006eab 	.word	0x08006eab
 8006dfc:	08006e77 	.word	0x08006e77
 8006e00:	08006eab 	.word	0x08006eab
 8006e04:	08006eab 	.word	0x08006eab
 8006e08:	08006eab 	.word	0x08006eab
 8006e0c:	08006eab 	.word	0x08006eab
 8006e10:	08006eab 	.word	0x08006eab
 8006e14:	08006eab 	.word	0x08006eab
 8006e18:	08006eab 	.word	0x08006eab
 8006e1c:	08006eab 	.word	0x08006eab
 8006e20:	08006eab 	.word	0x08006eab
 8006e24:	08006eab 	.word	0x08006eab
 8006e28:	08006eab 	.word	0x08006eab
 8006e2c:	08006eab 	.word	0x08006eab
 8006e30:	08006eab 	.word	0x08006eab
 8006e34:	08006eab 	.word	0x08006eab
 8006e38:	08006eab 	.word	0x08006eab
 8006e3c:	08006e9d 	.word	0x08006e9d
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	d02e      	beq.n	8006ea2 <UART_SetConfig+0x8aa>
 8006e44:	e031      	b.n	8006eaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e46:	f7fc ffb7 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8006e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e4c:	e033      	b.n	8006eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e4e:	f7fc ffc9 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8006e52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e54:	e02f      	b.n	8006eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd ff34 	bl	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e64:	e027      	b.n	8006eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e66:	f107 0318 	add.w	r3, r7, #24
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe f880 	bl	8004f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e74:	e01f      	b.n	8006eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e76:	4b2d      	ldr	r3, [pc, #180]	; (8006f2c <UART_SetConfig+0x934>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e82:	4b2a      	ldr	r3, [pc, #168]	; (8006f2c <UART_SetConfig+0x934>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <UART_SetConfig+0x928>)
 8006e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e94:	e00f      	b.n	8006eb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e96:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <UART_SetConfig+0x928>)
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e9a:	e00c      	b.n	8006eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e9c:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <UART_SetConfig+0x92c>)
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea0:	e009      	b.n	8006eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea8:	e005      	b.n	8006eb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80e7 	beq.w	800708c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <UART_SetConfig+0x930>)
 8006ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed0:	005a      	lsls	r2, r3, #1
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	441a      	add	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	2b0f      	cmp	r3, #15
 8006ee8:	d916      	bls.n	8006f18 <UART_SetConfig+0x920>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef0:	d212      	bcs.n	8006f18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f023 030f 	bic.w	r3, r3, #15
 8006efa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006f14:	60da      	str	r2, [r3, #12]
 8006f16:	e0b9      	b.n	800708c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f1e:	e0b5      	b.n	800708c <UART_SetConfig+0xa94>
 8006f20:	03d09000 	.word	0x03d09000
 8006f24:	003d0900 	.word	0x003d0900
 8006f28:	08009620 	.word	0x08009620
 8006f2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	dc49      	bgt.n	8006fcc <UART_SetConfig+0x9d4>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	db7c      	blt.n	8007036 <UART_SetConfig+0xa3e>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d87a      	bhi.n	8007036 <UART_SetConfig+0xa3e>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x950>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08006fdb 	.word	0x08006fdb
 8006f50:	08007037 	.word	0x08007037
 8006f54:	08007037 	.word	0x08007037
 8006f58:	08006fe3 	.word	0x08006fe3
 8006f5c:	08007037 	.word	0x08007037
 8006f60:	08007037 	.word	0x08007037
 8006f64:	08007037 	.word	0x08007037
 8006f68:	08006ff3 	.word	0x08006ff3
 8006f6c:	08007037 	.word	0x08007037
 8006f70:	08007037 	.word	0x08007037
 8006f74:	08007037 	.word	0x08007037
 8006f78:	08007037 	.word	0x08007037
 8006f7c:	08007037 	.word	0x08007037
 8006f80:	08007037 	.word	0x08007037
 8006f84:	08007037 	.word	0x08007037
 8006f88:	08007003 	.word	0x08007003
 8006f8c:	08007037 	.word	0x08007037
 8006f90:	08007037 	.word	0x08007037
 8006f94:	08007037 	.word	0x08007037
 8006f98:	08007037 	.word	0x08007037
 8006f9c:	08007037 	.word	0x08007037
 8006fa0:	08007037 	.word	0x08007037
 8006fa4:	08007037 	.word	0x08007037
 8006fa8:	08007037 	.word	0x08007037
 8006fac:	08007037 	.word	0x08007037
 8006fb0:	08007037 	.word	0x08007037
 8006fb4:	08007037 	.word	0x08007037
 8006fb8:	08007037 	.word	0x08007037
 8006fbc:	08007037 	.word	0x08007037
 8006fc0:	08007037 	.word	0x08007037
 8006fc4:	08007037 	.word	0x08007037
 8006fc8:	08007029 	.word	0x08007029
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d02e      	beq.n	800702e <UART_SetConfig+0xa36>
 8006fd0:	e031      	b.n	8007036 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd2:	f7fc fef1 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8006fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fd8:	e033      	b.n	8007042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fda:	f7fc ff03 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8006fde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fe0:	e02f      	b.n	8007042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fd fe6e 	bl	8004cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff0:	e027      	b.n	8007042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff2:	f107 0318 	add.w	r3, r7, #24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fd ffba 	bl	8004f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007000:	e01f      	b.n	8007042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007002:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <UART_SetConfig+0xac0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800700e:	4b2a      	ldr	r3, [pc, #168]	; (80070b8 <UART_SetConfig+0xac0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	4a28      	ldr	r2, [pc, #160]	; (80070bc <UART_SetConfig+0xac4>)
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007020:	e00f      	b.n	8007042 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <UART_SetConfig+0xac4>)
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007026:	e00c      	b.n	8007042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007028:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <UART_SetConfig+0xac8>)
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702c:	e009      	b.n	8007042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800702e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007034:	e005      	b.n	8007042 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007040:	bf00      	nop
    }

    if (pclk != 0U)
 8007042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d021      	beq.n	800708c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	4a1d      	ldr	r2, [pc, #116]	; (80070c4 <UART_SetConfig+0xacc>)
 800704e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007052:	461a      	mov	r2, r3
 8007054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007056:	fbb3 f2f2 	udiv	r2, r3, r2
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	441a      	add	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	2b0f      	cmp	r3, #15
 8007070:	d909      	bls.n	8007086 <UART_SetConfig+0xa8e>
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d205      	bcs.n	8007086 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	b29a      	uxth	r2, r3
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60da      	str	r2, [r3, #12]
 8007084:	e002      	b.n	800708c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2201      	movs	r2, #1
 8007090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2201      	movs	r2, #1
 8007098:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2200      	movs	r2, #0
 80070a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80070a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3748      	adds	r7, #72	; 0x48
 80070b0:	46bd      	mov	sp, r7
 80070b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	03d09000 	.word	0x03d09000
 80070c0:	003d0900 	.word	0x003d0900
 80070c4:	08009620 	.word	0x08009620

080070c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01a      	beq.n	80071de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c6:	d10a      	bne.n	80071de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  }
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af02      	add	r7, sp, #8
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800721c:	f7fb f974 	bl	8002508 <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b08      	cmp	r3, #8
 800722e:	d10e      	bne.n	800724e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f82f 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e025      	b.n	800729a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b04      	cmp	r3, #4
 800725a:	d10e      	bne.n	800727a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f819 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e00f      	b.n	800729a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b09c      	sub	sp, #112	; 0x70
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b2:	e0a9      	b.n	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	f000 80a5 	beq.w	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fb f923 	bl	8002508 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80072ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d140      	bne.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072e8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e6      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	663b      	str	r3, [r7, #96]	; 0x60
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007326:	64ba      	str	r2, [r7, #72]	; 0x48
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800732c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e069      	b.n	800742a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b00      	cmp	r3, #0
 8007362:	d051      	beq.n	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007372:	d149      	bne.n	8007408 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800737c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
 800739e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	613b      	str	r3, [r7, #16]
   return(result);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f023 0301 	bic.w	r3, r3, #1
 80073c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073d0:	623a      	str	r2, [r7, #32]
 80073d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	69f9      	ldr	r1, [r7, #28]
 80073d6:	6a3a      	ldr	r2, [r7, #32]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e010      	b.n	800742a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	69da      	ldr	r2, [r3, #28]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4013      	ands	r3, r2
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	429a      	cmp	r2, r3
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	461a      	mov	r2, r3
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	429a      	cmp	r2, r3
 8007424:	f43f af46 	beq.w	80072b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3770      	adds	r7, #112	; 0x70
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_UARTEx_DisableFifoMode+0x16>
 8007444:	2302      	movs	r3, #2
 8007446:	e027      	b.n	8007498 <HAL_UARTEx_DisableFifoMode+0x66>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2224      	movs	r2, #36	; 0x24
 8007454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0201 	bic.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007476:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e02d      	b.n	8007518 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2224      	movs	r2, #36	; 0x24
 80074c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0201 	bic.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f84f 	bl	800759c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007534:	2302      	movs	r3, #2
 8007536:	e02d      	b.n	8007594 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2224      	movs	r2, #36	; 0x24
 8007544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f811 	bl	800759c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d108      	bne.n	80075be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075bc:	e031      	b.n	8007622 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075be:	2310      	movs	r3, #16
 80075c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075c2:	2310      	movs	r3, #16
 80075c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	0e5b      	lsrs	r3, r3, #25
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	0f5b      	lsrs	r3, r3, #29
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	7b3a      	ldrb	r2, [r7, #12]
 80075ea:	4911      	ldr	r1, [pc, #68]	; (8007630 <UARTEx_SetNbDataToProcess+0x94>)
 80075ec:	5c8a      	ldrb	r2, [r1, r2]
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075f2:	7b3a      	ldrb	r2, [r7, #12]
 80075f4:	490f      	ldr	r1, [pc, #60]	; (8007634 <UARTEx_SetNbDataToProcess+0x98>)
 80075f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	7b7a      	ldrb	r2, [r7, #13]
 8007608:	4909      	ldr	r1, [pc, #36]	; (8007630 <UARTEx_SetNbDataToProcess+0x94>)
 800760a:	5c8a      	ldrb	r2, [r1, r2]
 800760c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007610:	7b7a      	ldrb	r2, [r7, #13]
 8007612:	4908      	ldr	r1, [pc, #32]	; (8007634 <UARTEx_SetNbDataToProcess+0x98>)
 8007614:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007616:	fb93 f3f2 	sdiv	r3, r3, r2
 800761a:	b29a      	uxth	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	08009638 	.word	0x08009638
 8007634:	08009640 	.word	0x08009640

08007638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007638:	b084      	sub	sp, #16
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	f107 001c 	add.w	r0, r7, #28
 8007646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2b01      	cmp	r3, #1
 800764e:	d120      	bne.n	8007692 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	4b2a      	ldr	r3, [pc, #168]	; (800770c <USB_CoreInit+0xd4>)
 8007662:	4013      	ands	r3, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007676:	2b01      	cmp	r3, #1
 8007678:	d105      	bne.n	8007686 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 faac 	bl	8007be4 <USB_CoreReset>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
 8007690:	e01a      	b.n	80076c8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 faa0 	bl	8007be4 <USB_CoreReset>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
 80076ba:	e005      	b.n	80076c8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d116      	bne.n	80076fc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <USB_CoreInit+0xd8>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f043 0206 	orr.w	r2, r3, #6
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f043 0220 	orr.w	r2, r3, #32
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007708:	b004      	add	sp, #16
 800770a:	4770      	bx	lr
 800770c:	ffbdffbf 	.word	0xffbdffbf
 8007710:	03ee0000 	.word	0x03ee0000

08007714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f023 0201 	bic.w	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d115      	bne.n	8007784 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007764:	2001      	movs	r0, #1
 8007766:	f7fa fedb 	bl	8002520 <HAL_Delay>
      ms++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa29 	bl	8007bc8 <USB_GetMode>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d01e      	beq.n	80077ba <USB_SetCurrentMode+0x84>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b31      	cmp	r3, #49	; 0x31
 8007780:	d9f0      	bls.n	8007764 <USB_SetCurrentMode+0x2e>
 8007782:	e01a      	b.n	80077ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d115      	bne.n	80077b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007796:	2001      	movs	r0, #1
 8007798:	f7fa fec2 	bl	8002520 <HAL_Delay>
      ms++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa10 	bl	8007bc8 <USB_GetMode>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d005      	beq.n	80077ba <USB_SetCurrentMode+0x84>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b31      	cmp	r3, #49	; 0x31
 80077b2:	d9f0      	bls.n	8007796 <USB_SetCurrentMode+0x60>
 80077b4:	e001      	b.n	80077ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e005      	b.n	80077c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b32      	cmp	r3, #50	; 0x32
 80077be:	d101      	bne.n	80077c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d0:	b084      	sub	sp, #16
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077ea:	2300      	movs	r3, #0
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	e009      	b.n	8007804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	3340      	adds	r3, #64	; 0x40
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3301      	adds	r3, #1
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b0e      	cmp	r3, #14
 8007808:	d9f2      	bls.n	80077f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800780a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11c      	bne.n	800784a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800781e:	f043 0302 	orr.w	r3, r3, #2
 8007822:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e005      	b.n	8007856 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800785c:	461a      	mov	r2, r3
 800785e:	2300      	movs	r3, #0
 8007860:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007868:	4619      	mov	r1, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007870:	461a      	mov	r2, r3
 8007872:	680b      	ldr	r3, [r1, #0]
 8007874:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	2b01      	cmp	r3, #1
 800787a:	d10c      	bne.n	8007896 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007882:	2100      	movs	r1, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f965 	bl	8007b54 <USB_SetDevSpeed>
 800788a:	e008      	b.n	800789e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800788c:	2101      	movs	r1, #1
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f960 	bl	8007b54 <USB_SetDevSpeed>
 8007894:	e003      	b.n	800789e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007896:	2103      	movs	r1, #3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f95b 	bl	8007b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800789e:	2110      	movs	r1, #16
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8f3 	bl	8007a8c <USB_FlushTxFifo>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f91f 	bl	8007af4 <USB_FlushRxFifo>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	461a      	mov	r2, r3
 80078c8:	2300      	movs	r3, #0
 80078ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	461a      	mov	r2, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	461a      	mov	r2, r3
 80078e0:	2300      	movs	r3, #0
 80078e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078e4:	2300      	movs	r3, #0
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	e043      	b.n	8007972 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007900:	d118      	bne.n	8007934 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007914:	461a      	mov	r2, r3
 8007916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	e013      	b.n	8007946 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	461a      	mov	r2, r3
 800792c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e008      	b.n	8007946 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	461a      	mov	r2, r3
 8007942:	2300      	movs	r3, #0
 8007944:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007952:	461a      	mov	r2, r3
 8007954:	2300      	movs	r3, #0
 8007956:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	461a      	mov	r2, r3
 8007966:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800796a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	3301      	adds	r3, #1
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	429a      	cmp	r2, r3
 8007978:	d3b7      	bcc.n	80078ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	e043      	b.n	8007a08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007996:	d118      	bne.n	80079ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	461a      	mov	r2, r3
 80079ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e013      	b.n	80079dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c0:	461a      	mov	r2, r3
 80079c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	e008      	b.n	80079dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d6:	461a      	mov	r2, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e8:	461a      	mov	r2, r3
 80079ea:	2300      	movs	r3, #0
 80079ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fa:	461a      	mov	r2, r3
 80079fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3301      	adds	r3, #1
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d3b7      	bcc.n	8007980 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d105      	bne.n	8007a44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f043 0210 	orr.w	r2, r3, #16
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <USB_DevInit+0x2b4>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f043 0208 	orr.w	r2, r3, #8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <USB_DevInit+0x2b8>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a80:	b004      	add	sp, #16
 8007a82:	4770      	bx	lr
 8007a84:	803c3800 	.word	0x803c3800
 8007a88:	40000004 	.word	0x40000004

08007a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <USB_FlushTxFifo+0x64>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d901      	bls.n	8007aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e01b      	b.n	8007ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	daf2      	bge.n	8007a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	019b      	lsls	r3, r3, #6
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a08      	ldr	r2, [pc, #32]	; (8007af0 <USB_FlushTxFifo+0x64>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e006      	b.n	8007ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d0f0      	beq.n	8007ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	00030d40 	.word	0x00030d40

08007af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a11      	ldr	r2, [pc, #68]	; (8007b50 <USB_FlushRxFifo+0x5c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d901      	bls.n	8007b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e018      	b.n	8007b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	daf2      	bge.n	8007b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2210      	movs	r2, #16
 8007b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3301      	adds	r3, #1
 8007b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <USB_FlushRxFifo+0x5c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d901      	bls.n	8007b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e006      	b.n	8007b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d0f0      	beq.n	8007b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	00030d40 	.word	0x00030d40

08007b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	68f9      	ldr	r1, [r7, #12]
 8007b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b74:	4313      	orrs	r3, r2
 8007b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ba0:	f023 0303 	bic.w	r3, r3, #3
 8007ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bb4:	f043 0302 	orr.w	r3, r3, #2
 8007bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4a13      	ldr	r2, [pc, #76]	; (8007c48 <USB_CoreReset+0x64>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d901      	bls.n	8007c02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e01b      	b.n	8007c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	daf2      	bge.n	8007bf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f043 0201 	orr.w	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4a09      	ldr	r2, [pc, #36]	; (8007c48 <USB_CoreReset+0x64>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d901      	bls.n	8007c2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e006      	b.n	8007c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d0f0      	beq.n	8007c1a <USB_CoreReset+0x36>

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	00030d40 	.word	0x00030d40

08007c4c <__errno>:
 8007c4c:	4b01      	ldr	r3, [pc, #4]	; (8007c54 <__errno+0x8>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	24000010 	.word	0x24000010

08007c58 <__libc_init_array>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	4d0d      	ldr	r5, [pc, #52]	; (8007c90 <__libc_init_array+0x38>)
 8007c5c:	4c0d      	ldr	r4, [pc, #52]	; (8007c94 <__libc_init_array+0x3c>)
 8007c5e:	1b64      	subs	r4, r4, r5
 8007c60:	10a4      	asrs	r4, r4, #2
 8007c62:	2600      	movs	r6, #0
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	d109      	bne.n	8007c7c <__libc_init_array+0x24>
 8007c68:	4d0b      	ldr	r5, [pc, #44]	; (8007c98 <__libc_init_array+0x40>)
 8007c6a:	4c0c      	ldr	r4, [pc, #48]	; (8007c9c <__libc_init_array+0x44>)
 8007c6c:	f001 fa00 	bl	8009070 <_init>
 8007c70:	1b64      	subs	r4, r4, r5
 8007c72:	10a4      	asrs	r4, r4, #2
 8007c74:	2600      	movs	r6, #0
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	d105      	bne.n	8007c86 <__libc_init_array+0x2e>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c80:	4798      	blx	r3
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7ee      	b.n	8007c64 <__libc_init_array+0xc>
 8007c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8a:	4798      	blx	r3
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7f2      	b.n	8007c76 <__libc_init_array+0x1e>
 8007c90:	080096e8 	.word	0x080096e8
 8007c94:	080096e8 	.word	0x080096e8
 8007c98:	080096e8 	.word	0x080096e8
 8007c9c:	080096ec 	.word	0x080096ec

08007ca0 <memcpy>:
 8007ca0:	440a      	add	r2, r1
 8007ca2:	4291      	cmp	r1, r2
 8007ca4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ca8:	d100      	bne.n	8007cac <memcpy+0xc>
 8007caa:	4770      	bx	lr
 8007cac:	b510      	push	{r4, lr}
 8007cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cb6:	4291      	cmp	r1, r2
 8007cb8:	d1f9      	bne.n	8007cae <memcpy+0xe>
 8007cba:	bd10      	pop	{r4, pc}

08007cbc <memset>:
 8007cbc:	4402      	add	r2, r0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d100      	bne.n	8007cc6 <memset+0xa>
 8007cc4:	4770      	bx	lr
 8007cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cca:	e7f9      	b.n	8007cc0 <memset+0x4>

08007ccc <iprintf>:
 8007ccc:	b40f      	push	{r0, r1, r2, r3}
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <iprintf+0x2c>)
 8007cd0:	b513      	push	{r0, r1, r4, lr}
 8007cd2:	681c      	ldr	r4, [r3, #0]
 8007cd4:	b124      	cbz	r4, 8007ce0 <iprintf+0x14>
 8007cd6:	69a3      	ldr	r3, [r4, #24]
 8007cd8:	b913      	cbnz	r3, 8007ce0 <iprintf+0x14>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fa7e 	bl	80081dc <__sinit>
 8007ce0:	ab05      	add	r3, sp, #20
 8007ce2:	9a04      	ldr	r2, [sp, #16]
 8007ce4:	68a1      	ldr	r1, [r4, #8]
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 fde3 	bl	80088b4 <_vfiprintf_r>
 8007cee:	b002      	add	sp, #8
 8007cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf4:	b004      	add	sp, #16
 8007cf6:	4770      	bx	lr
 8007cf8:	24000010 	.word	0x24000010

08007cfc <_puts_r>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	460e      	mov	r6, r1
 8007d00:	4605      	mov	r5, r0
 8007d02:	b118      	cbz	r0, 8007d0c <_puts_r+0x10>
 8007d04:	6983      	ldr	r3, [r0, #24]
 8007d06:	b90b      	cbnz	r3, 8007d0c <_puts_r+0x10>
 8007d08:	f000 fa68 	bl	80081dc <__sinit>
 8007d0c:	69ab      	ldr	r3, [r5, #24]
 8007d0e:	68ac      	ldr	r4, [r5, #8]
 8007d10:	b913      	cbnz	r3, 8007d18 <_puts_r+0x1c>
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 fa62 	bl	80081dc <__sinit>
 8007d18:	4b2c      	ldr	r3, [pc, #176]	; (8007dcc <_puts_r+0xd0>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d120      	bne.n	8007d60 <_puts_r+0x64>
 8007d1e:	686c      	ldr	r4, [r5, #4]
 8007d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d22:	07db      	lsls	r3, r3, #31
 8007d24:	d405      	bmi.n	8007d32 <_puts_r+0x36>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	0598      	lsls	r0, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_puts_r+0x36>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f000 faf3 	bl	8008318 <__retarget_lock_acquire_recursive>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	0719      	lsls	r1, r3, #28
 8007d36:	d51d      	bpl.n	8007d74 <_puts_r+0x78>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	b1db      	cbz	r3, 8007d74 <_puts_r+0x78>
 8007d3c:	3e01      	subs	r6, #1
 8007d3e:	68a3      	ldr	r3, [r4, #8]
 8007d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d44:	3b01      	subs	r3, #1
 8007d46:	60a3      	str	r3, [r4, #8]
 8007d48:	bb39      	cbnz	r1, 8007d9a <_puts_r+0x9e>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da38      	bge.n	8007dc0 <_puts_r+0xc4>
 8007d4e:	4622      	mov	r2, r4
 8007d50:	210a      	movs	r1, #10
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f868 	bl	8007e28 <__swbuf_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d011      	beq.n	8007d80 <_puts_r+0x84>
 8007d5c:	250a      	movs	r5, #10
 8007d5e:	e011      	b.n	8007d84 <_puts_r+0x88>
 8007d60:	4b1b      	ldr	r3, [pc, #108]	; (8007dd0 <_puts_r+0xd4>)
 8007d62:	429c      	cmp	r4, r3
 8007d64:	d101      	bne.n	8007d6a <_puts_r+0x6e>
 8007d66:	68ac      	ldr	r4, [r5, #8]
 8007d68:	e7da      	b.n	8007d20 <_puts_r+0x24>
 8007d6a:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <_puts_r+0xd8>)
 8007d6c:	429c      	cmp	r4, r3
 8007d6e:	bf08      	it	eq
 8007d70:	68ec      	ldreq	r4, [r5, #12]
 8007d72:	e7d5      	b.n	8007d20 <_puts_r+0x24>
 8007d74:	4621      	mov	r1, r4
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 f8a8 	bl	8007ecc <__swsetup_r>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d0dd      	beq.n	8007d3c <_puts_r+0x40>
 8007d80:	f04f 35ff 	mov.w	r5, #4294967295
 8007d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d86:	07da      	lsls	r2, r3, #31
 8007d88:	d405      	bmi.n	8007d96 <_puts_r+0x9a>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	059b      	lsls	r3, r3, #22
 8007d8e:	d402      	bmi.n	8007d96 <_puts_r+0x9a>
 8007d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d92:	f000 fac2 	bl	800831a <__retarget_lock_release_recursive>
 8007d96:	4628      	mov	r0, r5
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da04      	bge.n	8007da8 <_puts_r+0xac>
 8007d9e:	69a2      	ldr	r2, [r4, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	dc06      	bgt.n	8007db2 <_puts_r+0xb6>
 8007da4:	290a      	cmp	r1, #10
 8007da6:	d004      	beq.n	8007db2 <_puts_r+0xb6>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	6022      	str	r2, [r4, #0]
 8007dae:	7019      	strb	r1, [r3, #0]
 8007db0:	e7c5      	b.n	8007d3e <_puts_r+0x42>
 8007db2:	4622      	mov	r2, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 f837 	bl	8007e28 <__swbuf_r>
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d1bf      	bne.n	8007d3e <_puts_r+0x42>
 8007dbe:	e7df      	b.n	8007d80 <_puts_r+0x84>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	250a      	movs	r5, #10
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	6022      	str	r2, [r4, #0]
 8007dc8:	701d      	strb	r5, [r3, #0]
 8007dca:	e7db      	b.n	8007d84 <_puts_r+0x88>
 8007dcc:	0800966c 	.word	0x0800966c
 8007dd0:	0800968c 	.word	0x0800968c
 8007dd4:	0800964c 	.word	0x0800964c

08007dd8 <puts>:
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <puts+0xc>)
 8007dda:	4601      	mov	r1, r0
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f7ff bf8d 	b.w	8007cfc <_puts_r>
 8007de2:	bf00      	nop
 8007de4:	24000010 	.word	0x24000010

08007de8 <siprintf>:
 8007de8:	b40e      	push	{r1, r2, r3}
 8007dea:	b500      	push	{lr}
 8007dec:	b09c      	sub	sp, #112	; 0x70
 8007dee:	ab1d      	add	r3, sp, #116	; 0x74
 8007df0:	9002      	str	r0, [sp, #8]
 8007df2:	9006      	str	r0, [sp, #24]
 8007df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007df8:	4809      	ldr	r0, [pc, #36]	; (8007e20 <siprintf+0x38>)
 8007dfa:	9107      	str	r1, [sp, #28]
 8007dfc:	9104      	str	r1, [sp, #16]
 8007dfe:	4909      	ldr	r1, [pc, #36]	; (8007e24 <siprintf+0x3c>)
 8007e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e04:	9105      	str	r1, [sp, #20]
 8007e06:	6800      	ldr	r0, [r0, #0]
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	a902      	add	r1, sp, #8
 8007e0c:	f000 fc28 	bl	8008660 <_svfiprintf_r>
 8007e10:	9b02      	ldr	r3, [sp, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	b01c      	add	sp, #112	; 0x70
 8007e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e1c:	b003      	add	sp, #12
 8007e1e:	4770      	bx	lr
 8007e20:	24000010 	.word	0x24000010
 8007e24:	ffff0208 	.word	0xffff0208

08007e28 <__swbuf_r>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	460e      	mov	r6, r1
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	4605      	mov	r5, r0
 8007e30:	b118      	cbz	r0, 8007e3a <__swbuf_r+0x12>
 8007e32:	6983      	ldr	r3, [r0, #24]
 8007e34:	b90b      	cbnz	r3, 8007e3a <__swbuf_r+0x12>
 8007e36:	f000 f9d1 	bl	80081dc <__sinit>
 8007e3a:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <__swbuf_r+0x98>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	d12b      	bne.n	8007e98 <__swbuf_r+0x70>
 8007e40:	686c      	ldr	r4, [r5, #4]
 8007e42:	69a3      	ldr	r3, [r4, #24]
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	071a      	lsls	r2, r3, #28
 8007e4a:	d52f      	bpl.n	8007eac <__swbuf_r+0x84>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	b36b      	cbz	r3, 8007eac <__swbuf_r+0x84>
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	6820      	ldr	r0, [r4, #0]
 8007e54:	1ac0      	subs	r0, r0, r3
 8007e56:	6963      	ldr	r3, [r4, #20]
 8007e58:	b2f6      	uxtb	r6, r6
 8007e5a:	4283      	cmp	r3, r0
 8007e5c:	4637      	mov	r7, r6
 8007e5e:	dc04      	bgt.n	8007e6a <__swbuf_r+0x42>
 8007e60:	4621      	mov	r1, r4
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 f926 	bl	80080b4 <_fflush_r>
 8007e68:	bb30      	cbnz	r0, 8007eb8 <__swbuf_r+0x90>
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	60a3      	str	r3, [r4, #8]
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	6022      	str	r2, [r4, #0]
 8007e76:	701e      	strb	r6, [r3, #0]
 8007e78:	6963      	ldr	r3, [r4, #20]
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	4283      	cmp	r3, r0
 8007e7e:	d004      	beq.n	8007e8a <__swbuf_r+0x62>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	07db      	lsls	r3, r3, #31
 8007e84:	d506      	bpl.n	8007e94 <__swbuf_r+0x6c>
 8007e86:	2e0a      	cmp	r6, #10
 8007e88:	d104      	bne.n	8007e94 <__swbuf_r+0x6c>
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	f000 f911 	bl	80080b4 <_fflush_r>
 8007e92:	b988      	cbnz	r0, 8007eb8 <__swbuf_r+0x90>
 8007e94:	4638      	mov	r0, r7
 8007e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e98:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <__swbuf_r+0x9c>)
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	d101      	bne.n	8007ea2 <__swbuf_r+0x7a>
 8007e9e:	68ac      	ldr	r4, [r5, #8]
 8007ea0:	e7cf      	b.n	8007e42 <__swbuf_r+0x1a>
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <__swbuf_r+0xa0>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	bf08      	it	eq
 8007ea8:	68ec      	ldreq	r4, [r5, #12]
 8007eaa:	e7ca      	b.n	8007e42 <__swbuf_r+0x1a>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 f80c 	bl	8007ecc <__swsetup_r>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d0cb      	beq.n	8007e50 <__swbuf_r+0x28>
 8007eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8007ebc:	e7ea      	b.n	8007e94 <__swbuf_r+0x6c>
 8007ebe:	bf00      	nop
 8007ec0:	0800966c 	.word	0x0800966c
 8007ec4:	0800968c 	.word	0x0800968c
 8007ec8:	0800964c 	.word	0x0800964c

08007ecc <__swsetup_r>:
 8007ecc:	4b32      	ldr	r3, [pc, #200]	; (8007f98 <__swsetup_r+0xcc>)
 8007ece:	b570      	push	{r4, r5, r6, lr}
 8007ed0:	681d      	ldr	r5, [r3, #0]
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	b125      	cbz	r5, 8007ee2 <__swsetup_r+0x16>
 8007ed8:	69ab      	ldr	r3, [r5, #24]
 8007eda:	b913      	cbnz	r3, 8007ee2 <__swsetup_r+0x16>
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 f97d 	bl	80081dc <__sinit>
 8007ee2:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <__swsetup_r+0xd0>)
 8007ee4:	429c      	cmp	r4, r3
 8007ee6:	d10f      	bne.n	8007f08 <__swsetup_r+0x3c>
 8007ee8:	686c      	ldr	r4, [r5, #4]
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ef0:	0719      	lsls	r1, r3, #28
 8007ef2:	d42c      	bmi.n	8007f4e <__swsetup_r+0x82>
 8007ef4:	06dd      	lsls	r5, r3, #27
 8007ef6:	d411      	bmi.n	8007f1c <__swsetup_r+0x50>
 8007ef8:	2309      	movs	r3, #9
 8007efa:	6033      	str	r3, [r6, #0]
 8007efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	f04f 30ff 	mov.w	r0, #4294967295
 8007f06:	e03e      	b.n	8007f86 <__swsetup_r+0xba>
 8007f08:	4b25      	ldr	r3, [pc, #148]	; (8007fa0 <__swsetup_r+0xd4>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	d101      	bne.n	8007f12 <__swsetup_r+0x46>
 8007f0e:	68ac      	ldr	r4, [r5, #8]
 8007f10:	e7eb      	b.n	8007eea <__swsetup_r+0x1e>
 8007f12:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <__swsetup_r+0xd8>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	bf08      	it	eq
 8007f18:	68ec      	ldreq	r4, [r5, #12]
 8007f1a:	e7e6      	b.n	8007eea <__swsetup_r+0x1e>
 8007f1c:	0758      	lsls	r0, r3, #29
 8007f1e:	d512      	bpl.n	8007f46 <__swsetup_r+0x7a>
 8007f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f22:	b141      	cbz	r1, 8007f36 <__swsetup_r+0x6a>
 8007f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	d002      	beq.n	8007f32 <__swsetup_r+0x66>
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f000 fa5b 	bl	80083e8 <_free_r>
 8007f32:	2300      	movs	r3, #0
 8007f34:	6363      	str	r3, [r4, #52]	; 0x34
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6063      	str	r3, [r4, #4]
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f043 0308 	orr.w	r3, r3, #8
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	b94b      	cbnz	r3, 8007f66 <__swsetup_r+0x9a>
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f5c:	d003      	beq.n	8007f66 <__swsetup_r+0x9a>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 fa01 	bl	8008368 <__smakebuf_r>
 8007f66:	89a0      	ldrh	r0, [r4, #12]
 8007f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f6c:	f010 0301 	ands.w	r3, r0, #1
 8007f70:	d00a      	beq.n	8007f88 <__swsetup_r+0xbc>
 8007f72:	2300      	movs	r3, #0
 8007f74:	60a3      	str	r3, [r4, #8]
 8007f76:	6963      	ldr	r3, [r4, #20]
 8007f78:	425b      	negs	r3, r3
 8007f7a:	61a3      	str	r3, [r4, #24]
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	b943      	cbnz	r3, 8007f92 <__swsetup_r+0xc6>
 8007f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f84:	d1ba      	bne.n	8007efc <__swsetup_r+0x30>
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	0781      	lsls	r1, r0, #30
 8007f8a:	bf58      	it	pl
 8007f8c:	6963      	ldrpl	r3, [r4, #20]
 8007f8e:	60a3      	str	r3, [r4, #8]
 8007f90:	e7f4      	b.n	8007f7c <__swsetup_r+0xb0>
 8007f92:	2000      	movs	r0, #0
 8007f94:	e7f7      	b.n	8007f86 <__swsetup_r+0xba>
 8007f96:	bf00      	nop
 8007f98:	24000010 	.word	0x24000010
 8007f9c:	0800966c 	.word	0x0800966c
 8007fa0:	0800968c 	.word	0x0800968c
 8007fa4:	0800964c 	.word	0x0800964c

08007fa8 <__sflush_r>:
 8007fa8:	898a      	ldrh	r2, [r1, #12]
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	4605      	mov	r5, r0
 8007fb0:	0710      	lsls	r0, r2, #28
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	d458      	bmi.n	8008068 <__sflush_r+0xc0>
 8007fb6:	684b      	ldr	r3, [r1, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc05      	bgt.n	8007fc8 <__sflush_r+0x20>
 8007fbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dc02      	bgt.n	8007fc8 <__sflush_r+0x20>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d0f9      	beq.n	8007fc2 <__sflush_r+0x1a>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd4:	682f      	ldr	r7, [r5, #0]
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	d032      	beq.n	8008040 <__sflush_r+0x98>
 8007fda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	075a      	lsls	r2, r3, #29
 8007fe0:	d505      	bpl.n	8007fee <__sflush_r+0x46>
 8007fe2:	6863      	ldr	r3, [r4, #4]
 8007fe4:	1ac0      	subs	r0, r0, r3
 8007fe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fe8:	b10b      	cbz	r3, 8007fee <__sflush_r+0x46>
 8007fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fec:	1ac0      	subs	r0, r0, r3
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff4:	6a21      	ldr	r1, [r4, #32]
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b0      	blx	r6
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	d106      	bne.n	800800e <__sflush_r+0x66>
 8008000:	6829      	ldr	r1, [r5, #0]
 8008002:	291d      	cmp	r1, #29
 8008004:	d82c      	bhi.n	8008060 <__sflush_r+0xb8>
 8008006:	4a2a      	ldr	r2, [pc, #168]	; (80080b0 <__sflush_r+0x108>)
 8008008:	40ca      	lsrs	r2, r1
 800800a:	07d6      	lsls	r6, r2, #31
 800800c:	d528      	bpl.n	8008060 <__sflush_r+0xb8>
 800800e:	2200      	movs	r2, #0
 8008010:	6062      	str	r2, [r4, #4]
 8008012:	04d9      	lsls	r1, r3, #19
 8008014:	6922      	ldr	r2, [r4, #16]
 8008016:	6022      	str	r2, [r4, #0]
 8008018:	d504      	bpl.n	8008024 <__sflush_r+0x7c>
 800801a:	1c42      	adds	r2, r0, #1
 800801c:	d101      	bne.n	8008022 <__sflush_r+0x7a>
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	b903      	cbnz	r3, 8008024 <__sflush_r+0x7c>
 8008022:	6560      	str	r0, [r4, #84]	; 0x54
 8008024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008026:	602f      	str	r7, [r5, #0]
 8008028:	2900      	cmp	r1, #0
 800802a:	d0ca      	beq.n	8007fc2 <__sflush_r+0x1a>
 800802c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008030:	4299      	cmp	r1, r3
 8008032:	d002      	beq.n	800803a <__sflush_r+0x92>
 8008034:	4628      	mov	r0, r5
 8008036:	f000 f9d7 	bl	80083e8 <_free_r>
 800803a:	2000      	movs	r0, #0
 800803c:	6360      	str	r0, [r4, #52]	; 0x34
 800803e:	e7c1      	b.n	8007fc4 <__sflush_r+0x1c>
 8008040:	6a21      	ldr	r1, [r4, #32]
 8008042:	2301      	movs	r3, #1
 8008044:	4628      	mov	r0, r5
 8008046:	47b0      	blx	r6
 8008048:	1c41      	adds	r1, r0, #1
 800804a:	d1c7      	bne.n	8007fdc <__sflush_r+0x34>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0c4      	beq.n	8007fdc <__sflush_r+0x34>
 8008052:	2b1d      	cmp	r3, #29
 8008054:	d001      	beq.n	800805a <__sflush_r+0xb2>
 8008056:	2b16      	cmp	r3, #22
 8008058:	d101      	bne.n	800805e <__sflush_r+0xb6>
 800805a:	602f      	str	r7, [r5, #0]
 800805c:	e7b1      	b.n	8007fc2 <__sflush_r+0x1a>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e7ad      	b.n	8007fc4 <__sflush_r+0x1c>
 8008068:	690f      	ldr	r7, [r1, #16]
 800806a:	2f00      	cmp	r7, #0
 800806c:	d0a9      	beq.n	8007fc2 <__sflush_r+0x1a>
 800806e:	0793      	lsls	r3, r2, #30
 8008070:	680e      	ldr	r6, [r1, #0]
 8008072:	bf08      	it	eq
 8008074:	694b      	ldreq	r3, [r1, #20]
 8008076:	600f      	str	r7, [r1, #0]
 8008078:	bf18      	it	ne
 800807a:	2300      	movne	r3, #0
 800807c:	eba6 0807 	sub.w	r8, r6, r7
 8008080:	608b      	str	r3, [r1, #8]
 8008082:	f1b8 0f00 	cmp.w	r8, #0
 8008086:	dd9c      	ble.n	8007fc2 <__sflush_r+0x1a>
 8008088:	6a21      	ldr	r1, [r4, #32]
 800808a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800808c:	4643      	mov	r3, r8
 800808e:	463a      	mov	r2, r7
 8008090:	4628      	mov	r0, r5
 8008092:	47b0      	blx	r6
 8008094:	2800      	cmp	r0, #0
 8008096:	dc06      	bgt.n	80080a6 <__sflush_r+0xfe>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	e78e      	b.n	8007fc4 <__sflush_r+0x1c>
 80080a6:	4407      	add	r7, r0
 80080a8:	eba8 0800 	sub.w	r8, r8, r0
 80080ac:	e7e9      	b.n	8008082 <__sflush_r+0xda>
 80080ae:	bf00      	nop
 80080b0:	20400001 	.word	0x20400001

080080b4 <_fflush_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	690b      	ldr	r3, [r1, #16]
 80080b8:	4605      	mov	r5, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	b913      	cbnz	r3, 80080c4 <_fflush_r+0x10>
 80080be:	2500      	movs	r5, #0
 80080c0:	4628      	mov	r0, r5
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	b118      	cbz	r0, 80080ce <_fflush_r+0x1a>
 80080c6:	6983      	ldr	r3, [r0, #24]
 80080c8:	b90b      	cbnz	r3, 80080ce <_fflush_r+0x1a>
 80080ca:	f000 f887 	bl	80081dc <__sinit>
 80080ce:	4b14      	ldr	r3, [pc, #80]	; (8008120 <_fflush_r+0x6c>)
 80080d0:	429c      	cmp	r4, r3
 80080d2:	d11b      	bne.n	800810c <_fflush_r+0x58>
 80080d4:	686c      	ldr	r4, [r5, #4]
 80080d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0ef      	beq.n	80080be <_fflush_r+0xa>
 80080de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080e0:	07d0      	lsls	r0, r2, #31
 80080e2:	d404      	bmi.n	80080ee <_fflush_r+0x3a>
 80080e4:	0599      	lsls	r1, r3, #22
 80080e6:	d402      	bmi.n	80080ee <_fflush_r+0x3a>
 80080e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ea:	f000 f915 	bl	8008318 <__retarget_lock_acquire_recursive>
 80080ee:	4628      	mov	r0, r5
 80080f0:	4621      	mov	r1, r4
 80080f2:	f7ff ff59 	bl	8007fa8 <__sflush_r>
 80080f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f8:	07da      	lsls	r2, r3, #31
 80080fa:	4605      	mov	r5, r0
 80080fc:	d4e0      	bmi.n	80080c0 <_fflush_r+0xc>
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	059b      	lsls	r3, r3, #22
 8008102:	d4dd      	bmi.n	80080c0 <_fflush_r+0xc>
 8008104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008106:	f000 f908 	bl	800831a <__retarget_lock_release_recursive>
 800810a:	e7d9      	b.n	80080c0 <_fflush_r+0xc>
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <_fflush_r+0x70>)
 800810e:	429c      	cmp	r4, r3
 8008110:	d101      	bne.n	8008116 <_fflush_r+0x62>
 8008112:	68ac      	ldr	r4, [r5, #8]
 8008114:	e7df      	b.n	80080d6 <_fflush_r+0x22>
 8008116:	4b04      	ldr	r3, [pc, #16]	; (8008128 <_fflush_r+0x74>)
 8008118:	429c      	cmp	r4, r3
 800811a:	bf08      	it	eq
 800811c:	68ec      	ldreq	r4, [r5, #12]
 800811e:	e7da      	b.n	80080d6 <_fflush_r+0x22>
 8008120:	0800966c 	.word	0x0800966c
 8008124:	0800968c 	.word	0x0800968c
 8008128:	0800964c 	.word	0x0800964c

0800812c <std>:
 800812c:	2300      	movs	r3, #0
 800812e:	b510      	push	{r4, lr}
 8008130:	4604      	mov	r4, r0
 8008132:	e9c0 3300 	strd	r3, r3, [r0]
 8008136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800813a:	6083      	str	r3, [r0, #8]
 800813c:	8181      	strh	r1, [r0, #12]
 800813e:	6643      	str	r3, [r0, #100]	; 0x64
 8008140:	81c2      	strh	r2, [r0, #14]
 8008142:	6183      	str	r3, [r0, #24]
 8008144:	4619      	mov	r1, r3
 8008146:	2208      	movs	r2, #8
 8008148:	305c      	adds	r0, #92	; 0x5c
 800814a:	f7ff fdb7 	bl	8007cbc <memset>
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <std+0x38>)
 8008150:	6263      	str	r3, [r4, #36]	; 0x24
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <std+0x3c>)
 8008154:	62a3      	str	r3, [r4, #40]	; 0x28
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <std+0x40>)
 8008158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x44>)
 800815c:	6224      	str	r4, [r4, #32]
 800815e:	6323      	str	r3, [r4, #48]	; 0x30
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	08008e5d 	.word	0x08008e5d
 8008168:	08008e7f 	.word	0x08008e7f
 800816c:	08008eb7 	.word	0x08008eb7
 8008170:	08008edb 	.word	0x08008edb

08008174 <_cleanup_r>:
 8008174:	4901      	ldr	r1, [pc, #4]	; (800817c <_cleanup_r+0x8>)
 8008176:	f000 b8af 	b.w	80082d8 <_fwalk_reent>
 800817a:	bf00      	nop
 800817c:	080080b5 	.word	0x080080b5

08008180 <__sfmoreglue>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	2268      	movs	r2, #104	; 0x68
 8008184:	1e4d      	subs	r5, r1, #1
 8008186:	4355      	muls	r5, r2
 8008188:	460e      	mov	r6, r1
 800818a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800818e:	f000 f997 	bl	80084c0 <_malloc_r>
 8008192:	4604      	mov	r4, r0
 8008194:	b140      	cbz	r0, 80081a8 <__sfmoreglue+0x28>
 8008196:	2100      	movs	r1, #0
 8008198:	e9c0 1600 	strd	r1, r6, [r0]
 800819c:	300c      	adds	r0, #12
 800819e:	60a0      	str	r0, [r4, #8]
 80081a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081a4:	f7ff fd8a 	bl	8007cbc <memset>
 80081a8:	4620      	mov	r0, r4
 80081aa:	bd70      	pop	{r4, r5, r6, pc}

080081ac <__sfp_lock_acquire>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__sfp_lock_acquire+0x8>)
 80081ae:	f000 b8b3 	b.w	8008318 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	240007f5 	.word	0x240007f5

080081b8 <__sfp_lock_release>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__sfp_lock_release+0x8>)
 80081ba:	f000 b8ae 	b.w	800831a <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	240007f5 	.word	0x240007f5

080081c4 <__sinit_lock_acquire>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__sinit_lock_acquire+0x8>)
 80081c6:	f000 b8a7 	b.w	8008318 <__retarget_lock_acquire_recursive>
 80081ca:	bf00      	nop
 80081cc:	240007f6 	.word	0x240007f6

080081d0 <__sinit_lock_release>:
 80081d0:	4801      	ldr	r0, [pc, #4]	; (80081d8 <__sinit_lock_release+0x8>)
 80081d2:	f000 b8a2 	b.w	800831a <__retarget_lock_release_recursive>
 80081d6:	bf00      	nop
 80081d8:	240007f6 	.word	0x240007f6

080081dc <__sinit>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	f7ff fff0 	bl	80081c4 <__sinit_lock_acquire>
 80081e4:	69a3      	ldr	r3, [r4, #24]
 80081e6:	b11b      	cbz	r3, 80081f0 <__sinit+0x14>
 80081e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ec:	f7ff bff0 	b.w	80081d0 <__sinit_lock_release>
 80081f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081f4:	6523      	str	r3, [r4, #80]	; 0x50
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <__sinit+0x68>)
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <__sinit+0x6c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80081fe:	42a3      	cmp	r3, r4
 8008200:	bf04      	itt	eq
 8008202:	2301      	moveq	r3, #1
 8008204:	61a3      	streq	r3, [r4, #24]
 8008206:	4620      	mov	r0, r4
 8008208:	f000 f820 	bl	800824c <__sfp>
 800820c:	6060      	str	r0, [r4, #4]
 800820e:	4620      	mov	r0, r4
 8008210:	f000 f81c 	bl	800824c <__sfp>
 8008214:	60a0      	str	r0, [r4, #8]
 8008216:	4620      	mov	r0, r4
 8008218:	f000 f818 	bl	800824c <__sfp>
 800821c:	2200      	movs	r2, #0
 800821e:	60e0      	str	r0, [r4, #12]
 8008220:	2104      	movs	r1, #4
 8008222:	6860      	ldr	r0, [r4, #4]
 8008224:	f7ff ff82 	bl	800812c <std>
 8008228:	68a0      	ldr	r0, [r4, #8]
 800822a:	2201      	movs	r2, #1
 800822c:	2109      	movs	r1, #9
 800822e:	f7ff ff7d 	bl	800812c <std>
 8008232:	68e0      	ldr	r0, [r4, #12]
 8008234:	2202      	movs	r2, #2
 8008236:	2112      	movs	r1, #18
 8008238:	f7ff ff78 	bl	800812c <std>
 800823c:	2301      	movs	r3, #1
 800823e:	61a3      	str	r3, [r4, #24]
 8008240:	e7d2      	b.n	80081e8 <__sinit+0xc>
 8008242:	bf00      	nop
 8008244:	08009648 	.word	0x08009648
 8008248:	08008175 	.word	0x08008175

0800824c <__sfp>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	4607      	mov	r7, r0
 8008250:	f7ff ffac 	bl	80081ac <__sfp_lock_acquire>
 8008254:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <__sfp+0x84>)
 8008256:	681e      	ldr	r6, [r3, #0]
 8008258:	69b3      	ldr	r3, [r6, #24]
 800825a:	b913      	cbnz	r3, 8008262 <__sfp+0x16>
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff ffbd 	bl	80081dc <__sinit>
 8008262:	3648      	adds	r6, #72	; 0x48
 8008264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008268:	3b01      	subs	r3, #1
 800826a:	d503      	bpl.n	8008274 <__sfp+0x28>
 800826c:	6833      	ldr	r3, [r6, #0]
 800826e:	b30b      	cbz	r3, 80082b4 <__sfp+0x68>
 8008270:	6836      	ldr	r6, [r6, #0]
 8008272:	e7f7      	b.n	8008264 <__sfp+0x18>
 8008274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008278:	b9d5      	cbnz	r5, 80082b0 <__sfp+0x64>
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <__sfp+0x88>)
 800827c:	60e3      	str	r3, [r4, #12]
 800827e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008282:	6665      	str	r5, [r4, #100]	; 0x64
 8008284:	f000 f847 	bl	8008316 <__retarget_lock_init_recursive>
 8008288:	f7ff ff96 	bl	80081b8 <__sfp_lock_release>
 800828c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008294:	6025      	str	r5, [r4, #0]
 8008296:	61a5      	str	r5, [r4, #24]
 8008298:	2208      	movs	r2, #8
 800829a:	4629      	mov	r1, r5
 800829c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082a0:	f7ff fd0c 	bl	8007cbc <memset>
 80082a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082ac:	4620      	mov	r0, r4
 80082ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b0:	3468      	adds	r4, #104	; 0x68
 80082b2:	e7d9      	b.n	8008268 <__sfp+0x1c>
 80082b4:	2104      	movs	r1, #4
 80082b6:	4638      	mov	r0, r7
 80082b8:	f7ff ff62 	bl	8008180 <__sfmoreglue>
 80082bc:	4604      	mov	r4, r0
 80082be:	6030      	str	r0, [r6, #0]
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1d5      	bne.n	8008270 <__sfp+0x24>
 80082c4:	f7ff ff78 	bl	80081b8 <__sfp_lock_release>
 80082c8:	230c      	movs	r3, #12
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	e7ee      	b.n	80082ac <__sfp+0x60>
 80082ce:	bf00      	nop
 80082d0:	08009648 	.word	0x08009648
 80082d4:	ffff0001 	.word	0xffff0001

080082d8 <_fwalk_reent>:
 80082d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082dc:	4606      	mov	r6, r0
 80082de:	4688      	mov	r8, r1
 80082e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082e4:	2700      	movs	r7, #0
 80082e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ea:	f1b9 0901 	subs.w	r9, r9, #1
 80082ee:	d505      	bpl.n	80082fc <_fwalk_reent+0x24>
 80082f0:	6824      	ldr	r4, [r4, #0]
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d1f7      	bne.n	80082e6 <_fwalk_reent+0xe>
 80082f6:	4638      	mov	r0, r7
 80082f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fc:	89ab      	ldrh	r3, [r5, #12]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d907      	bls.n	8008312 <_fwalk_reent+0x3a>
 8008302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008306:	3301      	adds	r3, #1
 8008308:	d003      	beq.n	8008312 <_fwalk_reent+0x3a>
 800830a:	4629      	mov	r1, r5
 800830c:	4630      	mov	r0, r6
 800830e:	47c0      	blx	r8
 8008310:	4307      	orrs	r7, r0
 8008312:	3568      	adds	r5, #104	; 0x68
 8008314:	e7e9      	b.n	80082ea <_fwalk_reent+0x12>

08008316 <__retarget_lock_init_recursive>:
 8008316:	4770      	bx	lr

08008318 <__retarget_lock_acquire_recursive>:
 8008318:	4770      	bx	lr

0800831a <__retarget_lock_release_recursive>:
 800831a:	4770      	bx	lr

0800831c <__swhatbuf_r>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	460e      	mov	r6, r1
 8008320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008324:	2900      	cmp	r1, #0
 8008326:	b096      	sub	sp, #88	; 0x58
 8008328:	4614      	mov	r4, r2
 800832a:	461d      	mov	r5, r3
 800832c:	da08      	bge.n	8008340 <__swhatbuf_r+0x24>
 800832e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	061a      	lsls	r2, r3, #24
 8008338:	d410      	bmi.n	800835c <__swhatbuf_r+0x40>
 800833a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833e:	e00e      	b.n	800835e <__swhatbuf_r+0x42>
 8008340:	466a      	mov	r2, sp
 8008342:	f000 fdf1 	bl	8008f28 <_fstat_r>
 8008346:	2800      	cmp	r0, #0
 8008348:	dbf1      	blt.n	800832e <__swhatbuf_r+0x12>
 800834a:	9a01      	ldr	r2, [sp, #4]
 800834c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008354:	425a      	negs	r2, r3
 8008356:	415a      	adcs	r2, r3
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	e7ee      	b.n	800833a <__swhatbuf_r+0x1e>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	2000      	movs	r0, #0
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	b016      	add	sp, #88	; 0x58
 8008364:	bd70      	pop	{r4, r5, r6, pc}
	...

08008368 <__smakebuf_r>:
 8008368:	898b      	ldrh	r3, [r1, #12]
 800836a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800836c:	079d      	lsls	r5, r3, #30
 800836e:	4606      	mov	r6, r0
 8008370:	460c      	mov	r4, r1
 8008372:	d507      	bpl.n	8008384 <__smakebuf_r+0x1c>
 8008374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	2301      	movs	r3, #1
 800837e:	6163      	str	r3, [r4, #20]
 8008380:	b002      	add	sp, #8
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	ab01      	add	r3, sp, #4
 8008386:	466a      	mov	r2, sp
 8008388:	f7ff ffc8 	bl	800831c <__swhatbuf_r>
 800838c:	9900      	ldr	r1, [sp, #0]
 800838e:	4605      	mov	r5, r0
 8008390:	4630      	mov	r0, r6
 8008392:	f000 f895 	bl	80084c0 <_malloc_r>
 8008396:	b948      	cbnz	r0, 80083ac <__smakebuf_r+0x44>
 8008398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800839c:	059a      	lsls	r2, r3, #22
 800839e:	d4ef      	bmi.n	8008380 <__smakebuf_r+0x18>
 80083a0:	f023 0303 	bic.w	r3, r3, #3
 80083a4:	f043 0302 	orr.w	r3, r3, #2
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	e7e3      	b.n	8008374 <__smakebuf_r+0xc>
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <__smakebuf_r+0x7c>)
 80083ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	6020      	str	r0, [r4, #0]
 80083b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	6163      	str	r3, [r4, #20]
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	6120      	str	r0, [r4, #16]
 80083c2:	b15b      	cbz	r3, 80083dc <__smakebuf_r+0x74>
 80083c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 fdbf 	bl	8008f4c <_isatty_r>
 80083ce:	b128      	cbz	r0, 80083dc <__smakebuf_r+0x74>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	89a0      	ldrh	r0, [r4, #12]
 80083de:	4305      	orrs	r5, r0
 80083e0:	81a5      	strh	r5, [r4, #12]
 80083e2:	e7cd      	b.n	8008380 <__smakebuf_r+0x18>
 80083e4:	08008175 	.word	0x08008175

080083e8 <_free_r>:
 80083e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ea:	2900      	cmp	r1, #0
 80083ec:	d044      	beq.n	8008478 <_free_r+0x90>
 80083ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f2:	9001      	str	r0, [sp, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f1a1 0404 	sub.w	r4, r1, #4
 80083fa:	bfb8      	it	lt
 80083fc:	18e4      	addlt	r4, r4, r3
 80083fe:	f000 fde1 	bl	8008fc4 <__malloc_lock>
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <_free_r+0x94>)
 8008404:	9801      	ldr	r0, [sp, #4]
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	b933      	cbnz	r3, 8008418 <_free_r+0x30>
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6014      	str	r4, [r2, #0]
 800840e:	b003      	add	sp, #12
 8008410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008414:	f000 bddc 	b.w	8008fd0 <__malloc_unlock>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d908      	bls.n	800842e <_free_r+0x46>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf01      	itttt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	1949      	addeq	r1, r1, r5
 800842a:	6021      	streq	r1, [r4, #0]
 800842c:	e7ed      	b.n	800840a <_free_r+0x22>
 800842e:	461a      	mov	r2, r3
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b10b      	cbz	r3, 8008438 <_free_r+0x50>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x46>
 8008438:	6811      	ldr	r1, [r2, #0]
 800843a:	1855      	adds	r5, r2, r1
 800843c:	42a5      	cmp	r5, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x70>
 8008440:	6824      	ldr	r4, [r4, #0]
 8008442:	4421      	add	r1, r4
 8008444:	1854      	adds	r4, r2, r1
 8008446:	42a3      	cmp	r3, r4
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	d1e0      	bne.n	800840e <_free_r+0x26>
 800844c:	681c      	ldr	r4, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	6053      	str	r3, [r2, #4]
 8008452:	4421      	add	r1, r4
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	e7da      	b.n	800840e <_free_r+0x26>
 8008458:	d902      	bls.n	8008460 <_free_r+0x78>
 800845a:	230c      	movs	r3, #12
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	e7d6      	b.n	800840e <_free_r+0x26>
 8008460:	6825      	ldr	r5, [r4, #0]
 8008462:	1961      	adds	r1, r4, r5
 8008464:	428b      	cmp	r3, r1
 8008466:	bf04      	itt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1949      	addeq	r1, r1, r5
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	6054      	str	r4, [r2, #4]
 8008476:	e7ca      	b.n	800840e <_free_r+0x26>
 8008478:	b003      	add	sp, #12
 800847a:	bd30      	pop	{r4, r5, pc}
 800847c:	240007f8 	.word	0x240007f8

08008480 <sbrk_aligned>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	4e0e      	ldr	r6, [pc, #56]	; (80084bc <sbrk_aligned+0x3c>)
 8008484:	460c      	mov	r4, r1
 8008486:	6831      	ldr	r1, [r6, #0]
 8008488:	4605      	mov	r5, r0
 800848a:	b911      	cbnz	r1, 8008492 <sbrk_aligned+0x12>
 800848c:	f000 fcd6 	bl	8008e3c <_sbrk_r>
 8008490:	6030      	str	r0, [r6, #0]
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f000 fcd1 	bl	8008e3c <_sbrk_r>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d00a      	beq.n	80084b4 <sbrk_aligned+0x34>
 800849e:	1cc4      	adds	r4, r0, #3
 80084a0:	f024 0403 	bic.w	r4, r4, #3
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d007      	beq.n	80084b8 <sbrk_aligned+0x38>
 80084a8:	1a21      	subs	r1, r4, r0
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 fcc6 	bl	8008e3c <_sbrk_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	d101      	bne.n	80084b8 <sbrk_aligned+0x38>
 80084b4:	f04f 34ff 	mov.w	r4, #4294967295
 80084b8:	4620      	mov	r0, r4
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	240007fc 	.word	0x240007fc

080084c0 <_malloc_r>:
 80084c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	1ccd      	adds	r5, r1, #3
 80084c6:	f025 0503 	bic.w	r5, r5, #3
 80084ca:	3508      	adds	r5, #8
 80084cc:	2d0c      	cmp	r5, #12
 80084ce:	bf38      	it	cc
 80084d0:	250c      	movcc	r5, #12
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	4607      	mov	r7, r0
 80084d6:	db01      	blt.n	80084dc <_malloc_r+0x1c>
 80084d8:	42a9      	cmp	r1, r5
 80084da:	d905      	bls.n	80084e8 <_malloc_r+0x28>
 80084dc:	230c      	movs	r3, #12
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	2600      	movs	r6, #0
 80084e2:	4630      	mov	r0, r6
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	4e2e      	ldr	r6, [pc, #184]	; (80085a4 <_malloc_r+0xe4>)
 80084ea:	f000 fd6b 	bl	8008fc4 <__malloc_lock>
 80084ee:	6833      	ldr	r3, [r6, #0]
 80084f0:	461c      	mov	r4, r3
 80084f2:	bb34      	cbnz	r4, 8008542 <_malloc_r+0x82>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4638      	mov	r0, r7
 80084f8:	f7ff ffc2 	bl	8008480 <sbrk_aligned>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	4604      	mov	r4, r0
 8008500:	d14d      	bne.n	800859e <_malloc_r+0xde>
 8008502:	6834      	ldr	r4, [r6, #0]
 8008504:	4626      	mov	r6, r4
 8008506:	2e00      	cmp	r6, #0
 8008508:	d140      	bne.n	800858c <_malloc_r+0xcc>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	4631      	mov	r1, r6
 800850e:	4638      	mov	r0, r7
 8008510:	eb04 0803 	add.w	r8, r4, r3
 8008514:	f000 fc92 	bl	8008e3c <_sbrk_r>
 8008518:	4580      	cmp	r8, r0
 800851a:	d13a      	bne.n	8008592 <_malloc_r+0xd2>
 800851c:	6821      	ldr	r1, [r4, #0]
 800851e:	3503      	adds	r5, #3
 8008520:	1a6d      	subs	r5, r5, r1
 8008522:	f025 0503 	bic.w	r5, r5, #3
 8008526:	3508      	adds	r5, #8
 8008528:	2d0c      	cmp	r5, #12
 800852a:	bf38      	it	cc
 800852c:	250c      	movcc	r5, #12
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ffa5 	bl	8008480 <sbrk_aligned>
 8008536:	3001      	adds	r0, #1
 8008538:	d02b      	beq.n	8008592 <_malloc_r+0xd2>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	442b      	add	r3, r5
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	e00e      	b.n	8008560 <_malloc_r+0xa0>
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	1b52      	subs	r2, r2, r5
 8008546:	d41e      	bmi.n	8008586 <_malloc_r+0xc6>
 8008548:	2a0b      	cmp	r2, #11
 800854a:	d916      	bls.n	800857a <_malloc_r+0xba>
 800854c:	1961      	adds	r1, r4, r5
 800854e:	42a3      	cmp	r3, r4
 8008550:	6025      	str	r5, [r4, #0]
 8008552:	bf18      	it	ne
 8008554:	6059      	strne	r1, [r3, #4]
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	bf08      	it	eq
 800855a:	6031      	streq	r1, [r6, #0]
 800855c:	5162      	str	r2, [r4, r5]
 800855e:	604b      	str	r3, [r1, #4]
 8008560:	4638      	mov	r0, r7
 8008562:	f104 060b 	add.w	r6, r4, #11
 8008566:	f000 fd33 	bl	8008fd0 <__malloc_unlock>
 800856a:	f026 0607 	bic.w	r6, r6, #7
 800856e:	1d23      	adds	r3, r4, #4
 8008570:	1af2      	subs	r2, r6, r3
 8008572:	d0b6      	beq.n	80084e2 <_malloc_r+0x22>
 8008574:	1b9b      	subs	r3, r3, r6
 8008576:	50a3      	str	r3, [r4, r2]
 8008578:	e7b3      	b.n	80084e2 <_malloc_r+0x22>
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	42a3      	cmp	r3, r4
 800857e:	bf0c      	ite	eq
 8008580:	6032      	streq	r2, [r6, #0]
 8008582:	605a      	strne	r2, [r3, #4]
 8008584:	e7ec      	b.n	8008560 <_malloc_r+0xa0>
 8008586:	4623      	mov	r3, r4
 8008588:	6864      	ldr	r4, [r4, #4]
 800858a:	e7b2      	b.n	80084f2 <_malloc_r+0x32>
 800858c:	4634      	mov	r4, r6
 800858e:	6876      	ldr	r6, [r6, #4]
 8008590:	e7b9      	b.n	8008506 <_malloc_r+0x46>
 8008592:	230c      	movs	r3, #12
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	4638      	mov	r0, r7
 8008598:	f000 fd1a 	bl	8008fd0 <__malloc_unlock>
 800859c:	e7a1      	b.n	80084e2 <_malloc_r+0x22>
 800859e:	6025      	str	r5, [r4, #0]
 80085a0:	e7de      	b.n	8008560 <_malloc_r+0xa0>
 80085a2:	bf00      	nop
 80085a4:	240007f8 	.word	0x240007f8

080085a8 <__ssputs_r>:
 80085a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	688e      	ldr	r6, [r1, #8]
 80085ae:	429e      	cmp	r6, r3
 80085b0:	4682      	mov	sl, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4690      	mov	r8, r2
 80085b6:	461f      	mov	r7, r3
 80085b8:	d838      	bhi.n	800862c <__ssputs_r+0x84>
 80085ba:	898a      	ldrh	r2, [r1, #12]
 80085bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c0:	d032      	beq.n	8008628 <__ssputs_r+0x80>
 80085c2:	6825      	ldr	r5, [r4, #0]
 80085c4:	6909      	ldr	r1, [r1, #16]
 80085c6:	eba5 0901 	sub.w	r9, r5, r1
 80085ca:	6965      	ldr	r5, [r4, #20]
 80085cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d4:	3301      	adds	r3, #1
 80085d6:	444b      	add	r3, r9
 80085d8:	106d      	asrs	r5, r5, #1
 80085da:	429d      	cmp	r5, r3
 80085dc:	bf38      	it	cc
 80085de:	461d      	movcc	r5, r3
 80085e0:	0553      	lsls	r3, r2, #21
 80085e2:	d531      	bpl.n	8008648 <__ssputs_r+0xa0>
 80085e4:	4629      	mov	r1, r5
 80085e6:	f7ff ff6b 	bl	80084c0 <_malloc_r>
 80085ea:	4606      	mov	r6, r0
 80085ec:	b950      	cbnz	r0, 8008604 <__ssputs_r+0x5c>
 80085ee:	230c      	movs	r3, #12
 80085f0:	f8ca 3000 	str.w	r3, [sl]
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008604:	6921      	ldr	r1, [r4, #16]
 8008606:	464a      	mov	r2, r9
 8008608:	f7ff fb4a 	bl	8007ca0 <memcpy>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	6126      	str	r6, [r4, #16]
 800861a:	6165      	str	r5, [r4, #20]
 800861c:	444e      	add	r6, r9
 800861e:	eba5 0509 	sub.w	r5, r5, r9
 8008622:	6026      	str	r6, [r4, #0]
 8008624:	60a5      	str	r5, [r4, #8]
 8008626:	463e      	mov	r6, r7
 8008628:	42be      	cmp	r6, r7
 800862a:	d900      	bls.n	800862e <__ssputs_r+0x86>
 800862c:	463e      	mov	r6, r7
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	4632      	mov	r2, r6
 8008632:	4641      	mov	r1, r8
 8008634:	f000 fcac 	bl	8008f90 <memmove>
 8008638:	68a3      	ldr	r3, [r4, #8]
 800863a:	1b9b      	subs	r3, r3, r6
 800863c:	60a3      	str	r3, [r4, #8]
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	4433      	add	r3, r6
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	2000      	movs	r0, #0
 8008646:	e7db      	b.n	8008600 <__ssputs_r+0x58>
 8008648:	462a      	mov	r2, r5
 800864a:	f000 fcc7 	bl	8008fdc <_realloc_r>
 800864e:	4606      	mov	r6, r0
 8008650:	2800      	cmp	r0, #0
 8008652:	d1e1      	bne.n	8008618 <__ssputs_r+0x70>
 8008654:	6921      	ldr	r1, [r4, #16]
 8008656:	4650      	mov	r0, sl
 8008658:	f7ff fec6 	bl	80083e8 <_free_r>
 800865c:	e7c7      	b.n	80085ee <__ssputs_r+0x46>
	...

08008660 <_svfiprintf_r>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	4698      	mov	r8, r3
 8008666:	898b      	ldrh	r3, [r1, #12]
 8008668:	061b      	lsls	r3, r3, #24
 800866a:	b09d      	sub	sp, #116	; 0x74
 800866c:	4607      	mov	r7, r0
 800866e:	460d      	mov	r5, r1
 8008670:	4614      	mov	r4, r2
 8008672:	d50e      	bpl.n	8008692 <_svfiprintf_r+0x32>
 8008674:	690b      	ldr	r3, [r1, #16]
 8008676:	b963      	cbnz	r3, 8008692 <_svfiprintf_r+0x32>
 8008678:	2140      	movs	r1, #64	; 0x40
 800867a:	f7ff ff21 	bl	80084c0 <_malloc_r>
 800867e:	6028      	str	r0, [r5, #0]
 8008680:	6128      	str	r0, [r5, #16]
 8008682:	b920      	cbnz	r0, 800868e <_svfiprintf_r+0x2e>
 8008684:	230c      	movs	r3, #12
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e0d1      	b.n	8008832 <_svfiprintf_r+0x1d2>
 800868e:	2340      	movs	r3, #64	; 0x40
 8008690:	616b      	str	r3, [r5, #20]
 8008692:	2300      	movs	r3, #0
 8008694:	9309      	str	r3, [sp, #36]	; 0x24
 8008696:	2320      	movs	r3, #32
 8008698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800869c:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a0:	2330      	movs	r3, #48	; 0x30
 80086a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800884c <_svfiprintf_r+0x1ec>
 80086a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086aa:	f04f 0901 	mov.w	r9, #1
 80086ae:	4623      	mov	r3, r4
 80086b0:	469a      	mov	sl, r3
 80086b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b6:	b10a      	cbz	r2, 80086bc <_svfiprintf_r+0x5c>
 80086b8:	2a25      	cmp	r2, #37	; 0x25
 80086ba:	d1f9      	bne.n	80086b0 <_svfiprintf_r+0x50>
 80086bc:	ebba 0b04 	subs.w	fp, sl, r4
 80086c0:	d00b      	beq.n	80086da <_svfiprintf_r+0x7a>
 80086c2:	465b      	mov	r3, fp
 80086c4:	4622      	mov	r2, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ff6d 	bl	80085a8 <__ssputs_r>
 80086ce:	3001      	adds	r0, #1
 80086d0:	f000 80aa 	beq.w	8008828 <_svfiprintf_r+0x1c8>
 80086d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d6:	445a      	add	r2, fp
 80086d8:	9209      	str	r2, [sp, #36]	; 0x24
 80086da:	f89a 3000 	ldrb.w	r3, [sl]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 80a2 	beq.w	8008828 <_svfiprintf_r+0x1c8>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ee:	f10a 0a01 	add.w	sl, sl, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086fa:	931a      	str	r3, [sp, #104]	; 0x68
 80086fc:	4654      	mov	r4, sl
 80086fe:	2205      	movs	r2, #5
 8008700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008704:	4851      	ldr	r0, [pc, #324]	; (800884c <_svfiprintf_r+0x1ec>)
 8008706:	f7f7 fdf3 	bl	80002f0 <memchr>
 800870a:	9a04      	ldr	r2, [sp, #16]
 800870c:	b9d8      	cbnz	r0, 8008746 <_svfiprintf_r+0xe6>
 800870e:	06d0      	lsls	r0, r2, #27
 8008710:	bf44      	itt	mi
 8008712:	2320      	movmi	r3, #32
 8008714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008718:	0711      	lsls	r1, r2, #28
 800871a:	bf44      	itt	mi
 800871c:	232b      	movmi	r3, #43	; 0x2b
 800871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b2a      	cmp	r3, #42	; 0x2a
 8008728:	d015      	beq.n	8008756 <_svfiprintf_r+0xf6>
 800872a:	9a07      	ldr	r2, [sp, #28]
 800872c:	4654      	mov	r4, sl
 800872e:	2000      	movs	r0, #0
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4621      	mov	r1, r4
 8008736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873a:	3b30      	subs	r3, #48	; 0x30
 800873c:	2b09      	cmp	r3, #9
 800873e:	d94e      	bls.n	80087de <_svfiprintf_r+0x17e>
 8008740:	b1b0      	cbz	r0, 8008770 <_svfiprintf_r+0x110>
 8008742:	9207      	str	r2, [sp, #28]
 8008744:	e014      	b.n	8008770 <_svfiprintf_r+0x110>
 8008746:	eba0 0308 	sub.w	r3, r0, r8
 800874a:	fa09 f303 	lsl.w	r3, r9, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	46a2      	mov	sl, r4
 8008754:	e7d2      	b.n	80086fc <_svfiprintf_r+0x9c>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d19      	adds	r1, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9103      	str	r1, [sp, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbb      	ittet	lt
 8008762:	425b      	neglt	r3, r3
 8008764:	f042 0202 	orrlt.w	r2, r2, #2
 8008768:	9307      	strge	r3, [sp, #28]
 800876a:	9307      	strlt	r3, [sp, #28]
 800876c:	bfb8      	it	lt
 800876e:	9204      	strlt	r2, [sp, #16]
 8008770:	7823      	ldrb	r3, [r4, #0]
 8008772:	2b2e      	cmp	r3, #46	; 0x2e
 8008774:	d10c      	bne.n	8008790 <_svfiprintf_r+0x130>
 8008776:	7863      	ldrb	r3, [r4, #1]
 8008778:	2b2a      	cmp	r3, #42	; 0x2a
 800877a:	d135      	bne.n	80087e8 <_svfiprintf_r+0x188>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	1d1a      	adds	r2, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	9203      	str	r2, [sp, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfb8      	it	lt
 8008788:	f04f 33ff 	movlt.w	r3, #4294967295
 800878c:	3402      	adds	r4, #2
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800885c <_svfiprintf_r+0x1fc>
 8008794:	7821      	ldrb	r1, [r4, #0]
 8008796:	2203      	movs	r2, #3
 8008798:	4650      	mov	r0, sl
 800879a:	f7f7 fda9 	bl	80002f0 <memchr>
 800879e:	b140      	cbz	r0, 80087b2 <_svfiprintf_r+0x152>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	eba0 000a 	sub.w	r0, r0, sl
 80087a6:	fa03 f000 	lsl.w	r0, r3, r0
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	4303      	orrs	r3, r0
 80087ae:	3401      	adds	r4, #1
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b6:	4826      	ldr	r0, [pc, #152]	; (8008850 <_svfiprintf_r+0x1f0>)
 80087b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087bc:	2206      	movs	r2, #6
 80087be:	f7f7 fd97 	bl	80002f0 <memchr>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d038      	beq.n	8008838 <_svfiprintf_r+0x1d8>
 80087c6:	4b23      	ldr	r3, [pc, #140]	; (8008854 <_svfiprintf_r+0x1f4>)
 80087c8:	bb1b      	cbnz	r3, 8008812 <_svfiprintf_r+0x1b2>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	3307      	adds	r3, #7
 80087ce:	f023 0307 	bic.w	r3, r3, #7
 80087d2:	3308      	adds	r3, #8
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	4433      	add	r3, r6
 80087da:	9309      	str	r3, [sp, #36]	; 0x24
 80087dc:	e767      	b.n	80086ae <_svfiprintf_r+0x4e>
 80087de:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e2:	460c      	mov	r4, r1
 80087e4:	2001      	movs	r0, #1
 80087e6:	e7a5      	b.n	8008734 <_svfiprintf_r+0xd4>
 80087e8:	2300      	movs	r3, #0
 80087ea:	3401      	adds	r4, #1
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	4619      	mov	r1, r3
 80087f0:	f04f 0c0a 	mov.w	ip, #10
 80087f4:	4620      	mov	r0, r4
 80087f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fa:	3a30      	subs	r2, #48	; 0x30
 80087fc:	2a09      	cmp	r2, #9
 80087fe:	d903      	bls.n	8008808 <_svfiprintf_r+0x1a8>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0c5      	beq.n	8008790 <_svfiprintf_r+0x130>
 8008804:	9105      	str	r1, [sp, #20]
 8008806:	e7c3      	b.n	8008790 <_svfiprintf_r+0x130>
 8008808:	fb0c 2101 	mla	r1, ip, r1, r2
 800880c:	4604      	mov	r4, r0
 800880e:	2301      	movs	r3, #1
 8008810:	e7f0      	b.n	80087f4 <_svfiprintf_r+0x194>
 8008812:	ab03      	add	r3, sp, #12
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	462a      	mov	r2, r5
 8008818:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <_svfiprintf_r+0x1f8>)
 800881a:	a904      	add	r1, sp, #16
 800881c:	4638      	mov	r0, r7
 800881e:	f3af 8000 	nop.w
 8008822:	1c42      	adds	r2, r0, #1
 8008824:	4606      	mov	r6, r0
 8008826:	d1d6      	bne.n	80087d6 <_svfiprintf_r+0x176>
 8008828:	89ab      	ldrh	r3, [r5, #12]
 800882a:	065b      	lsls	r3, r3, #25
 800882c:	f53f af2c 	bmi.w	8008688 <_svfiprintf_r+0x28>
 8008830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008832:	b01d      	add	sp, #116	; 0x74
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	ab03      	add	r3, sp, #12
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	462a      	mov	r2, r5
 800883e:	4b06      	ldr	r3, [pc, #24]	; (8008858 <_svfiprintf_r+0x1f8>)
 8008840:	a904      	add	r1, sp, #16
 8008842:	4638      	mov	r0, r7
 8008844:	f000 f9d4 	bl	8008bf0 <_printf_i>
 8008848:	e7eb      	b.n	8008822 <_svfiprintf_r+0x1c2>
 800884a:	bf00      	nop
 800884c:	080096ac 	.word	0x080096ac
 8008850:	080096b6 	.word	0x080096b6
 8008854:	00000000 	.word	0x00000000
 8008858:	080085a9 	.word	0x080085a9
 800885c:	080096b2 	.word	0x080096b2

08008860 <__sfputc_r>:
 8008860:	6893      	ldr	r3, [r2, #8]
 8008862:	3b01      	subs	r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	b410      	push	{r4}
 8008868:	6093      	str	r3, [r2, #8]
 800886a:	da08      	bge.n	800887e <__sfputc_r+0x1e>
 800886c:	6994      	ldr	r4, [r2, #24]
 800886e:	42a3      	cmp	r3, r4
 8008870:	db01      	blt.n	8008876 <__sfputc_r+0x16>
 8008872:	290a      	cmp	r1, #10
 8008874:	d103      	bne.n	800887e <__sfputc_r+0x1e>
 8008876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800887a:	f7ff bad5 	b.w	8007e28 <__swbuf_r>
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	1c58      	adds	r0, r3, #1
 8008882:	6010      	str	r0, [r2, #0]
 8008884:	7019      	strb	r1, [r3, #0]
 8008886:	4608      	mov	r0, r1
 8008888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800888c:	4770      	bx	lr

0800888e <__sfputs_r>:
 800888e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008890:	4606      	mov	r6, r0
 8008892:	460f      	mov	r7, r1
 8008894:	4614      	mov	r4, r2
 8008896:	18d5      	adds	r5, r2, r3
 8008898:	42ac      	cmp	r4, r5
 800889a:	d101      	bne.n	80088a0 <__sfputs_r+0x12>
 800889c:	2000      	movs	r0, #0
 800889e:	e007      	b.n	80088b0 <__sfputs_r+0x22>
 80088a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a4:	463a      	mov	r2, r7
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ffda 	bl	8008860 <__sfputc_r>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d1f3      	bne.n	8008898 <__sfputs_r+0xa>
 80088b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088b4 <_vfiprintf_r>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	460d      	mov	r5, r1
 80088ba:	b09d      	sub	sp, #116	; 0x74
 80088bc:	4614      	mov	r4, r2
 80088be:	4698      	mov	r8, r3
 80088c0:	4606      	mov	r6, r0
 80088c2:	b118      	cbz	r0, 80088cc <_vfiprintf_r+0x18>
 80088c4:	6983      	ldr	r3, [r0, #24]
 80088c6:	b90b      	cbnz	r3, 80088cc <_vfiprintf_r+0x18>
 80088c8:	f7ff fc88 	bl	80081dc <__sinit>
 80088cc:	4b89      	ldr	r3, [pc, #548]	; (8008af4 <_vfiprintf_r+0x240>)
 80088ce:	429d      	cmp	r5, r3
 80088d0:	d11b      	bne.n	800890a <_vfiprintf_r+0x56>
 80088d2:	6875      	ldr	r5, [r6, #4]
 80088d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d6:	07d9      	lsls	r1, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_vfiprintf_r+0x32>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	059a      	lsls	r2, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_vfiprintf_r+0x32>
 80088e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e2:	f7ff fd19 	bl	8008318 <__retarget_lock_acquire_recursive>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	071b      	lsls	r3, r3, #28
 80088ea:	d501      	bpl.n	80088f0 <_vfiprintf_r+0x3c>
 80088ec:	692b      	ldr	r3, [r5, #16]
 80088ee:	b9eb      	cbnz	r3, 800892c <_vfiprintf_r+0x78>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff faea 	bl	8007ecc <__swsetup_r>
 80088f8:	b1c0      	cbz	r0, 800892c <_vfiprintf_r+0x78>
 80088fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088fc:	07dc      	lsls	r4, r3, #31
 80088fe:	d50e      	bpl.n	800891e <_vfiprintf_r+0x6a>
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	b01d      	add	sp, #116	; 0x74
 8008906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890a:	4b7b      	ldr	r3, [pc, #492]	; (8008af8 <_vfiprintf_r+0x244>)
 800890c:	429d      	cmp	r5, r3
 800890e:	d101      	bne.n	8008914 <_vfiprintf_r+0x60>
 8008910:	68b5      	ldr	r5, [r6, #8]
 8008912:	e7df      	b.n	80088d4 <_vfiprintf_r+0x20>
 8008914:	4b79      	ldr	r3, [pc, #484]	; (8008afc <_vfiprintf_r+0x248>)
 8008916:	429d      	cmp	r5, r3
 8008918:	bf08      	it	eq
 800891a:	68f5      	ldreq	r5, [r6, #12]
 800891c:	e7da      	b.n	80088d4 <_vfiprintf_r+0x20>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	0598      	lsls	r0, r3, #22
 8008922:	d4ed      	bmi.n	8008900 <_vfiprintf_r+0x4c>
 8008924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008926:	f7ff fcf8 	bl	800831a <__retarget_lock_release_recursive>
 800892a:	e7e9      	b.n	8008900 <_vfiprintf_r+0x4c>
 800892c:	2300      	movs	r3, #0
 800892e:	9309      	str	r3, [sp, #36]	; 0x24
 8008930:	2320      	movs	r3, #32
 8008932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008936:	f8cd 800c 	str.w	r8, [sp, #12]
 800893a:	2330      	movs	r3, #48	; 0x30
 800893c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b00 <_vfiprintf_r+0x24c>
 8008940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008944:	f04f 0901 	mov.w	r9, #1
 8008948:	4623      	mov	r3, r4
 800894a:	469a      	mov	sl, r3
 800894c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008950:	b10a      	cbz	r2, 8008956 <_vfiprintf_r+0xa2>
 8008952:	2a25      	cmp	r2, #37	; 0x25
 8008954:	d1f9      	bne.n	800894a <_vfiprintf_r+0x96>
 8008956:	ebba 0b04 	subs.w	fp, sl, r4
 800895a:	d00b      	beq.n	8008974 <_vfiprintf_r+0xc0>
 800895c:	465b      	mov	r3, fp
 800895e:	4622      	mov	r2, r4
 8008960:	4629      	mov	r1, r5
 8008962:	4630      	mov	r0, r6
 8008964:	f7ff ff93 	bl	800888e <__sfputs_r>
 8008968:	3001      	adds	r0, #1
 800896a:	f000 80aa 	beq.w	8008ac2 <_vfiprintf_r+0x20e>
 800896e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008970:	445a      	add	r2, fp
 8008972:	9209      	str	r2, [sp, #36]	; 0x24
 8008974:	f89a 3000 	ldrb.w	r3, [sl]
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80a2 	beq.w	8008ac2 <_vfiprintf_r+0x20e>
 800897e:	2300      	movs	r3, #0
 8008980:	f04f 32ff 	mov.w	r2, #4294967295
 8008984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008988:	f10a 0a01 	add.w	sl, sl, #1
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	9307      	str	r3, [sp, #28]
 8008990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008994:	931a      	str	r3, [sp, #104]	; 0x68
 8008996:	4654      	mov	r4, sl
 8008998:	2205      	movs	r2, #5
 800899a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899e:	4858      	ldr	r0, [pc, #352]	; (8008b00 <_vfiprintf_r+0x24c>)
 80089a0:	f7f7 fca6 	bl	80002f0 <memchr>
 80089a4:	9a04      	ldr	r2, [sp, #16]
 80089a6:	b9d8      	cbnz	r0, 80089e0 <_vfiprintf_r+0x12c>
 80089a8:	06d1      	lsls	r1, r2, #27
 80089aa:	bf44      	itt	mi
 80089ac:	2320      	movmi	r3, #32
 80089ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b2:	0713      	lsls	r3, r2, #28
 80089b4:	bf44      	itt	mi
 80089b6:	232b      	movmi	r3, #43	; 0x2b
 80089b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089bc:	f89a 3000 	ldrb.w	r3, [sl]
 80089c0:	2b2a      	cmp	r3, #42	; 0x2a
 80089c2:	d015      	beq.n	80089f0 <_vfiprintf_r+0x13c>
 80089c4:	9a07      	ldr	r2, [sp, #28]
 80089c6:	4654      	mov	r4, sl
 80089c8:	2000      	movs	r0, #0
 80089ca:	f04f 0c0a 	mov.w	ip, #10
 80089ce:	4621      	mov	r1, r4
 80089d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d4:	3b30      	subs	r3, #48	; 0x30
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d94e      	bls.n	8008a78 <_vfiprintf_r+0x1c4>
 80089da:	b1b0      	cbz	r0, 8008a0a <_vfiprintf_r+0x156>
 80089dc:	9207      	str	r2, [sp, #28]
 80089de:	e014      	b.n	8008a0a <_vfiprintf_r+0x156>
 80089e0:	eba0 0308 	sub.w	r3, r0, r8
 80089e4:	fa09 f303 	lsl.w	r3, r9, r3
 80089e8:	4313      	orrs	r3, r2
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	46a2      	mov	sl, r4
 80089ee:	e7d2      	b.n	8008996 <_vfiprintf_r+0xe2>
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	1d19      	adds	r1, r3, #4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	9103      	str	r1, [sp, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bfbb      	ittet	lt
 80089fc:	425b      	neglt	r3, r3
 80089fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008a02:	9307      	strge	r3, [sp, #28]
 8008a04:	9307      	strlt	r3, [sp, #28]
 8008a06:	bfb8      	it	lt
 8008a08:	9204      	strlt	r2, [sp, #16]
 8008a0a:	7823      	ldrb	r3, [r4, #0]
 8008a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a0e:	d10c      	bne.n	8008a2a <_vfiprintf_r+0x176>
 8008a10:	7863      	ldrb	r3, [r4, #1]
 8008a12:	2b2a      	cmp	r3, #42	; 0x2a
 8008a14:	d135      	bne.n	8008a82 <_vfiprintf_r+0x1ce>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	1d1a      	adds	r2, r3, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	9203      	str	r2, [sp, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfb8      	it	lt
 8008a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a26:	3402      	adds	r4, #2
 8008a28:	9305      	str	r3, [sp, #20]
 8008a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b10 <_vfiprintf_r+0x25c>
 8008a2e:	7821      	ldrb	r1, [r4, #0]
 8008a30:	2203      	movs	r2, #3
 8008a32:	4650      	mov	r0, sl
 8008a34:	f7f7 fc5c 	bl	80002f0 <memchr>
 8008a38:	b140      	cbz	r0, 8008a4c <_vfiprintf_r+0x198>
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	eba0 000a 	sub.w	r0, r0, sl
 8008a40:	fa03 f000 	lsl.w	r0, r3, r0
 8008a44:	9b04      	ldr	r3, [sp, #16]
 8008a46:	4303      	orrs	r3, r0
 8008a48:	3401      	adds	r4, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	482c      	ldr	r0, [pc, #176]	; (8008b04 <_vfiprintf_r+0x250>)
 8008a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a56:	2206      	movs	r2, #6
 8008a58:	f7f7 fc4a 	bl	80002f0 <memchr>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d03f      	beq.n	8008ae0 <_vfiprintf_r+0x22c>
 8008a60:	4b29      	ldr	r3, [pc, #164]	; (8008b08 <_vfiprintf_r+0x254>)
 8008a62:	bb1b      	cbnz	r3, 8008aac <_vfiprintf_r+0x1f8>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	3307      	adds	r3, #7
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a72:	443b      	add	r3, r7
 8008a74:	9309      	str	r3, [sp, #36]	; 0x24
 8008a76:	e767      	b.n	8008948 <_vfiprintf_r+0x94>
 8008a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7a5      	b.n	80089ce <_vfiprintf_r+0x11a>
 8008a82:	2300      	movs	r3, #0
 8008a84:	3401      	adds	r4, #1
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f04f 0c0a 	mov.w	ip, #10
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a94:	3a30      	subs	r2, #48	; 0x30
 8008a96:	2a09      	cmp	r2, #9
 8008a98:	d903      	bls.n	8008aa2 <_vfiprintf_r+0x1ee>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0c5      	beq.n	8008a2a <_vfiprintf_r+0x176>
 8008a9e:	9105      	str	r1, [sp, #20]
 8008aa0:	e7c3      	b.n	8008a2a <_vfiprintf_r+0x176>
 8008aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e7f0      	b.n	8008a8e <_vfiprintf_r+0x1da>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4b16      	ldr	r3, [pc, #88]	; (8008b0c <_vfiprintf_r+0x258>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f3af 8000 	nop.w
 8008abc:	4607      	mov	r7, r0
 8008abe:	1c78      	adds	r0, r7, #1
 8008ac0:	d1d6      	bne.n	8008a70 <_vfiprintf_r+0x1bc>
 8008ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac4:	07d9      	lsls	r1, r3, #31
 8008ac6:	d405      	bmi.n	8008ad4 <_vfiprintf_r+0x220>
 8008ac8:	89ab      	ldrh	r3, [r5, #12]
 8008aca:	059a      	lsls	r2, r3, #22
 8008acc:	d402      	bmi.n	8008ad4 <_vfiprintf_r+0x220>
 8008ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad0:	f7ff fc23 	bl	800831a <__retarget_lock_release_recursive>
 8008ad4:	89ab      	ldrh	r3, [r5, #12]
 8008ad6:	065b      	lsls	r3, r3, #25
 8008ad8:	f53f af12 	bmi.w	8008900 <_vfiprintf_r+0x4c>
 8008adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ade:	e711      	b.n	8008904 <_vfiprintf_r+0x50>
 8008ae0:	ab03      	add	r3, sp, #12
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <_vfiprintf_r+0x258>)
 8008ae8:	a904      	add	r1, sp, #16
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 f880 	bl	8008bf0 <_printf_i>
 8008af0:	e7e4      	b.n	8008abc <_vfiprintf_r+0x208>
 8008af2:	bf00      	nop
 8008af4:	0800966c 	.word	0x0800966c
 8008af8:	0800968c 	.word	0x0800968c
 8008afc:	0800964c 	.word	0x0800964c
 8008b00:	080096ac 	.word	0x080096ac
 8008b04:	080096b6 	.word	0x080096b6
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	0800888f 	.word	0x0800888f
 8008b10:	080096b2 	.word	0x080096b2

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4616      	mov	r6, r2
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfb8      	it	lt
 8008b28:	4613      	movlt	r3, r2
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b30:	4607      	mov	r7, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b10a      	cbz	r2, 8008b3a <_printf_common+0x26>
 8008b36:	3301      	adds	r3, #1
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	0699      	lsls	r1, r3, #26
 8008b3e:	bf42      	ittt	mi
 8008b40:	6833      	ldrmi	r3, [r6, #0]
 8008b42:	3302      	addmi	r3, #2
 8008b44:	6033      	strmi	r3, [r6, #0]
 8008b46:	6825      	ldr	r5, [r4, #0]
 8008b48:	f015 0506 	ands.w	r5, r5, #6
 8008b4c:	d106      	bne.n	8008b5c <_printf_common+0x48>
 8008b4e:	f104 0a19 	add.w	sl, r4, #25
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	6832      	ldr	r2, [r6, #0]
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dc26      	bgt.n	8008baa <_printf_common+0x96>
 8008b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b60:	1e13      	subs	r3, r2, #0
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2301      	movne	r3, #1
 8008b68:	0692      	lsls	r2, r2, #26
 8008b6a:	d42b      	bmi.n	8008bc4 <_printf_common+0xb0>
 8008b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b70:	4649      	mov	r1, r9
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c0      	blx	r8
 8008b76:	3001      	adds	r0, #1
 8008b78:	d01e      	beq.n	8008bb8 <_printf_common+0xa4>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	68e5      	ldr	r5, [r4, #12]
 8008b7e:	6832      	ldr	r2, [r6, #0]
 8008b80:	f003 0306 	and.w	r3, r3, #6
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	bf08      	it	eq
 8008b88:	1aad      	subeq	r5, r5, r2
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	bf0c      	ite	eq
 8008b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b94:	2500      	movne	r5, #0
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bfc4      	itt	gt
 8008b9a:	1a9b      	subgt	r3, r3, r2
 8008b9c:	18ed      	addgt	r5, r5, r3
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	341a      	adds	r4, #26
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d11a      	bne.n	8008bdc <_printf_common+0xc8>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e008      	b.n	8008bbc <_printf_common+0xa8>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4652      	mov	r2, sl
 8008bae:	4649      	mov	r1, r9
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	47c0      	blx	r8
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d103      	bne.n	8008bc0 <_printf_common+0xac>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	e7c6      	b.n	8008b52 <_printf_common+0x3e>
 8008bc4:	18e1      	adds	r1, r4, r3
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	2030      	movs	r0, #48	; 0x30
 8008bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bce:	4422      	add	r2, r4
 8008bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd8:	3302      	adds	r3, #2
 8008bda:	e7c7      	b.n	8008b6c <_printf_common+0x58>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4622      	mov	r2, r4
 8008be0:	4649      	mov	r1, r9
 8008be2:	4638      	mov	r0, r7
 8008be4:	47c0      	blx	r8
 8008be6:	3001      	adds	r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa4>
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7d9      	b.n	8008ba2 <_printf_common+0x8e>
	...

08008bf0 <_printf_i>:
 8008bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	7e0f      	ldrb	r7, [r1, #24]
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	2f78      	cmp	r7, #120	; 0x78
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	469a      	mov	sl, r3
 8008c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c06:	d807      	bhi.n	8008c18 <_printf_i+0x28>
 8008c08:	2f62      	cmp	r7, #98	; 0x62
 8008c0a:	d80a      	bhi.n	8008c22 <_printf_i+0x32>
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f000 80d8 	beq.w	8008dc2 <_printf_i+0x1d2>
 8008c12:	2f58      	cmp	r7, #88	; 0x58
 8008c14:	f000 80a3 	beq.w	8008d5e <_printf_i+0x16e>
 8008c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c20:	e03a      	b.n	8008c98 <_printf_i+0xa8>
 8008c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c26:	2b15      	cmp	r3, #21
 8008c28:	d8f6      	bhi.n	8008c18 <_printf_i+0x28>
 8008c2a:	a101      	add	r1, pc, #4	; (adr r1, 8008c30 <_printf_i+0x40>)
 8008c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	08008c19 	.word	0x08008c19
 8008c3c:	08008c19 	.word	0x08008c19
 8008c40:	08008c19 	.word	0x08008c19
 8008c44:	08008c19 	.word	0x08008c19
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008c19 	.word	0x08008c19
 8008c50:	08008c19 	.word	0x08008c19
 8008c54:	08008c19 	.word	0x08008c19
 8008c58:	08008c19 	.word	0x08008c19
 8008c5c:	08008da9 	.word	0x08008da9
 8008c60:	08008ccd 	.word	0x08008ccd
 8008c64:	08008d8b 	.word	0x08008d8b
 8008c68:	08008c19 	.word	0x08008c19
 8008c6c:	08008c19 	.word	0x08008c19
 8008c70:	08008dcb 	.word	0x08008dcb
 8008c74:	08008c19 	.word	0x08008c19
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008c19 	.word	0x08008c19
 8008c80:	08008c19 	.word	0x08008c19
 8008c84:	08008d93 	.word	0x08008d93
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a3      	b.n	8008de4 <_printf_i+0x1f4>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	6829      	ldr	r1, [r5, #0]
 8008ca0:	0606      	lsls	r6, r0, #24
 8008ca2:	f101 0304 	add.w	r3, r1, #4
 8008ca6:	d50a      	bpl.n	8008cbe <_printf_i+0xce>
 8008ca8:	680e      	ldr	r6, [r1, #0]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	da03      	bge.n	8008cb8 <_printf_i+0xc8>
 8008cb0:	232d      	movs	r3, #45	; 0x2d
 8008cb2:	4276      	negs	r6, r6
 8008cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb8:	485e      	ldr	r0, [pc, #376]	; (8008e34 <_printf_i+0x244>)
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e019      	b.n	8008cf2 <_printf_i+0x102>
 8008cbe:	680e      	ldr	r6, [r1, #0]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cc6:	bf18      	it	ne
 8008cc8:	b236      	sxthne	r6, r6
 8008cca:	e7ef      	b.n	8008cac <_printf_i+0xbc>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1d19      	adds	r1, r3, #4
 8008cd2:	6029      	str	r1, [r5, #0]
 8008cd4:	0601      	lsls	r1, r0, #24
 8008cd6:	d501      	bpl.n	8008cdc <_printf_i+0xec>
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <_printf_i+0xf2>
 8008cdc:	0646      	lsls	r6, r0, #25
 8008cde:	d5fb      	bpl.n	8008cd8 <_printf_i+0xe8>
 8008ce0:	881e      	ldrh	r6, [r3, #0]
 8008ce2:	4854      	ldr	r0, [pc, #336]	; (8008e34 <_printf_i+0x244>)
 8008ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2308      	moveq	r3, #8
 8008cea:	230a      	movne	r3, #10
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf2:	6865      	ldr	r5, [r4, #4]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90e      	cbnz	r6, 8008d08 <_printf_i+0x118>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d04d      	beq.n	8008da4 <_printf_i+0x1b4>
 8008d08:	4615      	mov	r5, r2
 8008d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d18:	4637      	mov	r7, r6
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x11a>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x14c>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07de      	lsls	r6, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x14c>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	; 0x30
 8008d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d3c:	1b52      	subs	r2, r2, r5
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee2 	bl	8008b14 <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14c      	bne.n	8008dee <_printf_i+0x1fe>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	4835      	ldr	r0, [pc, #212]	; (8008e34 <_printf_i+0x244>)
 8008d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d6c:	6029      	str	r1, [r5, #0]
 8008d6e:	061d      	lsls	r5, r3, #24
 8008d70:	d514      	bpl.n	8008d9c <_printf_i+0x1ac>
 8008d72:	07df      	lsls	r7, r3, #31
 8008d74:	bf44      	itt	mi
 8008d76:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7a:	6023      	strmi	r3, [r4, #0]
 8008d7c:	b91e      	cbnz	r6, 8008d86 <_printf_i+0x196>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f023 0320 	bic.w	r3, r3, #32
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2310      	movs	r3, #16
 8008d88:	e7b0      	b.n	8008cec <_printf_i+0xfc>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 0320 	orr.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	2378      	movs	r3, #120	; 0x78
 8008d94:	4828      	ldr	r0, [pc, #160]	; (8008e38 <_printf_i+0x248>)
 8008d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9a:	e7e3      	b.n	8008d64 <_printf_i+0x174>
 8008d9c:	0659      	lsls	r1, r3, #25
 8008d9e:	bf48      	it	mi
 8008da0:	b2b6      	uxthmi	r6, r6
 8008da2:	e7e6      	b.n	8008d72 <_printf_i+0x182>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bb      	b.n	8008d20 <_printf_i+0x130>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1cc>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1d2>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c8>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7ba      	b.n	8008d40 <_printf_i+0x150>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fa8a 	bl	80002f0 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1f2>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7a8      	b.n	8008d40 <_printf_i+0x150>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ab      	beq.n	8008d54 <_printf_i+0x164>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x23a>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a4      	b.n	8008d58 <_printf_i+0x168>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09b      	beq.n	8008d54 <_printf_i+0x164>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x21e>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x212>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x22e>
 8008e32:	bf00      	nop
 8008e34:	080096bd 	.word	0x080096bd
 8008e38:	080096ce 	.word	0x080096ce

08008e3c <_sbrk_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_sbrk_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7f9 fa78 	bl	800233c <_sbrk>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_sbrk_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_sbrk_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	24000800 	.word	0x24000800

08008e5c <__sread>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	460c      	mov	r4, r1
 8008e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e64:	f000 f8ea 	bl	800903c <_read_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	bfab      	itete	ge
 8008e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e70:	181b      	addge	r3, r3, r0
 8008e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e76:	bfac      	ite	ge
 8008e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e7a:	81a3      	strhlt	r3, [r4, #12]
 8008e7c:	bd10      	pop	{r4, pc}

08008e7e <__swrite>:
 8008e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e82:	461f      	mov	r7, r3
 8008e84:	898b      	ldrh	r3, [r1, #12]
 8008e86:	05db      	lsls	r3, r3, #23
 8008e88:	4605      	mov	r5, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	d505      	bpl.n	8008e9c <__swrite+0x1e>
 8008e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e94:	2302      	movs	r3, #2
 8008e96:	2200      	movs	r2, #0
 8008e98:	f000 f868 	bl	8008f6c <_lseek_r>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	4628      	mov	r0, r5
 8008eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	f000 b817 	b.w	8008ee4 <_write_r>

08008eb6 <__sseek>:
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	460c      	mov	r4, r1
 8008eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebe:	f000 f855 	bl	8008f6c <_lseek_r>
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	bf15      	itete	ne
 8008ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ed2:	81a3      	strheq	r3, [r4, #12]
 8008ed4:	bf18      	it	ne
 8008ed6:	81a3      	strhne	r3, [r4, #12]
 8008ed8:	bd10      	pop	{r4, pc}

08008eda <__sclose>:
 8008eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ede:	f000 b813 	b.w	8008f08 <_close_r>
	...

08008ee4 <_write_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4d07      	ldr	r5, [pc, #28]	; (8008f04 <_write_r+0x20>)
 8008ee8:	4604      	mov	r4, r0
 8008eea:	4608      	mov	r0, r1
 8008eec:	4611      	mov	r1, r2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	602a      	str	r2, [r5, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f7f9 f9d1 	bl	800229a <_write>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_write_r+0x1e>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_write_r+0x1e>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	24000800 	.word	0x24000800

08008f08 <_close_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d06      	ldr	r5, [pc, #24]	; (8008f24 <_close_r+0x1c>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7f9 f9dd 	bl	80022d2 <_close>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_close_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_close_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	24000800 	.word	0x24000800

08008f28 <_fstat_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d07      	ldr	r5, [pc, #28]	; (8008f48 <_fstat_r+0x20>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	4611      	mov	r1, r2
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	f7f9 f9d8 	bl	80022ea <_fstat>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	d102      	bne.n	8008f44 <_fstat_r+0x1c>
 8008f3e:	682b      	ldr	r3, [r5, #0]
 8008f40:	b103      	cbz	r3, 8008f44 <_fstat_r+0x1c>
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	bf00      	nop
 8008f48:	24000800 	.word	0x24000800

08008f4c <_isatty_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d06      	ldr	r5, [pc, #24]	; (8008f68 <_isatty_r+0x1c>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	602b      	str	r3, [r5, #0]
 8008f58:	f7f9 f9d7 	bl	800230a <_isatty>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_isatty_r+0x1a>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_isatty_r+0x1a>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	24000800 	.word	0x24000800

08008f6c <_lseek_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4d07      	ldr	r5, [pc, #28]	; (8008f8c <_lseek_r+0x20>)
 8008f70:	4604      	mov	r4, r0
 8008f72:	4608      	mov	r0, r1
 8008f74:	4611      	mov	r1, r2
 8008f76:	2200      	movs	r2, #0
 8008f78:	602a      	str	r2, [r5, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f7f9 f9d0 	bl	8002320 <_lseek>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_lseek_r+0x1e>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_lseek_r+0x1e>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	24000800 	.word	0x24000800

08008f90 <memmove>:
 8008f90:	4288      	cmp	r0, r1
 8008f92:	b510      	push	{r4, lr}
 8008f94:	eb01 0402 	add.w	r4, r1, r2
 8008f98:	d902      	bls.n	8008fa0 <memmove+0x10>
 8008f9a:	4284      	cmp	r4, r0
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	d807      	bhi.n	8008fb0 <memmove+0x20>
 8008fa0:	1e43      	subs	r3, r0, #1
 8008fa2:	42a1      	cmp	r1, r4
 8008fa4:	d008      	beq.n	8008fb8 <memmove+0x28>
 8008fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fae:	e7f8      	b.n	8008fa2 <memmove+0x12>
 8008fb0:	4402      	add	r2, r0
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	428a      	cmp	r2, r1
 8008fb6:	d100      	bne.n	8008fba <memmove+0x2a>
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fc2:	e7f7      	b.n	8008fb4 <memmove+0x24>

08008fc4 <__malloc_lock>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__malloc_lock+0x8>)
 8008fc6:	f7ff b9a7 	b.w	8008318 <__retarget_lock_acquire_recursive>
 8008fca:	bf00      	nop
 8008fcc:	240007f4 	.word	0x240007f4

08008fd0 <__malloc_unlock>:
 8008fd0:	4801      	ldr	r0, [pc, #4]	; (8008fd8 <__malloc_unlock+0x8>)
 8008fd2:	f7ff b9a2 	b.w	800831a <__retarget_lock_release_recursive>
 8008fd6:	bf00      	nop
 8008fd8:	240007f4 	.word	0x240007f4

08008fdc <_realloc_r>:
 8008fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	4614      	mov	r4, r2
 8008fe4:	460e      	mov	r6, r1
 8008fe6:	b921      	cbnz	r1, 8008ff2 <_realloc_r+0x16>
 8008fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fec:	4611      	mov	r1, r2
 8008fee:	f7ff ba67 	b.w	80084c0 <_malloc_r>
 8008ff2:	b92a      	cbnz	r2, 8009000 <_realloc_r+0x24>
 8008ff4:	f7ff f9f8 	bl	80083e8 <_free_r>
 8008ff8:	4625      	mov	r5, r4
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009000:	f000 f82e 	bl	8009060 <_malloc_usable_size_r>
 8009004:	4284      	cmp	r4, r0
 8009006:	4607      	mov	r7, r0
 8009008:	d802      	bhi.n	8009010 <_realloc_r+0x34>
 800900a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800900e:	d812      	bhi.n	8009036 <_realloc_r+0x5a>
 8009010:	4621      	mov	r1, r4
 8009012:	4640      	mov	r0, r8
 8009014:	f7ff fa54 	bl	80084c0 <_malloc_r>
 8009018:	4605      	mov	r5, r0
 800901a:	2800      	cmp	r0, #0
 800901c:	d0ed      	beq.n	8008ffa <_realloc_r+0x1e>
 800901e:	42bc      	cmp	r4, r7
 8009020:	4622      	mov	r2, r4
 8009022:	4631      	mov	r1, r6
 8009024:	bf28      	it	cs
 8009026:	463a      	movcs	r2, r7
 8009028:	f7fe fe3a 	bl	8007ca0 <memcpy>
 800902c:	4631      	mov	r1, r6
 800902e:	4640      	mov	r0, r8
 8009030:	f7ff f9da 	bl	80083e8 <_free_r>
 8009034:	e7e1      	b.n	8008ffa <_realloc_r+0x1e>
 8009036:	4635      	mov	r5, r6
 8009038:	e7df      	b.n	8008ffa <_realloc_r+0x1e>
	...

0800903c <_read_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d07      	ldr	r5, [pc, #28]	; (800905c <_read_r+0x20>)
 8009040:	4604      	mov	r4, r0
 8009042:	4608      	mov	r0, r1
 8009044:	4611      	mov	r1, r2
 8009046:	2200      	movs	r2, #0
 8009048:	602a      	str	r2, [r5, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	f7f9 f908 	bl	8002260 <_read>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_read_r+0x1e>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_read_r+0x1e>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	24000800 	.word	0x24000800

08009060 <_malloc_usable_size_r>:
 8009060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009064:	1f18      	subs	r0, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfbc      	itt	lt
 800906a:	580b      	ldrlt	r3, [r1, r0]
 800906c:	18c0      	addlt	r0, r0, r3
 800906e:	4770      	bx	lr

08009070 <_init>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	bf00      	nop
 8009074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009076:	bc08      	pop	{r3}
 8009078:	469e      	mov	lr, r3
 800907a:	4770      	bx	lr

0800907c <_fini>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr
