
JO1_Embedded_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c34  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08013ed8  08013ed8  00014ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014768  08014768  000161e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014768  08014768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014770  08014770  000161e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014770  08014770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014774  08014774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  24000000  08014778  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005640  240001e8  0801495c  000161e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24005828  0801495c  00016828  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000161e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032e60  00000000  00000000  00016212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e8b  00000000  00000000  00049072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002698  00000000  00000000  0004ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001df6  00000000  00000000  00051598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000419a8  00000000  00000000  0005338e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030fdf  00000000  00000000  00094d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a3a8d  00000000  00000000  000c5d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002697a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc68  00000000  00000000  002697e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00275450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013ebc 	.word	0x08013ebc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08013ebc 	.word	0x08013ebc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <can_receive_encoder>:
#include "can_routines.h"

can_status_t can_receive_encoder(FDCAN_HandleTypeDef *hfdcan,
                               FDCAN_RxHeaderTypeDef *rx_header,
                               uint16_t *encoder_value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b096      	sub	sp, #88	@ 0x58
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
    uint8_t rx_data[CAN_RX_BUFFER_SIZE];

    // Validate parameters

    if (hfdcan == NULL || rx_header == NULL || encoder_value == NULL) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d005      	beq.n	8000bb2 <can_receive_encoder+0x1e>
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <can_receive_encoder+0x1e>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <can_receive_encoder+0x22>
        return CAN_STATUS_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e024      	b.n	8000c00 <can_receive_encoder+0x6c>
    }

    // Attempt to get message from FIFO0

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, rx_header, rx_data) != HAL_OK) {
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	2140      	movs	r1, #64	@ 0x40
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f003 fd78 	bl	80046b4 <HAL_FDCAN_GetRxMessage>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <can_receive_encoder+0x3a>
        return CAN_STATUS_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e018      	b.n	8000c00 <can_receive_encoder+0x6c>
    }

    // Check data length

    uint8_t data_length = (rx_header->DataLength >> 16) & 0x0F;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	0c1b      	lsrs	r3, r3, #16
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    if (data_length != CAN_ENCODER_DLC) {
 8000bde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d001      	beq.n	8000bea <can_receive_encoder+0x56>
        return CAN_STATUS_INVALID_LENGTH;
 8000be6:	2302      	movs	r3, #2
 8000be8:	e00a      	b.n	8000c00 <can_receive_encoder+0x6c>
    }

    // Combine bytes into encoder value

    *encoder_value = (uint16_t)((rx_data[1] << 8) | rx_data[0]);
 8000bea:	7d7b      	ldrb	r3, [r7, #21]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	7d3b      	ldrb	r3, [r7, #20]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	801a      	strh	r2, [r3, #0]

    return CAN_STATUS_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3758      	adds	r7, #88	@ 0x58
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <encoder_calculate_distance>:

#include "main.h"
#include "encoder_driver.h"

float encoder_calculate_distance(uint16_t encoder_counts)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
    // Calculate distance by dividing encoder counts by CPR and multiplying by wheel circumference

	float distance = (float)encoder_counts / (float)ENCODER_CPR * ENCODER_WHEEL_CIRCUMFERENCE_M;
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c1c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000c44 <encoder_calculate_distance+0x3c>
 8000c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c24:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000c48 <encoder_calculate_distance+0x40>
 8000c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2c:	edc7 7a03 	vstr	s15, [r7, #12]

    return distance;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	ee07 3a90 	vmov	s15, r3
}
 8000c36:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	43520000 	.word	0x43520000
 8000c48:	3e5ac156 	.word	0x3e5ac156

08000c4c <gyro_orient_init>:

#include "main.h"
#include "gyro_orientation.h"

void gyro_orient_init(gyro_orient_state_t* state)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    if (state != NULL) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00a      	beq.n	8000c70 <gyro_orient_init+0x24>
    	state->yaw_angle = 0.0f;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f04f 0200 	mov.w	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
        state->prev_yaw_rate = 0.0f;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
        state->prev_timestamp = 0;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
    }
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <gyro_orient_update>:

float gyro_orient_update(gyro_orient_state_t* state,
                        const imu_data_t* imu_data,
                        uint32_t timestamp)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
    if (state == NULL || imu_data == NULL) {
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <gyro_orient_update+0x18>
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <gyro_orient_update+0x1e>
        return 0.0f;
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e059      	b.n	8000d4e <gyro_orient_update+0xd2>
    }

    // Calculate time delta in seconds

    float delta_time = (float)(timestamp - state->prev_timestamp) / GYRO_ORIENT_MS_TO_S;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000caa:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000d60 <gyro_orient_update+0xe4>
 8000cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb2:	edc7 7a05 	vstr	s15, [r7, #20]

    // Integrate yaw rate using trapezoidal method

    float yaw_change = 0.5f * (state->prev_yaw_rate + imu_data->gz) * delta_time;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cce:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd6:	edc7 7a04 	vstr	s15, [r7, #16]

    // Update cumulative yaw angle

    state->yaw_angle += yaw_change;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	ed93 7a00 	vldr	s14, [r3]
 8000ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	edc3 7a00 	vstr	s15, [r3]

    // Normalize angle to 0-360 range

    if (state->yaw_angle < GYRO_ORIENT_MIN_DEG) {
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfc:	d50a      	bpl.n	8000d14 <gyro_orient_update+0x98>
        state->yaw_angle += GYRO_ORIENT_MAX_DEG;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d64 <gyro_orient_update+0xe8>
 8000d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	edc3 7a00 	vstr	s15, [r3]
 8000d12:	e013      	b.n	8000d3c <gyro_orient_update+0xc0>
    } else if (state->yaw_angle >= GYRO_ORIENT_MAX_DEG) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000d64 <gyro_orient_update+0xe8>
 8000d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	db09      	blt.n	8000d3c <gyro_orient_update+0xc0>
        state->yaw_angle -= GYRO_ORIENT_MAX_DEG;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000d64 <gyro_orient_update+0xe8>
 8000d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	edc3 7a00 	vstr	s15, [r3]
    }

    // Store current values for next iteration

    state->prev_yaw_rate = imu_data->gz;
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	605a      	str	r2, [r3, #4]
    state->prev_timestamp = timestamp;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	609a      	str	r2, [r3, #8]

    return state->yaw_angle;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
}
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eeb0 0a67 	vmov.f32	s0, s15
 8000d56:	371c      	adds	r7, #28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	447a0000 	.word	0x447a0000
 8000d64:	43b40000 	.word	0x43b40000

08000d68 <imu_setup_routine>:
static imu_kalman_filter_t kf_gx, kf_gy, kf_gz;

/* Functions */

void imu_setup_routine(I2C_HandleTypeDef *I2Cx)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	imu_init(I2Cx, AD0_LOW, AFSR_2G, GFSR_250DPS, IMU_DEFAULT_COMP_TAU, IMU_DEFAULT_SAMPLE_TIME);
 8000d70:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8000df8 <imu_setup_routine+0x90>
 8000d74:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8000dfc <imu_setup_routine+0x94>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2168      	movs	r1, #104	@ 0x68
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f852 	bl	8000e28 <imu_init>

    // Initialize Kalman filters

    // Lower process noise for gyroscope, moderate measurement noise

    imu_kalman_init(&kf_gx, KF_GYRO_PROCESS_NOISE, KF_GYRO_MEASURE_NOISE, KF_GYRO_INIT_VALUE);
 8000d84:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8000e00 <imu_setup_routine+0x98>
 8000d88:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8000e04 <imu_setup_routine+0x9c>
 8000d8c:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000e08 <imu_setup_routine+0xa0>
 8000d90:	481e      	ldr	r0, [pc, #120]	@ (8000e0c <imu_setup_routine+0xa4>)
 8000d92:	f000 fc11 	bl	80015b8 <imu_kalman_init>
    imu_kalman_init(&kf_gy, KF_GYRO_PROCESS_NOISE, KF_GYRO_MEASURE_NOISE, KF_GYRO_INIT_VALUE);
 8000d96:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000e00 <imu_setup_routine+0x98>
 8000d9a:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8000e04 <imu_setup_routine+0x9c>
 8000d9e:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8000e08 <imu_setup_routine+0xa0>
 8000da2:	481b      	ldr	r0, [pc, #108]	@ (8000e10 <imu_setup_routine+0xa8>)
 8000da4:	f000 fc08 	bl	80015b8 <imu_kalman_init>
    imu_kalman_init(&kf_gz, KF_GYRO_PROCESS_NOISE, KF_GYRO_MEASURE_NOISE, KF_GYRO_INIT_VALUE);
 8000da8:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8000e00 <imu_setup_routine+0x98>
 8000dac:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8000e04 <imu_setup_routine+0x9c>
 8000db0:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8000e08 <imu_setup_routine+0xa0>
 8000db4:	4817      	ldr	r0, [pc, #92]	@ (8000e14 <imu_setup_routine+0xac>)
 8000db6:	f000 fbff 	bl	80015b8 <imu_kalman_init>

	// Slightly more process noise for accelerometer, higher measurement noise

    imu_kalman_init(&kf_ax, KF_ACCEL_PROCESS_NOISE, KF_ACCEL_MEASURE_NOISE, KF_ACCEL_INIT_VALUE);
 8000dba:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8000e00 <imu_setup_routine+0x98>
 8000dbe:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8000dc2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8000e18 <imu_setup_routine+0xb0>
 8000dc6:	4815      	ldr	r0, [pc, #84]	@ (8000e1c <imu_setup_routine+0xb4>)
 8000dc8:	f000 fbf6 	bl	80015b8 <imu_kalman_init>
    imu_kalman_init(&kf_ay, KF_ACCEL_PROCESS_NOISE, KF_ACCEL_MEASURE_NOISE, KF_ACCEL_INIT_VALUE);
 8000dcc:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8000e00 <imu_setup_routine+0x98>
 8000dd0:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8000dd4:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8000e18 <imu_setup_routine+0xb0>
 8000dd8:	4811      	ldr	r0, [pc, #68]	@ (8000e20 <imu_setup_routine+0xb8>)
 8000dda:	f000 fbed 	bl	80015b8 <imu_kalman_init>
    imu_kalman_init(&kf_az, KF_ACCEL_PROCESS_NOISE, KF_ACCEL_MEASURE_NOISE, KF_ACCEL_INIT_VALUE);
 8000dde:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8000e00 <imu_setup_routine+0x98>
 8000de2:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8000de6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000e18 <imu_setup_routine+0xb0>
 8000dea:	480e      	ldr	r0, [pc, #56]	@ (8000e24 <imu_setup_routine+0xbc>)
 8000dec:	f000 fbe4 	bl	80015b8 <imu_kalman_init>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	3b83126f 	.word	0x3b83126f
 8000dfc:	3f7ae148 	.word	0x3f7ae148
 8000e00:	00000000 	.word	0x00000000
 8000e04:	3e99999a 	.word	0x3e99999a
 8000e08:	3c23d70a 	.word	0x3c23d70a
 8000e0c:	24000278 	.word	0x24000278
 8000e10:	2400028c 	.word	0x2400028c
 8000e14:	240002a0 	.word	0x240002a0
 8000e18:	3d4ccccd 	.word	0x3d4ccccd
 8000e1c:	2400023c 	.word	0x2400023c
 8000e20:	24000250 	.word	0x24000250
 8000e24:	24000264 	.word	0x24000264

08000e28 <imu_init>:

void imu_init(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e3a:	edc7 0a00 	vstr	s1, [r7]
 8000e3e:	4603      	mov	r3, r0
 8000e40:	72fb      	strb	r3, [r7, #11]
 8000e42:	460b      	mov	r3, r1
 8000e44:	72bb      	strb	r3, [r7, #10]
 8000e46:	4613      	mov	r3, r2
 8000e48:	727b      	strb	r3, [r7, #9]
    uint8_t select = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75bb      	strb	r3, [r7, #22]

    // Save values

    mpu_6050_addr = addr << 1;
 8000e4e:	7afb      	ldrb	r3, [r7, #11]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b34      	ldr	r3, [pc, #208]	@ (8000f28 <imu_init+0x100>)
 8000e56:	701a      	strb	r2, [r3, #0]
    tau_val = tau;
 8000e58:	4a34      	ldr	r2, [pc, #208]	@ (8000f2c <imu_init+0x104>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
    dt_val = dt;
 8000e5e:	4a34      	ldr	r2, [pc, #208]	@ (8000f30 <imu_init+0x108>)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	6013      	str	r3, [r2, #0]

    HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(I2Cx, (mpu_6050_addr + 0), 1, MPU6050_I2C_TIMEOUT_MS);
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <imu_init+0x100>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6e:	2201      	movs	r2, #1
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f004 fc43 	bl	80056fc <HAL_I2C_IsDeviceReady>
 8000e76:	4603      	mov	r3, r0
 8000e78:	75fb      	strb	r3, [r7, #23]

    if (ret == HAL_OK) {
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d103      	bne.n	8000e88 <imu_init+0x60>
        printf("THE DEVICE IS OK\n\r");
 8000e80:	482c      	ldr	r0, [pc, #176]	@ (8000f34 <imu_init+0x10c>)
 8000e82:	f00e faaf 	bl	800f3e4 <iprintf>
 8000e86:	e002      	b.n	8000e8e <imu_init+0x66>
    }
    else {
        printf("THE DEVICE IS NOT READY\n\r");
 8000e88:	482b      	ldr	r0, [pc, #172]	@ (8000f38 <imu_init+0x110>)
 8000e8a:	f00e faab 	bl	800f3e4 <iprintf>
    }

    // Quit sleep mode and enable temperature sensor

    select = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75bb      	strb	r3, [r7, #22]

    ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_PWR_MGMT_1, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 8000e92:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <imu_init+0x100>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4619      	mov	r1, r3
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 0316 	add.w	r3, r7, #22
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	226b      	movs	r2, #107	@ 0x6b
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f004 f9f7 	bl	80052a0 <HAL_I2C_Mem_Write>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	75fb      	strb	r3, [r7, #23]

    if (ret == HAL_OK) {
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <imu_init+0x9c>
        printf("OUT OF SLEEP MODE AND TEMPERATURE SENSOR ON IS OK\n\r");
 8000ebc:	481f      	ldr	r0, [pc, #124]	@ (8000f3c <imu_init+0x114>)
 8000ebe:	f00e fa91 	bl	800f3e4 <iprintf>
 8000ec2:	e002      	b.n	8000eca <imu_init+0xa2>
    }
    else {
        printf("SLEEP MODE AND TEMPERATURE SENSOR ERROR\n\r");
 8000ec4:	481e      	ldr	r0, [pc, #120]	@ (8000f40 <imu_init+0x118>)
 8000ec6:	f00e fa8d 	bl	800f3e4 <iprintf>
    }

    // Set the full scale ranges

    ret = imu_write_accel_full_scale_range(I2Cx, aScale);
 8000eca:	7abb      	ldrb	r3, [r7, #10]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f000 fad6 	bl	8001480 <imu_write_accel_full_scale_range>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	75fb      	strb	r3, [r7, #23]

    if (ret == HAL_OK) {
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <imu_init+0xbe>
        printf("ACCELEROMETER SCALE IS OK\n\r");
 8000ede:	4819      	ldr	r0, [pc, #100]	@ (8000f44 <imu_init+0x11c>)
 8000ee0:	f00e fa80 	bl	800f3e4 <iprintf>
 8000ee4:	e002      	b.n	8000eec <imu_init+0xc4>
    }
    else {
        printf("ACCELEROMETER SCALE NOT READY\n\r");
 8000ee6:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <imu_init+0x120>)
 8000ee8:	f00e fa7c 	bl	800f3e4 <iprintf>
    }

    ret = imu_write_gyro_full_scale_range(I2Cx, gScale);
 8000eec:	7a7b      	ldrb	r3, [r7, #9]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f000 fa25 	bl	8001340 <imu_write_gyro_full_scale_range>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]

    if (ret == HAL_OK) {
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <imu_init+0xe0>
        printf("GYROSCOPE SCALE IS OK\n\r");
 8000f00:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <imu_init+0x124>)
 8000f02:	f00e fa6f 	bl	800f3e4 <iprintf>
 8000f06:	e002      	b.n	8000f0e <imu_init+0xe6>
    }
    else {
        printf("GYROSCOPE SCALE NOT READY\n\r");
 8000f08:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <imu_init+0x128>)
 8000f0a:	f00e fa6b 	bl	800f3e4 <iprintf>
    }

    // Calibrate the accelerometer and the gyroscope

    imu_calibrate_accel(I2Cx, IMU_CAL_SAMPLES);
 8000f0e:	2164      	movs	r1, #100	@ 0x64
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 f879 	bl	8001008 <imu_calibrate_accel>
    imu_calibrate_gyro(I2Cx, IMU_CAL_SAMPLES);
 8000f16:	2164      	movs	r1, #100	@ 0x64
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 f81b 	bl	8000f54 <imu_calibrate_gyro>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24000204 	.word	0x24000204
 8000f2c:	24000208 	.word	0x24000208
 8000f30:	2400020c 	.word	0x2400020c
 8000f34:	08013ed8 	.word	0x08013ed8
 8000f38:	08013eec 	.word	0x08013eec
 8000f3c:	08013f08 	.word	0x08013f08
 8000f40:	08013f3c 	.word	0x08013f3c
 8000f44:	08013f68 	.word	0x08013f68
 8000f48:	08013f84 	.word	0x08013f84
 8000f4c:	08013fa4 	.word	0x08013fa4
 8000f50:	08013fbc 	.word	0x08013fbc

08000f54 <imu_calibrate_gyro>:

void imu_calibrate_gyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
    int32_t sum_gx = 0, sum_gy = 0, sum_gz = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]

    for (uint16_t i = 0; i < numCalPoints; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	817b      	strh	r3, [r7, #10]
 8000f70:	e01d      	b.n	8000fae <imu_calibrate_gyro+0x5a>
    {
        imu_read_raw_data(I2Cx);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f8a2 	bl	80010bc <imu_read_raw_data>

        sum_gx += rawData.gx;
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <imu_calibrate_gyro+0xac>)
 8000f7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
        sum_gy += rawData.gy;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <imu_calibrate_gyro+0xac>)
 8000f88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4413      	add	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        sum_gz += rawData.gz;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <imu_calibrate_gyro+0xac>)
 8000f96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]

        HAL_Delay(MPU6050_CAL_DELAY_MS);
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f002 ffca 	bl	8003f3c <HAL_Delay>
    for (uint16_t i = 0; i < numCalPoints; i++)
 8000fa8:	897b      	ldrh	r3, [r7, #10]
 8000faa:	3301      	adds	r3, #1
 8000fac:	817b      	strh	r3, [r7, #10]
 8000fae:	897a      	ldrh	r2, [r7, #10]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3dd      	bcc.n	8000f72 <imu_calibrate_gyro+0x1e>
    }

    gyroOffset.x = (sum_gx / numCalPoints);
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <imu_calibrate_gyro+0xb0>)
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
    gyroOffset.y = (sum_gy / numCalPoints);
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <imu_calibrate_gyro+0xb0>)
 8000fde:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroOffset.z = (sum_gz / numCalPoints);		// Gravity compensation
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <imu_calibrate_gyro+0xb0>)
 8000ff4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	24000218 	.word	0x24000218
 8001004:	24000230 	.word	0x24000230

08001008 <imu_calibrate_accel>:

void imu_calibrate_accel(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
    int32_t sum_ax = 0, sum_ay = 0, sum_az = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]

    for (uint16_t i = 0; i < numCalPoints; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	817b      	strh	r3, [r7, #10]
 8001024:	e01d      	b.n	8001062 <imu_calibrate_accel+0x5a>
    {
        imu_read_raw_data(I2Cx);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f848 	bl	80010bc <imu_read_raw_data>

        sum_ax += rawData.ax;
 800102c:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <imu_calibrate_accel+0xac>)
 800102e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001032:	461a      	mov	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
        sum_ay += rawData.ay;
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <imu_calibrate_accel+0xac>)
 800103c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001040:	461a      	mov	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4413      	add	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        sum_az += rawData.az;
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <imu_calibrate_accel+0xac>)
 800104a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]

        HAL_Delay(MPU6050_CAL_DELAY_MS);
 8001056:	200a      	movs	r0, #10
 8001058:	f002 ff70 	bl	8003f3c <HAL_Delay>
    for (uint16_t i = 0; i < numCalPoints; i++)
 800105c:	897b      	ldrh	r3, [r7, #10]
 800105e:	3301      	adds	r3, #1
 8001060:	817b      	strh	r3, [r7, #10]
 8001062:	897a      	ldrh	r2, [r7, #10]
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	429a      	cmp	r2, r3
 8001068:	d3dd      	bcc.n	8001026 <imu_calibrate_accel+0x1e>
    }

    accelOffset.x = (sum_ax / numCalPoints);
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <imu_calibrate_accel+0xb0>)
 800107c:	edc3 7a00 	vstr	s15, [r3]
    accelOffset.y = (sum_ay / numCalPoints);
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	fb92 f3f3 	sdiv	r3, r2, r3
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <imu_calibrate_accel+0xb0>)
 8001092:	edc3 7a01 	vstr	s15, [r3, #4]
    accelOffset.z = (sum_az / numCalPoints);	// Gravity compensation
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	fb92 f3f3 	sdiv	r3, r2, r3
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <imu_calibrate_accel+0xb0>)
 80010a8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	24000218 	.word	0x24000218
 80010b8:	24000224 	.word	0x24000224

080010bc <imu_read_raw_data>:

void imu_read_raw_data(I2C_HandleTypeDef *I2Cx)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	6078      	str	r0, [r7, #4]

    uint8_t buf[14];

    // Subroutine for reading the raw data

    HAL_I2C_Mem_Read(I2Cx, (mpu_6050_addr + 1), MPU6050_ACCEL_XOUT_H, 1, buf, 14, MPU6050_I2C_TIMEOUT_MS);
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <imu_read_raw_data+0xa0>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b299      	uxth	r1, r3
 80010cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	230e      	movs	r3, #14
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	223b      	movs	r2, #59	@ 0x3b
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f004 f9f1 	bl	80054c8 <HAL_I2C_Mem_Read>

    // Bit shift the data

    rawData.ax = buf[0] << 8 | buf[1];
 80010e6:	7a3b      	ldrb	r3, [r7, #8]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7a7b      	ldrb	r3, [r7, #9]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <imu_read_raw_data+0xa4>)
 80010f6:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 80010f8:	7abb      	ldrb	r3, [r7, #10]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <imu_read_raw_data+0xa4>)
 8001108:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 800110a:	7b3b      	ldrb	r3, [r7, #12]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <imu_read_raw_data+0xa4>)
 800111a:	809a      	strh	r2, [r3, #4]
    rawData.gx = buf[8] << 8 | buf[9];
 800111c:	7c3b      	ldrb	r3, [r7, #16]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7c7b      	ldrb	r3, [r7, #17]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <imu_read_raw_data+0xa4>)
 800112c:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 800112e:	7cbb      	ldrb	r3, [r7, #18]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7cfb      	ldrb	r3, [r7, #19]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <imu_read_raw_data+0xa4>)
 800113e:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 8001140:	7d3b      	ldrb	r3, [r7, #20]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7d7b      	ldrb	r3, [r7, #21]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <imu_read_raw_data+0xa4>)
 8001150:	815a      	strh	r2, [r3, #10]
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	24000204 	.word	0x24000204
 8001160:	24000218 	.word	0x24000218

08001164 <imu_read_processed_data>:

imu_data_t imu_read_processed_data(I2C_HandleTypeDef *I2Cx)
{
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	imu_data_t imu_data;

    // Get raw values from the IMU

    imu_read_raw_data(I2Cx);
 800116e:	6838      	ldr	r0, [r7, #0]
 8001170:	f7ff ffa4 	bl	80010bc <imu_read_raw_data>

    // Compensate for accelerometer offset

    imu_data.ax = (rawData.ax - accelOffset.x) * (MPU6050_GRAVITY_EARTH / aScaleFactor);
 8001174:	4b66      	ldr	r3, [pc, #408]	@ (8001310 <imu_read_processed_data+0x1ac>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001182:	4b64      	ldr	r3, [pc, #400]	@ (8001314 <imu_read_processed_data+0x1b0>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800118c:	4b62      	ldr	r3, [pc, #392]	@ (8001318 <imu_read_processed_data+0x1b4>)
 800118e:	edd3 6a00 	vldr	s13, [r3]
 8001192:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 800131c <imu_read_processed_data+0x1b8>
 8001196:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800119a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119e:	edc7 7a02 	vstr	s15, [r7, #8]
    imu_data.ay = (rawData.ay - accelOffset.y) * (MPU6050_GRAVITY_EARTH / aScaleFactor);
 80011a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001310 <imu_read_processed_data+0x1ac>)
 80011a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b0:	4b58      	ldr	r3, [pc, #352]	@ (8001314 <imu_read_processed_data+0x1b0>)
 80011b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ba:	4b57      	ldr	r3, [pc, #348]	@ (8001318 <imu_read_processed_data+0x1b4>)
 80011bc:	edd3 6a00 	vldr	s13, [r3]
 80011c0:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 800131c <imu_read_processed_data+0x1b8>
 80011c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	edc7 7a03 	vstr	s15, [r7, #12]
    imu_data.az = (rawData.az - accelOffset.z) * (MPU6050_GRAVITY_EARTH / aScaleFactor);
 80011d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001310 <imu_read_processed_data+0x1ac>)
 80011d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011de:	4b4d      	ldr	r3, [pc, #308]	@ (8001314 <imu_read_processed_data+0x1b0>)
 80011e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001318 <imu_read_processed_data+0x1b4>)
 80011ea:	edd3 6a00 	vldr	s13, [r3]
 80011ee:	ed9f 6a4b 	vldr	s12, [pc, #300]	@ 800131c <imu_read_processed_data+0x1b8>
 80011f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compensate for gyroscope offset

    imu_data.gx = (rawData.gx - gyroOffset.x) / gScaleFactor;
 80011fe:	4b44      	ldr	r3, [pc, #272]	@ (8001310 <imu_read_processed_data+0x1ac>)
 8001200:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120c:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <imu_read_processed_data+0x1bc>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001216:	4b43      	ldr	r3, [pc, #268]	@ (8001324 <imu_read_processed_data+0x1c0>)
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001220:	edc7 7a05 	vstr	s15, [r7, #20]
    imu_data.gy = (rawData.gy - gyroOffset.y) / gScaleFactor;
 8001224:	4b3a      	ldr	r3, [pc, #232]	@ (8001310 <imu_read_processed_data+0x1ac>)
 8001226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001232:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <imu_read_processed_data+0x1bc>)
 8001234:	edd3 7a01 	vldr	s15, [r3, #4]
 8001238:	ee77 6a67 	vsub.f32	s13, s14, s15
 800123c:	4b39      	ldr	r3, [pc, #228]	@ (8001324 <imu_read_processed_data+0x1c0>)
 800123e:	ed93 7a00 	vldr	s14, [r3]
 8001242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001246:	edc7 7a06 	vstr	s15, [r7, #24]
    imu_data.gz = (rawData.gz - gyroOffset.z) / gScaleFactor;
 800124a:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <imu_read_processed_data+0x1ac>)
 800124c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001258:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <imu_read_processed_data+0x1bc>)
 800125a:	edd3 7a02 	vldr	s15, [r3, #8]
 800125e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <imu_read_processed_data+0x1c0>)
 8001264:	ed93 7a00 	vldr	s14, [r3]
 8001268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126c:	edc7 7a07 	vstr	s15, [r7, #28]

    // Apply Kalman filter to each axis

    imu_data.ax = imu_kalman_update(&kf_ax, imu_data.ax);
 8001270:	edd7 7a02 	vldr	s15, [r7, #8]
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	482b      	ldr	r0, [pc, #172]	@ (8001328 <imu_read_processed_data+0x1c4>)
 800127a:	f000 f9be 	bl	80015fa <imu_kalman_update>
 800127e:	eef0 7a40 	vmov.f32	s15, s0
 8001282:	edc7 7a02 	vstr	s15, [r7, #8]
    imu_data.ay = imu_kalman_update(&kf_ay, imu_data.ay);
 8001286:	edd7 7a03 	vldr	s15, [r7, #12]
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	4827      	ldr	r0, [pc, #156]	@ (800132c <imu_read_processed_data+0x1c8>)
 8001290:	f000 f9b3 	bl	80015fa <imu_kalman_update>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	edc7 7a03 	vstr	s15, [r7, #12]
    imu_data.az = imu_kalman_update(&kf_az, imu_data.az);
 800129c:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	4822      	ldr	r0, [pc, #136]	@ (8001330 <imu_read_processed_data+0x1cc>)
 80012a6:	f000 f9a8 	bl	80015fa <imu_kalman_update>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
 80012ae:	edc7 7a04 	vstr	s15, [r7, #16]

    imu_data.gx = imu_kalman_update(&kf_gx, imu_data.gx);
 80012b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	481e      	ldr	r0, [pc, #120]	@ (8001334 <imu_read_processed_data+0x1d0>)
 80012bc:	f000 f99d 	bl	80015fa <imu_kalman_update>
 80012c0:	eef0 7a40 	vmov.f32	s15, s0
 80012c4:	edc7 7a05 	vstr	s15, [r7, #20]
    imu_data.gy = imu_kalman_update(&kf_gy, imu_data.gy);
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	4819      	ldr	r0, [pc, #100]	@ (8001338 <imu_read_processed_data+0x1d4>)
 80012d2:	f000 f992 	bl	80015fa <imu_kalman_update>
 80012d6:	eef0 7a40 	vmov.f32	s15, s0
 80012da:	edc7 7a06 	vstr	s15, [r7, #24]
    imu_data.gz = imu_kalman_update(&kf_gz, imu_data.gz);
 80012de:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	4815      	ldr	r0, [pc, #84]	@ (800133c <imu_read_processed_data+0x1d8>)
 80012e8:	f000 f987 	bl	80015fa <imu_kalman_update>
 80012ec:	eef0 7a40 	vmov.f32	s15, s0
 80012f0:	edc7 7a07 	vstr	s15, [r7, #28]

    return imu_data;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	461d      	mov	r5, r3
 80012f8:	f107 0408 	add.w	r4, r7, #8
 80012fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001304:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bdb0      	pop	{r4, r5, r7, pc}
 8001310:	24000218 	.word	0x24000218
 8001314:	24000224 	.word	0x24000224
 8001318:	24000210 	.word	0x24000210
 800131c:	411cf5c3 	.word	0x411cf5c3
 8001320:	24000230 	.word	0x24000230
 8001324:	24000214 	.word	0x24000214
 8001328:	2400023c 	.word	0x2400023c
 800132c:	24000250 	.word	0x24000250
 8001330:	24000264 	.word	0x24000264
 8001334:	24000278 	.word	0x24000278
 8001338:	2400028c 	.word	0x2400028c
 800133c:	240002a0 	.word	0x240002a0

08001340 <imu_write_gyro_full_scale_range>:

HAL_StatusTypeDef imu_write_gyro_full_scale_range(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af04      	add	r7, sp, #16
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
    // Variable initialization

    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]

    // Set the value

    switch (gScale) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d86a      	bhi.n	800142c <imu_write_gyro_full_scale_range+0xec>
 8001356:	a201      	add	r2, pc, #4	@ (adr r2, 800135c <imu_write_gyro_full_scale_range+0x1c>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	0800136d 	.word	0x0800136d
 8001360:	0800139d 	.word	0x0800139d
 8001364:	080013cd 	.word	0x080013cd
 8001368:	080013fd 	.word	0x080013fd
		case GFSR_250DPS:
			gScaleFactor = 131.0;
 800136c:	4b3e      	ldr	r3, [pc, #248]	@ (8001468 <imu_write_gyro_full_scale_range+0x128>)
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <imu_write_gyro_full_scale_range+0x12c>)
 8001370:	601a      	str	r2, [r3, #0]
			select = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_GYRO_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 8001376:	4b3e      	ldr	r3, [pc, #248]	@ (8001470 <imu_write_gyro_full_scale_range+0x130>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2301      	movs	r3, #1
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f107 030e 	add.w	r3, r7, #14
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	221b      	movs	r2, #27
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f003 ff85 	bl	80052a0 <HAL_I2C_Mem_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
			break;
 800139a:	e05f      	b.n	800145c <imu_write_gyro_full_scale_range+0x11c>
		case GFSR_500DPS:
			gScaleFactor = 65.5;
 800139c:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <imu_write_gyro_full_scale_range+0x128>)
 800139e:	4a35      	ldr	r2, [pc, #212]	@ (8001474 <imu_write_gyro_full_scale_range+0x134>)
 80013a0:	601a      	str	r2, [r3, #0]
			select = 0x08;
 80013a2:	2308      	movs	r3, #8
 80013a4:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_GYRO_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 80013a6:	4b32      	ldr	r3, [pc, #200]	@ (8001470 <imu_write_gyro_full_scale_range+0x130>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f107 030e 	add.w	r3, r7, #14
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	221b      	movs	r2, #27
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f003 ff6d 	bl	80052a0 <HAL_I2C_Mem_Write>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
			break;
 80013ca:	e047      	b.n	800145c <imu_write_gyro_full_scale_range+0x11c>
		case GFSR_1000DPS:
			gScaleFactor = 32.8;
 80013cc:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <imu_write_gyro_full_scale_range+0x128>)
 80013ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001478 <imu_write_gyro_full_scale_range+0x138>)
 80013d0:	601a      	str	r2, [r3, #0]
			select = 0x10;
 80013d2:	2310      	movs	r3, #16
 80013d4:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_GYRO_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <imu_write_gyro_full_scale_range+0x130>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f107 030e 	add.w	r3, r7, #14
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	221b      	movs	r2, #27
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f003 ff55 	bl	80052a0 <HAL_I2C_Mem_Write>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
			break;
 80013fa:	e02f      	b.n	800145c <imu_write_gyro_full_scale_range+0x11c>
		case GFSR_2000DPS:
			gScaleFactor = 16.4;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <imu_write_gyro_full_scale_range+0x128>)
 80013fe:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <imu_write_gyro_full_scale_range+0x13c>)
 8001400:	601a      	str	r2, [r3, #0]
			select = 0x18;
 8001402:	2318      	movs	r3, #24
 8001404:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_GYRO_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <imu_write_gyro_full_scale_range+0x130>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2301      	movs	r3, #1
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	f107 030e 	add.w	r3, r7, #14
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	221b      	movs	r2, #27
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f003 ff3d 	bl	80052a0 <HAL_I2C_Mem_Write>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
			break;
 800142a:	e017      	b.n	800145c <imu_write_gyro_full_scale_range+0x11c>
		default:
			gScaleFactor = 131.0;
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <imu_write_gyro_full_scale_range+0x128>)
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <imu_write_gyro_full_scale_range+0x12c>)
 8001430:	601a      	str	r2, [r3, #0]
			select = 0x00;
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_GYRO_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <imu_write_gyro_full_scale_range+0x130>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2301      	movs	r3, #1
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f107 030e 	add.w	r3, r7, #14
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	221b      	movs	r2, #27
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f003 ff25 	bl	80052a0 <HAL_I2C_Mem_Write>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
			break;
 800145a:	bf00      	nop
    }

    return ret;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	24000214 	.word	0x24000214
 800146c:	43030000 	.word	0x43030000
 8001470:	24000204 	.word	0x24000204
 8001474:	42830000 	.word	0x42830000
 8001478:	42033333 	.word	0x42033333
 800147c:	41833333 	.word	0x41833333

08001480 <imu_write_accel_full_scale_range>:

HAL_StatusTypeDef imu_write_accel_full_scale_range(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af04      	add	r7, sp, #16
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
    // Variable initialization

    uint8_t select;
    HAL_StatusTypeDef ret = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]

    // Set the value

    switch (aScale) {
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d86e      	bhi.n	8001574 <imu_write_accel_full_scale_range+0xf4>
 8001496:	a201      	add	r2, pc, #4	@ (adr r2, 800149c <imu_write_accel_full_scale_range+0x1c>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014ad 	.word	0x080014ad
 80014a0:	080014df 	.word	0x080014df
 80014a4:	08001511 	.word	0x08001511
 80014a8:	08001543 	.word	0x08001543

		case AFSR_2G:
			aScaleFactor = 16384.0;
 80014ac:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <imu_write_accel_full_scale_range+0x130>)
 80014ae:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80014b2:	601a      	str	r2, [r3, #0]
			select = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_ACCEL_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 80014b8:	4b3e      	ldr	r3, [pc, #248]	@ (80015b4 <imu_write_accel_full_scale_range+0x134>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	f107 030e 	add.w	r3, r7, #14
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	221c      	movs	r2, #28
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f003 fee4 	bl	80052a0 <HAL_I2C_Mem_Write>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
			break;
 80014dc:	e063      	b.n	80015a6 <imu_write_accel_full_scale_range+0x126>
		case AFSR_4G:
			aScaleFactor = 8192.0;
 80014de:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <imu_write_accel_full_scale_range+0x130>)
 80014e0:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80014e4:	601a      	str	r2, [r3, #0]
			select = 0x08;
 80014e6:	2308      	movs	r3, #8
 80014e8:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_ACCEL_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 80014ea:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <imu_write_accel_full_scale_range+0x134>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	2301      	movs	r3, #1
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	f107 030e 	add.w	r3, r7, #14
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	221c      	movs	r2, #28
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f003 fecb 	bl	80052a0 <HAL_I2C_Mem_Write>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
			break;
 800150e:	e04a      	b.n	80015a6 <imu_write_accel_full_scale_range+0x126>
		case AFSR_8G:
			aScaleFactor = 4096.0;
 8001510:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <imu_write_accel_full_scale_range+0x130>)
 8001512:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001516:	601a      	str	r2, [r3, #0]
			select = 0x10;
 8001518:	2310      	movs	r3, #16
 800151a:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_ACCEL_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <imu_write_accel_full_scale_range+0x134>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f107 030e 	add.w	r3, r7, #14
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	221c      	movs	r2, #28
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f003 feb2 	bl	80052a0 <HAL_I2C_Mem_Write>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
			break;
 8001540:	e031      	b.n	80015a6 <imu_write_accel_full_scale_range+0x126>
		case AFSR_16G:
			aScaleFactor = 2048.0;
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <imu_write_accel_full_scale_range+0x130>)
 8001544:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001548:	601a      	str	r2, [r3, #0]
			select = 0x18;
 800154a:	2318      	movs	r3, #24
 800154c:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_ACCEL_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <imu_write_accel_full_scale_range+0x134>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030e 	add.w	r3, r7, #14
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	221c      	movs	r2, #28
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f003 fe99 	bl	80052a0 <HAL_I2C_Mem_Write>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
			break;
 8001572:	e018      	b.n	80015a6 <imu_write_accel_full_scale_range+0x126>
		default:
			aScaleFactor = 16384.0;
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <imu_write_accel_full_scale_range+0x130>)
 8001576:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800157a:	601a      	str	r2, [r3, #0]
			select = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]
			ret = HAL_I2C_Mem_Write(I2Cx, (mpu_6050_addr + 0), MPU6050_ACCEL_CONFIG, 1, &select, 1, MPU6050_I2C_TIMEOUT_MS);
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <imu_write_accel_full_scale_range+0x134>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 030e 	add.w	r3, r7, #14
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	221c      	movs	r2, #28
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f003 fe80 	bl	80052a0 <HAL_I2C_Mem_Write>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
			break;
 80015a4:	bf00      	nop
    }

    return ret;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24000210 	.word	0x24000210
 80015b4:	24000204 	.word	0x24000204

080015b8 <imu_kalman_init>:
#include "main.h"
#include "imu_mpu6050.h"
#include "kalman_imu.h"

void imu_kalman_init(imu_kalman_filter_t *kf, float processNoise, float measurementNoise, float initialValue)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80015c8:	ed87 1a00 	vstr	s2, [r7]
    kf->q = processNoise;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	601a      	str	r2, [r3, #0]
    kf->r = measurementNoise;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]
    kf->x = initialValue;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	609a      	str	r2, [r3, #8]
    kf->p = 1.0f; 				// Set initial estimation error covariance
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015e4:	60da      	str	r2, [r3, #12]
    kf->k = 0.0f; 				// Set initial Kalman gain
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <imu_kalman_update>:

float imu_kalman_update(imu_kalman_filter_t *kf, float measurement)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update

    kf->p = kf->p + kf->q;		// Update the estimation error covariance
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	ed93 7a03 	vldr	s14, [r3, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edc3 7a03 	vstr	s15, [r3, #12]

    // Measurement update

    kf->k = kf->p / (kf->p + kf->r);           		// Calculate the Kalman gain
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	ed93 7a03 	vldr	s14, [r3, #12]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 7a01 	vldr	s15, [r3, #4]
 800162e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x = kf->x + kf->k * (measurement - kf->x); 	// Update the state estimate with the new measurement
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 6a04 	vldr	s13, [r3, #16]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	edd3 7a02 	vldr	s15, [r3, #8]
 800164e:	ed97 6a00 	vldr	s12, [r7]
 8001652:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->p = (1.0f - kf->k) * kf->p;           		// Update the estimation error covariance
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edd3 7a04 	vldr	s15, [r3, #16]
 800166a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800166e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edd3 7a03 	vldr	s15, [r3, #12]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edc3 7a03 	vstr	s15, [r3, #12]

    return kf->x;				// Return the updated state estimate (filtered sensor value)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	ee07 3a90 	vmov	s15, r3
}
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800169e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016a2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80016a4:	bf00      	nop
 80016a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <main+0xcc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <main+0x24>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	dcf4      	bgt.n	80016a6 <main+0xe>
  if ( timeout < 0 )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da01      	bge.n	80016c6 <main+0x2e>
  {
  Error_Handler();
 80016c2:	f000 fd86 	bl	80021d2 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c6:	f002 fbdd 	bl	8003e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ca:	f000 f853 	bl	8001774 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80016ce:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <main+0xcc>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a23      	ldr	r2, [pc, #140]	@ (8001764 <main+0xcc>)
 80016d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <main+0xcc>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f003 fd19 	bl	8005124 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80016f2:	2100      	movs	r1, #0
 80016f4:	2000      	movs	r0, #0
 80016f6:	f003 fd2f 	bl	8005158 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80016fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016fe:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001700:	bf00      	nop
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <main+0xcc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d104      	bne.n	8001718 <main+0x80>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dcf4      	bgt.n	8001702 <main+0x6a>
if ( timeout < 0 )
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da01      	bge.n	8001722 <main+0x8a>
{
Error_Handler();
 800171e:	f000 fd58 	bl	80021d2 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001722:	f000 fb9b 	bl	8001e5c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001726:	f000 fb1b 	bl	8001d60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800172a:	f000 fb65 	bl	8001df8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 800172e:	f000 f977 	bl	8001a20 <MX_SPI4_Init>
  MX_I2C4_Init();
 8001732:	f000 f935 	bl	80019a0 <MX_I2C4_Init>
  MX_TIM13_Init();
 8001736:	f000 fa77 	bl	8001c28 <MX_TIM13_Init>
  MX_TIM14_Init();
 800173a:	f000 fac3 	bl	8001cc4 <MX_TIM14_Init>
  MX_TIM1_Init();
 800173e:	f000 f9c5 	bl	8001acc <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8001742:	f000 f895 	bl	8001870 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001746:	f00a f99b 	bl	800ba80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800174a:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <main+0xd0>)
 800174c:	2100      	movs	r1, #0
 800174e:	4807      	ldr	r0, [pc, #28]	@ (800176c <main+0xd4>)
 8001750:	f00a f9e0 	bl	800bb14 <osThreadNew>
 8001754:	4603      	mov	r3, r0
 8001756:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <main+0xd8>)
 8001758:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800175a:	f00a f9b5 	bl	800bac8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800175e:	bf00      	nop
 8001760:	e7fd      	b.n	800175e <main+0xc6>
 8001762:	bf00      	nop
 8001764:	58024400 	.word	0x58024400
 8001768:	0801407c 	.word	0x0801407c
 800176c:	08001f61 	.word	0x08001f61
 8001770:	24000aa8 	.word	0x24000aa8

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b09c      	sub	sp, #112	@ 0x70
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177e:	224c      	movs	r2, #76	@ 0x4c
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f00d ff96 	bl	800f6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2220      	movs	r2, #32
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f00d ff90 	bl	800f6b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001794:	2004      	movs	r0, #4
 8001796:	f004 fd3f 	bl	8006218 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <SystemClock_Config+0xf4>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	4a31      	ldr	r2, [pc, #196]	@ (8001868 <SystemClock_Config+0xf4>)
 80017a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017a8:	6193      	str	r3, [r2, #24]
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <SystemClock_Config+0xf4>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	4b2d      	ldr	r3, [pc, #180]	@ (800186c <SystemClock_Config+0xf8>)
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	4a2c      	ldr	r2, [pc, #176]	@ (800186c <SystemClock_Config+0xf8>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80017c0:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <SystemClock_Config+0xf8>)
 80017c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017cc:	bf00      	nop
 80017ce:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <SystemClock_Config+0xf4>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017da:	d1f8      	bne.n	80017ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80017dc:	2303      	movs	r3, #3
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ea:	2340      	movs	r3, #64	@ 0x40
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	2302      	movs	r3, #2
 80017f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80017fa:	23f0      	movs	r3, #240	@ 0xf0
 80017fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017fe:	2302      	movs	r3, #2
 8001800:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8001802:	2318      	movs	r3, #24
 8001804:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800180a:	2308      	movs	r3, #8
 800180c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800180e:	2300      	movs	r3, #0
 8001810:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fd66 	bl	80062ec <HAL_RCC_OscConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001826:	f000 fcd4 	bl	80021d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182a:	233f      	movs	r3, #63	@ 0x3f
 800182c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2303      	movs	r3, #3
 8001830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001836:	2308      	movs	r3, #8
 8001838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800183a:	2340      	movs	r3, #64	@ 0x40
 800183c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800183e:	2340      	movs	r3, #64	@ 0x40
 8001840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001846:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001848:	2340      	movs	r3, #64	@ 0x40
 800184a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2104      	movs	r1, #4
 8001850:	4618      	mov	r0, r3
 8001852:	f005 f979 	bl	8006b48 <HAL_RCC_ClockConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800185c:	f000 fcb9 	bl	80021d2 <Error_Handler>
  }
}
 8001860:	bf00      	nop
 8001862:	3770      	adds	r7, #112	@ 0x70
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	58024800 	.word	0x58024800
 800186c:	58000400 	.word	0x58000400

08001870 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001876:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001878:	4a46      	ldr	r2, [pc, #280]	@ (8001994 <MX_FDCAN1_Init+0x124>)
 800187a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800187c:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001882:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001888:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 800188a:	2200      	movs	r2, #0
 800188c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800188e:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001890:	2200      	movs	r2, #0
 8001892:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8001894:	4b3e      	ldr	r3, [pc, #248]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001896:	2201      	movs	r2, #1
 8001898:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 800189c:	2202      	movs	r2, #2
 800189e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 80018a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018a2:	2208      	movs	r2, #8
 80018a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 80018a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018a8:	221f      	movs	r2, #31
 80018aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80018ac:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018ae:	2208      	movs	r2, #8
 80018b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80018b8:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80018be:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80018ca:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80018d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018d8:	2200      	movs	r2, #0
 80018da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80018dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018de:	2201      	movs	r2, #1
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018e4:	2204      	movs	r2, #4
 80018e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018ee:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018f0:	2204      	movs	r2, #4
 80018f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018fa:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 80018fc:	2204      	movs	r2, #4
 80018fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001902:	2200      	movs	r2, #0
 8001904:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001908:	2200      	movs	r2, #0
 800190a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 800190e:	2201      	movs	r2, #1
 8001910:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001914:	2200      	movs	r2, #0
 8001916:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001918:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 800191a:	2204      	movs	r2, #4
 800191c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800191e:	481c      	ldr	r0, [pc, #112]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001920:	f002 fc1c 	bl	800415c <HAL_FDCAN_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800192a:	f000 fc52 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  // Configure Rx filter

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800192e:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <MX_FDCAN1_Init+0x128>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <MX_FDCAN1_Init+0x128>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800193a:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <MX_FDCAN1_Init+0x128>)
 800193c:	2202      	movs	r2, #2
 800193e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <MX_FDCAN1_Init+0x128>)
 8001942:	2201      	movs	r2, #1
 8001944:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x000;
 8001946:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <MX_FDCAN1_Init+0x128>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x000;
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <MX_FDCAN1_Init+0x128>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]

  // Configure global filter to reject all non-matching frames

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8001952:	2301      	movs	r3, #1
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	2202      	movs	r2, #2
 800195a:	2102      	movs	r1, #2
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 800195e:	f002 fe51 	bl	8004604 <HAL_FDCAN_ConfigGlobalFilter>

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001962:	490d      	ldr	r1, [pc, #52]	@ (8001998 <MX_FDCAN1_Init+0x128>)
 8001964:	480a      	ldr	r0, [pc, #40]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001966:	f002 fdd7 	bl	8004518 <HAL_FDCAN_ConfigFilter>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_FDCAN1_Init+0x104>
  {
	  Error_Handler();
 8001970:	f000 fc2f 	bl	80021d2 <Error_Handler>
  }

  // Start the FDCAN

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {}
 8001974:	4806      	ldr	r0, [pc, #24]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001976:	f002 fe72 	bl	800465e <HAL_FDCAN_Start>

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {}
 800197a:	2200      	movs	r2, #0
 800197c:	2101      	movs	r1, #1
 800197e:	4804      	ldr	r0, [pc, #16]	@ (8001990 <MX_FDCAN1_Init+0x120>)
 8001980:	f003 f806 	bl	8004990 <HAL_FDCAN_ActivateNotification>

  printf("CAN BUS ACTIVATED\r\n");
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_FDCAN1_Init+0x12c>)
 8001986:	f00d fd95 	bl	800f4b4 <puts>

  /* USER CODE END FDCAN1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	240002b4 	.word	0x240002b4
 8001994:	4000a000 	.word	0x4000a000
 8001998:	24000ad4 	.word	0x24000ad4
 800199c:	08013fe4 	.word	0x08013fe4

080019a0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <MX_I2C4_Init+0x78>)
 80019a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019ac:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <MX_I2C4_Init+0x7c>)
 80019ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80019b0:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b6:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019bc:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80019c2:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80019da:	480e      	ldr	r0, [pc, #56]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019dc:	f003 fbd0 	bl	8005180 <HAL_I2C_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80019e6:	f000 fbf4 	bl	80021d2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ea:	2100      	movs	r1, #0
 80019ec:	4809      	ldr	r0, [pc, #36]	@ (8001a14 <MX_I2C4_Init+0x74>)
 80019ee:	f004 fa33 	bl	8005e58 <HAL_I2CEx_ConfigAnalogFilter>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80019f8:	f000 fbeb 	bl	80021d2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80019fc:	2100      	movs	r1, #0
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_I2C4_Init+0x74>)
 8001a00:	f004 fa75 	bl	8005eee <HAL_I2CEx_ConfigDigitalFilter>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001a0a:	f000 fbe2 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	24000354 	.word	0x24000354
 8001a18:	58001c00 	.word	0x58001c00
 8001a1c:	307075b1 	.word	0x307075b1

08001a20 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a26:	4a28      	ldr	r2, [pc, #160]	@ (8001ac8 <MX_SPI4_Init+0xa8>)
 8001a28:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a2c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a30:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a50:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a54:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001a58:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a60:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a78:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	@ (8001ac4 <MX_SPI4_Init+0xa4>)
 8001ab2:	f006 ff7f 	bl	80089b4 <HAL_SPI_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001abc:	f000 fb89 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	240003a0 	.word	0x240003a0
 8001ac8:	40013400 	.word	0x40013400

08001acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09a      	sub	sp, #104	@ 0x68
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	222c      	movs	r2, #44	@ 0x2c
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00d fdd4 	bl	800f6b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b0c:	4b44      	ldr	r3, [pc, #272]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b0e:	4a45      	ldr	r2, [pc, #276]	@ (8001c24 <MX_TIM1_Init+0x158>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b12:	4b43      	ldr	r3, [pc, #268]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001b1e:	4b40      	ldr	r3, [pc, #256]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b38:	4839      	ldr	r0, [pc, #228]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b3a:	f007 f85c 	bl	8008bf6 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b44:	f000 fb45 	bl	80021d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b52:	4619      	mov	r1, r3
 8001b54:	4832      	ldr	r0, [pc, #200]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b56:	f007 fcc1 	bl	80094dc <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b60:	f000 fb37 	bl	80021d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b64:	482e      	ldr	r0, [pc, #184]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b66:	f007 f915 	bl	8008d94 <HAL_TIM_PWM_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b70:	f000 fb2f 	bl	80021d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4826      	ldr	r0, [pc, #152]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b88:	f008 f9fc 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b92:	f000 fb1e 	bl	80021d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b96:	2360      	movs	r3, #96	@ 0x60
 8001b98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 8001b9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4818      	ldr	r0, [pc, #96]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001bbe:	f007 fb79 	bl	80092b4 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001bc8:	f000 fb03 	bl	80021d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001c02:	f008 fa4d 	bl	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001c0c:	f000 fae1 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001c12:	f000 fd33 	bl	800267c <HAL_TIM_MspPostInit>

}
 8001c16:	bf00      	nop
 8001c18:	3768      	adds	r7, #104	@ 0x68
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24000428 	.word	0x24000428
 8001c24:	40010000 	.word	0x40010000

08001c28 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001c40:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c42:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <MX_TIM13_Init+0x98>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 75;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c48:	224b      	movs	r2, #75	@ 0x4b
 8001c4a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 63999;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c54:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001c58:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001c66:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c68:	f006 ffc5 	bl	8008bf6 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001c72:	f000 faae 	bl	80021d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001c76:	4811      	ldr	r0, [pc, #68]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c78:	f007 f88c 	bl	8008d94 <HAL_TIM_PWM_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001c82:	f000 faa6 	bl	80021d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c86:	2360      	movs	r3, #96	@ 0x60
 8001c88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001c9e:	f007 fb09 	bl	80092b4 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001ca8:	f000 fa93 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001cac:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <MX_TIM13_Init+0x94>)
 8001cae:	f000 fce5 	bl	800267c <HAL_TIM_MspPostInit>

}
 8001cb2:	bf00      	nop
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	24000474 	.word	0x24000474
 8001cc0:	40001c00 	.word	0x40001c00

08001cc4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001cde:	4a1f      	ldr	r2, [pc, #124]	@ (8001d5c <MX_TIM14_Init+0x98>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 75;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001ce4:	224b      	movs	r2, #75	@ 0x4b
 8001ce6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 63999;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001cf0:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001cf4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d02:	4815      	ldr	r0, [pc, #84]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001d04:	f006 ff77 	bl	8008bf6 <HAL_TIM_Base_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001d0e:	f000 fa60 	bl	80021d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001d12:	4811      	ldr	r0, [pc, #68]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001d14:	f007 f83e 	bl	8008d94 <HAL_TIM_PWM_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001d1e:	f000 fa58 	bl	80021d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d22:	2360      	movs	r3, #96	@ 0x60
 8001d24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2200      	movs	r2, #0
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001d3a:	f007 fabb 	bl	80092b4 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001d44:	f000 fa45 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001d48:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <MX_TIM14_Init+0x94>)
 8001d4a:	f000 fc97 	bl	800267c <HAL_TIM_MspPostInit>

}
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	240004c0 	.word	0x240004c0
 8001d5c:	40002000 	.word	0x40002000

08001d60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d66:	4a23      	ldr	r2, [pc, #140]	@ (8001df4 <MX_USART3_UART_Init+0x94>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d96:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da2:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001da8:	4811      	ldr	r0, [pc, #68]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001daa:	f008 fa15 	bl	800a1d8 <HAL_UART_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001db4:	f000 fa0d 	bl	80021d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db8:	2100      	movs	r1, #0
 8001dba:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001dbc:	f009 fa48 	bl	800b250 <HAL_UARTEx_SetTxFifoThreshold>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001dc6:	f000 fa04 	bl	80021d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4808      	ldr	r0, [pc, #32]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001dce:	f009 fa7d 	bl	800b2cc <HAL_UARTEx_SetRxFifoThreshold>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001dd8:	f000 f9fb 	bl	80021d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ddc:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <MX_USART3_UART_Init+0x90>)
 8001dde:	f009 f9fe 	bl	800b1de <HAL_UARTEx_DisableFifoMode>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001de8:	f000 f9f3 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2400050c 	.word	0x2400050c
 8001df4:	40004800 	.word	0x40004800

08001df8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dfe:	4a16      	ldr	r2, [pc, #88]	@ (8001e58 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001e00:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e04:	2209      	movs	r2, #9
 8001e06:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e40:	f004 f8a1 	bl	8005f86 <HAL_PCD_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001e4a:	f000 f9c2 	bl	80021d2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2400059c 	.word	0x2400059c
 8001e58:	40080000 	.word	0x40080000

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	@ 0x30
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e72:	4b38      	ldr	r3, [pc, #224]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e78:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e82:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e90:	4b30      	ldr	r3, [pc, #192]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e96:	4a2f      	ldr	r2, [pc, #188]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eae:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb4:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001eb6:	f043 0320 	orr.w	r3, r3, #32
 8001eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ebe:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ecc:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed2:	4a20      	ldr	r2, [pc, #128]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef0:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efa:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0e:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f18:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_GPIO_Init+0xf8>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	21c0      	movs	r1, #192	@ 0xc0
 8001f2a:	480b      	ldr	r0, [pc, #44]	@ (8001f58 <MX_GPIO_Init+0xfc>)
 8001f2c:	f003 f8e0 	bl	80050f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8001f30:	23c0      	movs	r3, #192	@ 0xc0
 8001f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_GPIO_Init+0xfc>)
 8001f48:	f002 ff22 	bl	8004d90 <HAL_GPIO_Init>

}
 8001f4c:	bf00      	nop
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58020800 	.word	0x58020800
 8001f5c:	00000000 	.word	0x00000000

08001f60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	ed2d 8b02 	vpush	{d8}
 8001f66:	b08e      	sub	sp, #56	@ 0x38
 8001f68:	af04      	add	r7, sp, #16
 8001f6a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */

	// Initialize the servo to start with a 0-degree angle

	servo_set_angle(0.0);
 8001f6c:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8002170 <StartDefaultTask+0x210>
 8001f70:	f000 f980 	bl	8002274 <servo_set_angle>

	/* Internal Navigation Mode */

	// Initialize the IMU for sensor-based orientation

	imu_setup_routine(&hi2c4);
 8001f74:	487f      	ldr	r0, [pc, #508]	@ (8002174 <StartDefaultTask+0x214>)
 8001f76:	f7fe fef7 	bl	8000d68 <imu_setup_routine>
	gyro_orient_init(&orient_state);
 8001f7a:	487f      	ldr	r0, [pc, #508]	@ (8002178 <StartDefaultTask+0x218>)
 8001f7c:	f7fe fe66 	bl	8000c4c <gyro_orient_init>

	// Set desired linear velocity (this is the target speed for the vehicle)

	rtU.Input1 = LINEAR_VELOCITY;
 8001f80:	497e      	ldr	r1, [pc, #504]	@ (800217c <StartDefaultTask+0x21c>)
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b7e      	ldr	r3, [pc, #504]	@ (8002180 <StartDefaultTask+0x220>)
 8001f88:	e9c1 2306 	strd	r2, r3, [r1, #24]

	// Set desired lookahead distance for the pure pursuit algorithm (defines how far ahead the vehicle looks)

	rtU.Input2 = LOOKAHEAD_DISTANCE;
 8001f8c:	497b      	ldr	r1, [pc, #492]	@ (800217c <StartDefaultTask+0x21c>)
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b7c      	ldr	r3, [pc, #496]	@ (8002184 <StartDefaultTask+0x224>)
 8001f94:	e9c1 2308 	strd	r2, r3, [r1, #32]

	// Move until desired linear velocity is reached by gradually increasing motor speed

	for (float i = 0; i < LINEAR_VELOCITY; i += 0.1)
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9e:	e012      	b.n	8001fc6 <StartDefaultTask+0x66>
	{
		motor_set_speed(i);
 8001fa0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001fa4:	f000 f91c 	bl	80021e0 <motor_set_speed>
		osDelay(SPEED_INCREASE_RATE);
 8001fa8:	200a      	movs	r0, #10
 8001faa:	f009 fe45 	bl	800bc38 <osDelay>
	for (float i = 0; i < LINEAR_VELOCITY; i += 0.1)
 8001fae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fb6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8002150 <StartDefaultTask+0x1f0>
 8001fba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001fc6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fca:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	d4e3      	bmi.n	8001fa0 <StartDefaultTask+0x40>
	}

	// Initialize pure pursuit algorithm to guide the vehicle towards a target

	robocar_c_initialize();
 8001fd8:	f001 feba 	bl	8003d50 <robocar_c_initialize>

  for(;;)
  {
	  // Step for pure pursuit: Perform a step in the pure pursuit algorithm to calculate the next control actions

	robocar_c_step();
 8001fdc:	f001 f8bc 	bl	8003158 <robocar_c_step>

	// Steer the vehicle based on the output of the pure pursuit algorithm

	mapped_angle = (rtY.Out2 - INPUT_MIN) * (OUTPUT_MAX - OUTPUT_MIN) / (INPUT_MAX - INPUT_MIN) + OUTPUT_MIN;
 8001fe0:	4b69      	ldr	r3, [pc, #420]	@ (8002188 <StartDefaultTask+0x228>)
 8001fe2:	ed93 7b02 	vldr	d7, [r3, #8]
 8001fe6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001fea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fee:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8002158 <StartDefaultTask+0x1f8>
 8001ff2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ff6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001ffa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ffe:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8002160 <StartDefaultTask+0x200>
 8002002:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002006:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800200a:	4b60      	ldr	r3, [pc, #384]	@ (800218c <StartDefaultTask+0x22c>)
 800200c:	edc3 7a00 	vstr	s15, [r3]

	servo_set_angle(mapped_angle);
 8002010:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <StartDefaultTask+0x22c>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	eeb0 0a67 	vmov.f32	s0, s15
 800201a:	f000 f92b 	bl	8002274 <servo_set_angle>

	// Read IMU data and calculate yaw (orientation angle of the vehicle)

	imu_data = imu_read_processed_data(&hi2c4);
 800201e:	4c5c      	ldr	r4, [pc, #368]	@ (8002190 <StartDefaultTask+0x230>)
 8002020:	463b      	mov	r3, r7
 8002022:	4954      	ldr	r1, [pc, #336]	@ (8002174 <StartDefaultTask+0x214>)
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f89d 	bl	8001164 <imu_read_processed_data>
 800202a:	4625      	mov	r5, r4
 800202c:	463c      	mov	r4, r7
 800202e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002036:	e885 0003 	stmia.w	r5, {r0, r1}
	yaw = gyro_orient_update(&orient_state, &imu_data, HAL_GetTick());
 800203a:	f001 ff73 	bl	8003f24 <HAL_GetTick>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4953      	ldr	r1, [pc, #332]	@ (8002190 <StartDefaultTask+0x230>)
 8002044:	484c      	ldr	r0, [pc, #304]	@ (8002178 <StartDefaultTask+0x218>)
 8002046:	f7fe fe19 	bl	8000c7c <gyro_orient_update>
 800204a:	eef0 7a40 	vmov.f32	s15, s0
 800204e:	4b51      	ldr	r3, [pc, #324]	@ (8002194 <StartDefaultTask+0x234>)
 8002050:	edc3 7a00 	vstr	s15, [r3]

	// Read encoder data to calculate the distance traveled by the vehicle

	status = can_receive_encoder(&hfdcan1, &rx_header, &encoder_value);
 8002054:	4a50      	ldr	r2, [pc, #320]	@ (8002198 <StartDefaultTask+0x238>)
 8002056:	4951      	ldr	r1, [pc, #324]	@ (800219c <StartDefaultTask+0x23c>)
 8002058:	4851      	ldr	r0, [pc, #324]	@ (80021a0 <StartDefaultTask+0x240>)
 800205a:	f7fe fd9b 	bl	8000b94 <can_receive_encoder>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b50      	ldr	r3, [pc, #320]	@ (80021a4 <StartDefaultTask+0x244>)
 8002064:	701a      	strb	r2, [r3, #0]

	if (status == CAN_STATUS_OK) {
 8002066:	4b4f      	ldr	r3, [pc, #316]	@ (80021a4 <StartDefaultTask+0x244>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d109      	bne.n	8002082 <StartDefaultTask+0x122>
		encoder_distance = encoder_calculate_distance(encoder_value);
 800206e:	4b4a      	ldr	r3, [pc, #296]	@ (8002198 <StartDefaultTask+0x238>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fdc8 	bl	8000c08 <encoder_calculate_distance>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	4b4a      	ldr	r3, [pc, #296]	@ (80021a8 <StartDefaultTask+0x248>)
 800207e:	edc3 7a00 	vstr	s15, [r3]
	}

	// Actualize the current state of the vehicle (position and orientation)
	// Convert encoder distance and yaw to Cartesian coordinates (x, y) and update the vehicle's state

	state[0] = encoder_distance * cos(yaw * (M_PI / 180.0));
 8002082:	4b49      	ldr	r3, [pc, #292]	@ (80021a8 <StartDefaultTask+0x248>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <StartDefaultTask+0x234>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002096:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8002168 <StartDefaultTask+0x208>
 800209a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800209e:	eeb0 0b47 	vmov.f64	d0, d7
 80020a2:	f010 fe25 	bl	8012cf0 <cos>
 80020a6:	eeb0 7b40 	vmov.f64	d7, d0
 80020aa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80020ae:	4b3f      	ldr	r3, [pc, #252]	@ (80021ac <StartDefaultTask+0x24c>)
 80020b0:	ed83 7b00 	vstr	d7, [r3]
	state[1] = encoder_distance * sin(yaw * (M_PI / 180.0));
 80020b4:	4b3c      	ldr	r3, [pc, #240]	@ (80021a8 <StartDefaultTask+0x248>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80020be:	4b35      	ldr	r3, [pc, #212]	@ (8002194 <StartDefaultTask+0x234>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020c8:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8002168 <StartDefaultTask+0x208>
 80020cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020d0:	eeb0 0b47 	vmov.f64	d0, d7
 80020d4:	f010 fe58 	bl	8012d88 <sin>
 80020d8:	eeb0 7b40 	vmov.f64	d7, d0
 80020dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80020e0:	4b32      	ldr	r3, [pc, #200]	@ (80021ac <StartDefaultTask+0x24c>)
 80020e2:	ed83 7b02 	vstr	d7, [r3, #8]
	state[2] = yaw * (M_PI / 180.0);
 80020e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <StartDefaultTask+0x234>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020f0:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002168 <StartDefaultTask+0x208>
 80020f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020f8:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <StartDefaultTask+0x24c>)
 80020fa:	ed83 7b04 	vstr	d7, [r3, #16]

	// Update the input states for the pure pursuit algorithm (x, y, yaw)

	rtU.Input[0] = state[0];
 80020fe:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <StartDefaultTask+0x24c>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	491d      	ldr	r1, [pc, #116]	@ (800217c <StartDefaultTask+0x21c>)
 8002106:	e9c1 2300 	strd	r2, r3, [r1]
	rtU.Input[1] = state[1];
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <StartDefaultTask+0x24c>)
 800210c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002110:	491a      	ldr	r1, [pc, #104]	@ (800217c <StartDefaultTask+0x21c>)
 8002112:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtU.Input[2] = state[2];
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <StartDefaultTask+0x24c>)
 8002118:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800211c:	4917      	ldr	r1, [pc, #92]	@ (800217c <StartDefaultTask+0x21c>)
 800211e:	e9c1 2304 	strd	r2, r3, [r1, #16]

	/* DEBUG INFO: Output the current state for debugging and monitoring */

	printf("[%f, %f, %f]\n\r",
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <StartDefaultTask+0x24c>)
 8002124:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <StartDefaultTask+0x24c>)
 800212a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800212e:	491f      	ldr	r1, [pc, #124]	@ (80021ac <StartDefaultTask+0x24c>)
 8002130:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002138:	e9cd 2300 	strd	r2, r3, [sp]
 800213c:	4622      	mov	r2, r4
 800213e:	462b      	mov	r3, r5
 8002140:	481b      	ldr	r0, [pc, #108]	@ (80021b0 <StartDefaultTask+0x250>)
 8002142:	f00d f94f 	bl	800f3e4 <iprintf>
			state[0],
			state[1],
			state[2]
	);

	osDelay(50);
 8002146:	2032      	movs	r0, #50	@ 0x32
 8002148:	f009 fd76 	bl	800bc38 <osDelay>
	robocar_c_step();
 800214c:	e746      	b.n	8001fdc <StartDefaultTask+0x7c>
 800214e:	bf00      	nop
 8002150:	9999999a 	.word	0x9999999a
 8002154:	3fb99999 	.word	0x3fb99999
 8002158:	00000000 	.word	0x00000000
 800215c:	40668000 	.word	0x40668000
 8002160:	00000000 	.word	0x00000000
 8002164:	40568000 	.word	0x40568000
 8002168:	a2529d39 	.word	0xa2529d39
 800216c:	3f91df46 	.word	0x3f91df46
 8002170:	00000000 	.word	0x00000000
 8002174:	24000354 	.word	0x24000354
 8002178:	24000ac4 	.word	0x24000ac4
 800217c:	24000cb8 	.word	0x24000cb8
 8002180:	401c0000 	.word	0x401c0000
 8002184:	3ff00000 	.word	0x3ff00000
 8002188:	24000ce0 	.word	0x24000ce0
 800218c:	24000b40 	.word	0x24000b40
 8002190:	24000aac 	.word	0x24000aac
 8002194:	24000ad0 	.word	0x24000ad0
 8002198:	24000b1e 	.word	0x24000b1e
 800219c:	24000af4 	.word	0x24000af4
 80021a0:	240002b4 	.word	0x240002b4
 80021a4:	24000b1c 	.word	0x24000b1c
 80021a8:	24000b20 	.word	0x24000b20
 80021ac:	24000b28 	.word	0x24000b28
 80021b0:	08013ff8 	.word	0x08013ff8

080021b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021c6:	f001 fe99 	bl	8003efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d6:	b672      	cpsid	i
}
 80021d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021da:	bf00      	nop
 80021dc:	e7fd      	b.n	80021da <Error_Handler+0x8>
	...

080021e0 <motor_set_speed>:

#include "main.h"
#include "motor_driver.h"

void motor_set_speed(float speed)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ensure speed is within the valid range [-1.0, 1.0]

    if (speed < MOTOR_MIN_SPEED || speed > MOTOR_MAX_SPEED) {
 80021ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80021f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	d434      	bmi.n	8002266 <motor_set_speed+0x86>
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	dc2b      	bgt.n	8002266 <motor_set_speed+0x86>
    }

    // Calculate the pulse width based on the input speed value

    float pulseWidth = NEUTRAL_PULSE_WIDTH_MS + (speed > 0.0f ?
        (speed * FORWARD_PULSE_WIDTH_RANGE) :
 800220e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002212:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002216:	ee67 7a87 	vmul.f32	s15, s15, s14
    float pulseWidth = NEUTRAL_PULSE_WIDTH_MS + (speed > 0.0f ?
 800221a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800221e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002222:	edc7 7a05 	vstr	s15, [r7, #20]
        (speed * REVERSE_PULSE_WIDTH_RANGE));

    // Get the current auto-reload register value from Timer 14 (for PWM period)

    uint32_t autoreload_register_value = __HAL_TIM_GET_AUTORELOAD(&htim14);
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <motor_set_speed+0x90>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	613b      	str	r3, [r7, #16]

    // Calculate the compare value for PWM duty cycle based on pulse width

    uint32_t value = (uint32_t)((pulseWidth / PWM_PERIOD_MS) * (autoreload_register_value + 1));
 800222e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002232:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002236:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	3301      	adds	r3, #1
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800224e:	ee17 3a90 	vmov	r3, s15
 8002252:	60fb      	str	r3, [r7, #12]

    // Set the PWM duty cycle on TIM_CHANNEL_1 of Timer 14

    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, value);
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <motor_set_speed+0x90>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34

    // Start PWM generation on TIM_CHANNEL_1

    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800225c:	2100      	movs	r1, #0
 800225e:	4804      	ldr	r0, [pc, #16]	@ (8002270 <motor_set_speed+0x90>)
 8002260:	f006 fdfa 	bl	8008e58 <HAL_TIM_PWM_Start>
 8002264:	e000      	b.n	8002268 <motor_set_speed+0x88>
        return;
 8002266:	bf00      	nop
}
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	240004c0 	.word	0x240004c0

08002274 <servo_set_angle>:

#include "main.h"
#include "servo_driver.h"

void servo_set_angle(float angle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Check if the angle is within the valid range

    if (angle < SERVO_MIN_ANGLE || angle > SERVO_MAX_ANGLE) {
 800227e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002282:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002304 <servo_set_angle+0x90>
 8002286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	d434      	bmi.n	80022fa <servo_set_angle+0x86>
 8002290:	edd7 7a01 	vldr	s15, [r7, #4]
 8002294:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002308 <servo_set_angle+0x94>
 8002298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	dc2b      	bgt.n	80022fa <servo_set_angle+0x86>

    // Calculate the pulse width corresponding to the angle

    // Base pulse width is SERVO_BASE_PULSE_WIDTH_MS, adjusted based on the angle

    float pulseWidth = SERVO_BASE_PULSE_WIDTH_MS + (angle / 180.0f);
 80022a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80022a6:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800230c <servo_set_angle+0x98>
 80022aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ae:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80022b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022b6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Get the current value of the auto-reload register for the timer (for PWM period)

    uint32_t autoreload_register_value = __HAL_TIM_GET_AUTORELOAD(&htim13);
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <servo_set_angle+0x9c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	613b      	str	r3, [r7, #16]

    // Calculate the compare value based on the pulse width

    uint32_t value = (uint32_t)((pulseWidth / SERVO_PWM_PERIOD_MS) * (autoreload_register_value + 1));
 80022c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c6:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80022ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	3301      	adds	r3, #1
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e2:	ee17 3a90 	vmov	r3, s15
 80022e6:	60fb      	str	r3, [r7, #12]

    // Set the PWM duty cycle for TIM_CHANNEL_1 of Timer 13

    __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, value);
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <servo_set_angle+0x9c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	635a      	str	r2, [r3, #52]	@ 0x34

    // Start the PWM signal generation on TIM_CHANNEL_1

    HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80022f0:	2100      	movs	r1, #0
 80022f2:	4807      	ldr	r0, [pc, #28]	@ (8002310 <servo_set_angle+0x9c>)
 80022f4:	f006 fdb0 	bl	8008e58 <HAL_TIM_PWM_Start>
 80022f8:	e000      	b.n	80022fc <servo_set_angle+0x88>
        return;
 80022fa:	bf00      	nop
}
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	c2b40000 	.word	0xc2b40000
 8002308:	42b40000 	.word	0x42b40000
 800230c:	43340000 	.word	0x43340000
 8002310:	24000474 	.word	0x24000474

08002314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_MspInit+0x38>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_MspInit+0x38>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800232a:	4b08      	ldr	r3, [pc, #32]	@ (800234c <HAL_MspInit+0x38>)
 800232c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	210f      	movs	r1, #15
 800233c:	f06f 0001 	mvn.w	r0, #1
 8002340:	f001 fee4 	bl	800410c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	58024400 	.word	0x58024400

08002350 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0b8      	sub	sp, #224	@ 0xe0
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	22bc      	movs	r2, #188	@ 0xbc
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f00d f99f 	bl	800f6b4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2f      	ldr	r2, [pc, #188]	@ (8002438 <HAL_FDCAN_MspInit+0xe8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d157      	bne.n	8002430 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002384:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002386:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800238a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f004 ffa7 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800239c:	f7ff ff19 	bl	80021d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80023a0:	4b26      	ldr	r3, [pc, #152]	@ (800243c <HAL_FDCAN_MspInit+0xec>)
 80023a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80023a6:	4a25      	ldr	r2, [pc, #148]	@ (800243c <HAL_FDCAN_MspInit+0xec>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ac:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80023b0:	4b22      	ldr	r3, [pc, #136]	@ (800243c <HAL_FDCAN_MspInit+0xec>)
 80023b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80023b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023be:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <HAL_FDCAN_MspInit+0xec>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c4:	4a1d      	ldr	r2, [pc, #116]	@ (800243c <HAL_FDCAN_MspInit+0xec>)
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ce:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_FDCAN_MspInit+0xec>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023dc:	2301      	movs	r3, #1
 80023de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80023f4:	2309      	movs	r3, #9
 80023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80023fe:	4619      	mov	r1, r3
 8002400:	480f      	ldr	r0, [pc, #60]	@ (8002440 <HAL_FDCAN_MspInit+0xf0>)
 8002402:	f002 fcc5 	bl	8004d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002412:	2301      	movs	r3, #1
 8002414:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800241e:	2309      	movs	r3, #9
 8002420:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002424:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002428:	4619      	mov	r1, r3
 800242a:	4805      	ldr	r0, [pc, #20]	@ (8002440 <HAL_FDCAN_MspInit+0xf0>)
 800242c:	f002 fcb0 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002430:	bf00      	nop
 8002432:	37e0      	adds	r7, #224	@ 0xe0
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	4000a000 	.word	0x4000a000
 800243c:	58024400 	.word	0x58024400
 8002440:	58020c00 	.word	0x58020c00

08002444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0b8      	sub	sp, #224	@ 0xe0
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	22bc      	movs	r2, #188	@ 0xbc
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00d f925 	bl	800f6b4 <memset>
  if(hi2c->Instance==I2C4)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a25      	ldr	r2, [pc, #148]	@ (8002504 <HAL_I2C_MspInit+0xc0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d142      	bne.n	80024fa <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002474:	2310      	movs	r3, #16
 8002476:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f004 ff2e 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800248e:	f7ff fea0 	bl	80021d2 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002492:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_I2C_MspInit+0xc4>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002498:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <HAL_I2C_MspInit+0xc4>)
 800249a:	f043 0320 	orr.w	r3, r3, #32
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a2:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_I2C_MspInit+0xc4>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024b0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b8:	2312      	movs	r3, #18
 80024ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80024ca:	2304      	movs	r3, #4
 80024cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80024d4:	4619      	mov	r1, r3
 80024d6:	480d      	ldr	r0, [pc, #52]	@ (800250c <HAL_I2C_MspInit+0xc8>)
 80024d8:	f002 fc5a 	bl	8004d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80024dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_I2C_MspInit+0xc4>)
 80024de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <HAL_I2C_MspInit+0xc4>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_I2C_MspInit+0xc4>)
 80024ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	37e0      	adds	r7, #224	@ 0xe0
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	58001c00 	.word	0x58001c00
 8002508:	58024400 	.word	0x58024400
 800250c:	58021400 	.word	0x58021400

08002510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0b8      	sub	sp, #224	@ 0xe0
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	22bc      	movs	r2, #188	@ 0xbc
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f00d f8bf 	bl	800f6b4 <memset>
  if(hspi->Instance==SPI4)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a25      	ldr	r2, [pc, #148]	@ (80025d0 <HAL_SPI_MspInit+0xc0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d142      	bne.n	80025c6 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002540:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002544:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8002546:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800254a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	4618      	mov	r0, r3
 8002552:	f004 fec7 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800255c:	f7ff fe39 	bl	80021d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <HAL_SPI_MspInit+0xc4>)
 8002562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002566:	4a1b      	ldr	r2, [pc, #108]	@ (80025d4 <HAL_SPI_MspInit+0xc4>)
 8002568:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800256c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002570:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <HAL_SPI_MspInit+0xc4>)
 8002572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_SPI_MspInit+0xc4>)
 8002580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002584:	4a13      	ldr	r2, [pc, #76]	@ (80025d4 <HAL_SPI_MspInit+0xc4>)
 8002586:	f043 0310 	orr.w	r3, r3, #16
 800258a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800258e:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_SPI_MspInit+0xc4>)
 8002590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SPI4_SCK_Pin|NRF_SPI4_MISO_Pin|NRF_SPI4_MOSI_Pin;
 800259c:	2364      	movs	r3, #100	@ 0x64
 800259e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80025b4:	2305      	movs	r3, #5
 80025b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ba:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	@ (80025d8 <HAL_SPI_MspInit+0xc8>)
 80025c2:	f002 fbe5 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	37e0      	adds	r7, #224	@ 0xe0
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40013400 	.word	0x40013400
 80025d4:	58024400 	.word	0x58024400
 80025d8:	58021000 	.word	0x58021000

080025dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a20      	ldr	r2, [pc, #128]	@ (800266c <HAL_TIM_Base_MspInit+0x90>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10f      	bne.n	800260e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 80025f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 8002600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800260c:	e028      	b.n	8002660 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM13)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <HAL_TIM_Base_MspInit+0x98>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d10f      	bne.n	8002638 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002618:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 800261a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800261e:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002624:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 800262a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800262e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
}
 8002636:	e013      	b.n	8002660 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM14)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <HAL_TIM_Base_MspInit+0x9c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 8002644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002648:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 800264a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002652:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <HAL_TIM_Base_MspInit+0x94>)
 8002654:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40010000 	.word	0x40010000
 8002670:	58024400 	.word	0x58024400
 8002674:	40001c00 	.word	0x40001c00
 8002678:	40002000 	.word	0x40002000

0800267c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a38      	ldr	r2, [pc, #224]	@ (800277c <HAL_TIM_MspPostInit+0x100>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d120      	bne.n	80026e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800269e:	4b38      	ldr	r3, [pc, #224]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 80026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a4:	4a36      	ldr	r2, [pc, #216]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 80026a6:	f043 0310 	orr.w	r3, r3, #16
 80026aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026ae:	4b34      	ldr	r3, [pc, #208]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 80026b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	482a      	ldr	r0, [pc, #168]	@ (8002784 <HAL_TIM_MspPostInit+0x108>)
 80026da:	f002 fb59 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80026de:	e049      	b.n	8002774 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM13)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a28      	ldr	r2, [pc, #160]	@ (8002788 <HAL_TIM_MspPostInit+0x10c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d11f      	bne.n	800272a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b25      	ldr	r3, [pc, #148]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 80026ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f0:	4a23      	ldr	r2, [pc, #140]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026fa:	4b21      	ldr	r3, [pc, #132]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002708:	2340      	movs	r3, #64	@ 0x40
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002718:	2309      	movs	r3, #9
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	481a      	ldr	r0, [pc, #104]	@ (800278c <HAL_TIM_MspPostInit+0x110>)
 8002724:	f002 fb34 	bl	8004d90 <HAL_GPIO_Init>
}
 8002728:	e024      	b.n	8002774 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM14)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_TIM_MspPostInit+0x114>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d11f      	bne.n	8002774 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 8002736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273a:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002744:	4b0e      	ldr	r3, [pc, #56]	@ (8002780 <HAL_TIM_MspPostInit+0x104>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002764:	2309      	movs	r3, #9
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4809      	ldr	r0, [pc, #36]	@ (8002794 <HAL_TIM_MspPostInit+0x118>)
 8002770:	f002 fb0e 	bl	8004d90 <HAL_GPIO_Init>
}
 8002774:	bf00      	nop
 8002776:	3728      	adds	r7, #40	@ 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40010000 	.word	0x40010000
 8002780:	58024400 	.word	0x58024400
 8002784:	58021000 	.word	0x58021000
 8002788:	40001c00 	.word	0x40001c00
 800278c:	58020000 	.word	0x58020000
 8002790:	40002000 	.word	0x40002000
 8002794:	58021400 	.word	0x58021400

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0b8      	sub	sp, #224	@ 0xe0
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	22bc      	movs	r2, #188	@ 0xbc
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00c ff7b 	bl	800f6b4 <memset>
  if(huart->Instance==USART3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a25      	ldr	r2, [pc, #148]	@ (8002858 <HAL_UART_MspInit+0xc0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d142      	bne.n	800284e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027c8:	2302      	movs	r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 fd84 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027e2:	f7ff fcf6 	bl	80021d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <HAL_UART_MspInit+0xc4>)
 80027e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ec:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <HAL_UART_MspInit+0xc4>)
 80027ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_UART_MspInit+0xc4>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002804:	4b15      	ldr	r3, [pc, #84]	@ (800285c <HAL_UART_MspInit+0xc4>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800280a:	4a14      	ldr	r2, [pc, #80]	@ (800285c <HAL_UART_MspInit+0xc4>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_UART_MspInit+0xc4>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002826:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800283c:	2307      	movs	r3, #7
 800283e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002842:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	@ (8002860 <HAL_UART_MspInit+0xc8>)
 800284a:	f002 faa1 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800284e:	bf00      	nop
 8002850:	37e0      	adds	r7, #224	@ 0xe0
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40004800 	.word	0x40004800
 800285c:	58024400 	.word	0x58024400
 8002860:	58020c00 	.word	0x58020c00

08002864 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0b8      	sub	sp, #224	@ 0xe0
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	22bc      	movs	r2, #188	@ 0xbc
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f00c ff15 	bl	800f6b4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2f      	ldr	r2, [pc, #188]	@ (800294c <HAL_PCD_MspInit+0xe8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d156      	bne.n	8002942 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002894:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002898:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800289a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800289e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028a2:	f107 0310 	add.w	r3, r7, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fd1c 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80028b2:	f7ff fc8e 	bl	80021d2 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80028b6:	f003 fd09 	bl	80062cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <HAL_PCD_MspInit+0xec>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c0:	4a23      	ldr	r2, [pc, #140]	@ (8002950 <HAL_PCD_MspInit+0xec>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ca:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_PCD_MspInit+0xec>)
 80028cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80028d8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80028dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80028f2:	230a      	movs	r3, #10
 80028f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028fc:	4619      	mov	r1, r3
 80028fe:	4815      	ldr	r0, [pc, #84]	@ (8002954 <HAL_PCD_MspInit+0xf0>)
 8002900:	f002 fa46 	bl	8004d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002908:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800291c:	4619      	mov	r1, r3
 800291e:	480d      	ldr	r0, [pc, #52]	@ (8002954 <HAL_PCD_MspInit+0xf0>)
 8002920:	f002 fa36 	bl	8004d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <HAL_PCD_MspInit+0xec>)
 8002926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800292a:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <HAL_PCD_MspInit+0xec>)
 800292c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002930:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_PCD_MspInit+0xec>)
 8002936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800293a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	37e0      	adds	r7, #224	@ 0xe0
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40080000 	.word	0x40080000
 8002950:	58024400 	.word	0x58024400
 8002954:	58020000 	.word	0x58020000

08002958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b090      	sub	sp, #64	@ 0x40
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	d827      	bhi.n	80029b6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8002966:	2200      	movs	r2, #0
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	201c      	movs	r0, #28
 800296c:	f001 fbce 	bl	800410c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002970:	201c      	movs	r0, #28
 8002972:	f001 fbe5 	bl	8004140 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002976:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <HAL_InitTick+0xc4>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800297c:	4b28      	ldr	r3, [pc, #160]	@ (8002a20 <HAL_InitTick+0xc8>)
 800297e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002982:	4a27      	ldr	r2, [pc, #156]	@ (8002a20 <HAL_InitTick+0xc8>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_InitTick+0xc8>)
 800298e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800299a:	f107 0210 	add.w	r2, r7, #16
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fc5b 	bl	8007260 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <HAL_InitTick+0x6a>
 80029b4:	e001      	b.n	80029ba <HAL_InitTick+0x62>
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e02c      	b.n	8002a14 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029ba:	f004 fc25 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 80029be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80029c0:	e004      	b.n	80029cc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029c2:	f004 fc21 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 80029c6:	4603      	mov	r3, r0
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ce:	4a15      	ldr	r2, [pc, #84]	@ (8002a24 <HAL_InitTick+0xcc>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	3b01      	subs	r3, #1
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80029e2:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029e8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80029ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ee:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80029fc:	480a      	ldr	r0, [pc, #40]	@ (8002a28 <HAL_InitTick+0xd0>)
 80029fe:	f006 f8fa 	bl	8008bf6 <HAL_TIM_Base_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d104      	bne.n	8002a12 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002a08:	4807      	ldr	r0, [pc, #28]	@ (8002a28 <HAL_InitTick+0xd0>)
 8002a0a:	f006 f94b 	bl	8008ca4 <HAL_TIM_Base_Start_IT>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	e000      	b.n	8002a14 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3740      	adds	r7, #64	@ 0x40
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	24000010 	.word	0x24000010
 8002a20:	58024400 	.word	0x58024400
 8002a24:	431bde83 	.word	0x431bde83
 8002a28:	24000b44 	.word	0x24000b44

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <NMI_Handler+0x4>

08002a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <MemManage_Handler+0x4>

08002a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <TIM2_IRQHandler+0x10>)
 8002a6a:	f006 fb03 	bl	8009074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	24000b44 	.word	0x24000b44

08002a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return 1;
 8002a7c:	2301      	movs	r3, #1
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_kill>:

int _kill(int pid, int sig)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a92:	f00c feb7 	bl	800f804 <__errno>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2216      	movs	r2, #22
 8002a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_exit>:

void _exit (int status)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ffe7 	bl	8002a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aba:	bf00      	nop
 8002abc:	e7fd      	b.n	8002aba <_exit+0x12>

08002abe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e00a      	b.n	8002ae6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ad0:	f3af 8000 	nop.w
 8002ad4:	4601      	mov	r1, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	60ba      	str	r2, [r7, #8]
 8002adc:	b2ca      	uxtb	r2, r1
 8002ade:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dbf0      	blt.n	8002ad0 <_read+0x12>
  }

  return len;
 8002aee:	687b      	ldr	r3, [r7, #4]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e009      	b.n	8002b1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	60ba      	str	r2, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f876 	bl	8002c04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dbf1      	blt.n	8002b0a <_write+0x12>
  }
  return len;
 8002b26:	687b      	ldr	r3, [r7, #4]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_close>:

int _close(int file)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b58:	605a      	str	r2, [r3, #4]
  return 0;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_isatty>:

int _isatty(int file)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b70:	2301      	movs	r3, #1
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <_sbrk+0x5c>)
 8002ba2:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <_sbrk+0x60>)
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bac:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <_sbrk+0x64>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <_sbrk+0x64>)
 8002bb6:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <_sbrk+0x68>)
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d207      	bcs.n	8002bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc8:	f00c fe1c 	bl	800f804 <__errno>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	220c      	movs	r2, #12
 8002bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bd6:	e009      	b.n	8002bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bde:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	4a05      	ldr	r2, [pc, #20]	@ (8002bfc <_sbrk+0x64>)
 8002be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	24080000 	.word	0x24080000
 8002bf8:	00000400 	.word	0x00000400
 8002bfc:	24000b90 	.word	0x24000b90
 8002c00:	24005828 	.word	0x24005828

08002c04 <__io_putchar>:

#include "main.h"
#include "uart_printf.h"

PUTCHAR_PROTOTYPE
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002c0c:	1d39      	adds	r1, r7, #4
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c12:	2201      	movs	r2, #1
 8002c14:	4803      	ldr	r0, [pc, #12]	@ (8002c24 <__io_putchar+0x20>)
 8002c16:	f007 fb2f 	bl	800a278 <HAL_UART_Transmit>
	return ch;
 8002c1a:	687b      	ldr	r3, [r7, #4]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	2400050c 	.word	0x2400050c

08002c28 <rtIsInf>:
  return rtNaNF;
}

/* Test if value is infinite */
static boolean_T rtIsInf(real_T value)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)isinf(value);
 8002c32:	ed97 7b00 	vldr	d7, [r7]
 8002c36:	eeb0 7bc7 	vabs.f64	d7, d7
 8002c3a:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002c68 <rtIsInf+0x40>
 8002c3e:	eeb4 7b46 	vcmp.f64	d7, d6
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	dc01      	bgt.n	8002c4c <rtIsInf+0x24>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e007      	b.n	8002c5c <rtIsInf+0x34>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <rtIsInf+0x32>
 8002c56:	23ff      	movs	r3, #255	@ 0xff
 8002c58:	e000      	b.n	8002c5c <rtIsInf+0x34>
 8002c5a:	2301      	movs	r3, #1
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	ffffffff 	.word	0xffffffff
 8002c6c:	7fefffff 	.word	0x7fefffff

08002c70 <rtIsNaN>:
  return (boolean_T)isinf(value);
}

/* Test if value is not a number */
static boolean_T rtIsNaN(real_T value)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)(isnan(value) != 0);
 8002c7a:	ed97 6b00 	vldr	d6, [r7]
 8002c7e:	ed97 7b00 	vldr	d7, [r7]
 8002c82:	eeb4 6b47 	vcmp.f64	d6, d7
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d701      	bvc.n	8002c90 <rtIsNaN+0x20>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <rtIsNaN+0x22>
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <norm>:
{
  return (boolean_T)(isnan(value) != 0);
}

static real_T norm(const real_T x[2])
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 53e6 	mov.w	r3, #482344960	@ 0x1cc00000
 8002cb0:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Start for MATLABSystem: '<Root>/Pure Pursuit' */
  absxk = fabs(x[0]);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	ed93 7b00 	vldr	d7, [r3]
 8002cba:	eeb0 7bc7 	vabs.f64	d7, d7
 8002cbe:	ed87 7b04 	vstr	d7, [r7, #16]
  if (absxk > 3.3121686421112381E-170) {
 8002cc2:	ed97 7b04 	vldr	d7, [r7, #16]
 8002cc6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8002da8 <norm+0x108>
 8002cca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	dd09      	ble.n	8002ce8 <norm+0x48>
    y = 1.0;
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b35      	ldr	r3, [pc, #212]	@ (8002db0 <norm+0x110>)
 8002cda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    scale = absxk;
 8002cde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ce2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002ce6:	e00d      	b.n	8002d04 <norm+0x64>
  } else {
    t = absxk / 3.3121686421112381E-170;
 8002ce8:	ed97 6b04 	vldr	d6, [r7, #16]
 8002cec:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8002da8 <norm+0x108>
 8002cf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cf4:	ed87 7b02 	vstr	d7, [r7, #8]
    y = t * t;
 8002cf8:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cfc:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002d00:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  /* Start for MATLABSystem: '<Root>/Pure Pursuit' */
  absxk = fabs(x[1]);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3308      	adds	r3, #8
 8002d08:	ed93 7b00 	vldr	d7, [r3]
 8002d0c:	eeb0 7bc7 	vabs.f64	d7, d7
 8002d10:	ed87 7b04 	vstr	d7, [r7, #16]
  if (absxk > scale) {
 8002d14:	ed97 6b04 	vldr	d6, [r7, #16]
 8002d18:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d24:	dd1c      	ble.n	8002d60 <norm+0xc0>
    t = scale / absxk;
 8002d26:	ed97 5b08 	vldr	d5, [r7, #32]
 8002d2a:	ed97 6b04 	vldr	d6, [r7, #16]
 8002d2e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d32:	ed87 7b02 	vstr	d7, [r7, #8]
    y = y * t * t + 1.0;
 8002d36:	ed97 6b06 	vldr	d6, [r7, #24]
 8002d3a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002d42:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d4a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002d4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d52:	ed87 7b06 	vstr	d7, [r7, #24]
    scale = absxk;
 8002d56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002d5e:	e011      	b.n	8002d84 <norm+0xe4>
  } else {
    t = absxk / scale;
 8002d60:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d64:	ed97 6b08 	vldr	d6, [r7, #32]
 8002d68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d6c:	ed87 7b02 	vstr	d7, [r7, #8]
    y += t * t;
 8002d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d74:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002d78:	ed97 6b06 	vldr	d6, [r7, #24]
 8002d7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d80:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  return scale * sqrt(y);
 8002d84:	ed97 0b06 	vldr	d0, [r7, #24]
 8002d88:	f00f ff92 	bl	8012cb0 <sqrt>
 8002d8c:	eeb0 6b40 	vmov.f64	d6, d0
 8002d90:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d94:	ee26 7b07 	vmul.f64	d7, d6, d7
}
 8002d98:	eeb0 0b47 	vmov.f64	d0, d7
 8002d9c:	3728      	adds	r7, #40	@ 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	f3af 8000 	nop.w
 8002da8:	00000000 	.word	0x00000000
 8002dac:	1cc00000 	.word	0x1cc00000
 8002db0:	3ff00000 	.word	0x3ff00000

08002db4 <closestPointOnLine>:

static real_T closestPointOnLine(const real_T pt1[2], real_T pt2[2], const
  real_T refPt[2])
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b092      	sub	sp, #72	@ 0x48
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;

  /* Start for MATLABSystem: '<Root>/Pure Pursuit' */
  p = false;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  p_0 = true;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  b_k = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  exitg1 = false;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  while ((!exitg1) && (b_k < 2)) {
 8002dd6:	e01a      	b.n	8002e0e <closestPointOnLine+0x5a>
    if (!(pt1[b_k] == pt2[b_k])) {
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	ed93 6b00 	vldr	d6, [r3]
 8002de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4413      	add	r3, r2
 8002dec:	ed93 7b00 	vldr	d7, [r3]
 8002df0:	eeb4 6b47 	vcmp.f64	d6, d7
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	d006      	beq.n	8002e08 <closestPointOnLine+0x54>
      p_0 = false;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      exitg1 = true;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002e06:	e002      	b.n	8002e0e <closestPointOnLine+0x5a>
    } else {
      b_k++;
 8002e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while ((!exitg1) && (b_k < 2)) {
 8002e0e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <closestPointOnLine+0x68>
 8002e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	dddd      	ble.n	8002dd8 <closestPointOnLine+0x24>
    }
  }

  if (p_0) {
 8002e1c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <closestPointOnLine+0x76>
    p = true;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  }

  if (p) {
 8002e2a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02c      	beq.n	8002e8c <closestPointOnLine+0xd8>
    pt2[0] = pt1[0];
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
    refPt_0[0] = refPt[0] - pt1[0];
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	ed93 6b00 	vldr	d6, [r3]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	ed93 7b00 	vldr	d7, [r3]
 8002e4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e4e:	ed87 7b04 	vstr	d7, [r7, #16]
    pt2[1] = pt1[1];
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3308      	adds	r3, #8
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	f102 0108 	add.w	r1, r2, #8
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	e9c1 2300 	strd	r2, r3, [r1]
    refPt_0[1] = refPt[1] - pt1[1];
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3308      	adds	r3, #8
 8002e68:	ed93 6b00 	vldr	d6, [r3]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3308      	adds	r3, #8
 8002e70:	ed93 7b00 	vldr	d7, [r3]
 8002e74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e78:	ed87 7b06 	vstr	d7, [r7, #24]
    distance = norm(refPt_0);
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff0d 	bl	8002ca0 <norm>
 8002e86:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
 8002e8a:	e0bd      	b.n	8003008 <closestPointOnLine+0x254>
  } else {
    alpha = pt2[0] - pt1[0];
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	ed93 6b00 	vldr	d6, [r3]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	ed93 7b00 	vldr	d7, [r3]
 8002e98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e9c:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    v12 = (pt2[0] - refPt[0]) * alpha;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	ed93 6b00 	vldr	d6, [r3]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	ed93 7b00 	vldr	d7, [r3]
 8002eac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002eb0:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8002eb4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002eb8:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    v12_0 = alpha * alpha;
 8002ebc:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002ec0:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002ec4:	ed87 7b08 	vstr	d7, [r7, #32]
    alpha = pt2[1] - pt1[1];
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	ed93 6b00 	vldr	d6, [r3]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	ed93 7b00 	vldr	d7, [r3]
 8002ed8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002edc:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    alpha = ((pt2[1] - refPt[1]) * alpha + v12) / (alpha * alpha + v12_0);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	ed93 6b00 	vldr	d6, [r3]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3308      	adds	r3, #8
 8002eec:	ed93 7b00 	vldr	d7, [r3]
 8002ef0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002ef4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002ef8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002efc:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002f00:	ee36 5b07 	vadd.f64	d5, d6, d7
 8002f04:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002f08:	ee27 6b07 	vmul.f64	d6, d7, d7
 8002f0c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002f10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002f14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f18:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    if (alpha > 1.0) {
 8002f1c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002f20:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002f24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	dd0f      	ble.n	8002f4e <closestPointOnLine+0x19a>
      pt2[0] = pt1[0];
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	e9c1 2300 	strd	r2, r3, [r1]
      pt2[1] = pt1[1];
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f102 0108 	add.w	r1, r2, #8
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	e9c1 2300 	strd	r2, r3, [r1]
 8002f4c:	e03f      	b.n	8002fce <closestPointOnLine+0x21a>
    } else if (!(alpha < 0.0)) {
 8002f4e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002f52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	bf4c      	ite	mi
 8002f5c:	2301      	movmi	r3, #1
 8002f5e:	2300      	movpl	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f083 0301 	eor.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d030      	beq.n	8002fce <closestPointOnLine+0x21a>
      pt2[0] = (1.0 - alpha) * pt2[0] + alpha * pt1[0];
 8002f6c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002f70:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002f74:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	ed93 7b00 	vldr	d7, [r3]
 8002f7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	ed93 5b00 	vldr	d5, [r3]
 8002f88:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002f8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002f90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	ed83 7b00 	vstr	d7, [r3]
      pt2[1] = (1.0 - alpha) * pt2[1] + alpha * pt1[1];
 8002f9a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002f9e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002fa2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3308      	adds	r3, #8
 8002faa:	ed93 7b00 	vldr	d7, [r3]
 8002fae:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	ed93 5b00 	vldr	d5, [r3]
 8002fba:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002fbe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002fca:	ed83 7b00 	vstr	d7, [r3]
    }

    refPt_0[0] = refPt[0] - pt2[0];
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	ed93 6b00 	vldr	d6, [r3]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	ed93 7b00 	vldr	d7, [r3]
 8002fda:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002fde:	ed87 7b04 	vstr	d7, [r7, #16]
    refPt_0[1] = refPt[1] - pt2[1];
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	ed93 6b00 	vldr	d6, [r3]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3308      	adds	r3, #8
 8002fee:	ed93 7b00 	vldr	d7, [r3]
 8002ff2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ff6:	ed87 7b06 	vstr	d7, [r7, #24]
    distance = norm(refPt_0);
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fe4e 	bl	8002ca0 <norm>
 8003004:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
  }

  /* End of Start for MATLABSystem: '<Root>/Pure Pursuit' */
  return distance;
 8003008:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800300c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003010:	eeb0 0b47 	vmov.f64	d0, d7
 8003014:	3748      	adds	r7, #72	@ 0x48
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	0000      	movs	r0, r0
 800301c:	0000      	movs	r0, r0
	...

08003020 <rt_atan2d_snf>:

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	ed87 0b02 	vstr	d0, [r7, #8]
 800302a:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800302e:	ed97 0b02 	vldr	d0, [r7, #8]
 8003032:	f7ff fe1d 	bl	8002c70 <rtIsNaN>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <rt_atan2d_snf+0x2a>
 800303c:	ed97 0b00 	vldr	d0, [r7]
 8003040:	f7ff fe16 	bl	8002c70 <rtIsNaN>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <rt_atan2d_snf+0x36>
    y = (rtNaN);
 800304a:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <rt_atan2d_snf+0x130>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003054:	e06a      	b.n	800312c <rt_atan2d_snf+0x10c>
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 8003056:	ed97 0b02 	vldr	d0, [r7, #8]
 800305a:	f7ff fde5 	bl	8002c28 <rtIsInf>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d033      	beq.n	80030cc <rt_atan2d_snf+0xac>
 8003064:	ed97 0b00 	vldr	d0, [r7]
 8003068:	f7ff fdde 	bl	8002c28 <rtIsInf>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d02c      	beq.n	80030cc <rt_atan2d_snf+0xac>
    int32_T tmp;
    int32_T tmp_0;
    if (u0 > 0.0) {
 8003072:	ed97 7b02 	vldr	d7, [r7, #8]
 8003076:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	dd02      	ble.n	8003086 <rt_atan2d_snf+0x66>
      tmp = 1;
 8003080:	2301      	movs	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e002      	b.n	800308c <rt_atan2d_snf+0x6c>
    } else {
      tmp = -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800308a:	617b      	str	r3, [r7, #20]
    }

    if (u1 > 0.0) {
 800308c:	ed97 7b00 	vldr	d7, [r7]
 8003090:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003098:	dd02      	ble.n	80030a0 <rt_atan2d_snf+0x80>
      tmp_0 = 1;
 800309a:	2301      	movs	r3, #1
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e002      	b.n	80030a6 <rt_atan2d_snf+0x86>
    } else {
      tmp_0 = -1;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030a4:	613b      	str	r3, [r7, #16]
    }

    y = atan2(tmp, tmp_0);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	ee06 3a90 	vmov	s13, r3
 80030b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80030ba:	eeb0 1b46 	vmov.f64	d1, d6
 80030be:	eeb0 0b47 	vmov.f64	d0, d7
 80030c2:	f00f fdcf 	bl	8012c64 <atan2>
 80030c6:	ed87 0b06 	vstr	d0, [r7, #24]
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 80030ca:	e02f      	b.n	800312c <rt_atan2d_snf+0x10c>
  } else if (u1 == 0.0) {
 80030cc:	ed97 7b00 	vldr	d7, [r7]
 80030d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	d120      	bne.n	800311c <rt_atan2d_snf+0xfc>
    if (u0 > 0.0) {
 80030da:	ed97 7b02 	vldr	d7, [r7, #8]
 80030de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	dd05      	ble.n	80030f4 <rt_atan2d_snf+0xd4>
      y = RT_PI / 2.0;
 80030e8:	a315      	add	r3, pc, #84	@ (adr r3, 8003140 <rt_atan2d_snf+0x120>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80030f2:	e01b      	b.n	800312c <rt_atan2d_snf+0x10c>
    } else if (u0 < 0.0) {
 80030f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80030f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	d505      	bpl.n	800310e <rt_atan2d_snf+0xee>
      y = -(RT_PI / 2.0);
 8003102:	a311      	add	r3, pc, #68	@ (adr r3, 8003148 <rt_atan2d_snf+0x128>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800310c:	e00e      	b.n	800312c <rt_atan2d_snf+0x10c>
    } else {
      y = 0.0;
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800311a:	e007      	b.n	800312c <rt_atan2d_snf+0x10c>
    }
  } else {
    y = atan2(u0, u1);
 800311c:	ed97 1b00 	vldr	d1, [r7]
 8003120:	ed97 0b02 	vldr	d0, [r7, #8]
 8003124:	f00f fd9e 	bl	8012c64 <atan2>
 8003128:	ed87 0b06 	vstr	d0, [r7, #24]
  }

  return y;
 800312c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003130:	ec43 2b17 	vmov	d7, r2, r3
}
 8003134:	eeb0 0b47 	vmov.f64	d0, d7
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	54442d18 	.word	0x54442d18
 8003144:	3ff921fb 	.word	0x3ff921fb
 8003148:	54442d18 	.word	0x54442d18
 800314c:	bff921fb 	.word	0xbff921fb
 8003150:	24000008 	.word	0x24000008
 8003154:	00000000 	.word	0x00000000

08003158 <robocar_c_step>:

/* Model step function */
void robocar_c_step(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0a2      	sub	sp, #136	@ 0x88
 800315c:	af00      	add	r7, sp, #0

  int32_T tmp_size_idx_0;
  boolean_T exitg1;

  /* MATLAB Function: '<Root>/MATLAB Function2' */
  for (b_k = 0; b_k < 8; b_k++) {
 800315e:	2300      	movs	r3, #0
 8003160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003162:	e00d      	b.n	8003180 <robocar_c_step+0x28>
    rtb_path[b_k] = tmp[b_k];
 8003164:	4aab      	ldr	r2, [pc, #684]	@ (8003414 <robocar_c_step+0x2bc>)
 8003166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003168:	4413      	add	r3, r2
 800316a:	f993 1000 	ldrsb.w	r1, [r3]
 800316e:	f107 0208 	add.w	r2, r7, #8
 8003172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003174:	4413      	add	r3, r2
 8003176:	460a      	mov	r2, r1
 8003178:	701a      	strb	r2, [r3, #0]
  for (b_k = 0; b_k < 8; b_k++) {
 800317a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800317c:	3301      	adds	r3, #1
 800317e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003182:	2b07      	cmp	r3, #7
 8003184:	ddee      	ble.n	8003164 <robocar_c_step+0xc>

  /* MATLABSystem: '<Root>/Pure Pursuit' incorporates:
   *  Inport: '<Root>/Input1'
   *  Inport: '<Root>/Input2'
   */
  if (rtDW.obj.MaxAngularVelocity != 1.0) {
 8003186:	4ba4      	ldr	r3, [pc, #656]	@ (8003418 <robocar_c_step+0x2c0>)
 8003188:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 800318c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003190:	eeb4 7b46 	vcmp.f64	d7, d6
 8003194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003198:	d005      	beq.n	80031a6 <robocar_c_step+0x4e>
    rtDW.obj.MaxAngularVelocity = 1.0;
 800319a:	499f      	ldr	r1, [pc, #636]	@ (8003418 <robocar_c_step+0x2c0>)
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	4b9e      	ldr	r3, [pc, #632]	@ (800341c <robocar_c_step+0x2c4>)
 80031a2:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
  }

  if ((rtDW.obj.DesiredLinearVelocity == rtU.Input1) || (rtIsNaN
 80031a6:	4b9c      	ldr	r3, [pc, #624]	@ (8003418 <robocar_c_step+0x2c0>)
 80031a8:	ed93 6b26 	vldr	d6, [r3, #152]	@ 0x98
 80031ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003420 <robocar_c_step+0x2c8>)
 80031ae:	ed93 7b06 	vldr	d7, [r3, #24]
 80031b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d019      	beq.n	80031f0 <robocar_c_step+0x98>
 80031bc:	4b96      	ldr	r3, [pc, #600]	@ (8003418 <robocar_c_step+0x2c0>)
 80031be:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80031c2:	eeb0 0b47 	vmov.f64	d0, d7
 80031c6:	f7ff fd53 	bl	8002c70 <rtIsNaN>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <robocar_c_step+0x8c>
       (rtDW.obj.DesiredLinearVelocity) && rtIsNaN(rtU.Input1))) {
 80031d0:	4b93      	ldr	r3, [pc, #588]	@ (8003420 <robocar_c_step+0x2c8>)
 80031d2:	ed93 7b06 	vldr	d7, [r3, #24]
 80031d6:	eeb0 0b47 	vmov.f64	d0, d7
 80031da:	f7ff fd49 	bl	8002c70 <rtIsNaN>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <robocar_c_step+0x98>
  } else {
    rtDW.obj.DesiredLinearVelocity = rtU.Input1;
 80031e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003420 <robocar_c_step+0x2c8>)
 80031e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031ea:	498b      	ldr	r1, [pc, #556]	@ (8003418 <robocar_c_step+0x2c0>)
 80031ec:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
  }

  if ((rtDW.obj.LookaheadDistance == rtU.Input2) || (rtIsNaN
 80031f0:	4b89      	ldr	r3, [pc, #548]	@ (8003418 <robocar_c_step+0x2c0>)
 80031f2:	ed93 6b24 	vldr	d6, [r3, #144]	@ 0x90
 80031f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003420 <robocar_c_step+0x2c8>)
 80031f8:	ed93 7b08 	vldr	d7, [r3, #32]
 80031fc:	eeb4 6b47 	vcmp.f64	d6, d7
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	d019      	beq.n	800323a <robocar_c_step+0xe2>
 8003206:	4b84      	ldr	r3, [pc, #528]	@ (8003418 <robocar_c_step+0x2c0>)
 8003208:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 800320c:	eeb0 0b47 	vmov.f64	d0, d7
 8003210:	f7ff fd2e 	bl	8002c70 <rtIsNaN>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <robocar_c_step+0xd6>
       (rtDW.obj.LookaheadDistance) && rtIsNaN(rtU.Input2))) {
 800321a:	4b81      	ldr	r3, [pc, #516]	@ (8003420 <robocar_c_step+0x2c8>)
 800321c:	ed93 7b08 	vldr	d7, [r3, #32]
 8003220:	eeb0 0b47 	vmov.f64	d0, d7
 8003224:	f7ff fd24 	bl	8002c70 <rtIsNaN>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <robocar_c_step+0xe2>
  } else {
    rtDW.obj.LookaheadDistance = rtU.Input2;
 800322e:	4b7c      	ldr	r3, [pc, #496]	@ (8003420 <robocar_c_step+0x2c8>)
 8003230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003234:	4978      	ldr	r1, [pc, #480]	@ (8003418 <robocar_c_step+0x2c0>)
 8003236:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
  }

  searchFlag = false;
 800323a:	2300      	movs	r3, #0
 800323c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  p = true;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  b_k = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	65fb      	str	r3, [r7, #92]	@ 0x5c
  exitg1 = false;
 800324a:	2300      	movs	r3, #0
 800324c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  while ((!exitg1) && (b_k < 8)) {
 8003250:	e01f      	b.n	8003292 <robocar_c_step+0x13a>
    if (rtDW.obj.WaypointsInternal[b_k] == rtb_path[b_k]) {
 8003252:	4a71      	ldr	r2, [pc, #452]	@ (8003418 <robocar_c_step+0x2c0>)
 8003254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003256:	331c      	adds	r3, #28
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	ed93 6b00 	vldr	d6, [r3]
 8003260:	f107 0208 	add.w	r2, r7, #8
 8003264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003266:	4413      	add	r3, r2
 8003268:	f993 3000 	ldrsb.w	r3, [r3]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003274:	eeb4 6b47 	vcmp.f64	d6, d7
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d103      	bne.n	8003286 <robocar_c_step+0x12e>
      b_k++;
 800327e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003280:	3301      	adds	r3, #1
 8003282:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003284:	e005      	b.n	8003292 <robocar_c_step+0x13a>
    } else {
      p = false;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      exitg1 = true;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  while ((!exitg1) && (b_k < 8)) {
 8003292:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <robocar_c_step+0x148>
 800329a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800329c:	2b07      	cmp	r3, #7
 800329e:	ddd8      	ble.n	8003252 <robocar_c_step+0xfa>
    }
  }

  if (p) {
 80032a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <robocar_c_step+0x156>
    searchFlag = true;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  }

  if (!searchFlag) {
 80032ae:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d120      	bne.n	80032f8 <robocar_c_step+0x1a0>
    for (b_k = 0; b_k < 8; b_k++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ba:	e013      	b.n	80032e4 <robocar_c_step+0x18c>
      rtDW.obj.WaypointsInternal[b_k] = rtb_path[b_k];
 80032bc:	f107 0208 	add.w	r2, r7, #8
 80032c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032c2:	4413      	add	r3, r2
 80032c4:	f993 3000 	ldrsb.w	r3, [r3]
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80032d0:	4a51      	ldr	r2, [pc, #324]	@ (8003418 <robocar_c_step+0x2c0>)
 80032d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032d4:	331c      	adds	r3, #28
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	ed83 7b00 	vstr	d7, [r3]
    for (b_k = 0; b_k < 8; b_k++) {
 80032de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e0:	3301      	adds	r3, #1
 80032e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	dde8      	ble.n	80032bc <robocar_c_step+0x164>
    }

    rtDW.obj.ProjectionLineIndex = 0.0;
 80032ea:	494b      	ldr	r1, [pc, #300]	@ (8003418 <robocar_c_step+0x2c0>)
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
  }

  trueCount = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (b_k = 0; b_k < 4; b_k++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003300:	e005      	b.n	800330e <robocar_c_step+0x1b6>
    trueCount++;
 8003302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003304:	3301      	adds	r3, #1
 8003306:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (b_k = 0; b_k < 4; b_k++) {
 8003308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800330a:	3301      	adds	r3, #1
 800330c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800330e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003310:	2b03      	cmp	r3, #3
 8003312:	ddf6      	ble.n	8003302 <robocar_c_step+0x1aa>
  }

  tmp_size_idx_0 = trueCount;
 8003314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003316:	653b      	str	r3, [r7, #80]	@ 0x50
  trueCount = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (b_k = 0; b_k < 4; b_k++) {
 800331c:	2300      	movs	r3, #0
 800331e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003320:	e00c      	b.n	800333c <robocar_c_step+0x1e4>
    /* MATLABSystem: '<Root>/Pure Pursuit' */
    tmp_data[trueCount] = (int8_T)b_k;
 8003322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003324:	b259      	sxtb	r1, r3
 8003326:	1d3a      	adds	r2, r7, #4
 8003328:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800332a:	4413      	add	r3, r2
 800332c:	460a      	mov	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
    trueCount++;
 8003330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003332:	3301      	adds	r3, #1
 8003334:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (b_k = 0; b_k < 4; b_k++) {
 8003336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003338:	3301      	adds	r3, #1
 800333a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800333c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333e:	2b03      	cmp	r3, #3
 8003340:	ddef      	ble.n	8003322 <robocar_c_step+0x1ca>
  }

  /* MATLABSystem: '<Root>/Pure Pursuit' incorporates:
   *  Inport: '<Root>/Input'
   * */
  if (tmp_size_idx_0 == 0) {
 8003342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10e      	bne.n	8003366 <robocar_c_step+0x20e>
    /* Outport: '<Root>/Out1' */
    rtY.Out1 = 0.0;
 8003348:	4936      	ldr	r1, [pc, #216]	@ (8003424 <robocar_c_step+0x2cc>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	e9c1 2300 	strd	r2, r3, [r1]
    minDistance = 0.0;
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003362:	f000 bcdf 	b.w	8003d24 <robocar_c_step+0xbcc>
  } else {
    searchFlag = false;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    if (rtDW.obj.ProjectionLineIndex == 0.0) {
 800336c:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <robocar_c_step+0x2c0>)
 800336e:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 8003372:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	d123      	bne.n	80033c4 <robocar_c_step+0x26c>
      searchFlag = true;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
      rtDW.obj.ProjectionPoint[0] = rtb_path[tmp_data[0]];
 8003382:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003386:	3388      	adds	r3, #136	@ 0x88
 8003388:	443b      	add	r3, r7
 800338a:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003396:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <robocar_c_step+0x2c0>)
 8003398:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
      rtDW.obj.ProjectionPoint[1] = rtb_path[tmp_data[0] + 4];
 800339c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	3388      	adds	r3, #136	@ 0x88
 80033a4:	443b      	add	r3, r7
 80033a6:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033b2:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <robocar_c_step+0x2c0>)
 80033b4:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
      rtDW.obj.ProjectionLineIndex = 1.0;
 80033b8:	4917      	ldr	r1, [pc, #92]	@ (8003418 <robocar_c_step+0x2c0>)
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	4b17      	ldr	r3, [pc, #92]	@ (800341c <robocar_c_step+0x2c4>)
 80033c0:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    }

    if (tmp_size_idx_0 == 1) {
 80033c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d12e      	bne.n	8003428 <robocar_c_step+0x2d0>
      lookaheadEndPt_idx_0 = rtb_path[tmp_data[0]];
 80033ca:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80033ce:	3388      	adds	r3, #136	@ 0x88
 80033d0:	443b      	add	r3, r7
 80033d2:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033de:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
      rtDW.obj.ProjectionPoint[0] = lookaheadEndPt_idx_0;
 80033e2:	490d      	ldr	r1, [pc, #52]	@ (8003418 <robocar_c_step+0x2c0>)
 80033e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80033e8:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
      lookaheadEndPt_idx_1 = rtb_path[tmp_data[0] + 4];
 80033ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	3388      	adds	r3, #136	@ 0x88
 80033f4:	443b      	add	r3, r7
 80033f6:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003402:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
      rtDW.obj.ProjectionPoint[1] = lookaheadEndPt_idx_1;
 8003406:	4904      	ldr	r1, [pc, #16]	@ (8003418 <robocar_c_step+0x2c0>)
 8003408:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800340c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
 8003410:	e2d8      	b.n	80039c4 <robocar_c_step+0x86c>
 8003412:	bf00      	nop
 8003414:	080140a0 	.word	0x080140a0
 8003418:	24000b98 	.word	0x24000b98
 800341c:	3ff00000 	.word	0x3ff00000
 8003420:	24000cb8 	.word	0x24000cb8
 8003424:	24000ce0 	.word	0x24000ce0
    } else {
      b_k = tmp_data[(int32_T)(rtDW.obj.ProjectionLineIndex + 1.0) - 1];
 8003428:	4b63      	ldr	r3, [pc, #396]	@ (80035b8 <robocar_c_step+0x460>)
 800342a:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 800342e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003432:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003436:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800343a:	ee17 3a90 	vmov	r3, s15
 800343e:	3b01      	subs	r3, #1
 8003440:	3388      	adds	r3, #136	@ 0x88
 8003442:	443b      	add	r3, r7
 8003444:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
 8003448:	65fb      	str	r3, [r7, #92]	@ 0x5c
      lookaheadStartPt[0] = rtb_path[b_k];
 800344a:	f107 0208 	add.w	r2, r7, #8
 800344e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003450:	4413      	add	r3, r2
 8003452:	f993 3000 	ldrsb.w	r3, [r3]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800345e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
      lookaheadStartPt[1] = rtb_path[b_k + 4];
 8003462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003464:	3304      	adds	r3, #4
 8003466:	3388      	adds	r3, #136	@ 0x88
 8003468:	443b      	add	r3, r7
 800346a:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003476:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
      minDistance = closestPointOnLine(rtDW.obj.ProjectionPoint,
 800347a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800347e:	4a4f      	ldr	r2, [pc, #316]	@ (80035bc <robocar_c_step+0x464>)
 8003480:	4619      	mov	r1, r3
 8003482:	484f      	ldr	r0, [pc, #316]	@ (80035c0 <robocar_c_step+0x468>)
 8003484:	f7ff fc96 	bl	8002db4 <closestPointOnLine>
 8003488:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
        lookaheadStartPt, &rtU.Input[0]);
      rtDW.obj.ProjectionPoint[0] = lookaheadStartPt[0];
 800348c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003490:	4949      	ldr	r1, [pc, #292]	@ (80035b8 <robocar_c_step+0x460>)
 8003492:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
      rtb_path_0[0] = lookaheadStartPt[0] - (real_T)rtb_path[tmp_data[(int32_T)
 8003496:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
        (rtDW.obj.ProjectionLineIndex + 1.0) - 1]];
 800349a:	4b47      	ldr	r3, [pc, #284]	@ (80035b8 <robocar_c_step+0x460>)
 800349c:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 80034a0:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80034a4:	ee37 7b05 	vadd.f64	d7, d7, d5
      rtb_path_0[0] = lookaheadStartPt[0] - (real_T)rtb_path[tmp_data[(int32_T)
 80034a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80034ac:	ee17 3a90 	vmov	r3, s15
        (rtDW.obj.ProjectionLineIndex + 1.0) - 1]];
 80034b0:	3b01      	subs	r3, #1
      rtb_path_0[0] = lookaheadStartPt[0] - (real_T)rtb_path[tmp_data[(int32_T)
 80034b2:	3388      	adds	r3, #136	@ 0x88
 80034b4:	443b      	add	r3, r7
 80034b6:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
 80034ba:	3388      	adds	r3, #136	@ 0x88
 80034bc:	443b      	add	r3, r7
 80034be:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80034ce:	ed87 7b08 	vstr	d7, [r7, #32]
      rtDW.obj.ProjectionPoint[1] = lookaheadStartPt[1];
 80034d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034d6:	4938      	ldr	r1, [pc, #224]	@ (80035b8 <robocar_c_step+0x460>)
 80034d8:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
      rtb_path_0[1] = lookaheadStartPt[1] - (real_T)rtb_path[tmp_data[(int32_T)
 80034dc:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
        (rtDW.obj.ProjectionLineIndex + 1.0) - 1] + 4];
 80034e0:	4b35      	ldr	r3, [pc, #212]	@ (80035b8 <robocar_c_step+0x460>)
 80034e2:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 80034e6:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80034ea:	ee37 7b05 	vadd.f64	d7, d7, d5
      rtb_path_0[1] = lookaheadStartPt[1] - (real_T)rtb_path[tmp_data[(int32_T)
 80034ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80034f2:	ee17 3a90 	vmov	r3, s15
        (rtDW.obj.ProjectionLineIndex + 1.0) - 1] + 4];
 80034f6:	3b01      	subs	r3, #1
      rtb_path_0[1] = lookaheadStartPt[1] - (real_T)rtb_path[tmp_data[(int32_T)
 80034f8:	3388      	adds	r3, #136	@ 0x88
 80034fa:	443b      	add	r3, r7
 80034fc:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
        (rtDW.obj.ProjectionLineIndex + 1.0) - 1] + 4];
 8003500:	3304      	adds	r3, #4
      rtb_path_0[1] = lookaheadStartPt[1] - (real_T)rtb_path[tmp_data[(int32_T)
 8003502:	3388      	adds	r3, #136	@ 0x88
 8003504:	443b      	add	r3, r7
 8003506:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003512:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003516:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      dist = norm(rtb_path_0);
 800351a:	f107 0320 	add.w	r3, r7, #32
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fbbe 	bl	8002ca0 <norm>
 8003524:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
      lookaheadIdx = rtDW.obj.ProjectionLineIndex + 1.0;
 8003528:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <robocar_c_step+0x460>)
 800352a:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 800352e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003532:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003536:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
      b_k = (int32_T)((1.0 - (rtDW.obj.ProjectionLineIndex + 1.0)) + ((real_T)
 800353a:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <robocar_c_step+0x460>)
 800353c:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 8003540:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003544:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003548:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800354c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        tmp_size_idx_0 - 1.0)) - 1;
 800355a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800355e:	ee37 7b45 	vsub.f64	d7, d7, d5
      b_k = (int32_T)((1.0 - (rtDW.obj.ProjectionLineIndex + 1.0)) + ((real_T)
 8003562:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003566:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800356a:	ee17 3a90 	vmov	r3, s15
 800356e:	3b01      	subs	r3, #1
 8003570:	65fb      	str	r3, [r7, #92]	@ 0x5c
      trueCount = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	65bb      	str	r3, [r7, #88]	@ 0x58
      exitg1 = false;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
      while ((!exitg1) && (trueCount <= b_k)) {
 800357c:	e0c8      	b.n	8003710 <robocar_c_step+0x5b8>
        lookaheadEndPt_idx_0 = lookaheadIdx + (real_T)trueCount;
 800357e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003588:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 800358c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003590:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
        if ((!searchFlag) && (dist > rtDW.obj.LookaheadDistance)) {
 8003594:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8003598:	2b00      	cmp	r3, #0
 800359a:	d113      	bne.n	80035c4 <robocar_c_step+0x46c>
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <robocar_c_step+0x460>)
 800359e:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 80035a2:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80035a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	dd09      	ble.n	80035c4 <robocar_c_step+0x46c>
          exitg1 = true;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80035b6:	e0ab      	b.n	8003710 <robocar_c_step+0x5b8>
 80035b8:	24000b98 	.word	0x24000b98
 80035bc:	24000cb8 	.word	0x24000cb8
 80035c0:	24000c38 	.word	0x24000c38
        } else {
          rtb_path_tmp_tmp_0 = tmp_data[(int32_T)(lookaheadEndPt_idx_0 + 1.0) -
 80035c4:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80035c8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80035cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80035d4:	ee17 3a90 	vmov	r3, s15
 80035d8:	3b01      	subs	r3, #1
 80035da:	3388      	adds	r3, #136	@ 0x88
 80035dc:	443b      	add	r3, r7
 80035de:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
            1];
          rtb_path_tmp = rtb_path[rtb_path_tmp_tmp_0];
 80035e4:	f107 0208 	add.w	r2, r7, #8
 80035e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
          rtb_path_tmp_tmp = tmp_data[(int32_T)lookaheadEndPt_idx_0 - 1];
 80035f2:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80035f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80035fa:	ee17 3a90 	vmov	r3, s15
 80035fe:	3b01      	subs	r3, #1
 8003600:	3388      	adds	r3, #136	@ 0x88
 8003602:	443b      	add	r3, r7
 8003604:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
 8003608:	647b      	str	r3, [r7, #68]	@ 0x44
          rtb_path_tmp_0 = rtb_path[rtb_path_tmp_tmp];
 800360a:	f107 0208 	add.w	r2, r7, #8
 800360e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003610:	4413      	add	r3, r2
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
          rtb_path_0[0] = rtb_path_tmp_0 - rtb_path_tmp;
 8003618:	f997 2043 	ldrsb.w	r2, [r7, #67]	@ 0x43
 800361c:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800362a:	ed87 7b08 	vstr	d7, [r7, #32]
          lookaheadStartPt[0] = rtb_path_tmp;
 800362e:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800363a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
          rtb_path_1[0] = rtb_path_tmp_0;
 800363e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800364a:	ed87 7b04 	vstr	d7, [r7, #16]
          rtb_path_tmp = rtb_path[rtb_path_tmp_tmp_0 + 4];
 800364e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003650:	3304      	adds	r3, #4
 8003652:	3388      	adds	r3, #136	@ 0x88
 8003654:	443b      	add	r3, r7
 8003656:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800365a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
          rtb_path_tmp_0 = rtb_path[rtb_path_tmp_tmp + 4];
 800365e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003660:	3304      	adds	r3, #4
 8003662:	3388      	adds	r3, #136	@ 0x88
 8003664:	443b      	add	r3, r7
 8003666:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800366a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
          rtb_path_0[1] = rtb_path_tmp_0 - rtb_path_tmp;
 800366e:	f997 2043 	ldrsb.w	r2, [r7, #67]	@ 0x43
 8003672:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	ee07 3a90 	vmov	s15, r3
 800367c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003680:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
          lookaheadStartPt[1] = rtb_path_tmp;
 8003684:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003690:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
          rtb_path_1[1] = rtb_path_tmp_0;
 8003694:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036a0:	ed87 7b06 	vstr	d7, [r7, #24]
          dist += norm(rtb_path_0);
 80036a4:	f107 0320 	add.w	r3, r7, #32
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff faf9 	bl	8002ca0 <norm>
 80036ae:	eeb0 6b40 	vmov.f64	d6, d0
 80036b2:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 80036b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80036ba:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
          lookaheadEndPt_idx_1 = closestPointOnLine(rtb_path_1, lookaheadStartPt,
 80036be:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80036c2:	f107 0310 	add.w	r3, r7, #16
 80036c6:	4a44      	ldr	r2, [pc, #272]	@ (80037d8 <robocar_c_step+0x680>)
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fb73 	bl	8002db4 <closestPointOnLine>
 80036ce:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
            &rtU.Input[0]);
          if (lookaheadEndPt_idx_1 < minDistance) {
 80036d2:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80036d6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80036da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	d512      	bpl.n	800370a <robocar_c_step+0x5b2>
            minDistance = lookaheadEndPt_idx_1;
 80036e4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036e8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
            rtDW.obj.ProjectionPoint[0] = lookaheadStartPt[0];
 80036ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80036f0:	493a      	ldr	r1, [pc, #232]	@ (80037dc <robocar_c_step+0x684>)
 80036f2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
            rtDW.obj.ProjectionPoint[1] = lookaheadStartPt[1];
 80036f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036fa:	4938      	ldr	r1, [pc, #224]	@ (80037dc <robocar_c_step+0x684>)
 80036fc:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
            rtDW.obj.ProjectionLineIndex = lookaheadEndPt_idx_0;
 8003700:	4936      	ldr	r1, [pc, #216]	@ (80037dc <robocar_c_step+0x684>)
 8003702:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003706:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
          }

          trueCount++;
 800370a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800370c:	3301      	adds	r3, #1
 800370e:	65bb      	str	r3, [r7, #88]	@ 0x58
      while ((!exitg1) && (trueCount <= b_k)) {
 8003710:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <robocar_c_step+0x5ca>
 8003718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800371a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800371c:	429a      	cmp	r2, r3
 800371e:	f77f af2e 	ble.w	800357e <robocar_c_step+0x426>
        }
      }

      b_k = tmp_data[(int32_T)(rtDW.obj.ProjectionLineIndex + 1.0) - 1];
 8003722:	4b2e      	ldr	r3, [pc, #184]	@ (80037dc <robocar_c_step+0x684>)
 8003724:	ed93 7b2c 	vldr	d7, [r3, #176]	@ 0xb0
 8003728:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800372c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003730:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003734:	ee17 3a90 	vmov	r3, s15
 8003738:	3b01      	subs	r3, #1
 800373a:	3388      	adds	r3, #136	@ 0x88
 800373c:	443b      	add	r3, r7
 800373e:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
 8003742:	65fb      	str	r3, [r7, #92]	@ 0x5c
      lookaheadEndPt_idx_0 = rtb_path[b_k];
 8003744:	f107 0208 	add.w	r2, r7, #8
 8003748:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800374a:	4413      	add	r3, r2
 800374c:	f993 3000 	ldrsb.w	r3, [r3]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003758:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
      rtb_path_0[0] = rtDW.obj.ProjectionPoint[0] - lookaheadEndPt_idx_0;
 800375c:	4b1f      	ldr	r3, [pc, #124]	@ (80037dc <robocar_c_step+0x684>)
 800375e:	ed93 6b28 	vldr	d6, [r3, #160]	@ 0xa0
 8003762:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8003766:	ee36 7b47 	vsub.f64	d7, d6, d7
 800376a:	ed87 7b08 	vstr	d7, [r7, #32]
      lookaheadEndPt_idx_1 = rtb_path[b_k + 4];
 800376e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003770:	3304      	adds	r3, #4
 8003772:	3388      	adds	r3, #136	@ 0x88
 8003774:	443b      	add	r3, r7
 8003776:	f913 3c80 	ldrsb.w	r3, [r3, #-128]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003782:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
      rtb_path_0[1] = rtDW.obj.ProjectionPoint[1] - lookaheadEndPt_idx_1;
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <robocar_c_step+0x684>)
 8003788:	ed93 6b2a 	vldr	d6, [r3, #168]	@ 0xa8
 800378c:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8003790:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003794:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      dist = norm(rtb_path_0);
 8003798:	f107 0320 	add.w	r3, r7, #32
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fa7f 	bl	8002ca0 <norm>
 80037a2:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
      lookaheadStartPt[0] = rtDW.obj.ProjectionPoint[0];
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <robocar_c_step+0x684>)
 80037a8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80037ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      lookaheadStartPt[1] = rtDW.obj.ProjectionPoint[1];
 80037b0:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <robocar_c_step+0x684>)
 80037b2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80037b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
      minDistance = dist - rtDW.obj.LookaheadDistance;
 80037ba:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <robocar_c_step+0x684>)
 80037bc:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 80037c0:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80037c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037c8:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
      lookaheadIdx = rtDW.obj.ProjectionLineIndex;
 80037cc:	4b03      	ldr	r3, [pc, #12]	@ (80037dc <robocar_c_step+0x684>)
 80037ce:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 80037d2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
      while ((minDistance < 0.0) && (lookaheadIdx < (real_T)tmp_size_idx_0 - 1.0))
 80037d6:	e091      	b.n	80038fc <robocar_c_step+0x7a4>
 80037d8:	24000cb8 	.word	0x24000cb8
 80037dc:	24000b98 	.word	0x24000b98
      {
        lookaheadIdx++;
 80037e0:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80037e4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037ec:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
        b_k = tmp_data[(int32_T)lookaheadIdx - 1];
 80037f0:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80037f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80037f8:	ee17 3a90 	vmov	r3, s15
 80037fc:	3b01      	subs	r3, #1
 80037fe:	3388      	adds	r3, #136	@ 0x88
 8003800:	443b      	add	r3, r7
 8003802:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
 8003806:	65fb      	str	r3, [r7, #92]	@ 0x5c
        rtb_path_tmp = rtb_path[b_k];
 8003808:	f107 0208 	add.w	r2, r7, #8
 800380c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800380e:	4413      	add	r3, r2
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        lookaheadStartPt[0] = rtb_path_tmp;
 8003816:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003822:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
        trueCount = tmp_data[(int32_T)(lookaheadIdx + 1.0) - 1];
 8003826:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800382a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800382e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003832:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003836:	ee17 3a90 	vmov	r3, s15
 800383a:	3b01      	subs	r3, #1
 800383c:	3388      	adds	r3, #136	@ 0x88
 800383e:	443b      	add	r3, r7
 8003840:	f913 3c84 	ldrsb.w	r3, [r3, #-132]
 8003844:	65bb      	str	r3, [r7, #88]	@ 0x58
        rtb_path_tmp_0 = rtb_path[trueCount];
 8003846:	f107 0208 	add.w	r2, r7, #8
 800384a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        lookaheadEndPt_idx_0 = rtb_path_tmp_0;
 8003854:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003860:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
        rtb_path_0[0] = rtb_path_tmp - rtb_path_tmp_0;
 8003864:	f997 204b 	ldrsb.w	r2, [r7, #75]	@ 0x4b
 8003868:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003876:	ed87 7b08 	vstr	d7, [r7, #32]
        rtb_path_tmp = rtb_path[b_k + 4];
 800387a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800387c:	3304      	adds	r3, #4
 800387e:	3388      	adds	r3, #136	@ 0x88
 8003880:	443b      	add	r3, r7
 8003882:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8003886:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        lookaheadStartPt[1] = rtb_path_tmp;
 800388a:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003896:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
        rtb_path_tmp_0 = rtb_path[trueCount + 4];
 800389a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800389c:	3304      	adds	r3, #4
 800389e:	3388      	adds	r3, #136	@ 0x88
 80038a0:	443b      	add	r3, r7
 80038a2:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80038a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        lookaheadEndPt_idx_1 = rtb_path_tmp_0;
 80038aa:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038b6:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
        rtb_path_0[1] = rtb_path_tmp - rtb_path_tmp_0;
 80038ba:	f997 204b 	ldrsb.w	r2, [r7, #75]	@ 0x4b
 80038be:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038cc:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
        dist += norm(rtb_path_0);
 80038d0:	f107 0320 	add.w	r3, r7, #32
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff f9e3 	bl	8002ca0 <norm>
 80038da:	eeb0 6b40 	vmov.f64	d6, d0
 80038de:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 80038e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038e6:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
        minDistance = dist - rtDW.obj.LookaheadDistance;
 80038ea:	4bd5      	ldr	r3, [pc, #852]	@ (8003c40 <robocar_c_step+0xae8>)
 80038ec:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 80038f0:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80038f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80038f8:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
      while ((minDistance < 0.0) && (lookaheadIdx < (real_T)tmp_size_idx_0 - 1.0))
 80038fc:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003900:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003908:	d510      	bpl.n	800392c <robocar_c_step+0x7d4>
 800390a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003914:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003918:	ee37 7b46 	vsub.f64	d7, d7, d6
 800391c:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8003920:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003928:	f53f af5a 	bmi.w	80037e0 <robocar_c_step+0x688>
      }

      rtb_path_0[0] = lookaheadStartPt[0] - lookaheadEndPt_idx_0;
 800392c:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8003930:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8003934:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003938:	ed87 7b08 	vstr	d7, [r7, #32]
      rtb_path_0[1] = lookaheadStartPt[1] - lookaheadEndPt_idx_1;
 800393c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8003940:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8003944:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003948:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      dist = minDistance / norm(rtb_path_0);
 800394c:	f107 0320 	add.w	r3, r7, #32
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f9a5 	bl	8002ca0 <norm>
 8003956:	eeb0 5b40 	vmov.f64	d5, d0
 800395a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800395e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003962:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
      if (dist > 0.0) {
 8003966:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800396a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	dd27      	ble.n	80039c4 <robocar_c_step+0x86c>
        lookaheadEndPt_idx_0 = (1.0 - dist) * lookaheadEndPt_idx_0 + dist *
 8003974:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003978:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800397c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003980:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8003984:	ee26 6b07 	vmul.f64	d6, d6, d7
          lookaheadStartPt[0];
 8003988:	ed97 5b0c 	vldr	d5, [r7, #48]	@ 0x30
        lookaheadEndPt_idx_0 = (1.0 - dist) * lookaheadEndPt_idx_0 + dist *
 800398c:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003990:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003994:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003998:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78
        lookaheadEndPt_idx_1 = (1.0 - dist) * lookaheadEndPt_idx_1 + dist *
 800399c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039a0:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 80039a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80039a8:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 80039ac:	ee26 6b07 	vmul.f64	d6, d6, d7
          lookaheadStartPt[1];
 80039b0:	ed97 5b0e 	vldr	d5, [r7, #56]	@ 0x38
        lookaheadEndPt_idx_1 = (1.0 - dist) * lookaheadEndPt_idx_1 + dist *
 80039b4:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 80039b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039c0:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70
      }
    }

    rtDW.obj.LookaheadPoint[0] = lookaheadEndPt_idx_0;
 80039c4:	499e      	ldr	r1, [pc, #632]	@ (8003c40 <robocar_c_step+0xae8>)
 80039c6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80039ca:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
    rtDW.obj.LookaheadPoint[1] = lookaheadEndPt_idx_1;
 80039ce:	499c      	ldr	r1, [pc, #624]	@ (8003c40 <robocar_c_step+0xae8>)
 80039d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80039d4:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    dist = rt_atan2d_snf(rtDW.obj.LookaheadPoint[1] - rtU.Input[1],
 80039d8:	4b99      	ldr	r3, [pc, #612]	@ (8003c40 <robocar_c_step+0xae8>)
 80039da:	ed93 6b30 	vldr	d6, [r3, #192]	@ 0xc0
 80039de:	4b99      	ldr	r3, [pc, #612]	@ (8003c44 <robocar_c_step+0xaec>)
 80039e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80039e4:	ee36 5b47 	vsub.f64	d5, d6, d7
                         rtDW.obj.LookaheadPoint[0] - rtU.Input[0]) - rtU.Input
 80039e8:	4b95      	ldr	r3, [pc, #596]	@ (8003c40 <robocar_c_step+0xae8>)
 80039ea:	ed93 6b2e 	vldr	d6, [r3, #184]	@ 0xb8
 80039ee:	4b95      	ldr	r3, [pc, #596]	@ (8003c44 <robocar_c_step+0xaec>)
 80039f0:	ed93 7b00 	vldr	d7, [r3]
    dist = rt_atan2d_snf(rtDW.obj.LookaheadPoint[1] - rtU.Input[1],
 80039f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039f8:	eeb0 1b47 	vmov.f64	d1, d7
 80039fc:	eeb0 0b45 	vmov.f64	d0, d5
 8003a00:	f7ff fb0e 	bl	8003020 <rt_atan2d_snf>
 8003a04:	eeb0 6b40 	vmov.f64	d6, d0
      [2];
 8003a08:	4b8e      	ldr	r3, [pc, #568]	@ (8003c44 <robocar_c_step+0xaec>)
 8003a0a:	ed93 7b04 	vldr	d7, [r3, #16]
    dist = rt_atan2d_snf(rtDW.obj.LookaheadPoint[1] - rtU.Input[1],
 8003a0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a12:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    if (fabs(dist) > 3.1415926535897931) {
 8003a16:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003a1a:	eeb0 7bc7 	vabs.f64	d7, d7
 8003a1e:	ed9f 6b80 	vldr	d6, [pc, #512]	@ 8003c20 <robocar_c_step+0xac8>
 8003a22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	f340 80bc 	ble.w	8003ba6 <robocar_c_step+0xa4e>
      if (rtIsNaN(dist + 3.1415926535897931) || rtIsInf(dist +
 8003a2e:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003a32:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 8003c20 <robocar_c_step+0xac8>
 8003a36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a3a:	eeb0 0b47 	vmov.f64	d0, d7
 8003a3e:	f7ff f917 	bl	8002c70 <rtIsNaN>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10c      	bne.n	8003a62 <robocar_c_step+0x90a>
 8003a48:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003a4c:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8003c20 <robocar_c_step+0xac8>
 8003a50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a54:	eeb0 0b47 	vmov.f64	d0, d7
 8003a58:	f7ff f8e6 	bl	8002c28 <rtIsInf>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <robocar_c_step+0x916>
           3.1415926535897931)) {
        minDistance = (rtNaN);
 8003a62:	4b79      	ldr	r3, [pc, #484]	@ (8003c48 <robocar_c_step+0xaf0>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003a6c:	e07c      	b.n	8003b68 <robocar_c_step+0xa10>
      } else if (dist + 3.1415926535897931 == 0.0) {
 8003a6e:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003a72:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8003c20 <robocar_c_step+0xac8>
 8003a76:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a82:	d106      	bne.n	8003a92 <robocar_c_step+0x93a>
        minDistance = 0.0;
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003a90:	e06a      	b.n	8003b68 <robocar_c_step+0xa10>
      } else {
        minDistance = fmod(dist + 3.1415926535897931, 6.2831853071795862);
 8003a92:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003a96:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8003c20 <robocar_c_step+0xac8>
 8003a9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a9e:	ed9f 1b62 	vldr	d1, [pc, #392]	@ 8003c28 <robocar_c_step+0xad0>
 8003aa2:	eeb0 0b47 	vmov.f64	d0, d7
 8003aa6:	f00f f8df 	bl	8012c68 <fmod>
 8003aaa:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
        searchFlag = (minDistance == 0.0);
 8003aae:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003ab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (!searchFlag) {
 8003ac6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d132      	bne.n	8003b34 <robocar_c_step+0x9dc>
          lookaheadIdx = fabs((dist + 3.1415926535897931) / 6.2831853071795862);
 8003ace:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003ad2:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8003c20 <robocar_c_step+0xac8>
 8003ad6:	ee37 6b06 	vadd.f64	d6, d7, d6
 8003ada:	ed9f 5b53 	vldr	d5, [pc, #332]	@ 8003c28 <robocar_c_step+0xad0>
 8003ade:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ae2:	eeb0 7bc7 	vabs.f64	d7, d7
 8003ae6:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
          searchFlag = !(fabs(lookaheadIdx - floor(lookaheadIdx + 0.5)) >
 8003aea:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8003aee:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8003af2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003af6:	eeb0 0b47 	vmov.f64	d0, d7
 8003afa:	f00f f995 	bl	8012e28 <floor>
 8003afe:	eeb0 6b40 	vmov.f64	d6, d0
 8003b02:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8003b06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b0a:	eeb0 6bc7 	vabs.f64	d6, d7
                         2.2204460492503131E-16 * lookaheadIdx);
 8003b0e:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8003b12:	ed9f 5b47 	vldr	d5, [pc, #284]	@ 8003c30 <robocar_c_step+0xad8>
 8003b16:	ee27 7b05 	vmul.f64	d7, d7, d5
          searchFlag = !(fabs(lookaheadIdx - floor(lookaheadIdx + 0.5)) >
 8003b1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	bfcc      	ite	gt
 8003b24:	2301      	movgt	r3, #1
 8003b26:	2300      	movle	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        }

        if (searchFlag) {
 8003b34:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d006      	beq.n	8003b4a <robocar_c_step+0x9f2>
          minDistance = 0.0;
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003b48:	e00e      	b.n	8003b68 <robocar_c_step+0xa10>
        } else if (minDistance < 0.0) {
 8003b4a:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003b4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	d507      	bpl.n	8003b68 <robocar_c_step+0xa10>
          minDistance += 6.2831853071795862;
 8003b58:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003b5c:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8003c28 <robocar_c_step+0xad0>
 8003b60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b64:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
        }
      }

      if ((minDistance == 0.0) && (dist + 3.1415926535897931 > 0.0)) {
 8003b68:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003b6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	d10f      	bne.n	8003b96 <robocar_c_step+0xa3e>
 8003b76:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003b7a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8003c20 <robocar_c_step+0xac8>
 8003b7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b82:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8a:	dd04      	ble.n	8003b96 <robocar_c_step+0xa3e>
        minDistance = 6.2831853071795862;
 8003b8c:	a326      	add	r3, pc, #152	@ (adr r3, 8003c28 <robocar_c_step+0xad0>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
      }

      dist = minDistance - 3.1415926535897931;
 8003b96:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003b9a:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8003c20 <robocar_c_step+0xac8>
 8003b9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ba2:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    }

    minDistance = 2.0 * sin(dist) / rtDW.obj.LookaheadDistance;
 8003ba6:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8003baa:	f00f f8ed 	bl	8012d88 <sin>
 8003bae:	eeb0 7b40 	vmov.f64	d7, d0
 8003bb2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003bb6:	4b22      	ldr	r3, [pc, #136]	@ (8003c40 <robocar_c_step+0xae8>)
 8003bb8:	ed93 6b24 	vldr	d6, [r3, #144]	@ 0x90
 8003bbc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003bc0:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    if (rtIsNaN(minDistance)) {
 8003bc4:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003bc8:	f7ff f852 	bl	8002c70 <rtIsNaN>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <robocar_c_step+0xa86>
      minDistance = 0.0;
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    }

    if (fabs(fabs(dist) - 3.1415926535897931) < 1.4901161193847656E-8) {
 8003bde:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8003be2:	eeb0 7bc7 	vabs.f64	d7, d7
 8003be6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8003c20 <robocar_c_step+0xac8>
 8003bea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bee:	eeb0 7bc7 	vabs.f64	d7, d7
 8003bf2:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8003c38 <robocar_c_step+0xae0>
 8003bf6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfe:	d543      	bpl.n	8003c88 <robocar_c_step+0xb30>
      if (rtIsNaN(minDistance)) {
 8003c00:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003c04:	f7ff f834 	bl	8002c70 <rtIsNaN>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01e      	beq.n	8003c4c <robocar_c_step+0xaf4>
        minDistance = (rtNaN);
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <robocar_c_step+0xaf0>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003c18:	e036      	b.n	8003c88 <robocar_c_step+0xb30>
 8003c1a:	bf00      	nop
 8003c1c:	f3af 8000 	nop.w
 8003c20:	54442d18 	.word	0x54442d18
 8003c24:	400921fb 	.word	0x400921fb
 8003c28:	54442d18 	.word	0x54442d18
 8003c2c:	401921fb 	.word	0x401921fb
 8003c30:	00000000 	.word	0x00000000
 8003c34:	3cb00000 	.word	0x3cb00000
 8003c38:	00000000 	.word	0x00000000
 8003c3c:	3e500000 	.word	0x3e500000
 8003c40:	24000b98 	.word	0x24000b98
 8003c44:	24000cb8 	.word	0x24000cb8
 8003c48:	24000008 	.word	0x24000008
      } else if (minDistance < 0.0) {
 8003c4c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003c50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c58:	d505      	bpl.n	8003c66 <robocar_c_step+0xb0e>
        minDistance = -1.0;
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <robocar_c_step+0xbe0>)
 8003c60:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003c64:	e010      	b.n	8003c88 <robocar_c_step+0xb30>
      } else {
        minDistance = (minDistance > 0.0);
 8003c66:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003c6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c72:	dd03      	ble.n	8003c7c <robocar_c_step+0xb24>
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	4b30      	ldr	r3, [pc, #192]	@ (8003d3c <robocar_c_step+0xbe4>)
 8003c7a:	e003      	b.n	8003c84 <robocar_c_step+0xb2c>
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
      }
    }

    if (fabs(minDistance) > 1.0) {
 8003c88:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003c8c:	eeb0 7bc7 	vabs.f64	d7, d7
 8003c90:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003c94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9c:	dd2a      	ble.n	8003cf4 <robocar_c_step+0xb9c>
      if (rtIsNaN(minDistance)) {
 8003c9e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003ca2:	f7fe ffe5 	bl	8002c70 <rtIsNaN>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <robocar_c_step+0xb60>
        minDistance = (rtNaN);
 8003cac:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <robocar_c_step+0xbe8>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003cb6:	e01d      	b.n	8003cf4 <robocar_c_step+0xb9c>
      } else if (minDistance < 0.0) {
 8003cb8:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003cbc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc4:	d505      	bpl.n	8003cd2 <robocar_c_step+0xb7a>
        minDistance = -1.0;
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <robocar_c_step+0xbe0>)
 8003ccc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8003cd0:	e010      	b.n	8003cf4 <robocar_c_step+0xb9c>
      } else {
        minDistance = (minDistance > 0.0);
 8003cd2:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8003cd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cde:	dd03      	ble.n	8003ce8 <robocar_c_step+0xb90>
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <robocar_c_step+0xbe4>)
 8003ce6:	e003      	b.n	8003cf0 <robocar_c_step+0xb98>
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    }

    /* Outport: '<Root>/Out1' incorporates:
     *  Inport: '<Root>/Input'
     * */
    rtY.Out1 = rtDW.obj.DesiredLinearVelocity;
 8003cf4:	4b13      	ldr	r3, [pc, #76]	@ (8003d44 <robocar_c_step+0xbec>)
 8003cf6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8003cfa:	4913      	ldr	r1, [pc, #76]	@ (8003d48 <robocar_c_step+0xbf0>)
 8003cfc:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.obj.LastPose[0] = rtU.Input[0];
 8003d00:	4b12      	ldr	r3, [pc, #72]	@ (8003d4c <robocar_c_step+0xbf4>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	490f      	ldr	r1, [pc, #60]	@ (8003d44 <robocar_c_step+0xbec>)
 8003d08:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
    rtDW.obj.LastPose[1] = rtU.Input[1];
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <robocar_c_step+0xbf4>)
 8003d0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d12:	490c      	ldr	r1, [pc, #48]	@ (8003d44 <robocar_c_step+0xbec>)
 8003d14:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    rtDW.obj.LastPose[2] = rtU.Input[2];
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <robocar_c_step+0xbf4>)
 8003d1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d1e:	4909      	ldr	r1, [pc, #36]	@ (8003d44 <robocar_c_step+0xbec>)
 8003d20:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
  }

  /* Outport: '<Root>/Out2' incorporates:
   *  MATLABSystem: '<Root>/Pure Pursuit'
   */
  rtY.Out2 = minDistance;
 8003d24:	4908      	ldr	r1, [pc, #32]	@ (8003d48 <robocar_c_step+0xbf0>)
 8003d26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003d2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8003d2e:	bf00      	nop
 8003d30:	3788      	adds	r7, #136	@ 0x88
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	bff00000 	.word	0xbff00000
 8003d3c:	3ff00000 	.word	0x3ff00000
 8003d40:	24000008 	.word	0x24000008
 8003d44:	24000b98 	.word	0x24000b98
 8003d48:	24000ce0 	.word	0x24000ce0
 8003d4c:	24000cb8 	.word	0x24000cb8

08003d50 <robocar_c_initialize>:

/* Model initialize function */
void robocar_c_initialize(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
  {
    int32_T i;

    /* Start for MATLABSystem: '<Root>/Pure Pursuit' */
    rtDW.obj.MaxAngularVelocity = 1.0;
 8003d56:	4933      	ldr	r1, [pc, #204]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	4b32      	ldr	r3, [pc, #200]	@ (8003e28 <robocar_c_initialize+0xd8>)
 8003d5e:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    rtDW.obj.isInitialized = 1;
 8003d62:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    rtDW.obj.DesiredLinearVelocity = 0.0;
 8003d68:	492e      	ldr	r1, [pc, #184]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    rtDW.obj.LookaheadDistance = 0.0;
 8003d76:	492b      	ldr	r1, [pc, #172]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    for (i = 0; i < 8; i++) {
 8003d84:	2300      	movs	r3, #0
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	e00c      	b.n	8003da4 <robocar_c_initialize+0x54>
      rtDW.obj.WaypointsInternal[i] = (rtNaN);
 8003d8a:	4b28      	ldr	r3, [pc, #160]	@ (8003e2c <robocar_c_initialize+0xdc>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	4824      	ldr	r0, [pc, #144]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	311c      	adds	r1, #28
 8003d96:	00c9      	lsls	r1, r1, #3
 8003d98:	4401      	add	r1, r0
 8003d9a:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 8; i++) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3301      	adds	r3, #1
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b07      	cmp	r3, #7
 8003da8:	ddef      	ble.n	8003d8a <robocar_c_initialize+0x3a>
    }

    /* InitializeConditions for MATLABSystem: '<Root>/Pure Pursuit' */
    rtDW.obj.LookaheadPoint[0] = 0.0;
 8003daa:	491e      	ldr	r1, [pc, #120]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
    rtDW.obj.LookaheadPoint[1] = 0.0;
 8003db8:	491a      	ldr	r1, [pc, #104]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    rtDW.obj.LastPose[0] = 0.0;
 8003dc6:	4917      	ldr	r1, [pc, #92]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
    rtDW.obj.LastPose[1] = 0.0;
 8003dd4:	4913      	ldr	r1, [pc, #76]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    rtDW.obj.LastPose[2] = 0.0;
 8003de2:	4910      	ldr	r1, [pc, #64]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    rtDW.obj.ProjectionPoint[0] = (rtNaN);
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <robocar_c_initialize+0xdc>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	490b      	ldr	r1, [pc, #44]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003df8:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    rtDW.obj.ProjectionPoint[1] = (rtNaN);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <robocar_c_initialize+0xdc>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	4908      	ldr	r1, [pc, #32]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003e04:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    rtDW.obj.ProjectionLineIndex = 0.0;
 8003e08:	4906      	ldr	r1, [pc, #24]	@ (8003e24 <robocar_c_initialize+0xd4>)
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
  }
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	24000b98 	.word	0x24000b98
 8003e28:	3ff00000 	.word	0x3ff00000
 8003e2c:	24000008 	.word	0x24000008

08003e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e34:	f7fc fe18 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e38:	480c      	ldr	r0, [pc, #48]	@ (8003e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e3a:	490d      	ldr	r1, [pc, #52]	@ (8003e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e40:	e002      	b.n	8003e48 <LoopCopyDataInit>

08003e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e46:	3304      	adds	r3, #4

08003e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e4c:	d3f9      	bcc.n	8003e42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e50:	4c0a      	ldr	r4, [pc, #40]	@ (8003e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e54:	e001      	b.n	8003e5a <LoopFillZerobss>

08003e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e58:	3204      	adds	r2, #4

08003e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e5c:	d3fb      	bcc.n	8003e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5e:	f00b fcd7 	bl	800f810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e62:	f7fd fc19 	bl	8001698 <main>
  bx  lr
 8003e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e70:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8003e74:	08014778 	.word	0x08014778
  ldr r2, =_sbss
 8003e78:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003e7c:	24005828 	.word	0x24005828

08003e80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC3_IRQHandler>
	...

08003e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8a:	2003      	movs	r0, #3
 8003e8c:	f000 f933 	bl	80040f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e90:	f003 f810 	bl	8006eb4 <HAL_RCC_GetSysClockFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b15      	ldr	r3, [pc, #84]	@ (8003eec <HAL_Init+0x68>)
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	4913      	ldr	r1, [pc, #76]	@ (8003ef0 <HAL_Init+0x6c>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eae:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <HAL_Init+0x68>)
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef0 <HAL_Init+0x6c>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef4 <HAL_Init+0x70>)
 8003ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef8 <HAL_Init+0x74>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ece:	200f      	movs	r0, #15
 8003ed0:	f7fe fd42 	bl	8002958 <HAL_InitTick>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e002      	b.n	8003ee4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ede:	f7fe fa19 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	0801406c 	.word	0x0801406c
 8003ef4:	24000004 	.word	0x24000004
 8003ef8:	24000000 	.word	0x24000000

08003efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_IncTick+0x20>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_IncTick+0x24>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a04      	ldr	r2, [pc, #16]	@ (8003f20 <HAL_IncTick+0x24>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	24000014 	.word	0x24000014
 8003f20:	24000cf0 	.word	0x24000cf0

08003f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return uwTick;
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <HAL_GetTick+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	24000cf0 	.word	0x24000cf0

08003f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7ff ffee 	bl	8003f24 <HAL_GetTick>
 8003f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f54:	d005      	beq.n	8003f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_Delay+0x44>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f62:	bf00      	nop
 8003f64:	f7ff ffde 	bl	8003f24 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d8f7      	bhi.n	8003f64 <HAL_Delay+0x28>
  {
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	24000014 	.word	0x24000014

08003f84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f88:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <HAL_GetREVID+0x14>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	5c001000 	.word	0x5c001000

08003f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fac:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <__NVIC_SetPriorityGrouping+0x40>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fca:	4a04      	ldr	r2, [pc, #16]	@ (8003fdc <__NVIC_SetPriorityGrouping+0x40>)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	60d3      	str	r3, [r2, #12]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000ed00 	.word	0xe000ed00
 8003fe0:	05fa0000 	.word	0x05fa0000

08003fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__NVIC_GetPriorityGrouping+0x18>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	f003 0307 	and.w	r3, r3, #7
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800400a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db0b      	blt.n	800402a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4907      	ldr	r1, [pc, #28]	@ (8004038 <__NVIC_EnableIRQ+0x38>)
 800401a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2001      	movs	r0, #1
 8004022:	fa00 f202 	lsl.w	r2, r0, r2
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000e100 	.word	0xe000e100

0800403c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db0a      	blt.n	8004066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	490c      	ldr	r1, [pc, #48]	@ (8004088 <__NVIC_SetPriority+0x4c>)
 8004056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	440b      	add	r3, r1
 8004060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004064:	e00a      	b.n	800407c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4908      	ldr	r1, [pc, #32]	@ (800408c <__NVIC_SetPriority+0x50>)
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3b04      	subs	r3, #4
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	440b      	add	r3, r1
 800407a:	761a      	strb	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000e100 	.word	0xe000e100
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	@ 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f1c3 0307 	rsb	r3, r3, #7
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf28      	it	cs
 80040ae:	2304      	movcs	r3, #4
 80040b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d902      	bls.n	80040c0 <NVIC_EncodePriority+0x30>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3b03      	subs	r3, #3
 80040be:	e000      	b.n	80040c2 <NVIC_EncodePriority+0x32>
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	401a      	ands	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	43d9      	mvns	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	4313      	orrs	r3, r2
         );
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	@ 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff4c 	bl	8003f9c <__NVIC_SetPriorityGrouping>
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800411a:	f7ff ff63 	bl	8003fe4 <__NVIC_GetPriorityGrouping>
 800411e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f7ff ffb3 	bl	8004090 <NVIC_EncodePriority>
 800412a:	4602      	mov	r2, r0
 800412c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff82 	bl	800403c <__NVIC_SetPriority>
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800414a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ff56 	bl	8004000 <__NVIC_EnableIRQ>
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b098      	sub	sp, #96	@ 0x60
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004164:	4a84      	ldr	r2, [pc, #528]	@ (8004378 <HAL_FDCAN_Init+0x21c>)
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	4611      	mov	r1, r2
 800416c:	224c      	movs	r2, #76	@ 0x4c
 800416e:	4618      	mov	r0, r3
 8004170:	f00b fb75 	bl	800f85e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1c6      	b.n	800450c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7e      	ldr	r2, [pc, #504]	@ (800437c <HAL_FDCAN_Init+0x220>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d106      	bne.n	8004196 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004190:	461a      	mov	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe f8d0 	bl	8002350 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0210 	bic.w	r2, r2, #16
 80041be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c0:	f7ff feb0 	bl	8003f24 <HAL_GetTick>
 80041c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041c6:	e014      	b.n	80041f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041c8:	f7ff feac 	bl	8003f24 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b0a      	cmp	r3, #10
 80041d4:	d90d      	bls.n	80041f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2203      	movs	r2, #3
 80041ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e18c      	b.n	800450c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d0e3      	beq.n	80041c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004210:	f7ff fe88 	bl	8003f24 <HAL_GetTick>
 8004214:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004216:	e014      	b.n	8004242 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004218:	f7ff fe84 	bl	8003f24 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b0a      	cmp	r3, #10
 8004224:	d90d      	bls.n	8004242 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800422c:	f043 0201 	orr.w	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2203      	movs	r2, #3
 800423a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e164      	b.n	800450c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0e3      	beq.n	8004218 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0202 	orr.w	r2, r2, #2
 800425e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7c1b      	ldrb	r3, [r3, #16]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d108      	bne.n	800427a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004276:	619a      	str	r2, [r3, #24]
 8004278:	e007      	b.n	800428a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004288:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7c5b      	ldrb	r3, [r3, #17]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d108      	bne.n	80042a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699a      	ldr	r2, [r3, #24]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042a0:	619a      	str	r2, [r3, #24]
 80042a2:	e007      	b.n	80042b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	7c9b      	ldrb	r3, [r3, #18]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d108      	bne.n	80042ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042ca:	619a      	str	r2, [r3, #24]
 80042cc:	e007      	b.n	80042de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004302:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0210 	bic.w	r2, r2, #16
 8004312:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d108      	bne.n	800432e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0204 	orr.w	r2, r2, #4
 800432a:	619a      	str	r2, [r3, #24]
 800432c:	e030      	b.n	8004390 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d02c      	beq.n	8004390 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d020      	beq.n	8004380 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800434c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0210 	orr.w	r2, r2, #16
 800435c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d114      	bne.n	8004390 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0220 	orr.w	r2, r2, #32
 8004374:	619a      	str	r2, [r3, #24]
 8004376:	e00b      	b.n	8004390 <HAL_FDCAN_Init+0x234>
 8004378:	08014008 	.word	0x08014008
 800437c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0220 	orr.w	r2, r2, #32
 800438e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	3b01      	subs	r3, #1
 8004396:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	3b01      	subs	r3, #1
 800439e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043c4:	d115      	bne.n	80043f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	3b01      	subs	r3, #1
 80043d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80043d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	3b01      	subs	r3, #1
 80043dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80043de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	3b01      	subs	r3, #1
 80043e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80043ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80043f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004418:	4413      	add	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d011      	beq.n	8004442 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004426:	f023 0107 	bic.w	r1, r3, #7
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3360      	adds	r3, #96	@ 0x60
 8004432:	443b      	add	r3, r7
 8004434:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d011      	beq.n	800446e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004452:	f023 0107 	bic.w	r1, r3, #7
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	3360      	adds	r3, #96	@ 0x60
 800445e:	443b      	add	r3, r7
 8004460:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d012      	beq.n	800449c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800447e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	3360      	adds	r3, #96	@ 0x60
 800448a:	443b      	add	r3, r7
 800448c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80044ac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	3360      	adds	r3, #96	@ 0x60
 80044b8:	443b      	add	r3, r7
 80044ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80044be:	021a      	lsls	r2, r3, #8
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a11      	ldr	r2, [pc, #68]	@ (8004514 <HAL_FDCAN_Init+0x3b8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d107      	bne.n	80044e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f022 0203 	bic.w	r2, r2, #3
 80044e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fac1 	bl	8004a84 <FDCAN_CalcultateRamBlockAddresses>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004508:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800450c:	4618      	mov	r0, r3
 800450e:	3760      	adds	r7, #96	@ 0x60
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	4000a000 	.word	0x4000a000

08004518 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004528:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d002      	beq.n	8004536 <HAL_FDCAN_ConfigFilter+0x1e>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d157      	bne.n	80045e6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d12b      	bne.n	8004596 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b07      	cmp	r3, #7
 8004544:	d10d      	bne.n	8004562 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004552:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004558:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800455a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e00e      	b.n	8004580 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800456e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004576:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e025      	b.n	80045e2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	075a      	lsls	r2, r3, #29
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b07      	cmp	r3, #7
 80045aa:	d103      	bne.n	80045b4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e006      	b.n	80045c2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	079a      	lsls	r2, r3, #30
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3304      	adds	r3, #4
 80045da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e008      	b.n	80045f8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045ec:	f043 0202 	orr.w	r2, r3, #2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
  }
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d110      	bne.n	8004640 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004626:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800462c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e008      	b.n	8004652 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004646:	f043 0204 	orr.w	r2, r3, #4
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d111      	bne.n	8004696 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e008      	b.n	80046a8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800469c:	f043 0204 	orr.w	r2, r3, #4
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b08b      	sub	sp, #44	@ 0x2c
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80046cc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80046ce:	7efb      	ldrb	r3, [r7, #27]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	f040 814b 	bne.w	800496c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b40      	cmp	r3, #64	@ 0x40
 80046da:	d14d      	bne.n	8004778 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e13e      	b.n	800497e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004716:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e12c      	b.n	800497e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800472c:	0e1b      	lsrs	r3, r3, #24
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10b      	bne.n	800474e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800473e:	0fdb      	lsrs	r3, r3, #31
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004748:	d101      	bne.n	800474e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800474a:	2301      	movs	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	69f9      	ldr	r1, [r7, #28]
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
 8004776:	e069      	b.n	800484c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b41      	cmp	r3, #65	@ 0x41
 800477c:	d14d      	bne.n	800481a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004786:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e0ed      	b.n	800497e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0db      	b.n	800497e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047ce:	0e1b      	lsrs	r3, r3, #24
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d10b      	bne.n	80047f0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047e0:	0fdb      	lsrs	r3, r3, #31
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047ea:	d101      	bne.n	80047f0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480c:	69f9      	ldr	r1, [r7, #28]
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	627b      	str	r3, [r7, #36]	@ 0x24
 8004818:	e018      	b.n	800484c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	d309      	bcc.n	8004838 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0a2      	b.n	800497e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0c9b      	lsrs	r3, r3, #18
 8004866:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e005      	b.n	800487c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	3304      	adds	r3, #4
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	0e1b      	lsrs	r3, r3, #24
 80048ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	0fda      	lsrs	r2, r3, #31
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	3304      	adds	r3, #4
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	e00a      	b.n	8004906 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	441a      	add	r2, r3
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	440b      	add	r3, r1
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	3301      	adds	r3, #1
 8004904:	623b      	str	r3, [r7, #32]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	0c1b      	lsrs	r3, r3, #16
 800490c:	4a1f      	ldr	r2, [pc, #124]	@ (800498c <HAL_FDCAN_GetRxMessage+0x2d8>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	461a      	mov	r2, r3
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	4293      	cmp	r3, r2
 8004916:	d3eb      	bcc.n	80048f0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b40      	cmp	r3, #64	@ 0x40
 800491c:	d105      	bne.n	800492a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004928:	e01e      	b.n	8004968 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b41      	cmp	r3, #65	@ 0x41
 800492e:	d105      	bne.n	800493c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800493a:	e015      	b.n	8004968 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b1f      	cmp	r3, #31
 8004940:	d808      	bhi.n	8004954 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2101      	movs	r1, #1
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	fa01 f202 	lsl.w	r2, r1, r2
 800494e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004952:	e009      	b.n	8004968 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 021f 	and.w	r2, r3, #31
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f202 	lsl.w	r2, r1, r2
 8004964:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e008      	b.n	800497e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004972:	f043 0208 	orr.w	r2, r3, #8
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	372c      	adds	r7, #44	@ 0x2c
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	080140a8 	.word	0x080140a8

08004990 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80049a2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d002      	beq.n	80049b0 <HAL_FDCAN_ActivateNotification+0x20>
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d155      	bne.n	8004a5c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049ce:	e014      	b.n	80049fa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4013      	ands	r3, r2
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d108      	bne.n	80049f2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0202 	orr.w	r2, r2, #2
 80049ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049f0:	e003      	b.n	80049fa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2203      	movs	r2, #3
 80049f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d009      	beq.n	8004a18 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a7c <HAL_FDCAN_ActivateNotification+0xec>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	0f9b      	lsrs	r3, r3, #30
 8004a52:	490b      	ldr	r1, [pc, #44]	@ (8004a80 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e008      	b.n	8004a6e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a62:	f043 0202 	orr.w	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	3fcfffff 	.word	0x3fcfffff
 8004a80:	4000a800 	.word	0x4000a800

08004a84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004a9a:	4ba7      	ldr	r3, [pc, #668]	@ (8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	0091      	lsls	r1, r2, #2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abc:	041a      	lsls	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	4413      	add	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ada:	4b97      	ldr	r3, [pc, #604]	@ (8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0091      	lsls	r1, r2, #2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	041a      	lsls	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004b1c:	4b86      	ldr	r3, [pc, #536]	@ (8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	0091      	lsls	r1, r2, #2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b36:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	041a      	lsls	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b64:	4b74      	ldr	r3, [pc, #464]	@ (8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	0091      	lsls	r1, r2, #2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	430b      	orrs	r3, r1
 8004b72:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b7e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b86:	041a      	lsls	r2, r3, #16
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004bac:	4b62      	ldr	r3, [pc, #392]	@ (8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	0091      	lsls	r1, r2, #2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004bd8:	4b57      	ldr	r3, [pc, #348]	@ (8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	0091      	lsls	r1, r2, #2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	041a      	lsls	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	4413      	add	r3, r2
 8004c10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004c1a:	4b47      	ldr	r3, [pc, #284]	@ (8004d38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	0091      	lsls	r1, r2, #2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	430b      	orrs	r3, r1
 8004c28:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c34:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	041a      	lsls	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c50:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c58:	061a      	lsls	r2, r3, #24
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c68:	4b34      	ldr	r3, [pc, #208]	@ (8004d3c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009a      	lsls	r2, r3, #2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	4a04      	ldr	r2, [pc, #16]	@ (8004d40 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d915      	bls.n	8004d60 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004d34:	e006      	b.n	8004d44 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004d36:	bf00      	nop
 8004d38:	ffff0003 	.word	0xffff0003
 8004d3c:	10002b00 	.word	0x10002b00
 8004d40:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d4a:	f043 0220 	orr.w	r2, r3, #32
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2203      	movs	r2, #3
 8004d58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e010      	b.n	8004d82 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e005      	b.n	8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3304      	adds	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d3f3      	bcc.n	8004d68 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	@ 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d9e:	4b89      	ldr	r3, [pc, #548]	@ (8004fc4 <HAL_GPIO_Init+0x234>)
 8004da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004da2:	e194      	b.n	80050ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8186 	beq.w	80050c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d005      	beq.n	8004dd4 <HAL_GPIO_Init+0x44>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d130      	bne.n	8004e36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	2203      	movs	r2, #3
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 0201 	and.w	r2, r3, #1
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d017      	beq.n	8004e72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4013      	ands	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d123      	bne.n	8004ec6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	08da      	lsrs	r2, r3, #3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3208      	adds	r2, #8
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0203 	and.w	r2, r3, #3
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80e0 	beq.w	80050c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f08:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f18:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc8 <HAL_GPIO_Init+0x238>)
 8004f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f26:	4a29      	ldr	r2, [pc, #164]	@ (8004fcc <HAL_GPIO_Init+0x23c>)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	220f      	movs	r2, #15
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	@ (8004fd0 <HAL_GPIO_Init+0x240>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d052      	beq.n	8004ff8 <HAL_GPIO_Init+0x268>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd4 <HAL_GPIO_Init+0x244>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d031      	beq.n	8004fbe <HAL_GPIO_Init+0x22e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd8 <HAL_GPIO_Init+0x248>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <HAL_GPIO_Init+0x22a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <HAL_GPIO_Init+0x24c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d025      	beq.n	8004fb6 <HAL_GPIO_Init+0x226>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <HAL_GPIO_Init+0x250>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01f      	beq.n	8004fb2 <HAL_GPIO_Init+0x222>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe4 <HAL_GPIO_Init+0x254>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d019      	beq.n	8004fae <HAL_GPIO_Init+0x21e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe8 <HAL_GPIO_Init+0x258>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <HAL_GPIO_Init+0x21a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <HAL_GPIO_Init+0x25c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00d      	beq.n	8004fa6 <HAL_GPIO_Init+0x216>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <HAL_GPIO_Init+0x260>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <HAL_GPIO_Init+0x212>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a17      	ldr	r2, [pc, #92]	@ (8004ff4 <HAL_GPIO_Init+0x264>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f9a:	2309      	movs	r3, #9
 8004f9c:	e02d      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	e02b      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e029      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fa6:	2307      	movs	r3, #7
 8004fa8:	e027      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004faa:	2306      	movs	r3, #6
 8004fac:	e025      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fae:	2305      	movs	r3, #5
 8004fb0:	e023      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	e021      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e01f      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e01d      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e01b      	b.n	8004ffa <HAL_GPIO_Init+0x26a>
 8004fc2:	bf00      	nop
 8004fc4:	58000080 	.word	0x58000080
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	58000400 	.word	0x58000400
 8004fd0:	58020000 	.word	0x58020000
 8004fd4:	58020400 	.word	0x58020400
 8004fd8:	58020800 	.word	0x58020800
 8004fdc:	58020c00 	.word	0x58020c00
 8004fe0:	58021000 	.word	0x58021000
 8004fe4:	58021400 	.word	0x58021400
 8004fe8:	58021800 	.word	0x58021800
 8004fec:	58021c00 	.word	0x58021c00
 8004ff0:	58022000 	.word	0x58022000
 8004ff4:	58022400 	.word	0x58022400
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	f002 0203 	and.w	r2, r2, #3
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	4093      	lsls	r3, r2
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800500a:	4938      	ldr	r1, [pc, #224]	@ (80050ec <HAL_GPIO_Init+0x35c>)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	3302      	adds	r3, #2
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800503e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800506c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f ae63 	bne.w	8004da4 <HAL_GPIO_Init+0x14>
  }
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	3724      	adds	r7, #36	@ 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58000400 	.word	0x58000400

080050f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
 80050fc:	4613      	mov	r3, r2
 80050fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005100:	787b      	ldrb	r3, [r7, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800510c:	e003      	b.n	8005116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	619a      	str	r2, [r3, #24]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800512c:	4a08      	ldr	r2, [pc, #32]	@ (8005150 <HAL_HSEM_FastTake+0x2c>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3320      	adds	r3, #32
 8005132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005136:	4a07      	ldr	r2, [pc, #28]	@ (8005154 <HAL_HSEM_FastTake+0x30>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	58026400 	.word	0x58026400
 8005154:	80000300 	.word	0x80000300

08005158 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005162:	4906      	ldr	r1, [pc, #24]	@ (800517c <HAL_HSEM_Release+0x24>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	58026400 	.word	0x58026400

08005180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e07f      	b.n	8005292 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd f94c 	bl	8002444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	@ 0x24
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d107      	bne.n	80051fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	e006      	b.n	8005208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d104      	bne.n	800521a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <HAL_I2C_Init+0x11c>)
 8005226:	430b      	orrs	r3, r1
 8005228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	02008000 	.word	0x02008000

080052a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	4608      	mov	r0, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	461a      	mov	r2, r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	817b      	strh	r3, [r7, #10]
 80052b2:	460b      	mov	r3, r1
 80052b4:	813b      	strh	r3, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	f040 80f9 	bne.w	80054ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_I2C_Mem_Write+0x34>
 80052ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d105      	bne.n	80052e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0ed      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_I2C_Mem_Write+0x4e>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0e6      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052f6:	f7fe fe15 	bl	8003f24 <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2319      	movs	r3, #25
 8005302:	2201      	movs	r2, #1
 8005304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fbcb 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0d1      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2221      	movs	r2, #33	@ 0x21
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2240      	movs	r2, #64	@ 0x40
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a3a      	ldr	r2, [r7, #32]
 8005332:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005338:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005340:	88f8      	ldrh	r0, [r7, #6]
 8005342:	893a      	ldrh	r2, [r7, #8]
 8005344:	8979      	ldrh	r1, [r7, #10]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	4603      	mov	r3, r0
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fadb 	bl	800590c <I2C_RequestMemoryWrite>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0a9      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2bff      	cmp	r3, #255	@ 0xff
 8005370:	d90e      	bls.n	8005390 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	22ff      	movs	r2, #255	@ 0xff
 8005376:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537c:	b2da      	uxtb	r2, r3
 800537e:	8979      	ldrh	r1, [r7, #10]
 8005380:	2300      	movs	r3, #0
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fd33 	bl	8005df4 <I2C_TransferConfig>
 800538e:	e00f      	b.n	80053b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	8979      	ldrh	r1, [r7, #10]
 80053a2:	2300      	movs	r3, #0
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fd22 	bl	8005df4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fbb5 	bl	8005b24 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e07b      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	781a      	ldrb	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d034      	beq.n	8005468 <HAL_I2C_Mem_Write+0x1c8>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	d130      	bne.n	8005468 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	@ 0x80
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fb47 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e04d      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	2bff      	cmp	r3, #255	@ 0xff
 8005428:	d90e      	bls.n	8005448 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	22ff      	movs	r2, #255	@ 0xff
 800542e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005434:	b2da      	uxtb	r2, r3
 8005436:	8979      	ldrh	r1, [r7, #10]
 8005438:	2300      	movs	r3, #0
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fcd7 	bl	8005df4 <I2C_TransferConfig>
 8005446:	e00f      	b.n	8005468 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005456:	b2da      	uxtb	r2, r3
 8005458:	8979      	ldrh	r1, [r7, #10]
 800545a:	2300      	movs	r3, #0
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fcc6 	bl	8005df4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d19e      	bne.n	80053b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fb94 	bl	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e01a      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2220      	movs	r2, #32
 800548c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <HAL_I2C_Mem_Write+0x224>)
 800549a:	400b      	ands	r3, r1
 800549c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e000      	b.n	80054bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80054ba:	2302      	movs	r3, #2
  }
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	fe00e800 	.word	0xfe00e800

080054c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	817b      	strh	r3, [r7, #10]
 80054da:	460b      	mov	r3, r1
 80054dc:	813b      	strh	r3, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	f040 80fd 	bne.w	80056ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_I2C_Mem_Read+0x34>
 80054f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005502:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0f1      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_I2C_Mem_Read+0x4e>
 8005512:	2302      	movs	r3, #2
 8005514:	e0ea      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800551e:	f7fe fd01 	bl	8003f24 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	2319      	movs	r3, #25
 800552a:	2201      	movs	r2, #1
 800552c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fab7 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0d5      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2222      	movs	r2, #34	@ 0x22
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2240      	movs	r2, #64	@ 0x40
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a3a      	ldr	r2, [r7, #32]
 800555a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005568:	88f8      	ldrh	r0, [r7, #6]
 800556a:	893a      	ldrh	r2, [r7, #8]
 800556c:	8979      	ldrh	r1, [r7, #10]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	4603      	mov	r3, r0
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fa1b 	bl	80059b4 <I2C_RequestMemoryRead>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0ad      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	2bff      	cmp	r3, #255	@ 0xff
 8005598:	d90e      	bls.n	80055b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	22ff      	movs	r2, #255	@ 0xff
 800559e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	8979      	ldrh	r1, [r7, #10]
 80055a8:	4b52      	ldr	r3, [pc, #328]	@ (80056f4 <HAL_I2C_Mem_Read+0x22c>)
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fc1f 	bl	8005df4 <I2C_TransferConfig>
 80055b6:	e00f      	b.n	80055d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	8979      	ldrh	r1, [r7, #10]
 80055ca:	4b4a      	ldr	r3, [pc, #296]	@ (80056f4 <HAL_I2C_Mem_Read+0x22c>)
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fc0e 	bl	8005df4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	2200      	movs	r2, #0
 80055e0:	2104      	movs	r1, #4
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fa5e 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07c      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d034      	beq.n	8005698 <HAL_I2C_Mem_Read+0x1d0>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d130      	bne.n	8005698 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563c:	2200      	movs	r2, #0
 800563e:	2180      	movs	r1, #128	@ 0x80
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fa2f 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e04d      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2bff      	cmp	r3, #255	@ 0xff
 8005658:	d90e      	bls.n	8005678 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	@ 0xff
 800565e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005664:	b2da      	uxtb	r2, r3
 8005666:	8979      	ldrh	r1, [r7, #10]
 8005668:	2300      	movs	r3, #0
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fbbf 	bl	8005df4 <I2C_TransferConfig>
 8005676:	e00f      	b.n	8005698 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	b2da      	uxtb	r2, r3
 8005688:	8979      	ldrh	r1, [r7, #10]
 800568a:	2300      	movs	r3, #0
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fbae 	bl	8005df4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d19a      	bne.n	80055d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fa7c 	bl	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e01a      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2220      	movs	r2, #32
 80056bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <HAL_I2C_Mem_Read+0x230>)
 80056ca:	400b      	ands	r3, r1
 80056cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	80002400 	.word	0x80002400
 80056f8:	fe00e800 	.word	0xfe00e800

080056fc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	460b      	mov	r3, r1
 800570a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b20      	cmp	r3, #32
 800571a:	f040 80ef 	bne.w	80058fc <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800572c:	d101      	bne.n	8005732 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
 8005730:	e0e5      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_I2C_IsDeviceReady+0x44>
 800573c:	2302      	movs	r3, #2
 800573e:	e0de      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2224      	movs	r2, #36	@ 0x24
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d105      	bne.n	800576a <HAL_I2C_IsDeviceReady+0x6e>
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005764:	4b68      	ldr	r3, [pc, #416]	@ (8005908 <HAL_I2C_IsDeviceReady+0x20c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	e004      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x78>
 800576a:	897b      	ldrh	r3, [r7, #10]
 800576c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005770:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800577a:	f7fe fbd3 	bl	8003f24 <HAL_GetTick>
 800577e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80057ac:	e034      	b.n	8005818 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b4:	d01a      	beq.n	80057ec <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fe fbb5 	bl	8003f24 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <HAL_I2C_IsDeviceReady+0xd0>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10f      	bne.n	80057ec <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e088      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b10      	cmp	r3, #16
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005818:	7ffb      	ldrb	r3, [r7, #31]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <HAL_I2C_IsDeviceReady+0x128>
 800581e:	7fbb      	ldrb	r3, [r7, #30]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0c4      	beq.n	80057ae <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b10      	cmp	r3, #16
 8005830:	d01a      	beq.n	8005868 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2200      	movs	r2, #0
 800583a:	2120      	movs	r1, #32
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f931 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e058      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2220      	movs	r2, #32
 8005852:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e04a      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	2120      	movs	r1, #32
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f916 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e03d      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2210      	movs	r2, #16
 8005888:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2220      	movs	r2, #32
 8005890:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d118      	bne.n	80058cc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058a8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2120      	movs	r1, #32
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f8f5 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e01c      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2220      	movs	r2, #32
 80058ca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3301      	adds	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	f63f af3d 	bhi.w	8005756 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	02002000 	.word	0x02002000

0800590c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	461a      	mov	r2, r3
 800591a:	4603      	mov	r3, r0
 800591c:	817b      	strh	r3, [r7, #10]
 800591e:	460b      	mov	r3, r1
 8005920:	813b      	strh	r3, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	8979      	ldrh	r1, [r7, #10]
 800592c:	4b20      	ldr	r3, [pc, #128]	@ (80059b0 <I2C_RequestMemoryWrite+0xa4>)
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fa5d 	bl	8005df4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	69b9      	ldr	r1, [r7, #24]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f8f0 	bl	8005b24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e02c      	b.n	80059a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005954:	893b      	ldrh	r3, [r7, #8]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	629a      	str	r2, [r3, #40]	@ 0x28
 800595e:	e015      	b.n	800598c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005960:	893b      	ldrh	r3, [r7, #8]
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	b29b      	uxth	r3, r3
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f8d6 	bl	8005b24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e012      	b.n	80059a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005982:	893b      	ldrh	r3, [r7, #8]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	@ 0x80
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f884 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	80002000 	.word	0x80002000

080059b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	817b      	strh	r3, [r7, #10]
 80059c6:	460b      	mov	r3, r1
 80059c8:	813b      	strh	r3, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	8979      	ldrh	r1, [r7, #10]
 80059d4:	4b20      	ldr	r3, [pc, #128]	@ (8005a58 <I2C_RequestMemoryRead+0xa4>)
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fa0a 	bl	8005df4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f89d 	bl	8005b24 <I2C_WaitOnTXISFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e02c      	b.n	8005a4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059fa:	893b      	ldrh	r3, [r7, #8]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a04:	e015      	b.n	8005a32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a06:	893b      	ldrh	r3, [r7, #8]
 8005a08:	0a1b      	lsrs	r3, r3, #8
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	69b9      	ldr	r1, [r7, #24]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f883 	bl	8005b24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e012      	b.n	8005a4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a28:	893b      	ldrh	r3, [r7, #8]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2140      	movs	r1, #64	@ 0x40
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f831 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	80002000 	.word	0x80002000

08005a5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d103      	bne.n	8005a7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d007      	beq.n	8005a98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	619a      	str	r2, [r3, #24]
  }
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab4:	e022      	b.n	8005afc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005abc:	d01e      	beq.n	8005afc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005abe:	f7fe fa31 	bl	8003f24 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d302      	bcc.n	8005ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d113      	bne.n	8005afc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e00f      	b.n	8005b1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4013      	ands	r3, r2
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d0cd      	beq.n	8005ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b30:	e02c      	b.n	8005b8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f870 	bl	8005c1c <I2C_IsErrorOccurred>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e02a      	b.n	8005b9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4c:	d01e      	beq.n	8005b8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4e:	f7fe f9e9 	bl	8003f24 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d302      	bcc.n	8005b64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d113      	bne.n	8005b8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e007      	b.n	8005b9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d1cb      	bne.n	8005b32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bb0:	e028      	b.n	8005c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f830 	bl	8005c1c <I2C_IsErrorOccurred>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e026      	b.n	8005c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fe f9ad 	bl	8003f24 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d113      	bne.n	8005c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e007      	b.n	8005c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d1cf      	bne.n	8005bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	@ 0x28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d075      	beq.n	8005d34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c50:	e056      	b.n	8005d00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c58:	d052      	beq.n	8005d00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c5a:	f7fe f963 	bl	8003f24 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <I2C_IsErrorOccurred+0x54>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d147      	bne.n	8005d00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c92:	d12e      	bne.n	8005cf2 <I2C_IsErrorOccurred+0xd6>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c9a:	d02a      	beq.n	8005cf2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d027      	beq.n	8005cf2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cb0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005cb2:	f7fe f937 	bl	8003f24 <HAL_GetTick>
 8005cb6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cb8:	e01b      	b.n	8005cf2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005cba:	f7fe f933 	bl	8003f24 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b19      	cmp	r3, #25
 8005cc6:	d914      	bls.n	8005cf2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d1dc      	bne.n	8005cba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d003      	beq.n	8005d16 <I2C_IsErrorOccurred+0xfa>
 8005d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d09d      	beq.n	8005c52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2220      	movs	r2, #32
 8005d24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f043 0304 	orr.w	r3, r3, #4
 8005d2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	f043 0308 	orr.w	r3, r3, #8
 8005d6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005da2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01c      	beq.n	8005de4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff fe56 	bl	8005a5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b0d      	ldr	r3, [pc, #52]	@ (8005df0 <I2C_IsErrorOccurred+0x1d4>)
 8005dbc:	400b      	ands	r3, r1
 8005dbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3728      	adds	r7, #40	@ 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	fe00e800 	.word	0xfe00e800

08005df4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	607b      	str	r3, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	817b      	strh	r3, [r7, #10]
 8005e02:	4613      	mov	r3, r2
 8005e04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e06:	897b      	ldrh	r3, [r7, #10]
 8005e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e0c:	7a7b      	ldrb	r3, [r7, #9]
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e14:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e22:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	0d5b      	lsrs	r3, r3, #21
 8005e2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e32:	4b08      	ldr	r3, [pc, #32]	@ (8005e54 <I2C_TransferConfig+0x60>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	43db      	mvns	r3, r3
 8005e38:	ea02 0103 	and.w	r1, r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	03ff63ff 	.word	0x03ff63ff

08005e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d138      	bne.n	8005ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e032      	b.n	8005ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2224      	movs	r2, #36	@ 0x24
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6819      	ldr	r1, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d139      	bne.n	8005f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e033      	b.n	8005f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2224      	movs	r2, #36	@ 0x24
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f88:	b08f      	sub	sp, #60	@ 0x3c
 8005f8a:	af0a      	add	r7, sp, #40	@ 0x28
 8005f8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e116      	b.n	80061c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fc fc56 	bl	8002864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2203      	movs	r2, #3
 8005fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f005 fa72 	bl	800b4c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	687e      	ldr	r6, [r7, #4]
 8005fe4:	466d      	mov	r5, sp
 8005fe6:	f106 0410 	add.w	r4, r6, #16
 8005fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ffa:	1d33      	adds	r3, r6, #4
 8005ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ffe:	6838      	ldr	r0, [r7, #0]
 8006000:	f005 f9f0 	bl	800b3e4 <USB_CoreInit>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2202      	movs	r2, #2
 800600e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e0d7      	b.n	80061c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f005 fa60 	bl	800b4e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
 8006026:	e04a      	b.n	80060be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	333d      	adds	r3, #61	@ 0x3d
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800603c:	7bfa      	ldrb	r2, [r7, #15]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	333c      	adds	r3, #60	@ 0x3c
 800604c:	7bfa      	ldrb	r2, [r7, #15]
 800604e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	b298      	uxth	r0, r3
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3344      	adds	r3, #68	@ 0x44
 8006064:	4602      	mov	r2, r0
 8006066:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	3340      	adds	r3, #64	@ 0x40
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800607c:	7bfa      	ldrb	r2, [r7, #15]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3348      	adds	r3, #72	@ 0x48
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006090:	7bfa      	ldrb	r2, [r7, #15]
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	334c      	adds	r3, #76	@ 0x4c
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060a4:	7bfa      	ldrb	r2, [r7, #15]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	3354      	adds	r3, #84	@ 0x54
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	3301      	adds	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3af      	bcc.n	8006028 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
 80060cc:	e044      	b.n	8006158 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060ce:	7bfa      	ldrb	r2, [r7, #15]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060e4:	7bfa      	ldrb	r2, [r7, #15]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80060f6:	7bfa      	ldrb	r2, [r7, #15]
 80060f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006110:	7bfa      	ldrb	r2, [r7, #15]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006126:	7bfa      	ldrb	r2, [r7, #15]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800613c:	7bfa      	ldrb	r2, [r7, #15]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	3301      	adds	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	429a      	cmp	r2, r3
 8006160:	d3b5      	bcc.n	80060ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	687e      	ldr	r6, [r7, #4]
 800616a:	466d      	mov	r5, sp
 800616c:	f106 0410 	add.w	r4, r6, #16
 8006170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006178:	e894 0003 	ldmia.w	r4, {r0, r1}
 800617c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006180:	1d33      	adds	r3, r6, #4
 8006182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006184:	6838      	ldr	r0, [r7, #0]
 8006186:	f005 f9f9 	bl	800b57c <USB_DevInit>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e014      	b.n	80061c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d102      	bne.n	80061ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f80b 	bl	80061d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f005 fbb7 	bl	800b932 <USB_DevDisconnect>

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080061d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_PCDEx_ActivateLPM+0x44>)
 8006200:	4313      	orrs	r3, r2
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	10000003 	.word	0x10000003

08006218 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006220:	4b29      	ldr	r3, [pc, #164]	@ (80062c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	2b06      	cmp	r3, #6
 800622a:	d00a      	beq.n	8006242 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800622c:	4b26      	ldr	r3, [pc, #152]	@ (80062c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d001      	beq.n	800623e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e040      	b.n	80062c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e03e      	b.n	80062c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006242:	4b21      	ldr	r3, [pc, #132]	@ (80062c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800624a:	491f      	ldr	r1, [pc, #124]	@ (80062c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4313      	orrs	r3, r2
 8006250:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006252:	f7fd fe67 	bl	8003f24 <HAL_GetTick>
 8006256:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006258:	e009      	b.n	800626e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800625a:	f7fd fe63 	bl	8003f24 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006268:	d901      	bls.n	800626e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e028      	b.n	80062c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800626e:	4b16      	ldr	r3, [pc, #88]	@ (80062c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627a:	d1ee      	bne.n	800625a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b1e      	cmp	r3, #30
 8006280:	d008      	beq.n	8006294 <HAL_PWREx_ConfigSupply+0x7c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b2e      	cmp	r3, #46	@ 0x2e
 8006286:	d005      	beq.n	8006294 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b1d      	cmp	r3, #29
 800628c:	d002      	beq.n	8006294 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b2d      	cmp	r3, #45	@ 0x2d
 8006292:	d114      	bne.n	80062be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006294:	f7fd fe46 	bl	8003f24 <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800629a:	e009      	b.n	80062b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800629c:	f7fd fe42 	bl	8003f24 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062aa:	d901      	bls.n	80062b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e007      	b.n	80062c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062b0:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062bc:	d1ee      	bne.n	800629c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	58024800 	.word	0x58024800

080062cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80062d0:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80062d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062da:	60d3      	str	r3, [r2, #12]
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	58024800 	.word	0x58024800

080062ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08c      	sub	sp, #48	@ 0x30
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f000 bc1d 	b.w	8006b3a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8087 	beq.w	800641c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800630e:	4b99      	ldr	r3, [pc, #612]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006318:	4b96      	ldr	r3, [pc, #600]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800631a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800631e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006320:	2b10      	cmp	r3, #16
 8006322:	d007      	beq.n	8006334 <HAL_RCC_OscConfig+0x48>
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	2b18      	cmp	r3, #24
 8006328:	d110      	bne.n	800634c <HAL_RCC_OscConfig+0x60>
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d10b      	bne.n	800634c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006334:	4b8f      	ldr	r3, [pc, #572]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d06c      	beq.n	800641a <HAL_RCC_OscConfig+0x12e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d168      	bne.n	800641a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e3f6      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006354:	d106      	bne.n	8006364 <HAL_RCC_OscConfig+0x78>
 8006356:	4b87      	ldr	r3, [pc, #540]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a86      	ldr	r2, [pc, #536]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800635c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e02e      	b.n	80063c2 <HAL_RCC_OscConfig+0xd6>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10c      	bne.n	8006386 <HAL_RCC_OscConfig+0x9a>
 800636c:	4b81      	ldr	r3, [pc, #516]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a80      	ldr	r2, [pc, #512]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	4b7e      	ldr	r3, [pc, #504]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7d      	ldr	r2, [pc, #500]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800637e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e01d      	b.n	80063c2 <HAL_RCC_OscConfig+0xd6>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800638e:	d10c      	bne.n	80063aa <HAL_RCC_OscConfig+0xbe>
 8006390:	4b78      	ldr	r3, [pc, #480]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a77      	ldr	r2, [pc, #476]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006396:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	4b75      	ldr	r3, [pc, #468]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a74      	ldr	r2, [pc, #464]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80063a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e00b      	b.n	80063c2 <HAL_RCC_OscConfig+0xd6>
 80063aa:	4b72      	ldr	r3, [pc, #456]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a71      	ldr	r2, [pc, #452]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80063b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a6e      	ldr	r2, [pc, #440]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80063bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d013      	beq.n	80063f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fd fdab 	bl	8003f24 <HAL_GetTick>
 80063ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d2:	f7fd fda7 	bl	8003f24 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b64      	cmp	r3, #100	@ 0x64
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e3aa      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063e4:	4b63      	ldr	r3, [pc, #396]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0xe6>
 80063f0:	e014      	b.n	800641c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fd fd97 	bl	8003f24 <HAL_GetTick>
 80063f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063fa:	f7fd fd93 	bl	8003f24 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b64      	cmp	r3, #100	@ 0x64
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e396      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800640c:	4b59      	ldr	r3, [pc, #356]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x10e>
 8006418:	e000      	b.n	800641c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80cb 	beq.w	80065c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642a:	4b52      	ldr	r3, [pc, #328]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006432:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006434:	4b4f      	ldr	r3, [pc, #316]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_RCC_OscConfig+0x164>
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	2b18      	cmp	r3, #24
 8006444:	d156      	bne.n	80064f4 <HAL_RCC_OscConfig+0x208>
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d151      	bne.n	80064f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006450:	4b48      	ldr	r3, [pc, #288]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_RCC_OscConfig+0x17c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e368      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006468:	4b42      	ldr	r3, [pc, #264]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f023 0219 	bic.w	r2, r3, #25
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	493f      	ldr	r1, [pc, #252]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800647a:	f7fd fd53 	bl	8003f24 <HAL_GetTick>
 800647e:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006482:	f7fd fd4f 	bl	8003f24 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e352      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006494:	4b37      	ldr	r3, [pc, #220]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0f0      	beq.n	8006482 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a0:	f7fd fd70 	bl	8003f84 <HAL_GetREVID>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d817      	bhi.n	80064de <HAL_RCC_OscConfig+0x1f2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b40      	cmp	r3, #64	@ 0x40
 80064b4:	d108      	bne.n	80064c8 <HAL_RCC_OscConfig+0x1dc>
 80064b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80064be:	4a2d      	ldr	r2, [pc, #180]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80064c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064c6:	e07b      	b.n	80065c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c8:	4b2a      	ldr	r3, [pc, #168]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	4927      	ldr	r1, [pc, #156]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064dc:	e070      	b.n	80065c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064de:	4b25      	ldr	r3, [pc, #148]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	061b      	lsls	r3, r3, #24
 80064ec:	4921      	ldr	r1, [pc, #132]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064f2:	e065      	b.n	80065c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d048      	beq.n	800658e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f023 0219 	bic.w	r2, r3, #25
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	491a      	ldr	r1, [pc, #104]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800650a:	4313      	orrs	r3, r2
 800650c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650e:	f7fd fd09 	bl	8003f24 <HAL_GetTick>
 8006512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006514:	e008      	b.n	8006528 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006516:	f7fd fd05 	bl	8003f24 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e308      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006528:	4b12      	ldr	r3, [pc, #72]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0f0      	beq.n	8006516 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006534:	f7fd fd26 	bl	8003f84 <HAL_GetREVID>
 8006538:	4603      	mov	r3, r0
 800653a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800653e:	4293      	cmp	r3, r2
 8006540:	d81a      	bhi.n	8006578 <HAL_RCC_OscConfig+0x28c>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b40      	cmp	r3, #64	@ 0x40
 8006548:	d108      	bne.n	800655c <HAL_RCC_OscConfig+0x270>
 800654a:	4b0a      	ldr	r3, [pc, #40]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006552:	4a08      	ldr	r2, [pc, #32]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 8006554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006558:	6053      	str	r3, [r2, #4]
 800655a:	e031      	b.n	80065c0 <HAL_RCC_OscConfig+0x2d4>
 800655c:	4b05      	ldr	r3, [pc, #20]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	4902      	ldr	r1, [pc, #8]	@ (8006574 <HAL_RCC_OscConfig+0x288>)
 800656c:	4313      	orrs	r3, r2
 800656e:	604b      	str	r3, [r1, #4]
 8006570:	e026      	b.n	80065c0 <HAL_RCC_OscConfig+0x2d4>
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
 8006578:	4b9a      	ldr	r3, [pc, #616]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	061b      	lsls	r3, r3, #24
 8006586:	4997      	ldr	r1, [pc, #604]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006588:	4313      	orrs	r3, r2
 800658a:	604b      	str	r3, [r1, #4]
 800658c:	e018      	b.n	80065c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658e:	4b95      	ldr	r3, [pc, #596]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a94      	ldr	r2, [pc, #592]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fd fcc3 	bl	8003f24 <HAL_GetTick>
 800659e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065a2:	f7fd fcbf 	bl	8003f24 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e2c2      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065b4:	4b8b      	ldr	r3, [pc, #556]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f0      	bne.n	80065a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80a9 	beq.w	8006720 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ce:	4b85      	ldr	r3, [pc, #532]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065d8:	4b82      	ldr	r3, [pc, #520]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80065da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d007      	beq.n	80065f4 <HAL_RCC_OscConfig+0x308>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b18      	cmp	r3, #24
 80065e8:	d13a      	bne.n	8006660 <HAL_RCC_OscConfig+0x374>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d135      	bne.n	8006660 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f4:	4b7b      	ldr	r3, [pc, #492]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_RCC_OscConfig+0x320>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	2b80      	cmp	r3, #128	@ 0x80
 8006606:	d001      	beq.n	800660c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e296      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800660c:	f7fd fcba 	bl	8003f84 <HAL_GetREVID>
 8006610:	4603      	mov	r3, r0
 8006612:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006616:	4293      	cmp	r3, r2
 8006618:	d817      	bhi.n	800664a <HAL_RCC_OscConfig+0x35e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	2b20      	cmp	r3, #32
 8006620:	d108      	bne.n	8006634 <HAL_RCC_OscConfig+0x348>
 8006622:	4b70      	ldr	r3, [pc, #448]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800662a:	4a6e      	ldr	r2, [pc, #440]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800662c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006630:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006632:	e075      	b.n	8006720 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006634:	4b6b      	ldr	r3, [pc, #428]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	069b      	lsls	r3, r3, #26
 8006642:	4968      	ldr	r1, [pc, #416]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006644:	4313      	orrs	r3, r2
 8006646:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006648:	e06a      	b.n	8006720 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800664a:	4b66      	ldr	r3, [pc, #408]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	061b      	lsls	r3, r3, #24
 8006658:	4962      	ldr	r1, [pc, #392]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800665a:	4313      	orrs	r3, r2
 800665c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800665e:	e05f      	b.n	8006720 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d042      	beq.n	80066ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006668:	4b5e      	ldr	r3, [pc, #376]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a5d      	ldr	r2, [pc, #372]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800666e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fd fc56 	bl	8003f24 <HAL_GetTick>
 8006678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800667c:	f7fd fc52 	bl	8003f24 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e255      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800668e:	4b55      	ldr	r3, [pc, #340]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f0      	beq.n	800667c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800669a:	f7fd fc73 	bl	8003f84 <HAL_GetREVID>
 800669e:	4603      	mov	r3, r0
 80066a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d817      	bhi.n	80066d8 <HAL_RCC_OscConfig+0x3ec>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d108      	bne.n	80066c2 <HAL_RCC_OscConfig+0x3d6>
 80066b0:	4b4c      	ldr	r3, [pc, #304]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80066b8:	4a4a      	ldr	r2, [pc, #296]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066be:	6053      	str	r3, [r2, #4]
 80066c0:	e02e      	b.n	8006720 <HAL_RCC_OscConfig+0x434>
 80066c2:	4b48      	ldr	r3, [pc, #288]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	069b      	lsls	r3, r3, #26
 80066d0:	4944      	ldr	r1, [pc, #272]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	604b      	str	r3, [r1, #4]
 80066d6:	e023      	b.n	8006720 <HAL_RCC_OscConfig+0x434>
 80066d8:	4b42      	ldr	r3, [pc, #264]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	061b      	lsls	r3, r3, #24
 80066e6:	493f      	ldr	r1, [pc, #252]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60cb      	str	r3, [r1, #12]
 80066ec:	e018      	b.n	8006720 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066ee:	4b3d      	ldr	r3, [pc, #244]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3c      	ldr	r2, [pc, #240]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80066f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fd fc13 	bl	8003f24 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006702:	f7fd fc0f 	bl	8003f24 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e212      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006714:	4b33      	ldr	r3, [pc, #204]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d036      	beq.n	800679a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d019      	beq.n	8006768 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006734:	4b2b      	ldr	r3, [pc, #172]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006738:	4a2a      	ldr	r2, [pc, #168]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fd fbf0 	bl	8003f24 <HAL_GetTick>
 8006744:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006748:	f7fd fbec 	bl	8003f24 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e1ef      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800675a:	4b22      	ldr	r3, [pc, #136]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800675c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x45c>
 8006766:	e018      	b.n	800679a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006768:	4b1e      	ldr	r3, [pc, #120]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800676a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676c:	4a1d      	ldr	r2, [pc, #116]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fd fbd6 	bl	8003f24 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800677c:	f7fd fbd2 	bl	8003f24 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e1d5      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 8006790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d039      	beq.n	800681a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d01c      	beq.n	80067e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a0c      	ldr	r2, [pc, #48]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80067b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80067b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ba:	f7fd fbb3 	bl	8003f24 <HAL_GetTick>
 80067be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067c2:	f7fd fbaf 	bl	8003f24 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e1b2      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067d4:	4b03      	ldr	r3, [pc, #12]	@ (80067e4 <HAL_RCC_OscConfig+0x4f8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x4d6>
 80067e0:	e01b      	b.n	800681a <HAL_RCC_OscConfig+0x52e>
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067e8:	4b9b      	ldr	r3, [pc, #620]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a9a      	ldr	r2, [pc, #616]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80067ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067f4:	f7fd fb96 	bl	8003f24 <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067fc:	f7fd fb92 	bl	8003f24 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e195      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800680e:	4b92      	ldr	r3, [pc, #584]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8081 	beq.w	800692a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006828:	4b8c      	ldr	r3, [pc, #560]	@ (8006a5c <HAL_RCC_OscConfig+0x770>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a8b      	ldr	r2, [pc, #556]	@ (8006a5c <HAL_RCC_OscConfig+0x770>)
 800682e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006834:	f7fd fb76 	bl	8003f24 <HAL_GetTick>
 8006838:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800683c:	f7fd fb72 	bl	8003f24 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	@ 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e175      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800684e:	4b83      	ldr	r3, [pc, #524]	@ (8006a5c <HAL_RCC_OscConfig+0x770>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0f0      	beq.n	800683c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d106      	bne.n	8006870 <HAL_RCC_OscConfig+0x584>
 8006862:	4b7d      	ldr	r3, [pc, #500]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006866:	4a7c      	ldr	r2, [pc, #496]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	6713      	str	r3, [r2, #112]	@ 0x70
 800686e:	e02d      	b.n	80068cc <HAL_RCC_OscConfig+0x5e0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10c      	bne.n	8006892 <HAL_RCC_OscConfig+0x5a6>
 8006878:	4b77      	ldr	r3, [pc, #476]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4a76      	ldr	r2, [pc, #472]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	@ 0x70
 8006884:	4b74      	ldr	r3, [pc, #464]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006888:	4a73      	ldr	r2, [pc, #460]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 800688a:	f023 0304 	bic.w	r3, r3, #4
 800688e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006890:	e01c      	b.n	80068cc <HAL_RCC_OscConfig+0x5e0>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b05      	cmp	r3, #5
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x5c8>
 800689a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689e:	4a6e      	ldr	r2, [pc, #440]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068a0:	f043 0304 	orr.w	r3, r3, #4
 80068a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068aa:	4a6b      	ldr	r2, [pc, #428]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b2:	e00b      	b.n	80068cc <HAL_RCC_OscConfig+0x5e0>
 80068b4:	4b68      	ldr	r3, [pc, #416]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	4a67      	ldr	r2, [pc, #412]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068ba:	f023 0301 	bic.w	r3, r3, #1
 80068be:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c0:	4b65      	ldr	r3, [pc, #404]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c4:	4a64      	ldr	r2, [pc, #400]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068c6:	f023 0304 	bic.w	r3, r3, #4
 80068ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d015      	beq.n	8006900 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d4:	f7fd fb26 	bl	8003f24 <HAL_GetTick>
 80068d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068dc:	f7fd fb22 	bl	8003f24 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e123      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068f2:	4b59      	ldr	r3, [pc, #356]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0ee      	beq.n	80068dc <HAL_RCC_OscConfig+0x5f0>
 80068fe:	e014      	b.n	800692a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006900:	f7fd fb10 	bl	8003f24 <HAL_GetTick>
 8006904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006906:	e00a      	b.n	800691e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006908:	f7fd fb0c 	bl	8003f24 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e10d      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800691e:	4b4e      	ldr	r3, [pc, #312]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ee      	bne.n	8006908 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8102 	beq.w	8006b38 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006934:	4b48      	ldr	r3, [pc, #288]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800693c:	2b18      	cmp	r3, #24
 800693e:	f000 80bd 	beq.w	8006abc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	2b02      	cmp	r3, #2
 8006948:	f040 809e 	bne.w	8006a88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694c:	4b42      	ldr	r3, [pc, #264]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a41      	ldr	r2, [pc, #260]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fd fae4 	bl	8003f24 <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006960:	f7fd fae0 	bl	8003f24 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e0e3      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006972:	4b39      	ldr	r3, [pc, #228]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800697e:	4b36      	ldr	r3, [pc, #216]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006982:	4b37      	ldr	r3, [pc, #220]	@ (8006a60 <HAL_RCC_OscConfig+0x774>)
 8006984:	4013      	ands	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800698e:	0112      	lsls	r2, r2, #4
 8006990:	430a      	orrs	r2, r1
 8006992:	4931      	ldr	r1, [pc, #196]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006994:	4313      	orrs	r3, r2
 8006996:	628b      	str	r3, [r1, #40]	@ 0x28
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699c:	3b01      	subs	r3, #1
 800699e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a6:	3b01      	subs	r3, #1
 80069a8:	025b      	lsls	r3, r3, #9
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b2:	3b01      	subs	r3, #1
 80069b4:	041b      	lsls	r3, r3, #16
 80069b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c0:	3b01      	subs	r3, #1
 80069c2:	061b      	lsls	r3, r3, #24
 80069c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069c8:	4923      	ldr	r1, [pc, #140]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80069ce:	4b22      	ldr	r3, [pc, #136]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d2:	4a21      	ldr	r2, [pc, #132]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069da:	4b1f      	ldr	r3, [pc, #124]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80069dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069de:	4b21      	ldr	r3, [pc, #132]	@ (8006a64 <HAL_RCC_OscConfig+0x778>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069e6:	00d2      	lsls	r2, r2, #3
 80069e8:	491b      	ldr	r1, [pc, #108]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	f023 020c 	bic.w	r2, r3, #12
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fa:	4917      	ldr	r1, [pc, #92]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a00:	4b15      	ldr	r3, [pc, #84]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	f023 0202 	bic.w	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a0c:	4912      	ldr	r1, [pc, #72]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a12:	4b11      	ldr	r3, [pc, #68]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	4a10      	ldr	r2, [pc, #64]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	4a0d      	ldr	r2, [pc, #52]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006a36:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3a:	4a07      	ldr	r2, [pc, #28]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a3c:	f043 0301 	orr.w	r3, r3, #1
 8006a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a42:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a04      	ldr	r2, [pc, #16]	@ (8006a58 <HAL_RCC_OscConfig+0x76c>)
 8006a48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fd fa69 	bl	8003f24 <HAL_GetTick>
 8006a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a54:	e011      	b.n	8006a7a <HAL_RCC_OscConfig+0x78e>
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	58024800 	.word	0x58024800
 8006a60:	fffffc0c 	.word	0xfffffc0c
 8006a64:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a68:	f7fd fa5c 	bl	8003f24 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e05f      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a7a:	4b32      	ldr	r3, [pc, #200]	@ (8006b44 <HAL_RCC_OscConfig+0x858>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x77c>
 8006a86:	e057      	b.n	8006b38 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a88:	4b2e      	ldr	r3, [pc, #184]	@ (8006b44 <HAL_RCC_OscConfig+0x858>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b44 <HAL_RCC_OscConfig+0x858>)
 8006a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fd fa46 	bl	8003f24 <HAL_GetTick>
 8006a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a9c:	f7fd fa42 	bl	8003f24 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e045      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aae:	4b25      	ldr	r3, [pc, #148]	@ (8006b44 <HAL_RCC_OscConfig+0x858>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x7b0>
 8006aba:	e03d      	b.n	8006b38 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006abc:	4b21      	ldr	r3, [pc, #132]	@ (8006b44 <HAL_RCC_OscConfig+0x858>)
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ac2:	4b20      	ldr	r3, [pc, #128]	@ (8006b44 <HAL_RCC_OscConfig+0x858>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d031      	beq.n	8006b34 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f003 0203 	and.w	r2, r3, #3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d12a      	bne.n	8006b34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	091b      	lsrs	r3, r3, #4
 8006ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d122      	bne.n	8006b34 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d11a      	bne.n	8006b34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	0a5b      	lsrs	r3, r3, #9
 8006b02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d111      	bne.n	8006b34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	0c1b      	lsrs	r3, r3, #16
 8006b14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d108      	bne.n	8006b34 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	0e1b      	lsrs	r3, r3, #24
 8006b26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d001      	beq.n	8006b38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3730      	adds	r7, #48	@ 0x30
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	58024400 	.word	0x58024400

08006b48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e19c      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d910      	bls.n	8006b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6a:	4b87      	ldr	r3, [pc, #540]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f023 020f 	bic.w	r2, r3, #15
 8006b72:	4985      	ldr	r1, [pc, #532]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b83      	ldr	r3, [pc, #524]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d001      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e184      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d908      	bls.n	8006bba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ba8:	4b78      	ldr	r3, [pc, #480]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	4975      	ldr	r1, [pc, #468]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d010      	beq.n	8006be8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	4b70      	ldr	r3, [pc, #448]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d908      	bls.n	8006be8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	496a      	ldr	r1, [pc, #424]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d010      	beq.n	8006c16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	4b64      	ldr	r3, [pc, #400]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d908      	bls.n	8006c16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c04:	4b61      	ldr	r3, [pc, #388]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	495e      	ldr	r1, [pc, #376]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69da      	ldr	r2, [r3, #28]
 8006c26:	4b59      	ldr	r3, [pc, #356]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d908      	bls.n	8006c44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c32:	4b56      	ldr	r3, [pc, #344]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	4953      	ldr	r1, [pc, #332]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	4b4d      	ldr	r3, [pc, #308]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d908      	bls.n	8006c72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c60:	4b4a      	ldr	r3, [pc, #296]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f023 020f 	bic.w	r2, r3, #15
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4947      	ldr	r1, [pc, #284]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d055      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c7e:	4b43      	ldr	r3, [pc, #268]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4940      	ldr	r1, [pc, #256]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d107      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c98:	4b3c      	ldr	r3, [pc, #240]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d121      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0f6      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cb0:	4b36      	ldr	r3, [pc, #216]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d115      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0ea      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d107      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cc8:	4b30      	ldr	r3, [pc, #192]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0de      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0d6      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ce8:	4b28      	ldr	r3, [pc, #160]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f023 0207 	bic.w	r2, r3, #7
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	4925      	ldr	r1, [pc, #148]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7fd f913 	bl	8003f24 <HAL_GetTick>
 8006cfe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d02:	f7fd f90f 	bl	8003f24 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e0be      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d18:	4b1c      	ldr	r3, [pc, #112]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d1eb      	bne.n	8006d02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d208      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d46:	4b11      	ldr	r3, [pc, #68]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f023 020f 	bic.w	r2, r3, #15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	490e      	ldr	r1, [pc, #56]	@ (8006d8c <HAL_RCC_ClockConfig+0x244>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d58:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d214      	bcs.n	8006d90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f023 020f 	bic.w	r2, r3, #15
 8006d6e:	4906      	ldr	r1, [pc, #24]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	4b04      	ldr	r3, [pc, #16]	@ (8006d88 <HAL_RCC_ClockConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d005      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e086      	b.n	8006e96 <HAL_RCC_ClockConfig+0x34e>
 8006d88:	52002000 	.word	0x52002000
 8006d8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d208      	bcs.n	8006dbe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dac:	4b3c      	ldr	r3, [pc, #240]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	4939      	ldr	r1, [pc, #228]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d010      	beq.n	8006dec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	4b34      	ldr	r3, [pc, #208]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d208      	bcs.n	8006dec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dda:	4b31      	ldr	r3, [pc, #196]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	492e      	ldr	r1, [pc, #184]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	4b28      	ldr	r3, [pc, #160]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d208      	bcs.n	8006e1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e08:	4b25      	ldr	r3, [pc, #148]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	4922      	ldr	r1, [pc, #136]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d010      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d208      	bcs.n	8006e48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e36:	4b1a      	ldr	r3, [pc, #104]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4917      	ldr	r1, [pc, #92]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e48:	f000 f834 	bl	8006eb4 <HAL_RCC_GetSysClockFreq>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	4b14      	ldr	r3, [pc, #80]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	f003 030f 	and.w	r3, r3, #15
 8006e58:	4912      	ldr	r1, [pc, #72]	@ (8006ea4 <HAL_RCC_ClockConfig+0x35c>)
 8006e5a:	5ccb      	ldrb	r3, [r1, r3]
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	fa22 f303 	lsr.w	r3, r2, r3
 8006e64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea0 <HAL_RCC_ClockConfig+0x358>)
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea4 <HAL_RCC_ClockConfig+0x35c>)
 8006e70:	5cd3      	ldrb	r3, [r2, r3]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ea8 <HAL_RCC_ClockConfig+0x360>)
 8006e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e80:	4a0a      	ldr	r2, [pc, #40]	@ (8006eac <HAL_RCC_ClockConfig+0x364>)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e86:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb0 <HAL_RCC_ClockConfig+0x368>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fb fd64 	bl	8002958 <HAL_InitTick>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	0801406c 	.word	0x0801406c
 8006ea8:	24000004 	.word	0x24000004
 8006eac:	24000000 	.word	0x24000000
 8006eb0:	24000010 	.word	0x24000010

08006eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b089      	sub	sp, #36	@ 0x24
 8006eb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eba:	4bb3      	ldr	r3, [pc, #716]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ec2:	2b18      	cmp	r3, #24
 8006ec4:	f200 8155 	bhi.w	8007172 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006f35 	.word	0x08006f35
 8006ed4:	08007173 	.word	0x08007173
 8006ed8:	08007173 	.word	0x08007173
 8006edc:	08007173 	.word	0x08007173
 8006ee0:	08007173 	.word	0x08007173
 8006ee4:	08007173 	.word	0x08007173
 8006ee8:	08007173 	.word	0x08007173
 8006eec:	08007173 	.word	0x08007173
 8006ef0:	08006f5b 	.word	0x08006f5b
 8006ef4:	08007173 	.word	0x08007173
 8006ef8:	08007173 	.word	0x08007173
 8006efc:	08007173 	.word	0x08007173
 8006f00:	08007173 	.word	0x08007173
 8006f04:	08007173 	.word	0x08007173
 8006f08:	08007173 	.word	0x08007173
 8006f0c:	08007173 	.word	0x08007173
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08007173 	.word	0x08007173
 8006f18:	08007173 	.word	0x08007173
 8006f1c:	08007173 	.word	0x08007173
 8006f20:	08007173 	.word	0x08007173
 8006f24:	08007173 	.word	0x08007173
 8006f28:	08007173 	.word	0x08007173
 8006f2c:	08007173 	.word	0x08007173
 8006f30:	08006f67 	.word	0x08006f67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f34:	4b94      	ldr	r3, [pc, #592]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f40:	4b91      	ldr	r3, [pc, #580]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	08db      	lsrs	r3, r3, #3
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	4a90      	ldr	r2, [pc, #576]	@ (800718c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006f52:	e111      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f54:	4b8d      	ldr	r3, [pc, #564]	@ (800718c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f56:	61bb      	str	r3, [r7, #24]
    break;
 8006f58:	e10e      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f5a:	4b8d      	ldr	r3, [pc, #564]	@ (8007190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f5c:	61bb      	str	r3, [r7, #24]
    break;
 8006f5e:	e10b      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f60:	4b8c      	ldr	r3, [pc, #560]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f62:	61bb      	str	r3, [r7, #24]
    break;
 8006f64:	e108      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f66:	4b88      	ldr	r3, [pc, #544]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f70:	4b85      	ldr	r3, [pc, #532]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f7c:	4b82      	ldr	r3, [pc, #520]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f86:	4b80      	ldr	r3, [pc, #512]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f8a:	08db      	lsrs	r3, r3, #3
 8006f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80e1 	beq.w	800716c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	f000 8083 	beq.w	80070b8 <HAL_RCC_GetSysClockFreq+0x204>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	f200 80a1 	bhi.w	80070fc <HAL_RCC_GetSysClockFreq+0x248>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x114>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d056      	beq.n	8007074 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fc6:	e099      	b.n	80070fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d02d      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	4a6b      	ldr	r2, [pc, #428]	@ (800718c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b62      	ldr	r3, [pc, #392]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007012:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800702e:	e087      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800719c <HAL_RCC_GetSysClockFreq+0x2e8>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b51      	ldr	r3, [pc, #324]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a02 	vldr	s12, [r7, #8]
 8007056:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007072:	e065      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80071a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b40      	ldr	r3, [pc, #256]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a02 	vldr	s12, [r7, #8]
 800709a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b6:	e043      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80071a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a02 	vldr	s12, [r7, #8]
 80070de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fa:	e021      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80071a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b1e      	ldr	r3, [pc, #120]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007122:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007140:	4b11      	ldr	r3, [pc, #68]	@ (8007188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007144:	0a5b      	lsrs	r3, r3, #9
 8007146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800714a:	3301      	adds	r3, #1
 800714c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007158:	edd7 6a07 	vldr	s13, [r7, #28]
 800715c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007164:	ee17 3a90 	vmov	r3, s15
 8007168:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800716a:	e005      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	61bb      	str	r3, [r7, #24]
    break;
 8007170:	e002      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007172:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007174:	61bb      	str	r3, [r7, #24]
    break;
 8007176:	bf00      	nop
  }

  return sysclockfreq;
 8007178:	69bb      	ldr	r3, [r7, #24]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3724      	adds	r7, #36	@ 0x24
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	58024400 	.word	0x58024400
 800718c:	03d09000 	.word	0x03d09000
 8007190:	003d0900 	.word	0x003d0900
 8007194:	007a1200 	.word	0x007a1200
 8007198:	46000000 	.word	0x46000000
 800719c:	4c742400 	.word	0x4c742400
 80071a0:	4a742400 	.word	0x4a742400
 80071a4:	4af42400 	.word	0x4af42400

080071a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071ae:	f7ff fe81 	bl	8006eb4 <HAL_RCC_GetSysClockFreq>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b10      	ldr	r3, [pc, #64]	@ (80071f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	490f      	ldr	r1, [pc, #60]	@ (80071fc <HAL_RCC_GetHCLKFreq+0x54>)
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071cc:	4b0a      	ldr	r3, [pc, #40]	@ (80071f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <HAL_RCC_GetHCLKFreq+0x54>)
 80071d6:	5cd3      	ldrb	r3, [r2, r3]
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	fa22 f303 	lsr.w	r3, r2, r3
 80071e2:	4a07      	ldr	r2, [pc, #28]	@ (8007200 <HAL_RCC_GetHCLKFreq+0x58>)
 80071e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071e6:	4a07      	ldr	r2, [pc, #28]	@ (8007204 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071ec:	4b04      	ldr	r3, [pc, #16]	@ (8007200 <HAL_RCC_GetHCLKFreq+0x58>)
 80071ee:	681b      	ldr	r3, [r3, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	58024400 	.word	0x58024400
 80071fc:	0801406c 	.word	0x0801406c
 8007200:	24000004 	.word	0x24000004
 8007204:	24000000 	.word	0x24000000

08007208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800720c:	f7ff ffcc 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 8007210:	4602      	mov	r2, r0
 8007212:	4b06      	ldr	r3, [pc, #24]	@ (800722c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	4904      	ldr	r1, [pc, #16]	@ (8007230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800721e:	5ccb      	ldrb	r3, [r1, r3]
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007228:	4618      	mov	r0, r3
 800722a:	bd80      	pop	{r7, pc}
 800722c:	58024400 	.word	0x58024400
 8007230:	0801406c 	.word	0x0801406c

08007234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007238:	f7ff ffb6 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	4904      	ldr	r1, [pc, #16]	@ (800725c <HAL_RCC_GetPCLK2Freq+0x28>)
 800724a:	5ccb      	ldrb	r3, [r1, r3]
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	58024400 	.word	0x58024400
 800725c:	0801406c 	.word	0x0801406c

08007260 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	223f      	movs	r2, #63	@ 0x3f
 800726e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007270:	4b1a      	ldr	r3, [pc, #104]	@ (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f003 0207 	and.w	r2, r3, #7
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800727c:	4b17      	ldr	r3, [pc, #92]	@ (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007288:	4b14      	ldr	r3, [pc, #80]	@ (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007294:	4b11      	ldr	r3, [pc, #68]	@ (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80072a0:	4b0e      	ldr	r3, [pc, #56]	@ (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80072ac:	4b0b      	ldr	r3, [pc, #44]	@ (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80072b8:	4b08      	ldr	r3, [pc, #32]	@ (80072dc <HAL_RCC_GetClockConfig+0x7c>)
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072c4:	4b06      	ldr	r3, [pc, #24]	@ (80072e0 <HAL_RCC_GetClockConfig+0x80>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	58024400 	.word	0x58024400
 80072e0:	52002000 	.word	0x52002000

080072e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072f0:	2300      	movs	r3, #0
 80072f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d03f      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007304:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007308:	d02a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800730a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800730e:	d824      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007314:	d018      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800731a:	d81e      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007324:	d007      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007326:	e018      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007328:	4ba3      	ldr	r3, [pc, #652]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800732a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732c:	4aa2      	ldr	r2, [pc, #648]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800732e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007332:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007334:	e015      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3304      	adds	r3, #4
 800733a:	2102      	movs	r1, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f001 f9d5 	bl	80086ec <RCCEx_PLL2_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007346:	e00c      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3324      	adds	r3, #36	@ 0x24
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fa7e 	bl	8008850 <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	75fb      	strb	r3, [r7, #23]
      break;
 800735e:	e000      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007368:	4b93      	ldr	r3, [pc, #588]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800736a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800736c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007374:	4990      	ldr	r1, [pc, #576]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007376:	4313      	orrs	r3, r2
 8007378:	650b      	str	r3, [r1, #80]	@ 0x50
 800737a:	e001      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d03d      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007390:	2b04      	cmp	r3, #4
 8007392:	d826      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007394:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073b1 	.word	0x080073b1
 80073a0:	080073bf 	.word	0x080073bf
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073e9 	.word	0x080073e9
 80073ac:	080073e9 	.word	0x080073e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073b0:	4b81      	ldr	r3, [pc, #516]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	4a80      	ldr	r2, [pc, #512]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073bc:	e015      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 f991 	bl	80086ec <RCCEx_PLL2_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073ce:	e00c      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3324      	adds	r3, #36	@ 0x24
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fa3a 	bl	8008850 <RCCEx_PLL3_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	75fb      	strb	r3, [r7, #23]
      break;
 80073e6:	e000      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80073e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073f0:	4b71      	ldr	r3, [pc, #452]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f4:	f023 0207 	bic.w	r2, r3, #7
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fc:	496e      	ldr	r1, [pc, #440]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	650b      	str	r3, [r1, #80]	@ 0x50
 8007402:	e001      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007410:	2b00      	cmp	r3, #0
 8007412:	d042      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800741c:	d02b      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800741e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007422:	d825      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007424:	2bc0      	cmp	r3, #192	@ 0xc0
 8007426:	d028      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007428:	2bc0      	cmp	r3, #192	@ 0xc0
 800742a:	d821      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800742c:	2b80      	cmp	r3, #128	@ 0x80
 800742e:	d016      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007430:	2b80      	cmp	r3, #128	@ 0x80
 8007432:	d81d      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007438:	2b40      	cmp	r3, #64	@ 0x40
 800743a:	d007      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800743c:	e018      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743e:	4b5e      	ldr	r3, [pc, #376]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	4a5d      	ldr	r2, [pc, #372]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007448:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800744a:	e017      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f001 f94a 	bl	80086ec <RCCEx_PLL2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800745c:	e00e      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3324      	adds	r3, #36	@ 0x24
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f001 f9f3 	bl	8008850 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800746e:	e005      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	e002      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800747a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007482:	4b4d      	ldr	r3, [pc, #308]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007486:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748e:	494a      	ldr	r1, [pc, #296]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007490:	4313      	orrs	r3, r2
 8007492:	650b      	str	r3, [r1, #80]	@ 0x50
 8007494:	e001      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d049      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074b0:	d030      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80074b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074b6:	d82a      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80074bc:	d02c      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80074be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80074c2:	d824      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074c8:	d018      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80074ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ce:	d81e      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80074d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074d8:	d007      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80074da:	e018      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074dc:	4b36      	ldr	r3, [pc, #216]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	4a35      	ldr	r2, [pc, #212]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074e8:	e017      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3304      	adds	r3, #4
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 f8fb 	bl	80086ec <RCCEx_PLL2_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074fa:	e00e      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3324      	adds	r3, #36	@ 0x24
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f001 f9a4 	bl	8008850 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800750c:	e005      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	75fb      	strb	r3, [r7, #23]
      break;
 8007512:	e002      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007520:	4b25      	ldr	r3, [pc, #148]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007524:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800752e:	4922      	ldr	r1, [pc, #136]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007530:	4313      	orrs	r3, r2
 8007532:	658b      	str	r3, [r1, #88]	@ 0x58
 8007534:	e001      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007542:	2b00      	cmp	r3, #0
 8007544:	d04b      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800754c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007550:	d030      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007556:	d82a      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007558:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800755c:	d02e      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800755e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007562:	d824      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007568:	d018      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800756a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800756e:	d81e      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007578:	d007      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800757a:	e018      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757c:	4b0e      	ldr	r3, [pc, #56]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	4a0d      	ldr	r2, [pc, #52]	@ (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007586:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007588:	e019      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3304      	adds	r3, #4
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f8ab 	bl	80086ec <RCCEx_PLL2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800759a:	e010      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3324      	adds	r3, #36	@ 0x24
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 f954 	bl	8008850 <RCCEx_PLL3_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ac:	e007      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
      break;
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80075b4:	bf00      	nop
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80075b8:	58024400 	.word	0x58024400
      break;
 80075bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075c4:	4b99      	ldr	r3, [pc, #612]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075d2:	4996      	ldr	r1, [pc, #600]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	658b      	str	r3, [r1, #88]	@ 0x58
 80075d8:	e001      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d032      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ee:	2b30      	cmp	r3, #48	@ 0x30
 80075f0:	d01c      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80075f2:	2b30      	cmp	r3, #48	@ 0x30
 80075f4:	d817      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d00c      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d813      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d016      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007602:	2b10      	cmp	r3, #16
 8007604:	d10f      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007606:	4b89      	ldr	r3, [pc, #548]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	4a88      	ldr	r2, [pc, #544]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800760c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007610:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007612:	e00e      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	2102      	movs	r1, #2
 800761a:	4618      	mov	r0, r3
 800761c:	f001 f866 	bl	80086ec <RCCEx_PLL2_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007624:	e005      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	75fb      	strb	r3, [r7, #23]
      break;
 800762a:	e002      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800762c:	bf00      	nop
 800762e:	e000      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007638:	4b7c      	ldr	r3, [pc, #496]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800763a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800763c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007644:	4979      	ldr	r1, [pc, #484]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007646:	4313      	orrs	r3, r2
 8007648:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800764a:	e001      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d047      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007660:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007664:	d030      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800766a:	d82a      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800766c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007670:	d02c      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007672:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007676:	d824      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800767c:	d018      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800767e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007682:	d81e      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800768c:	d007      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800768e:	e018      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007690:	4b66      	ldr	r3, [pc, #408]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	4a65      	ldr	r2, [pc, #404]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800769a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800769c:	e017      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3304      	adds	r3, #4
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 f821 	bl	80086ec <RCCEx_PLL2_Config>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076ae:	e00e      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3324      	adds	r3, #36	@ 0x24
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f8ca 	bl	8008850 <RCCEx_PLL3_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076c0:	e005      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
      break;
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80076cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d109      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80076d4:	4b55      	ldr	r3, [pc, #340]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e0:	4952      	ldr	r1, [pc, #328]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	650b      	str	r3, [r1, #80]	@ 0x50
 80076e6:	e001      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d049      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007700:	d02e      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007702:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007706:	d828      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007708:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800770c:	d02a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800770e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007712:	d822      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007714:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007718:	d026      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800771a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800771e:	d81c      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007724:	d010      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800772a:	d816      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01d      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007734:	d111      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3304      	adds	r3, #4
 800773a:	2101      	movs	r1, #1
 800773c:	4618      	mov	r0, r3
 800773e:	f000 ffd5 	bl	80086ec <RCCEx_PLL2_Config>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007746:	e012      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3324      	adds	r3, #36	@ 0x24
 800774c:	2101      	movs	r1, #1
 800774e:	4618      	mov	r0, r3
 8007750:	f001 f87e 	bl	8008850 <RCCEx_PLL3_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007758:	e009      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
      break;
 800775e:	e006      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007760:	bf00      	nop
 8007762:	e004      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007764:	bf00      	nop
 8007766:	e002      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007768:	bf00      	nop
 800776a:	e000      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800776c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007774:	4b2d      	ldr	r3, [pc, #180]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007778:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007780:	492a      	ldr	r1, [pc, #168]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007782:	4313      	orrs	r3, r2
 8007784:	650b      	str	r3, [r1, #80]	@ 0x50
 8007786:	e001      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d04d      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800779e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077a2:	d02e      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80077a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077a8:	d828      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ae:	d02a      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80077b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b4:	d822      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077ba:	d026      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80077bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077c0:	d81c      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c6:	d010      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 80077c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077cc:	d816      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d01d      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d6:	d111      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 ff84 	bl	80086ec <RCCEx_PLL2_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077e8:	e012      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3324      	adds	r3, #36	@ 0x24
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f82d 	bl	8008850 <RCCEx_PLL3_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077fa:	e009      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007800:	e006      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007802:	bf00      	nop
 8007804:	e004      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800780e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10c      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007816:	4b05      	ldr	r3, [pc, #20]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781a:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007824:	4901      	ldr	r1, [pc, #4]	@ (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007826:	4313      	orrs	r3, r2
 8007828:	658b      	str	r3, [r1, #88]	@ 0x58
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800782c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d02f      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007848:	d00e      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800784a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800784e:	d814      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d015      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007858:	d10f      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785a:	4baf      	ldr	r3, [pc, #700]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	4aae      	ldr	r2, [pc, #696]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007864:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007866:	e00c      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	2101      	movs	r1, #1
 800786e:	4618      	mov	r0, r3
 8007870:	f000 ff3c 	bl	80086ec <RCCEx_PLL2_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
      break;
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007888:	4ba3      	ldr	r3, [pc, #652]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800788a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007894:	49a0      	ldr	r1, [pc, #640]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007896:	4313      	orrs	r3, r2
 8007898:	650b      	str	r3, [r1, #80]	@ 0x50
 800789a:	e001      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d032      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d81b      	bhi.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80078b4:	a201      	add	r2, pc, #4	@ (adr r2, 80078bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078f3 	.word	0x080078f3
 80078c0:	080078cd 	.word	0x080078cd
 80078c4:	080078db 	.word	0x080078db
 80078c8:	080078f3 	.word	0x080078f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b92      	ldr	r3, [pc, #584]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	4a91      	ldr	r2, [pc, #580]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078d8:	e00c      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	2102      	movs	r1, #2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 ff03 	bl	80086ec <RCCEx_PLL2_Config>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078ea:	e003      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
      break;
 80078f0:	e000      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80078f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078fa:	4b87      	ldr	r3, [pc, #540]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fe:	f023 0203 	bic.w	r2, r3, #3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007906:	4984      	ldr	r1, [pc, #528]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007908:	4313      	orrs	r3, r2
 800790a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8086 	beq.w	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007920:	4b7e      	ldr	r3, [pc, #504]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a7d      	ldr	r2, [pc, #500]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800792a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800792c:	f7fc fafa 	bl	8003f24 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007932:	e009      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007934:	f7fc faf6 	bl	8003f24 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b64      	cmp	r3, #100	@ 0x64
 8007940:	d902      	bls.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	75fb      	strb	r3, [r7, #23]
        break;
 8007946:	e005      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007948:	4b74      	ldr	r3, [pc, #464]	@ (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0ef      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d166      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800795a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800795c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007964:	4053      	eors	r3, r2
 8007966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800796a:	2b00      	cmp	r3, #0
 800796c:	d013      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800796e:	4b6a      	ldr	r3, [pc, #424]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007976:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007978:	4b67      	ldr	r3, [pc, #412]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800797a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797c:	4a66      	ldr	r2, [pc, #408]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800797e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007982:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007984:	4b64      	ldr	r3, [pc, #400]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007988:	4a63      	ldr	r2, [pc, #396]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800798a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800798e:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007990:	4a61      	ldr	r2, [pc, #388]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800799c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a0:	d115      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a2:	f7fc fabf 	bl	8003f24 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079a8:	e00b      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079aa:	f7fc fabb 	bl	8003f24 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d902      	bls.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	75fb      	strb	r3, [r7, #23]
            break;
 80079c0:	e005      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079c2:	4b55      	ldr	r3, [pc, #340]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0ed      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d126      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80079e4:	4b4c      	ldr	r3, [pc, #304]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079f2:	0919      	lsrs	r1, r3, #4
 80079f4:	4b4a      	ldr	r3, [pc, #296]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80079f6:	400b      	ands	r3, r1
 80079f8:	4947      	ldr	r1, [pc, #284]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	610b      	str	r3, [r1, #16]
 80079fe:	e005      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007a00:	4b45      	ldr	r3, [pc, #276]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	4a44      	ldr	r2, [pc, #272]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a0a:	6113      	str	r3, [r2, #16]
 8007a0c:	4b42      	ldr	r3, [pc, #264]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a1a:	493f      	ldr	r1, [pc, #252]	@ (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	670b      	str	r3, [r1, #112]	@ 0x70
 8007a20:	e004      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	75bb      	strb	r3, [r7, #22]
 8007a26:	e001      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8085 	beq.w	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a3e:	2b28      	cmp	r3, #40	@ 0x28
 8007a40:	d866      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007a42:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007b25 	.word	0x08007b25
 8007a4c:	08007b11 	.word	0x08007b11
 8007a50:	08007b11 	.word	0x08007b11
 8007a54:	08007b11 	.word	0x08007b11
 8007a58:	08007b11 	.word	0x08007b11
 8007a5c:	08007b11 	.word	0x08007b11
 8007a60:	08007b11 	.word	0x08007b11
 8007a64:	08007b11 	.word	0x08007b11
 8007a68:	08007aed 	.word	0x08007aed
 8007a6c:	08007b11 	.word	0x08007b11
 8007a70:	08007b11 	.word	0x08007b11
 8007a74:	08007b11 	.word	0x08007b11
 8007a78:	08007b11 	.word	0x08007b11
 8007a7c:	08007b11 	.word	0x08007b11
 8007a80:	08007b11 	.word	0x08007b11
 8007a84:	08007b11 	.word	0x08007b11
 8007a88:	08007aff 	.word	0x08007aff
 8007a8c:	08007b11 	.word	0x08007b11
 8007a90:	08007b11 	.word	0x08007b11
 8007a94:	08007b11 	.word	0x08007b11
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007b11 	.word	0x08007b11
 8007aa8:	08007b25 	.word	0x08007b25
 8007aac:	08007b11 	.word	0x08007b11
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007b11 	.word	0x08007b11
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007b11 	.word	0x08007b11
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007b11 	.word	0x08007b11
 8007ad0:	08007b11 	.word	0x08007b11
 8007ad4:	08007b11 	.word	0x08007b11
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b25 	.word	0x08007b25
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	2101      	movs	r1, #1
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fdfa 	bl	80086ec <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007afc:	e013      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3324      	adds	r3, #36	@ 0x24
 8007b02:	2101      	movs	r1, #1
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fea3 	bl	8008850 <RCCEx_PLL3_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	e007      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007b16:	bf00      	nop
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	58024800 	.word	0x58024800
 8007b20:	00ffffcf 	.word	0x00ffffcf
      break;
 8007b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d109      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b2c:	4b96      	ldr	r3, [pc, #600]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b30:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b38:	4993      	ldr	r1, [pc, #588]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	654b      	str	r3, [r1, #84]	@ 0x54
 8007b3e:	e001      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d038      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d821      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007b58:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5e:	bf00      	nop
 8007b60:	08007ba3 	.word	0x08007ba3
 8007b64:	08007b79 	.word	0x08007b79
 8007b68:	08007b8b 	.word	0x08007b8b
 8007b6c:	08007ba3 	.word	0x08007ba3
 8007b70:	08007ba3 	.word	0x08007ba3
 8007b74:	08007ba3 	.word	0x08007ba3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fdb4 	bl	80086ec <RCCEx_PLL2_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b88:	e00c      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3324      	adds	r3, #36	@ 0x24
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fe5d 	bl	8008850 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b9a:	e003      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007baa:	4b77      	ldr	r3, [pc, #476]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bae:	f023 0207 	bic.w	r2, r3, #7
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bb6:	4974      	ldr	r1, [pc, #464]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	654b      	str	r3, [r1, #84]	@ 0x54
 8007bbc:	e001      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03a      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd4:	2b05      	cmp	r3, #5
 8007bd6:	d821      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c23 	.word	0x08007c23
 8007be4:	08007bf9 	.word	0x08007bf9
 8007be8:	08007c0b 	.word	0x08007c0b
 8007bec:	08007c23 	.word	0x08007c23
 8007bf0:	08007c23 	.word	0x08007c23
 8007bf4:	08007c23 	.word	0x08007c23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fd74 	bl	80086ec <RCCEx_PLL2_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c08:	e00c      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3324      	adds	r3, #36	@ 0x24
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fe1d 	bl	8008850 <RCCEx_PLL3_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	e000      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c2a:	4b57      	ldr	r3, [pc, #348]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c2e:	f023 0207 	bic.w	r2, r3, #7
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c38:	4953      	ldr	r1, [pc, #332]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	658b      	str	r3, [r1, #88]	@ 0x58
 8007c3e:	e001      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d04b      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c5a:	d02e      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c60:	d828      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c66:	d02a      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6c:	d822      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c72:	d026      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007c74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c78:	d81c      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7e:	d010      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c84:	d816      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01d      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c8e:	d111      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3304      	adds	r3, #4
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fd28 	bl	80086ec <RCCEx_PLL2_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ca0:	e012      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3324      	adds	r3, #36	@ 0x24
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fdd1 	bl	8008850 <RCCEx_PLL3_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cb2:	e009      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb8:	e006      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cba:	bf00      	nop
 8007cbc:	e004      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cce:	4b2e      	ldr	r3, [pc, #184]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd2:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cdc:	492a      	ldr	r1, [pc, #168]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	654b      	str	r3, [r1, #84]	@ 0x54
 8007ce2:	e001      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d04d      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cfa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cfe:	d02e      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007d00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d04:	d828      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d0a:	d02a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d10:	d822      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d16:	d026      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007d18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d1c:	d81c      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d22:	d010      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d28:	d816      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01d      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d32:	d111      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fcd6 	bl	80086ec <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d44:	e012      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3324      	adds	r3, #36	@ 0x24
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fd7f 	bl	8008850 <RCCEx_PLL3_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d56:	e009      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5c:	e006      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d5e:	bf00      	nop
 8007d60:	e004      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d62:	bf00      	nop
 8007d64:	e002      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d66:	bf00      	nop
 8007d68:	e000      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10c      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d72:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d76:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d80:	4901      	ldr	r1, [pc, #4]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	658b      	str	r3, [r1, #88]	@ 0x58
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d04b      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007da2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007da6:	d02e      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007da8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007dac:	d828      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007db2:	d02a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007db8:	d822      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007dbe:	d026      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007dc0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007dc4:	d81c      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dca:	d010      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dd0:	d816      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01d      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dda:	d111      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fc82 	bl	80086ec <RCCEx_PLL2_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dec:	e012      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3324      	adds	r3, #36	@ 0x24
 8007df2:	2102      	movs	r1, #2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fd2b 	bl	8008850 <RCCEx_PLL3_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dfe:	e009      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
      break;
 8007e04:	e006      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e06:	bf00      	nop
 8007e08:	e004      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e0a:	bf00      	nop
 8007e0c:	e002      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e000      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e1a:	4b9d      	ldr	r3, [pc, #628]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e28:	4999      	ldr	r1, [pc, #612]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	658b      	str	r3, [r1, #88]	@ 0x58
 8007e2e:	e001      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e4a:	d10a      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3324      	adds	r3, #36	@ 0x24
 8007e50:	2102      	movs	r1, #2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fcfc 	bl	8008850 <RCCEx_PLL3_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e62:	4b8b      	ldr	r3, [pc, #556]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e66:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e70:	4987      	ldr	r1, [pc, #540]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0310 	and.w	r3, r3, #16
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01a      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e8c:	d10a      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3324      	adds	r3, #36	@ 0x24
 8007e92:	2102      	movs	r1, #2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fcdb 	bl	8008850 <RCCEx_PLL3_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eb2:	4977      	ldr	r1, [pc, #476]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d034      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ece:	d01d      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ed4:	d817      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ede:	d009      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007ee0:	e011      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fbff 	bl	80086ec <RCCEx_PLL2_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ef2:	e00c      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3324      	adds	r3, #36	@ 0x24
 8007ef8:	2102      	movs	r1, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fca8 	bl	8008850 <RCCEx_PLL3_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f04:	e003      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0a:	e000      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f14:	4b5e      	ldr	r3, [pc, #376]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f22:	495b      	ldr	r1, [pc, #364]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	658b      	str	r3, [r1, #88]	@ 0x58
 8007f28:	e001      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d033      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f44:	d01c      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007f46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f4a:	d816      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007f4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f50:	d003      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007f52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f56:	d007      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007f58:	e00f      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f66:	e00c      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3324      	adds	r3, #36	@ 0x24
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fc6e 	bl	8008850 <RCCEx_PLL3_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f78:	e003      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7e:	e000      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f88:	4b41      	ldr	r3, [pc, #260]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f96:	493e      	ldr	r1, [pc, #248]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	654b      	str	r3, [r1, #84]	@ 0x54
 8007f9c:	e001      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d029      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fba:	d007      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007fbc:	e00f      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbe:	4b34      	ldr	r3, [pc, #208]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc2:	4a33      	ldr	r2, [pc, #204]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fca:	e00b      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fb8a 	bl	80086ec <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fdc:	e002      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fea:	4b29      	ldr	r3, [pc, #164]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff6:	4926      	ldr	r1, [pc, #152]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8007ffc:	e001      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3324      	adds	r3, #36	@ 0x24
 8008012:	2102      	movs	r1, #2
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fc1b 	bl	8008850 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d033      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008038:	d017      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800803a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800803e:	d811      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008044:	d013      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804a:	d80b      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d010      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008054:	d106      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008056:	4b0e      	ldr	r3, [pc, #56]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805a:	4a0d      	ldr	r2, [pc, #52]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800805c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008060:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008062:	e007      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
      break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10c      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800807a:	4b05      	ldr	r3, [pc, #20]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800807c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008086:	4902      	ldr	r1, [pc, #8]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008088:	4313      	orrs	r3, r2
 800808a:	654b      	str	r3, [r1, #84]	@ 0x54
 800808c:	e004      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d008      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080a4:	4b31      	ldr	r3, [pc, #196]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080b0:	492e      	ldr	r1, [pc, #184]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	650b      	str	r3, [r1, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80080c2:	4b2a      	ldr	r3, [pc, #168]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080d0:	4926      	ldr	r1, [pc, #152]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080e2:	4b22      	ldr	r3, [pc, #136]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080ee:	491f      	ldr	r1, [pc, #124]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00d      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008100:	4b1a      	ldr	r3, [pc, #104]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	4a19      	ldr	r2, [pc, #100]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008106:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800810a:	6113      	str	r3, [r2, #16]
 800810c:	4b17      	ldr	r3, [pc, #92]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008116:	4915      	ldr	r1, [pc, #84]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008118:	4313      	orrs	r3, r2
 800811a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	da08      	bge.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008124:	4b11      	ldr	r3, [pc, #68]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008128:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008130:	490e      	ldr	r1, [pc, #56]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008132:	4313      	orrs	r3, r2
 8008134:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008142:	4b0a      	ldr	r3, [pc, #40]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008146:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008150:	4906      	ldr	r1, [pc, #24]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008152:	4313      	orrs	r3, r2
 8008154:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 8008156:	7dbb      	ldrb	r3, [r7, #22]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	e000      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	58024400 	.word	0x58024400

08008170 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008174:	f7ff f818 	bl	80071a8 <HAL_RCC_GetHCLKFreq>
 8008178:	4602      	mov	r2, r0
 800817a:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	091b      	lsrs	r3, r3, #4
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	4904      	ldr	r1, [pc, #16]	@ (8008198 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008186:	5ccb      	ldrb	r3, [r1, r3]
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008190:	4618      	mov	r0, r3
 8008192:	bd80      	pop	{r7, pc}
 8008194:	58024400 	.word	0x58024400
 8008198:	0801406c 	.word	0x0801406c

0800819c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800819c:	b480      	push	{r7}
 800819e:	b089      	sub	sp, #36	@ 0x24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081a4:	4ba1      	ldr	r3, [pc, #644]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081ae:	4b9f      	ldr	r3, [pc, #636]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b2:	0b1b      	lsrs	r3, r3, #12
 80081b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081ba:	4b9c      	ldr	r3, [pc, #624]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	091b      	lsrs	r3, r3, #4
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081c6:	4b99      	ldr	r3, [pc, #612]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ca:	08db      	lsrs	r3, r3, #3
 80081cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8111 	beq.w	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	f000 8083 	beq.w	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	f200 80a1 	bhi.w	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d056      	beq.n	80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008206:	e099      	b.n	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008208:	4b88      	ldr	r3, [pc, #544]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b00      	cmp	r3, #0
 8008212:	d02d      	beq.n	8008270 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008214:	4b85      	ldr	r3, [pc, #532]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	08db      	lsrs	r3, r3, #3
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	4a84      	ldr	r2, [pc, #528]	@ (8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
 8008224:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823e:	4b7b      	ldr	r3, [pc, #492]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008252:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800826e:	e087      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800827e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008282:	4b6a      	ldr	r3, [pc, #424]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008292:	ed97 6a03 	vldr	s12, [r7, #12]
 8008296:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800829a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082b2:	e065      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800843c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c6:	4b59      	ldr	r3, [pc, #356]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f6:	e043      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830a:	4b48      	ldr	r3, [pc, #288]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800830c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831a:	ed97 6a03 	vldr	s12, [r7, #12]
 800831e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800832e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800833a:	e021      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800843c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800834a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834e:	4b37      	ldr	r3, [pc, #220]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008362:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800837e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008380:	4b2a      	ldr	r3, [pc, #168]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008384:	0a5b      	lsrs	r3, r3, #9
 8008386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800839a:	edd7 6a07 	vldr	s13, [r7, #28]
 800839e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a6:	ee17 2a90 	vmov	r2, s15
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083ae:	4b1f      	ldr	r3, [pc, #124]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d4:	ee17 2a90 	vmov	r2, s15
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80083dc:	4b13      	ldr	r3, [pc, #76]	@ (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	0e1b      	lsrs	r3, r3, #24
 80083e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008402:	ee17 2a90 	vmov	r2, s15
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800840a:	e008      	b.n	800841e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	609a      	str	r2, [r3, #8]
}
 800841e:	bf00      	nop
 8008420:	3724      	adds	r7, #36	@ 0x24
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	58024400 	.word	0x58024400
 8008430:	03d09000 	.word	0x03d09000
 8008434:	46000000 	.word	0x46000000
 8008438:	4c742400 	.word	0x4c742400
 800843c:	4a742400 	.word	0x4a742400
 8008440:	4af42400 	.word	0x4af42400

08008444 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008444:	b480      	push	{r7}
 8008446:	b089      	sub	sp, #36	@ 0x24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800844c:	4ba1      	ldr	r3, [pc, #644]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	f003 0303 	and.w	r3, r3, #3
 8008454:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008456:	4b9f      	ldr	r3, [pc, #636]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845a:	0d1b      	lsrs	r3, r3, #20
 800845c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008460:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008462:	4b9c      	ldr	r3, [pc, #624]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800846e:	4b99      	ldr	r3, [pc, #612]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008472:	08db      	lsrs	r3, r3, #3
 8008474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	fb02 f303 	mul.w	r3, r2, r3
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008486:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8111 	beq.w	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	2b02      	cmp	r3, #2
 8008496:	f000 8083 	beq.w	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b02      	cmp	r3, #2
 800849e:	f200 80a1 	bhi.w	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d056      	beq.n	800855c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084ae:	e099      	b.n	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084b0:	4b88      	ldr	r3, [pc, #544]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d02d      	beq.n	8008518 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084bc:	4b85      	ldr	r3, [pc, #532]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	08db      	lsrs	r3, r3, #3
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	4a84      	ldr	r2, [pc, #528]	@ (80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e6:	4b7b      	ldr	r3, [pc, #492]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800850a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008512:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008516:	e087      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800852a:	4b6a      	ldr	r3, [pc, #424]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800853a:	ed97 6a03 	vldr	s12, [r7, #12]
 800853e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800854a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800854e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800855a:	e065      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008566:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800856a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856e:	4b59      	ldr	r3, [pc, #356]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008582:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800859e:	e043      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b2:	4b48      	ldr	r3, [pc, #288]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085e2:	e021      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f6:	4b37      	ldr	r3, [pc, #220]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008606:	ed97 6a03 	vldr	s12, [r7, #12]
 800860a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800860e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800861a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008626:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008628:	4b2a      	ldr	r3, [pc, #168]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800862a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862c:	0a5b      	lsrs	r3, r3, #9
 800862e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800863e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008642:	edd7 6a07 	vldr	s13, [r7, #28]
 8008646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800864a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800864e:	ee17 2a90 	vmov	r2, s15
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008656:	4b1f      	ldr	r3, [pc, #124]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800866c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008670:	edd7 6a07 	vldr	s13, [r7, #28]
 8008674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867c:	ee17 2a90 	vmov	r2, s15
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008684:	4b13      	ldr	r3, [pc, #76]	@ (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008688:	0e1b      	lsrs	r3, r3, #24
 800868a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800869a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800869e:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086aa:	ee17 2a90 	vmov	r2, s15
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086b2:	e008      	b.n	80086c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	609a      	str	r2, [r3, #8]
}
 80086c6:	bf00      	nop
 80086c8:	3724      	adds	r7, #36	@ 0x24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	58024400 	.word	0x58024400
 80086d8:	03d09000 	.word	0x03d09000
 80086dc:	46000000 	.word	0x46000000
 80086e0:	4c742400 	.word	0x4c742400
 80086e4:	4a742400 	.word	0x4a742400
 80086e8:	4af42400 	.word	0x4af42400

080086ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086fa:	4b53      	ldr	r3, [pc, #332]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d101      	bne.n	800870a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e099      	b.n	800883e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800870a:	4b4f      	ldr	r3, [pc, #316]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a4e      	ldr	r2, [pc, #312]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008710:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008716:	f7fb fc05 	bl	8003f24 <HAL_GetTick>
 800871a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800871c:	e008      	b.n	8008730 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800871e:	f7fb fc01 	bl	8003f24 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b02      	cmp	r3, #2
 800872a:	d901      	bls.n	8008730 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e086      	b.n	800883e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008730:	4b45      	ldr	r3, [pc, #276]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f0      	bne.n	800871e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800873c:	4b42      	ldr	r3, [pc, #264]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 800873e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008740:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	031b      	lsls	r3, r3, #12
 800874a:	493f      	ldr	r1, [pc, #252]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 800874c:	4313      	orrs	r3, r2
 800874e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	3b01      	subs	r3, #1
 8008756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	3b01      	subs	r3, #1
 8008760:	025b      	lsls	r3, r3, #9
 8008762:	b29b      	uxth	r3, r3
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	3b01      	subs	r3, #1
 800876c:	041b      	lsls	r3, r3, #16
 800876e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	3b01      	subs	r3, #1
 800877a:	061b      	lsls	r3, r3, #24
 800877c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008780:	4931      	ldr	r1, [pc, #196]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008782:	4313      	orrs	r3, r2
 8008784:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008786:	4b30      	ldr	r3, [pc, #192]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	492d      	ldr	r1, [pc, #180]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008794:	4313      	orrs	r3, r2
 8008796:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008798:	4b2b      	ldr	r3, [pc, #172]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 800879a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879c:	f023 0220 	bic.w	r2, r3, #32
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	4928      	ldr	r1, [pc, #160]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087aa:	4b27      	ldr	r3, [pc, #156]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ae:	4a26      	ldr	r2, [pc, #152]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087b0:	f023 0310 	bic.w	r3, r3, #16
 80087b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087b6:	4b24      	ldr	r3, [pc, #144]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ba:	4b24      	ldr	r3, [pc, #144]	@ (800884c <RCCEx_PLL2_Config+0x160>)
 80087bc:	4013      	ands	r3, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	69d2      	ldr	r2, [r2, #28]
 80087c2:	00d2      	lsls	r2, r2, #3
 80087c4:	4920      	ldr	r1, [pc, #128]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087d0:	f043 0310 	orr.w	r3, r3, #16
 80087d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	4a19      	ldr	r2, [pc, #100]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087e8:	e00f      	b.n	800880a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d106      	bne.n	80087fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087f0:	4b15      	ldr	r3, [pc, #84]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f4:	4a14      	ldr	r2, [pc, #80]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087fc:	e005      	b.n	800880a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087fe:	4b12      	ldr	r3, [pc, #72]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	4a11      	ldr	r2, [pc, #68]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008808:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800880a:	4b0f      	ldr	r3, [pc, #60]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a0e      	ldr	r2, [pc, #56]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008810:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008816:	f7fb fb85 	bl	8003f24 <HAL_GetTick>
 800881a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800881c:	e008      	b.n	8008830 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800881e:	f7fb fb81 	bl	8003f24 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	2b02      	cmp	r3, #2
 800882a:	d901      	bls.n	8008830 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e006      	b.n	800883e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008830:	4b05      	ldr	r3, [pc, #20]	@ (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0f0      	beq.n	800881e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	58024400 	.word	0x58024400
 800884c:	ffff0007 	.word	0xffff0007

08008850 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800885e:	4b53      	ldr	r3, [pc, #332]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b03      	cmp	r3, #3
 8008868:	d101      	bne.n	800886e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e099      	b.n	80089a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800886e:	4b4f      	ldr	r3, [pc, #316]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a4e      	ldr	r2, [pc, #312]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800887a:	f7fb fb53 	bl	8003f24 <HAL_GetTick>
 800887e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008880:	e008      	b.n	8008894 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008882:	f7fb fb4f 	bl	8003f24 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d901      	bls.n	8008894 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e086      	b.n	80089a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008894:	4b45      	ldr	r3, [pc, #276]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f0      	bne.n	8008882 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088a0:	4b42      	ldr	r3, [pc, #264]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	051b      	lsls	r3, r3, #20
 80088ae:	493f      	ldr	r1, [pc, #252]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	025b      	lsls	r3, r3, #9
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	041b      	lsls	r3, r3, #16
 80088d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	3b01      	subs	r3, #1
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088e4:	4931      	ldr	r1, [pc, #196]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088ea:	4b30      	ldr	r3, [pc, #192]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	492d      	ldr	r1, [pc, #180]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088fc:	4b2b      	ldr	r3, [pc, #172]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008900:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	4928      	ldr	r1, [pc, #160]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 800890a:	4313      	orrs	r3, r2
 800890c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800890e:	4b27      	ldr	r3, [pc, #156]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008912:	4a26      	ldr	r2, [pc, #152]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008918:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800891a:	4b24      	ldr	r3, [pc, #144]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 800891c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800891e:	4b24      	ldr	r3, [pc, #144]	@ (80089b0 <RCCEx_PLL3_Config+0x160>)
 8008920:	4013      	ands	r3, r2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	69d2      	ldr	r2, [r2, #28]
 8008926:	00d2      	lsls	r2, r2, #3
 8008928:	4920      	ldr	r1, [pc, #128]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 800892a:	4313      	orrs	r3, r2
 800892c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800892e:	4b1f      	ldr	r3, [pc, #124]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	4a1e      	ldr	r2, [pc, #120]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008938:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008940:	4b1a      	ldr	r3, [pc, #104]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008944:	4a19      	ldr	r2, [pc, #100]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008946:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800894a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800894c:	e00f      	b.n	800896e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d106      	bne.n	8008962 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008954:	4b15      	ldr	r3, [pc, #84]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008958:	4a14      	ldr	r2, [pc, #80]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 800895a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800895e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008960:	e005      	b.n	800896e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008962:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	4a11      	ldr	r2, [pc, #68]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800896c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800896e:	4b0f      	ldr	r3, [pc, #60]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a0e      	ldr	r2, [pc, #56]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800897a:	f7fb fad3 	bl	8003f24 <HAL_GetTick>
 800897e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008980:	e008      	b.n	8008994 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008982:	f7fb facf 	bl	8003f24 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d901      	bls.n	8008994 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e006      	b.n	80089a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008994:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0f0      	beq.n	8008982 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	ffff0007 	.word	0xffff0007

080089b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e0f1      	b.n	8008baa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a78      	ldr	r2, [pc, #480]	@ (8008bb4 <HAL_SPI_Init+0x200>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00f      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a77      	ldr	r2, [pc, #476]	@ (8008bb8 <HAL_SPI_Init+0x204>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00a      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a75      	ldr	r2, [pc, #468]	@ (8008bbc <HAL_SPI_Init+0x208>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d005      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d901      	bls.n	80089f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e0d9      	b.n	8008baa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8e2 	bl	8008bc0 <SPI_GetPacketSize>
 80089fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a6c      	ldr	r2, [pc, #432]	@ (8008bb4 <HAL_SPI_Init+0x200>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00c      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8008bb8 <HAL_SPI_Init+0x204>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d007      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a69      	ldr	r2, [pc, #420]	@ (8008bbc <HAL_SPI_Init+0x208>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d002      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d811      	bhi.n	8008a46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a26:	4a63      	ldr	r2, [pc, #396]	@ (8008bb4 <HAL_SPI_Init+0x200>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a61      	ldr	r2, [pc, #388]	@ (8008bb8 <HAL_SPI_Init+0x204>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_SPI_Init+0x8c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a60      	ldr	r2, [pc, #384]	@ (8008bbc <HAL_SPI_Init+0x208>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d104      	bne.n	8008a4a <HAL_SPI_Init+0x96>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b10      	cmp	r3, #16
 8008a44:	d901      	bls.n	8008a4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e0af      	b.n	8008baa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7f9 fd56 	bl	8002510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008a86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a90:	d119      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a9a:	d103      	bne.n	8008aa4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d008      	beq.n	8008ab6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10c      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ab4:	d107      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ac4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69da      	ldr	r2, [r3, #28]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad8:	ea42 0103 	orr.w	r1, r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b26:	ea42 0103 	orr.w	r1, r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d113      	bne.n	8008b66 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0201 	bic.w	r2, r2, #1
 8008b74:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	430a      	orrs	r2, r1
 8008b96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40013000 	.word	0x40013000
 8008bb8:	40003800 	.word	0x40003800
 8008bbc:	40003c00 	.word	0x40003c00

08008bc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	3307      	adds	r3, #7
 8008bde:	08db      	lsrs	r3, r3, #3
 8008be0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e049      	b.n	8008c9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d106      	bne.n	8008c22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7f9 fcdd 	bl	80025dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2202      	movs	r2, #2
 8008c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f000 fd71 	bl	800971c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d001      	beq.n	8008cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e054      	b.n	8008d66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f042 0201 	orr.w	r2, r2, #1
 8008cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a26      	ldr	r2, [pc, #152]	@ (8008d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d022      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce6:	d01d      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a22      	ldr	r2, [pc, #136]	@ (8008d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d018      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a21      	ldr	r2, [pc, #132]	@ (8008d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d013      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1f      	ldr	r2, [pc, #124]	@ (8008d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00e      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d84 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d009      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1c      	ldr	r2, [pc, #112]	@ (8008d88 <HAL_TIM_Base_Start_IT+0xe4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d004      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x80>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8008d8c <HAL_TIM_Base_Start_IT+0xe8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d115      	bne.n	8008d50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	4b19      	ldr	r3, [pc, #100]	@ (8008d90 <HAL_TIM_Base_Start_IT+0xec>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b06      	cmp	r3, #6
 8008d34:	d015      	beq.n	8008d62 <HAL_TIM_Base_Start_IT+0xbe>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d3c:	d011      	beq.n	8008d62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0201 	orr.w	r2, r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4e:	e008      	b.n	8008d62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e000      	b.n	8008d64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40010000 	.word	0x40010000
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40000800 	.word	0x40000800
 8008d80:	40000c00 	.word	0x40000c00
 8008d84:	40010400 	.word	0x40010400
 8008d88:	40001800 	.word	0x40001800
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	00010007 	.word	0x00010007

08008d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e049      	b.n	8008e3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f841 	bl	8008e42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f000 fca2 	bl	800971c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <HAL_TIM_PWM_Start+0x24>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	bf14      	ite	ne
 8008e74:	2301      	movne	r3, #1
 8008e76:	2300      	moveq	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	e03c      	b.n	8008ef6 <HAL_TIM_PWM_Start+0x9e>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d109      	bne.n	8008e96 <HAL_TIM_PWM_Start+0x3e>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	bf14      	ite	ne
 8008e8e:	2301      	movne	r3, #1
 8008e90:	2300      	moveq	r3, #0
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	e02f      	b.n	8008ef6 <HAL_TIM_PWM_Start+0x9e>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d109      	bne.n	8008eb0 <HAL_TIM_PWM_Start+0x58>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	bf14      	ite	ne
 8008ea8:	2301      	movne	r3, #1
 8008eaa:	2300      	moveq	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	e022      	b.n	8008ef6 <HAL_TIM_PWM_Start+0x9e>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b0c      	cmp	r3, #12
 8008eb4:	d109      	bne.n	8008eca <HAL_TIM_PWM_Start+0x72>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	bf14      	ite	ne
 8008ec2:	2301      	movne	r3, #1
 8008ec4:	2300      	moveq	r3, #0
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	e015      	b.n	8008ef6 <HAL_TIM_PWM_Start+0x9e>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b10      	cmp	r3, #16
 8008ece:	d109      	bne.n	8008ee4 <HAL_TIM_PWM_Start+0x8c>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	bf14      	ite	ne
 8008edc:	2301      	movne	r3, #1
 8008ede:	2300      	moveq	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	e008      	b.n	8008ef6 <HAL_TIM_PWM_Start+0x9e>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	bf14      	ite	ne
 8008ef0:	2301      	movne	r3, #1
 8008ef2:	2300      	moveq	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e0a1      	b.n	8009042 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d104      	bne.n	8008f0e <HAL_TIM_PWM_Start+0xb6>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f0c:	e023      	b.n	8008f56 <HAL_TIM_PWM_Start+0xfe>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d104      	bne.n	8008f1e <HAL_TIM_PWM_Start+0xc6>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f1c:	e01b      	b.n	8008f56 <HAL_TIM_PWM_Start+0xfe>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d104      	bne.n	8008f2e <HAL_TIM_PWM_Start+0xd6>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f2c:	e013      	b.n	8008f56 <HAL_TIM_PWM_Start+0xfe>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b0c      	cmp	r3, #12
 8008f32:	d104      	bne.n	8008f3e <HAL_TIM_PWM_Start+0xe6>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f3c:	e00b      	b.n	8008f56 <HAL_TIM_PWM_Start+0xfe>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b10      	cmp	r3, #16
 8008f42:	d104      	bne.n	8008f4e <HAL_TIM_PWM_Start+0xf6>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f4c:	e003      	b.n	8008f56 <HAL_TIM_PWM_Start+0xfe>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2202      	movs	r2, #2
 8008f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 ffea 	bl	8009f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a38      	ldr	r2, [pc, #224]	@ (800904c <HAL_TIM_PWM_Start+0x1f4>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d013      	beq.n	8008f96 <HAL_TIM_PWM_Start+0x13e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a37      	ldr	r2, [pc, #220]	@ (8009050 <HAL_TIM_PWM_Start+0x1f8>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00e      	beq.n	8008f96 <HAL_TIM_PWM_Start+0x13e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a35      	ldr	r2, [pc, #212]	@ (8009054 <HAL_TIM_PWM_Start+0x1fc>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d009      	beq.n	8008f96 <HAL_TIM_PWM_Start+0x13e>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a34      	ldr	r2, [pc, #208]	@ (8009058 <HAL_TIM_PWM_Start+0x200>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d004      	beq.n	8008f96 <HAL_TIM_PWM_Start+0x13e>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a32      	ldr	r2, [pc, #200]	@ (800905c <HAL_TIM_PWM_Start+0x204>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d101      	bne.n	8008f9a <HAL_TIM_PWM_Start+0x142>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e000      	b.n	8008f9c <HAL_TIM_PWM_Start+0x144>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a25      	ldr	r2, [pc, #148]	@ (800904c <HAL_TIM_PWM_Start+0x1f4>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d022      	beq.n	8009000 <HAL_TIM_PWM_Start+0x1a8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fc2:	d01d      	beq.n	8009000 <HAL_TIM_PWM_Start+0x1a8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a25      	ldr	r2, [pc, #148]	@ (8009060 <HAL_TIM_PWM_Start+0x208>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d018      	beq.n	8009000 <HAL_TIM_PWM_Start+0x1a8>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a24      	ldr	r2, [pc, #144]	@ (8009064 <HAL_TIM_PWM_Start+0x20c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d013      	beq.n	8009000 <HAL_TIM_PWM_Start+0x1a8>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a22      	ldr	r2, [pc, #136]	@ (8009068 <HAL_TIM_PWM_Start+0x210>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00e      	beq.n	8009000 <HAL_TIM_PWM_Start+0x1a8>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8009050 <HAL_TIM_PWM_Start+0x1f8>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d009      	beq.n	8009000 <HAL_TIM_PWM_Start+0x1a8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800906c <HAL_TIM_PWM_Start+0x214>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d004      	beq.n	8009000 <HAL_TIM_PWM_Start+0x1a8>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a16      	ldr	r2, [pc, #88]	@ (8009054 <HAL_TIM_PWM_Start+0x1fc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d115      	bne.n	800902c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	4b1a      	ldr	r3, [pc, #104]	@ (8009070 <HAL_TIM_PWM_Start+0x218>)
 8009008:	4013      	ands	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b06      	cmp	r3, #6
 8009010:	d015      	beq.n	800903e <HAL_TIM_PWM_Start+0x1e6>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009018:	d011      	beq.n	800903e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902a:	e008      	b.n	800903e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	e000      	b.n	8009040 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	40010000 	.word	0x40010000
 8009050:	40010400 	.word	0x40010400
 8009054:	40014000 	.word	0x40014000
 8009058:	40014400 	.word	0x40014400
 800905c:	40014800 	.word	0x40014800
 8009060:	40000400 	.word	0x40000400
 8009064:	40000800 	.word	0x40000800
 8009068:	40000c00 	.word	0x40000c00
 800906c:	40001800 	.word	0x40001800
 8009070:	00010007 	.word	0x00010007

08009074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b02      	cmp	r3, #2
 8009088:	d122      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b02      	cmp	r3, #2
 8009096:	d11b      	bne.n	80090d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f06f 0202 	mvn.w	r2, #2
 80090a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fb12 	bl	80096e0 <HAL_TIM_IC_CaptureCallback>
 80090bc:	e005      	b.n	80090ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fb04 	bl	80096cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fb15 	bl	80096f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d122      	bne.n	8009124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d11b      	bne.n	8009124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f06f 0204 	mvn.w	r2, #4
 80090f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fae8 	bl	80096e0 <HAL_TIM_IC_CaptureCallback>
 8009110:	e005      	b.n	800911e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fada 	bl	80096cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 faeb 	bl	80096f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b08      	cmp	r3, #8
 8009130:	d122      	bne.n	8009178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b08      	cmp	r3, #8
 800913e:	d11b      	bne.n	8009178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0208 	mvn.w	r2, #8
 8009148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2204      	movs	r2, #4
 800914e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fabe 	bl	80096e0 <HAL_TIM_IC_CaptureCallback>
 8009164:	e005      	b.n	8009172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fab0 	bl	80096cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fac1 	bl	80096f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b10      	cmp	r3, #16
 8009184:	d122      	bne.n	80091cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b10      	cmp	r3, #16
 8009192:	d11b      	bne.n	80091cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f06f 0210 	mvn.w	r2, #16
 800919c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2208      	movs	r2, #8
 80091a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa94 	bl	80096e0 <HAL_TIM_IC_CaptureCallback>
 80091b8:	e005      	b.n	80091c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa86 	bl	80096cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa97 	bl	80096f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d10e      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d107      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0201 	mvn.w	r2, #1
 80091f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7f8 ffde 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009202:	2b80      	cmp	r3, #128	@ 0x80
 8009204:	d10e      	bne.n	8009224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009210:	2b80      	cmp	r3, #128	@ 0x80
 8009212:	d107      	bne.n	8009224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800921c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 ffc6 	bl	800a1b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009232:	d10e      	bne.n	8009252 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800923e:	2b80      	cmp	r3, #128	@ 0x80
 8009240:	d107      	bne.n	8009252 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800924a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 ffb9 	bl	800a1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800925c:	2b40      	cmp	r3, #64	@ 0x40
 800925e:	d10e      	bne.n	800927e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800926a:	2b40      	cmp	r3, #64	@ 0x40
 800926c:	d107      	bne.n	800927e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa45 	bl	8009708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b20      	cmp	r3, #32
 800928a:	d10e      	bne.n	80092aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b20      	cmp	r3, #32
 8009298:	d107      	bne.n	80092aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f06f 0220 	mvn.w	r2, #32
 80092a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 ff79 	bl	800a19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092aa:	bf00      	nop
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e0ff      	b.n	80094d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b14      	cmp	r3, #20
 80092de:	f200 80f0 	bhi.w	80094c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092e2:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	080094c3 	.word	0x080094c3
 80092f0:	080094c3 	.word	0x080094c3
 80092f4:	080094c3 	.word	0x080094c3
 80092f8:	0800937d 	.word	0x0800937d
 80092fc:	080094c3 	.word	0x080094c3
 8009300:	080094c3 	.word	0x080094c3
 8009304:	080094c3 	.word	0x080094c3
 8009308:	080093bf 	.word	0x080093bf
 800930c:	080094c3 	.word	0x080094c3
 8009310:	080094c3 	.word	0x080094c3
 8009314:	080094c3 	.word	0x080094c3
 8009318:	080093ff 	.word	0x080093ff
 800931c:	080094c3 	.word	0x080094c3
 8009320:	080094c3 	.word	0x080094c3
 8009324:	080094c3 	.word	0x080094c3
 8009328:	08009441 	.word	0x08009441
 800932c:	080094c3 	.word	0x080094c3
 8009330:	080094c3 	.word	0x080094c3
 8009334:	080094c3 	.word	0x080094c3
 8009338:	08009481 	.word	0x08009481
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fa84 	bl	8009850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0208 	orr.w	r2, r2, #8
 8009356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0204 	bic.w	r2, r2, #4
 8009366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6999      	ldr	r1, [r3, #24]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691a      	ldr	r2, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	619a      	str	r2, [r3, #24]
      break;
 800937a:	e0a5      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 faf4 	bl	8009970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6999      	ldr	r1, [r3, #24]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	021a      	lsls	r2, r3, #8
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	619a      	str	r2, [r3, #24]
      break;
 80093bc:	e084      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb5d 	bl	8009a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0208 	orr.w	r2, r2, #8
 80093d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69da      	ldr	r2, [r3, #28]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0204 	bic.w	r2, r2, #4
 80093e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	61da      	str	r2, [r3, #28]
      break;
 80093fc:	e064      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fbc5 	bl	8009b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69da      	ldr	r2, [r3, #28]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69d9      	ldr	r1, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	021a      	lsls	r2, r3, #8
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	61da      	str	r2, [r3, #28]
      break;
 800943e:	e043      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fc0e 	bl	8009c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0208 	orr.w	r2, r2, #8
 800945a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0204 	bic.w	r2, r2, #4
 800946a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800947e:	e023      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fc52 	bl	8009d30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800949a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	021a      	lsls	r2, r3, #8
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80094c0:	e002      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	75fb      	strb	r3, [r7, #23]
      break;
 80094c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_TIM_ConfigClockSource+0x1c>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e0dc      	b.n	80096b2 <HAL_TIM_ConfigClockSource+0x1d6>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	4b6a      	ldr	r3, [pc, #424]	@ (80096bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009514:	4013      	ands	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800951e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a64      	ldr	r2, [pc, #400]	@ (80096c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	f000 80a9 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009534:	4a62      	ldr	r2, [pc, #392]	@ (80096c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	f200 80ae 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800953c:	4a61      	ldr	r2, [pc, #388]	@ (80096c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	f000 80a1 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009544:	4a5f      	ldr	r2, [pc, #380]	@ (80096c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	f200 80a6 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800954c:	4a5e      	ldr	r2, [pc, #376]	@ (80096c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800954e:	4293      	cmp	r3, r2
 8009550:	f000 8099 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009554:	4a5c      	ldr	r2, [pc, #368]	@ (80096c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009556:	4293      	cmp	r3, r2
 8009558:	f200 809e 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800955c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009560:	f000 8091 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009564:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009568:	f200 8096 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800956c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009570:	f000 8089 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009578:	f200 808e 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800957c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009580:	d03e      	beq.n	8009600 <HAL_TIM_ConfigClockSource+0x124>
 8009582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009586:	f200 8087 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800958a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800958e:	f000 8086 	beq.w	800969e <HAL_TIM_ConfigClockSource+0x1c2>
 8009592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009596:	d87f      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 8009598:	2b70      	cmp	r3, #112	@ 0x70
 800959a:	d01a      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0xf6>
 800959c:	2b70      	cmp	r3, #112	@ 0x70
 800959e:	d87b      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a0:	2b60      	cmp	r3, #96	@ 0x60
 80095a2:	d050      	beq.n	8009646 <HAL_TIM_ConfigClockSource+0x16a>
 80095a4:	2b60      	cmp	r3, #96	@ 0x60
 80095a6:	d877      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a8:	2b50      	cmp	r3, #80	@ 0x50
 80095aa:	d03c      	beq.n	8009626 <HAL_TIM_ConfigClockSource+0x14a>
 80095ac:	2b50      	cmp	r3, #80	@ 0x50
 80095ae:	d873      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b0:	2b40      	cmp	r3, #64	@ 0x40
 80095b2:	d058      	beq.n	8009666 <HAL_TIM_ConfigClockSource+0x18a>
 80095b4:	2b40      	cmp	r3, #64	@ 0x40
 80095b6:	d86f      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b8:	2b30      	cmp	r3, #48	@ 0x30
 80095ba:	d064      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095bc:	2b30      	cmp	r3, #48	@ 0x30
 80095be:	d86b      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d060      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	d867      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d05c      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095cc:	2b10      	cmp	r3, #16
 80095ce:	d05a      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095d0:	e062      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6899      	ldr	r1, [r3, #8]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f000 fc89 	bl	8009ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	609a      	str	r2, [r3, #8]
      break;
 80095fe:	e04f      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	6899      	ldr	r1, [r3, #8]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f000 fc72 	bl	8009ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009622:	609a      	str	r2, [r3, #8]
      break;
 8009624:	e03c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	6859      	ldr	r1, [r3, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	461a      	mov	r2, r3
 8009634:	f000 fbe2 	bl	8009dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2150      	movs	r1, #80	@ 0x50
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fc3c 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 8009644:	e02c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	6859      	ldr	r1, [r3, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	461a      	mov	r2, r3
 8009654:	f000 fc01 	bl	8009e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2160      	movs	r1, #96	@ 0x60
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fc2c 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 8009664:	e01c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	6859      	ldr	r1, [r3, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	461a      	mov	r2, r3
 8009674:	f000 fbc2 	bl	8009dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2140      	movs	r1, #64	@ 0x40
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fc1c 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 8009684:	e00c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f000 fc13 	bl	8009ebc <TIM_ITRx_SetConfig>
      break;
 8009696:	e003      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
      break;
 800969c:	e000      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800969e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	ffceff88 	.word	0xffceff88
 80096c0:	00100040 	.word	0x00100040
 80096c4:	00100030 	.word	0x00100030
 80096c8:	00100020 	.word	0x00100020

080096cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a40      	ldr	r2, [pc, #256]	@ (8009830 <TIM_Base_SetConfig+0x114>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d013      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800973a:	d00f      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a3d      	ldr	r2, [pc, #244]	@ (8009834 <TIM_Base_SetConfig+0x118>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00b      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a3c      	ldr	r2, [pc, #240]	@ (8009838 <TIM_Base_SetConfig+0x11c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d007      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a3b      	ldr	r2, [pc, #236]	@ (800983c <TIM_Base_SetConfig+0x120>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d003      	beq.n	800975c <TIM_Base_SetConfig+0x40>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a3a      	ldr	r2, [pc, #232]	@ (8009840 <TIM_Base_SetConfig+0x124>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d108      	bne.n	800976e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a2f      	ldr	r2, [pc, #188]	@ (8009830 <TIM_Base_SetConfig+0x114>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d01f      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800977c:	d01b      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a2c      	ldr	r2, [pc, #176]	@ (8009834 <TIM_Base_SetConfig+0x118>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d017      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a2b      	ldr	r2, [pc, #172]	@ (8009838 <TIM_Base_SetConfig+0x11c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d013      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a2a      	ldr	r2, [pc, #168]	@ (800983c <TIM_Base_SetConfig+0x120>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00f      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a29      	ldr	r2, [pc, #164]	@ (8009840 <TIM_Base_SetConfig+0x124>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00b      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a28      	ldr	r2, [pc, #160]	@ (8009844 <TIM_Base_SetConfig+0x128>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d007      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a27      	ldr	r2, [pc, #156]	@ (8009848 <TIM_Base_SetConfig+0x12c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d003      	beq.n	80097b6 <TIM_Base_SetConfig+0x9a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a26      	ldr	r2, [pc, #152]	@ (800984c <TIM_Base_SetConfig+0x130>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d108      	bne.n	80097c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a10      	ldr	r2, [pc, #64]	@ (8009830 <TIM_Base_SetConfig+0x114>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00f      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a12      	ldr	r2, [pc, #72]	@ (8009840 <TIM_Base_SetConfig+0x124>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00b      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a11      	ldr	r2, [pc, #68]	@ (8009844 <TIM_Base_SetConfig+0x128>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d007      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a10      	ldr	r2, [pc, #64]	@ (8009848 <TIM_Base_SetConfig+0x12c>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d003      	beq.n	8009814 <TIM_Base_SetConfig+0xf8>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a0f      	ldr	r2, [pc, #60]	@ (800984c <TIM_Base_SetConfig+0x130>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d103      	bne.n	800981c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	615a      	str	r2, [r3, #20]
}
 8009822:	bf00      	nop
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	40010000 	.word	0x40010000
 8009834:	40000400 	.word	0x40000400
 8009838:	40000800 	.word	0x40000800
 800983c:	40000c00 	.word	0x40000c00
 8009840:	40010400 	.word	0x40010400
 8009844:	40014000 	.word	0x40014000
 8009848:	40014400 	.word	0x40014400
 800984c:	40014800 	.word	0x40014800

08009850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f023 0201 	bic.w	r2, r3, #1
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4b37      	ldr	r3, [pc, #220]	@ (8009958 <TIM_OC1_SetConfig+0x108>)
 800987c:	4013      	ands	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4313      	orrs	r3, r2
 8009890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 0302 	bic.w	r3, r3, #2
 8009898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a2d      	ldr	r2, [pc, #180]	@ (800995c <TIM_OC1_SetConfig+0x10c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00f      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009960 <TIM_OC1_SetConfig+0x110>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00b      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009964 <TIM_OC1_SetConfig+0x114>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d007      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a2a      	ldr	r2, [pc, #168]	@ (8009968 <TIM_OC1_SetConfig+0x118>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d003      	beq.n	80098cc <TIM_OC1_SetConfig+0x7c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a29      	ldr	r2, [pc, #164]	@ (800996c <TIM_OC1_SetConfig+0x11c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d10c      	bne.n	80098e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f023 0308 	bic.w	r3, r3, #8
 80098d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f023 0304 	bic.w	r3, r3, #4
 80098e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a1c      	ldr	r2, [pc, #112]	@ (800995c <TIM_OC1_SetConfig+0x10c>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00f      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009960 <TIM_OC1_SetConfig+0x110>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00b      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009964 <TIM_OC1_SetConfig+0x114>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d007      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a19      	ldr	r2, [pc, #100]	@ (8009968 <TIM_OC1_SetConfig+0x118>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d003      	beq.n	800990e <TIM_OC1_SetConfig+0xbe>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a18      	ldr	r2, [pc, #96]	@ (800996c <TIM_OC1_SetConfig+0x11c>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d111      	bne.n	8009932 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800991c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4313      	orrs	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	621a      	str	r2, [r3, #32]
}
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	fffeff8f 	.word	0xfffeff8f
 800995c:	40010000 	.word	0x40010000
 8009960:	40010400 	.word	0x40010400
 8009964:	40014000 	.word	0x40014000
 8009968:	40014400 	.word	0x40014400
 800996c:	40014800 	.word	0x40014800

08009970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	f023 0210 	bic.w	r2, r3, #16
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4b34      	ldr	r3, [pc, #208]	@ (8009a6c <TIM_OC2_SetConfig+0xfc>)
 800999c:	4013      	ands	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f023 0320 	bic.w	r3, r3, #32
 80099ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a29      	ldr	r2, [pc, #164]	@ (8009a70 <TIM_OC2_SetConfig+0x100>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_OC2_SetConfig+0x68>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a28      	ldr	r2, [pc, #160]	@ (8009a74 <TIM_OC2_SetConfig+0x104>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d10d      	bne.n	80099f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a70 <TIM_OC2_SetConfig+0x100>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00f      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009a74 <TIM_OC2_SetConfig+0x104>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00b      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1c      	ldr	r2, [pc, #112]	@ (8009a78 <TIM_OC2_SetConfig+0x108>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d007      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a7c <TIM_OC2_SetConfig+0x10c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d003      	beq.n	8009a1c <TIM_OC2_SetConfig+0xac>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a1a      	ldr	r2, [pc, #104]	@ (8009a80 <TIM_OC2_SetConfig+0x110>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d113      	bne.n	8009a44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	621a      	str	r2, [r3, #32]
}
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	feff8fff 	.word	0xfeff8fff
 8009a70:	40010000 	.word	0x40010000
 8009a74:	40010400 	.word	0x40010400
 8009a78:	40014000 	.word	0x40014000
 8009a7c:	40014400 	.word	0x40014400
 8009a80:	40014800 	.word	0x40014800

08009a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4b33      	ldr	r3, [pc, #204]	@ (8009b7c <TIM_OC3_SetConfig+0xf8>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a28      	ldr	r2, [pc, #160]	@ (8009b80 <TIM_OC3_SetConfig+0xfc>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_OC3_SetConfig+0x66>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a27      	ldr	r2, [pc, #156]	@ (8009b84 <TIM_OC3_SetConfig+0x100>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d10d      	bne.n	8009b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	@ (8009b80 <TIM_OC3_SetConfig+0xfc>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00f      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a1c      	ldr	r2, [pc, #112]	@ (8009b84 <TIM_OC3_SetConfig+0x100>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a1b      	ldr	r2, [pc, #108]	@ (8009b88 <TIM_OC3_SetConfig+0x104>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d007      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a1a      	ldr	r2, [pc, #104]	@ (8009b8c <TIM_OC3_SetConfig+0x108>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d003      	beq.n	8009b2e <TIM_OC3_SetConfig+0xaa>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a19      	ldr	r2, [pc, #100]	@ (8009b90 <TIM_OC3_SetConfig+0x10c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d113      	bne.n	8009b56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	621a      	str	r2, [r3, #32]
}
 8009b70:	bf00      	nop
 8009b72:	371c      	adds	r7, #28
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	fffeff8f 	.word	0xfffeff8f
 8009b80:	40010000 	.word	0x40010000
 8009b84:	40010400 	.word	0x40010400
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40014400 	.word	0x40014400
 8009b90:	40014800 	.word	0x40014800

08009b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4b24      	ldr	r3, [pc, #144]	@ (8009c50 <TIM_OC4_SetConfig+0xbc>)
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	021b      	lsls	r3, r3, #8
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	031b      	lsls	r3, r3, #12
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a19      	ldr	r2, [pc, #100]	@ (8009c54 <TIM_OC4_SetConfig+0xc0>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00f      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	@ (8009c58 <TIM_OC4_SetConfig+0xc4>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00b      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a17      	ldr	r2, [pc, #92]	@ (8009c5c <TIM_OC4_SetConfig+0xc8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d007      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a16      	ldr	r2, [pc, #88]	@ (8009c60 <TIM_OC4_SetConfig+0xcc>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <TIM_OC4_SetConfig+0x80>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <TIM_OC4_SetConfig+0xd0>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d109      	bne.n	8009c28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	019b      	lsls	r3, r3, #6
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	621a      	str	r2, [r3, #32]
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	feff8fff 	.word	0xfeff8fff
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40010400 	.word	0x40010400
 8009c5c:	40014000 	.word	0x40014000
 8009c60:	40014400 	.word	0x40014400
 8009c64:	40014800 	.word	0x40014800

08009c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4b21      	ldr	r3, [pc, #132]	@ (8009d18 <TIM_OC5_SetConfig+0xb0>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	041b      	lsls	r3, r3, #16
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a18      	ldr	r2, [pc, #96]	@ (8009d1c <TIM_OC5_SetConfig+0xb4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00f      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a17      	ldr	r2, [pc, #92]	@ (8009d20 <TIM_OC5_SetConfig+0xb8>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00b      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a16      	ldr	r2, [pc, #88]	@ (8009d24 <TIM_OC5_SetConfig+0xbc>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a15      	ldr	r2, [pc, #84]	@ (8009d28 <TIM_OC5_SetConfig+0xc0>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_OC5_SetConfig+0x76>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a14      	ldr	r2, [pc, #80]	@ (8009d2c <TIM_OC5_SetConfig+0xc4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d109      	bne.n	8009cf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	621a      	str	r2, [r3, #32]
}
 8009d0c:	bf00      	nop
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	fffeff8f 	.word	0xfffeff8f
 8009d1c:	40010000 	.word	0x40010000
 8009d20:	40010400 	.word	0x40010400
 8009d24:	40014000 	.word	0x40014000
 8009d28:	40014400 	.word	0x40014400
 8009d2c:	40014800 	.word	0x40014800

08009d30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4b22      	ldr	r3, [pc, #136]	@ (8009de4 <TIM_OC6_SetConfig+0xb4>)
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	021b      	lsls	r3, r3, #8
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	051b      	lsls	r3, r3, #20
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a19      	ldr	r2, [pc, #100]	@ (8009de8 <TIM_OC6_SetConfig+0xb8>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00f      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a18      	ldr	r2, [pc, #96]	@ (8009dec <TIM_OC6_SetConfig+0xbc>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d00b      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a17      	ldr	r2, [pc, #92]	@ (8009df0 <TIM_OC6_SetConfig+0xc0>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d007      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a16      	ldr	r2, [pc, #88]	@ (8009df4 <TIM_OC6_SetConfig+0xc4>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d003      	beq.n	8009da8 <TIM_OC6_SetConfig+0x78>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a15      	ldr	r2, [pc, #84]	@ (8009df8 <TIM_OC6_SetConfig+0xc8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d109      	bne.n	8009dbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	029b      	lsls	r3, r3, #10
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	621a      	str	r2, [r3, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	feff8fff 	.word	0xfeff8fff
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40010400 	.word	0x40010400
 8009df0:	40014000 	.word	0x40014000
 8009df4:	40014400 	.word	0x40014400
 8009df8:	40014800 	.word	0x40014800

08009dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f023 0201 	bic.w	r2, r3, #1
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f023 030a 	bic.w	r3, r3, #10
 8009e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	621a      	str	r2, [r3, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	f023 0210 	bic.w	r2, r3, #16
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	031b      	lsls	r3, r3, #12
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	621a      	str	r2, [r3, #32]
}
 8009eae:	bf00      	nop
 8009eb0:	371c      	adds	r7, #28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4b09      	ldr	r3, [pc, #36]	@ (8009ef4 <TIM_ITRx_SetConfig+0x38>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f043 0307 	orr.w	r3, r3, #7
 8009ede:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	609a      	str	r2, [r3, #8]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	ffcfff8f 	.word	0xffcfff8f

08009ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	021a      	lsls	r2, r3, #8
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	609a      	str	r2, [r3, #8]
}
 8009f2c:	bf00      	nop
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	401a      	ands	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a1a      	ldr	r2, [r3, #32]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f003 031f 	and.w	r3, r3, #31
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f70:	431a      	orrs	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	621a      	str	r2, [r3, #32]
}
 8009f76:	bf00      	nop
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d101      	bne.n	8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e06d      	b.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a30      	ldr	r2, [pc, #192]	@ (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d004      	beq.n	8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a2f      	ldr	r2, [pc, #188]	@ (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d108      	bne.n	8009fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a20      	ldr	r2, [pc, #128]	@ (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d022      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a00e:	d01d      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a1d      	ldr	r2, [pc, #116]	@ (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d018      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a1c      	ldr	r2, [pc, #112]	@ (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d013      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1a      	ldr	r2, [pc, #104]	@ (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00e      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a15      	ldr	r2, [pc, #84]	@ (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d009      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a16      	ldr	r2, [pc, #88]	@ (800a098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d004      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a15      	ldr	r2, [pc, #84]	@ (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d10c      	bne.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	40010000 	.word	0x40010000
 800a088:	40010400 	.word	0x40010400
 800a08c:	40000400 	.word	0x40000400
 800a090:	40000800 	.word	0x40000800
 800a094:	40000c00 	.word	0x40000c00
 800a098:	40001800 	.word	0x40001800
 800a09c:	40014000 	.word	0x40014000

0800a0a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e065      	b.n	800a188 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	041b      	lsls	r3, r3, #16
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a16      	ldr	r2, [pc, #88]	@ (800a194 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d004      	beq.n	800a14a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a14      	ldr	r2, [pc, #80]	@ (800a198 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d115      	bne.n	800a176 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	051b      	lsls	r3, r3, #20
 800a156:	4313      	orrs	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	40010000 	.word	0x40010000
 800a198:	40010400 	.word	0x40010400

0800a19c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e042      	b.n	800a270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7f8 facb 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2224      	movs	r2, #36	@ 0x24
 800a206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0201 	bic.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f8c2 	bl	800a3a4 <UART_SetConfig>
 800a220:	4603      	mov	r3, r0
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e022      	b.n	800a270 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fe1e 	bl	800ae74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f042 0201 	orr.w	r2, r2, #1
 800a266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fea5 	bl	800afb8 <UART_CheckIdleState>
 800a26e:	4603      	mov	r3, r0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08a      	sub	sp, #40	@ 0x28
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	4613      	mov	r3, r2
 800a286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a28e:	2b20      	cmp	r3, #32
 800a290:	f040 8083 	bne.w	800a39a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d002      	beq.n	800a2a0 <HAL_UART_Transmit+0x28>
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e07b      	b.n	800a39c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <HAL_UART_Transmit+0x3a>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e074      	b.n	800a39c <HAL_UART_Transmit+0x124>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2221      	movs	r2, #33	@ 0x21
 800a2c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2ca:	f7f9 fe2b 	bl	8003f24 <HAL_GetTick>
 800a2ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	88fa      	ldrh	r2, [r7, #6]
 800a2d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	88fa      	ldrh	r2, [r7, #6]
 800a2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2e8:	d108      	bne.n	800a2fc <HAL_UART_Transmit+0x84>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	e003      	b.n	800a304 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a300:	2300      	movs	r3, #0
 800a302:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800a30c:	e02c      	b.n	800a368 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2200      	movs	r2, #0
 800a316:	2180      	movs	r1, #128	@ 0x80
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 fe98 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e039      	b.n	800a39c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10b      	bne.n	800a346 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a33c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	3302      	adds	r3, #2
 800a342:	61bb      	str	r3, [r7, #24]
 800a344:	e007      	b.n	800a356 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	781a      	ldrb	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3301      	adds	r3, #1
 800a354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a36e:	b29b      	uxth	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1cc      	bne.n	800a30e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2200      	movs	r2, #0
 800a37c:	2140      	movs	r1, #64	@ 0x40
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 fe65 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e006      	b.n	800a39c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2220      	movs	r2, #32
 800a392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	e000      	b.n	800a39c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a39a:	2302      	movs	r3, #2
  }
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3a8:	b092      	sub	sp, #72	@ 0x48
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4bbe      	ldr	r3, [pc, #760]	@ (800a6cc <UART_SetConfig+0x328>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3dc:	430b      	orrs	r3, r1
 800a3de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	68da      	ldr	r2, [r3, #12]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4ab3      	ldr	r2, [pc, #716]	@ (800a6d0 <UART_SetConfig+0x32c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d004      	beq.n	800a410 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a40c:	4313      	orrs	r3, r2
 800a40e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	4baf      	ldr	r3, [pc, #700]	@ (800a6d4 <UART_SetConfig+0x330>)
 800a418:	4013      	ands	r3, r2
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	6812      	ldr	r2, [r2, #0]
 800a41e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a420:	430b      	orrs	r3, r1
 800a422:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	f023 010f 	bic.w	r1, r3, #15
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4aa6      	ldr	r2, [pc, #664]	@ (800a6d8 <UART_SetConfig+0x334>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d177      	bne.n	800a534 <UART_SetConfig+0x190>
 800a444:	4ba5      	ldr	r3, [pc, #660]	@ (800a6dc <UART_SetConfig+0x338>)
 800a446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a448:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a44c:	2b28      	cmp	r3, #40	@ 0x28
 800a44e:	d86d      	bhi.n	800a52c <UART_SetConfig+0x188>
 800a450:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0xb4>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a4fd 	.word	0x0800a4fd
 800a45c:	0800a52d 	.word	0x0800a52d
 800a460:	0800a52d 	.word	0x0800a52d
 800a464:	0800a52d 	.word	0x0800a52d
 800a468:	0800a52d 	.word	0x0800a52d
 800a46c:	0800a52d 	.word	0x0800a52d
 800a470:	0800a52d 	.word	0x0800a52d
 800a474:	0800a52d 	.word	0x0800a52d
 800a478:	0800a505 	.word	0x0800a505
 800a47c:	0800a52d 	.word	0x0800a52d
 800a480:	0800a52d 	.word	0x0800a52d
 800a484:	0800a52d 	.word	0x0800a52d
 800a488:	0800a52d 	.word	0x0800a52d
 800a48c:	0800a52d 	.word	0x0800a52d
 800a490:	0800a52d 	.word	0x0800a52d
 800a494:	0800a52d 	.word	0x0800a52d
 800a498:	0800a50d 	.word	0x0800a50d
 800a49c:	0800a52d 	.word	0x0800a52d
 800a4a0:	0800a52d 	.word	0x0800a52d
 800a4a4:	0800a52d 	.word	0x0800a52d
 800a4a8:	0800a52d 	.word	0x0800a52d
 800a4ac:	0800a52d 	.word	0x0800a52d
 800a4b0:	0800a52d 	.word	0x0800a52d
 800a4b4:	0800a52d 	.word	0x0800a52d
 800a4b8:	0800a515 	.word	0x0800a515
 800a4bc:	0800a52d 	.word	0x0800a52d
 800a4c0:	0800a52d 	.word	0x0800a52d
 800a4c4:	0800a52d 	.word	0x0800a52d
 800a4c8:	0800a52d 	.word	0x0800a52d
 800a4cc:	0800a52d 	.word	0x0800a52d
 800a4d0:	0800a52d 	.word	0x0800a52d
 800a4d4:	0800a52d 	.word	0x0800a52d
 800a4d8:	0800a51d 	.word	0x0800a51d
 800a4dc:	0800a52d 	.word	0x0800a52d
 800a4e0:	0800a52d 	.word	0x0800a52d
 800a4e4:	0800a52d 	.word	0x0800a52d
 800a4e8:	0800a52d 	.word	0x0800a52d
 800a4ec:	0800a52d 	.word	0x0800a52d
 800a4f0:	0800a52d 	.word	0x0800a52d
 800a4f4:	0800a52d 	.word	0x0800a52d
 800a4f8:	0800a525 	.word	0x0800a525
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e222      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e21e      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e21a      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e216      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a51c:	2320      	movs	r3, #32
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e212      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a524:	2340      	movs	r3, #64	@ 0x40
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e20e      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a52c:	2380      	movs	r3, #128	@ 0x80
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e20a      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a69      	ldr	r2, [pc, #420]	@ (800a6e0 <UART_SetConfig+0x33c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d130      	bne.n	800a5a0 <UART_SetConfig+0x1fc>
 800a53e:	4b67      	ldr	r3, [pc, #412]	@ (800a6dc <UART_SetConfig+0x338>)
 800a540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	2b05      	cmp	r3, #5
 800a548:	d826      	bhi.n	800a598 <UART_SetConfig+0x1f4>
 800a54a:	a201      	add	r2, pc, #4	@ (adr r2, 800a550 <UART_SetConfig+0x1ac>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a569 	.word	0x0800a569
 800a554:	0800a571 	.word	0x0800a571
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a589 	.word	0x0800a589
 800a564:	0800a591 	.word	0x0800a591
 800a568:	2300      	movs	r3, #0
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e1ec      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e1e8      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e1e4      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e1e0      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e1dc      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a590:	2340      	movs	r3, #64	@ 0x40
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e1d8      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a598:	2380      	movs	r3, #128	@ 0x80
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e1d4      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a4f      	ldr	r2, [pc, #316]	@ (800a6e4 <UART_SetConfig+0x340>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d130      	bne.n	800a60c <UART_SetConfig+0x268>
 800a5aa:	4b4c      	ldr	r3, [pc, #304]	@ (800a6dc <UART_SetConfig+0x338>)
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	d826      	bhi.n	800a604 <UART_SetConfig+0x260>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <UART_SetConfig+0x218>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5d5 	.word	0x0800a5d5
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a5e5 	.word	0x0800a5e5
 800a5c8:	0800a5ed 	.word	0x0800a5ed
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5fd 	.word	0x0800a5fd
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e1b6      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e1b2      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a5e4:	2308      	movs	r3, #8
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e1ae      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	e1aa      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e1a6      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a5fc:	2340      	movs	r3, #64	@ 0x40
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e1a2      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a604:	2380      	movs	r3, #128	@ 0x80
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e19e      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a35      	ldr	r2, [pc, #212]	@ (800a6e8 <UART_SetConfig+0x344>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d130      	bne.n	800a678 <UART_SetConfig+0x2d4>
 800a616:	4b31      	ldr	r3, [pc, #196]	@ (800a6dc <UART_SetConfig+0x338>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d826      	bhi.n	800a670 <UART_SetConfig+0x2cc>
 800a622:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <UART_SetConfig+0x284>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a641 	.word	0x0800a641
 800a62c:	0800a649 	.word	0x0800a649
 800a630:	0800a651 	.word	0x0800a651
 800a634:	0800a659 	.word	0x0800a659
 800a638:	0800a661 	.word	0x0800a661
 800a63c:	0800a669 	.word	0x0800a669
 800a640:	2300      	movs	r3, #0
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e180      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a648:	2304      	movs	r3, #4
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e17c      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a650:	2308      	movs	r3, #8
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a656:	e178      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a658:	2310      	movs	r3, #16
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65e:	e174      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a660:	2320      	movs	r3, #32
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a666:	e170      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a668:	2340      	movs	r3, #64	@ 0x40
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66e:	e16c      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a670:	2380      	movs	r3, #128	@ 0x80
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a676:	e168      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6ec <UART_SetConfig+0x348>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d142      	bne.n	800a708 <UART_SetConfig+0x364>
 800a682:	4b16      	ldr	r3, [pc, #88]	@ (800a6dc <UART_SetConfig+0x338>)
 800a684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	2b05      	cmp	r3, #5
 800a68c:	d838      	bhi.n	800a700 <UART_SetConfig+0x35c>
 800a68e:	a201      	add	r2, pc, #4	@ (adr r2, 800a694 <UART_SetConfig+0x2f0>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6ad 	.word	0x0800a6ad
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a6bd 	.word	0x0800a6bd
 800a6a0:	0800a6c5 	.word	0x0800a6c5
 800a6a4:	0800a6f1 	.word	0x0800a6f1
 800a6a8:	0800a6f9 	.word	0x0800a6f9
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e14a      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e146      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a6bc:	2308      	movs	r3, #8
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c2:	e142      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ca:	e13e      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a6cc:	cfff69f3 	.word	0xcfff69f3
 800a6d0:	58000c00 	.word	0x58000c00
 800a6d4:	11fff4ff 	.word	0x11fff4ff
 800a6d8:	40011000 	.word	0x40011000
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	40004400 	.word	0x40004400
 800a6e4:	40004800 	.word	0x40004800
 800a6e8:	40004c00 	.word	0x40004c00
 800a6ec:	40005000 	.word	0x40005000
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e128      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a6f8:	2340      	movs	r3, #64	@ 0x40
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e124      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a700:	2380      	movs	r3, #128	@ 0x80
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e120      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4acb      	ldr	r2, [pc, #812]	@ (800aa3c <UART_SetConfig+0x698>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d176      	bne.n	800a800 <UART_SetConfig+0x45c>
 800a712:	4bcb      	ldr	r3, [pc, #812]	@ (800aa40 <UART_SetConfig+0x69c>)
 800a714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a71a:	2b28      	cmp	r3, #40	@ 0x28
 800a71c:	d86c      	bhi.n	800a7f8 <UART_SetConfig+0x454>
 800a71e:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <UART_SetConfig+0x380>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a7c9 	.word	0x0800a7c9
 800a728:	0800a7f9 	.word	0x0800a7f9
 800a72c:	0800a7f9 	.word	0x0800a7f9
 800a730:	0800a7f9 	.word	0x0800a7f9
 800a734:	0800a7f9 	.word	0x0800a7f9
 800a738:	0800a7f9 	.word	0x0800a7f9
 800a73c:	0800a7f9 	.word	0x0800a7f9
 800a740:	0800a7f9 	.word	0x0800a7f9
 800a744:	0800a7d1 	.word	0x0800a7d1
 800a748:	0800a7f9 	.word	0x0800a7f9
 800a74c:	0800a7f9 	.word	0x0800a7f9
 800a750:	0800a7f9 	.word	0x0800a7f9
 800a754:	0800a7f9 	.word	0x0800a7f9
 800a758:	0800a7f9 	.word	0x0800a7f9
 800a75c:	0800a7f9 	.word	0x0800a7f9
 800a760:	0800a7f9 	.word	0x0800a7f9
 800a764:	0800a7d9 	.word	0x0800a7d9
 800a768:	0800a7f9 	.word	0x0800a7f9
 800a76c:	0800a7f9 	.word	0x0800a7f9
 800a770:	0800a7f9 	.word	0x0800a7f9
 800a774:	0800a7f9 	.word	0x0800a7f9
 800a778:	0800a7f9 	.word	0x0800a7f9
 800a77c:	0800a7f9 	.word	0x0800a7f9
 800a780:	0800a7f9 	.word	0x0800a7f9
 800a784:	0800a7e1 	.word	0x0800a7e1
 800a788:	0800a7f9 	.word	0x0800a7f9
 800a78c:	0800a7f9 	.word	0x0800a7f9
 800a790:	0800a7f9 	.word	0x0800a7f9
 800a794:	0800a7f9 	.word	0x0800a7f9
 800a798:	0800a7f9 	.word	0x0800a7f9
 800a79c:	0800a7f9 	.word	0x0800a7f9
 800a7a0:	0800a7f9 	.word	0x0800a7f9
 800a7a4:	0800a7e9 	.word	0x0800a7e9
 800a7a8:	0800a7f9 	.word	0x0800a7f9
 800a7ac:	0800a7f9 	.word	0x0800a7f9
 800a7b0:	0800a7f9 	.word	0x0800a7f9
 800a7b4:	0800a7f9 	.word	0x0800a7f9
 800a7b8:	0800a7f9 	.word	0x0800a7f9
 800a7bc:	0800a7f9 	.word	0x0800a7f9
 800a7c0:	0800a7f9 	.word	0x0800a7f9
 800a7c4:	0800a7f1 	.word	0x0800a7f1
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e0bc      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e0b8      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a7d8:	2308      	movs	r3, #8
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e0b4      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e0b0      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e0ac      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a7f0:	2340      	movs	r3, #64	@ 0x40
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e0a8      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a7f8:	2380      	movs	r3, #128	@ 0x80
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e0a4      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a8f      	ldr	r2, [pc, #572]	@ (800aa44 <UART_SetConfig+0x6a0>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d130      	bne.n	800a86c <UART_SetConfig+0x4c8>
 800a80a:	4b8d      	ldr	r3, [pc, #564]	@ (800aa40 <UART_SetConfig+0x69c>)
 800a80c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a80e:	f003 0307 	and.w	r3, r3, #7
 800a812:	2b05      	cmp	r3, #5
 800a814:	d826      	bhi.n	800a864 <UART_SetConfig+0x4c0>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <UART_SetConfig+0x478>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a835 	.word	0x0800a835
 800a820:	0800a83d 	.word	0x0800a83d
 800a824:	0800a845 	.word	0x0800a845
 800a828:	0800a84d 	.word	0x0800a84d
 800a82c:	0800a855 	.word	0x0800a855
 800a830:	0800a85d 	.word	0x0800a85d
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e086      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e082      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e07e      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e07a      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a854:	2320      	movs	r3, #32
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e076      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a85c:	2340      	movs	r3, #64	@ 0x40
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e072      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a864:	2380      	movs	r3, #128	@ 0x80
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e06e      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a75      	ldr	r2, [pc, #468]	@ (800aa48 <UART_SetConfig+0x6a4>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d130      	bne.n	800a8d8 <UART_SetConfig+0x534>
 800a876:	4b72      	ldr	r3, [pc, #456]	@ (800aa40 <UART_SetConfig+0x69c>)
 800a878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a87a:	f003 0307 	and.w	r3, r3, #7
 800a87e:	2b05      	cmp	r3, #5
 800a880:	d826      	bhi.n	800a8d0 <UART_SetConfig+0x52c>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <UART_SetConfig+0x4e4>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a8a1 	.word	0x0800a8a1
 800a88c:	0800a8a9 	.word	0x0800a8a9
 800a890:	0800a8b1 	.word	0x0800a8b1
 800a894:	0800a8b9 	.word	0x0800a8b9
 800a898:	0800a8c1 	.word	0x0800a8c1
 800a89c:	0800a8c9 	.word	0x0800a8c9
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a6:	e050      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ae:	e04c      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b6:	e048      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a8b8:	2310      	movs	r3, #16
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8be:	e044      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a8c0:	2320      	movs	r3, #32
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c6:	e040      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a8c8:	2340      	movs	r3, #64	@ 0x40
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ce:	e03c      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a8d0:	2380      	movs	r3, #128	@ 0x80
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d6:	e038      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a5b      	ldr	r2, [pc, #364]	@ (800aa4c <UART_SetConfig+0x6a8>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d130      	bne.n	800a944 <UART_SetConfig+0x5a0>
 800a8e2:	4b57      	ldr	r3, [pc, #348]	@ (800aa40 <UART_SetConfig+0x69c>)
 800a8e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d826      	bhi.n	800a93c <UART_SetConfig+0x598>
 800a8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f4 <UART_SetConfig+0x550>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a915 	.word	0x0800a915
 800a8fc:	0800a91d 	.word	0x0800a91d
 800a900:	0800a925 	.word	0x0800a925
 800a904:	0800a92d 	.word	0x0800a92d
 800a908:	0800a935 	.word	0x0800a935
 800a90c:	2302      	movs	r3, #2
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a912:	e01a      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a914:	2304      	movs	r3, #4
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91a:	e016      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a91c:	2308      	movs	r3, #8
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a922:	e012      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a924:	2310      	movs	r3, #16
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92a:	e00e      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a92c:	2320      	movs	r3, #32
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a932:	e00a      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a934:	2340      	movs	r3, #64	@ 0x40
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93a:	e006      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a93c:	2380      	movs	r3, #128	@ 0x80
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e002      	b.n	800a94a <UART_SetConfig+0x5a6>
 800a944:	2380      	movs	r3, #128	@ 0x80
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a3f      	ldr	r2, [pc, #252]	@ (800aa4c <UART_SetConfig+0x6a8>)
 800a950:	4293      	cmp	r3, r2
 800a952:	f040 80f8 	bne.w	800ab46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a956:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	dc46      	bgt.n	800a9ec <UART_SetConfig+0x648>
 800a95e:	2b02      	cmp	r3, #2
 800a960:	f2c0 8082 	blt.w	800aa68 <UART_SetConfig+0x6c4>
 800a964:	3b02      	subs	r3, #2
 800a966:	2b1e      	cmp	r3, #30
 800a968:	d87e      	bhi.n	800aa68 <UART_SetConfig+0x6c4>
 800a96a:	a201      	add	r2, pc, #4	@ (adr r2, 800a970 <UART_SetConfig+0x5cc>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a9f3 	.word	0x0800a9f3
 800a974:	0800aa69 	.word	0x0800aa69
 800a978:	0800a9fb 	.word	0x0800a9fb
 800a97c:	0800aa69 	.word	0x0800aa69
 800a980:	0800aa69 	.word	0x0800aa69
 800a984:	0800aa69 	.word	0x0800aa69
 800a988:	0800aa0b 	.word	0x0800aa0b
 800a98c:	0800aa69 	.word	0x0800aa69
 800a990:	0800aa69 	.word	0x0800aa69
 800a994:	0800aa69 	.word	0x0800aa69
 800a998:	0800aa69 	.word	0x0800aa69
 800a99c:	0800aa69 	.word	0x0800aa69
 800a9a0:	0800aa69 	.word	0x0800aa69
 800a9a4:	0800aa69 	.word	0x0800aa69
 800a9a8:	0800aa1b 	.word	0x0800aa1b
 800a9ac:	0800aa69 	.word	0x0800aa69
 800a9b0:	0800aa69 	.word	0x0800aa69
 800a9b4:	0800aa69 	.word	0x0800aa69
 800a9b8:	0800aa69 	.word	0x0800aa69
 800a9bc:	0800aa69 	.word	0x0800aa69
 800a9c0:	0800aa69 	.word	0x0800aa69
 800a9c4:	0800aa69 	.word	0x0800aa69
 800a9c8:	0800aa69 	.word	0x0800aa69
 800a9cc:	0800aa69 	.word	0x0800aa69
 800a9d0:	0800aa69 	.word	0x0800aa69
 800a9d4:	0800aa69 	.word	0x0800aa69
 800a9d8:	0800aa69 	.word	0x0800aa69
 800a9dc:	0800aa69 	.word	0x0800aa69
 800a9e0:	0800aa69 	.word	0x0800aa69
 800a9e4:	0800aa69 	.word	0x0800aa69
 800a9e8:	0800aa5b 	.word	0x0800aa5b
 800a9ec:	2b40      	cmp	r3, #64	@ 0x40
 800a9ee:	d037      	beq.n	800aa60 <UART_SetConfig+0x6bc>
 800a9f0:	e03a      	b.n	800aa68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a9f2:	f7fd fbbd 	bl	8008170 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9f8:	e03c      	b.n	800aa74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fd fbcc 	bl	800819c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa08:	e034      	b.n	800aa74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa0a:	f107 0318 	add.w	r3, r7, #24
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fd fd18 	bl	8008444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa18:	e02c      	b.n	800aa74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa1a:	4b09      	ldr	r3, [pc, #36]	@ (800aa40 <UART_SetConfig+0x69c>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0320 	and.w	r3, r3, #32
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d016      	beq.n	800aa54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa26:	4b06      	ldr	r3, [pc, #24]	@ (800aa40 <UART_SetConfig+0x69c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	08db      	lsrs	r3, r3, #3
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	4a07      	ldr	r2, [pc, #28]	@ (800aa50 <UART_SetConfig+0x6ac>)
 800aa32:	fa22 f303 	lsr.w	r3, r2, r3
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa38:	e01c      	b.n	800aa74 <UART_SetConfig+0x6d0>
 800aa3a:	bf00      	nop
 800aa3c:	40011400 	.word	0x40011400
 800aa40:	58024400 	.word	0x58024400
 800aa44:	40007800 	.word	0x40007800
 800aa48:	40007c00 	.word	0x40007c00
 800aa4c:	58000c00 	.word	0x58000c00
 800aa50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aa54:	4b9d      	ldr	r3, [pc, #628]	@ (800accc <UART_SetConfig+0x928>)
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa58:	e00c      	b.n	800aa74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa5a:	4b9d      	ldr	r3, [pc, #628]	@ (800acd0 <UART_SetConfig+0x92c>)
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5e:	e009      	b.n	800aa74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa66:	e005      	b.n	800aa74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 81de 	beq.w	800ae38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	4a94      	ldr	r2, [pc, #592]	@ (800acd4 <UART_SetConfig+0x930>)
 800aa82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa86:	461a      	mov	r2, r3
 800aa88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	4613      	mov	r3, r2
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	4413      	add	r3, r2
 800aa9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d305      	bcc.n	800aaac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d903      	bls.n	800aab4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aab2:	e1c1      	b.n	800ae38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab6:	2200      	movs	r2, #0
 800aab8:	60bb      	str	r3, [r7, #8]
 800aaba:	60fa      	str	r2, [r7, #12]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac0:	4a84      	ldr	r2, [pc, #528]	@ (800acd4 <UART_SetConfig+0x930>)
 800aac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	2200      	movs	r2, #0
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aad6:	f7f5 fe17 	bl	8000708 <__aeabi_uldivmod>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	4610      	mov	r0, r2
 800aae0:	4619      	mov	r1, r3
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	020b      	lsls	r3, r1, #8
 800aaec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aaf0:	0202      	lsls	r2, r0, #8
 800aaf2:	6979      	ldr	r1, [r7, #20]
 800aaf4:	6849      	ldr	r1, [r1, #4]
 800aaf6:	0849      	lsrs	r1, r1, #1
 800aaf8:	2000      	movs	r0, #0
 800aafa:	460c      	mov	r4, r1
 800aafc:	4605      	mov	r5, r0
 800aafe:	eb12 0804 	adds.w	r8, r2, r4
 800ab02:	eb43 0905 	adc.w	r9, r3, r5
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	469a      	mov	sl, r3
 800ab0e:	4693      	mov	fp, r2
 800ab10:	4652      	mov	r2, sl
 800ab12:	465b      	mov	r3, fp
 800ab14:	4640      	mov	r0, r8
 800ab16:	4649      	mov	r1, r9
 800ab18:	f7f5 fdf6 	bl	8000708 <__aeabi_uldivmod>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4613      	mov	r3, r2
 800ab22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab2a:	d308      	bcc.n	800ab3e <UART_SetConfig+0x79a>
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab32:	d204      	bcs.n	800ab3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab3a:	60da      	str	r2, [r3, #12]
 800ab3c:	e17c      	b.n	800ae38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab44:	e178      	b.n	800ae38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab4e:	f040 80c5 	bne.w	800acdc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ab52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab56:	2b20      	cmp	r3, #32
 800ab58:	dc48      	bgt.n	800abec <UART_SetConfig+0x848>
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	db7b      	blt.n	800ac56 <UART_SetConfig+0x8b2>
 800ab5e:	2b20      	cmp	r3, #32
 800ab60:	d879      	bhi.n	800ac56 <UART_SetConfig+0x8b2>
 800ab62:	a201      	add	r2, pc, #4	@ (adr r2, 800ab68 <UART_SetConfig+0x7c4>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800abf3 	.word	0x0800abf3
 800ab6c:	0800abfb 	.word	0x0800abfb
 800ab70:	0800ac57 	.word	0x0800ac57
 800ab74:	0800ac57 	.word	0x0800ac57
 800ab78:	0800ac03 	.word	0x0800ac03
 800ab7c:	0800ac57 	.word	0x0800ac57
 800ab80:	0800ac57 	.word	0x0800ac57
 800ab84:	0800ac57 	.word	0x0800ac57
 800ab88:	0800ac13 	.word	0x0800ac13
 800ab8c:	0800ac57 	.word	0x0800ac57
 800ab90:	0800ac57 	.word	0x0800ac57
 800ab94:	0800ac57 	.word	0x0800ac57
 800ab98:	0800ac57 	.word	0x0800ac57
 800ab9c:	0800ac57 	.word	0x0800ac57
 800aba0:	0800ac57 	.word	0x0800ac57
 800aba4:	0800ac57 	.word	0x0800ac57
 800aba8:	0800ac23 	.word	0x0800ac23
 800abac:	0800ac57 	.word	0x0800ac57
 800abb0:	0800ac57 	.word	0x0800ac57
 800abb4:	0800ac57 	.word	0x0800ac57
 800abb8:	0800ac57 	.word	0x0800ac57
 800abbc:	0800ac57 	.word	0x0800ac57
 800abc0:	0800ac57 	.word	0x0800ac57
 800abc4:	0800ac57 	.word	0x0800ac57
 800abc8:	0800ac57 	.word	0x0800ac57
 800abcc:	0800ac57 	.word	0x0800ac57
 800abd0:	0800ac57 	.word	0x0800ac57
 800abd4:	0800ac57 	.word	0x0800ac57
 800abd8:	0800ac57 	.word	0x0800ac57
 800abdc:	0800ac57 	.word	0x0800ac57
 800abe0:	0800ac57 	.word	0x0800ac57
 800abe4:	0800ac57 	.word	0x0800ac57
 800abe8:	0800ac49 	.word	0x0800ac49
 800abec:	2b40      	cmp	r3, #64	@ 0x40
 800abee:	d02e      	beq.n	800ac4e <UART_SetConfig+0x8aa>
 800abf0:	e031      	b.n	800ac56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf2:	f7fc fb09 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 800abf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abf8:	e033      	b.n	800ac62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abfa:	f7fc fb1b 	bl	8007234 <HAL_RCC_GetPCLK2Freq>
 800abfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac00:	e02f      	b.n	800ac62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fd fac8 	bl	800819c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac10:	e027      	b.n	800ac62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac12:	f107 0318 	add.w	r3, r7, #24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fd fc14 	bl	8008444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac20:	e01f      	b.n	800ac62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac22:	4b2d      	ldr	r3, [pc, #180]	@ (800acd8 <UART_SetConfig+0x934>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 0320 	and.w	r3, r3, #32
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d009      	beq.n	800ac42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac2e:	4b2a      	ldr	r3, [pc, #168]	@ (800acd8 <UART_SetConfig+0x934>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	08db      	lsrs	r3, r3, #3
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	4a24      	ldr	r2, [pc, #144]	@ (800accc <UART_SetConfig+0x928>)
 800ac3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac40:	e00f      	b.n	800ac62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ac42:	4b22      	ldr	r3, [pc, #136]	@ (800accc <UART_SetConfig+0x928>)
 800ac44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac46:	e00c      	b.n	800ac62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac48:	4b21      	ldr	r3, [pc, #132]	@ (800acd0 <UART_SetConfig+0x92c>)
 800ac4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4c:	e009      	b.n	800ac62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac54:	e005      	b.n	800ac62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 80e7 	beq.w	800ae38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6e:	4a19      	ldr	r2, [pc, #100]	@ (800acd4 <UART_SetConfig+0x930>)
 800ac70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac7c:	005a      	lsls	r2, r3, #1
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	441a      	add	r2, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac92:	2b0f      	cmp	r3, #15
 800ac94:	d916      	bls.n	800acc4 <UART_SetConfig+0x920>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac9c:	d212      	bcs.n	800acc4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f023 030f 	bic.w	r3, r3, #15
 800aca6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	085b      	lsrs	r3, r3, #1
 800acac:	b29b      	uxth	r3, r3
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800acb6:	4313      	orrs	r3, r2
 800acb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800acc0:	60da      	str	r2, [r3, #12]
 800acc2:	e0b9      	b.n	800ae38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800acca:	e0b5      	b.n	800ae38 <UART_SetConfig+0xa94>
 800accc:	03d09000 	.word	0x03d09000
 800acd0:	003d0900 	.word	0x003d0900
 800acd4:	080140b8 	.word	0x080140b8
 800acd8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800acdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	dc49      	bgt.n	800ad78 <UART_SetConfig+0x9d4>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	db7c      	blt.n	800ade2 <UART_SetConfig+0xa3e>
 800ace8:	2b20      	cmp	r3, #32
 800acea:	d87a      	bhi.n	800ade2 <UART_SetConfig+0xa3e>
 800acec:	a201      	add	r2, pc, #4	@ (adr r2, 800acf4 <UART_SetConfig+0x950>)
 800acee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf2:	bf00      	nop
 800acf4:	0800ad7f 	.word	0x0800ad7f
 800acf8:	0800ad87 	.word	0x0800ad87
 800acfc:	0800ade3 	.word	0x0800ade3
 800ad00:	0800ade3 	.word	0x0800ade3
 800ad04:	0800ad8f 	.word	0x0800ad8f
 800ad08:	0800ade3 	.word	0x0800ade3
 800ad0c:	0800ade3 	.word	0x0800ade3
 800ad10:	0800ade3 	.word	0x0800ade3
 800ad14:	0800ad9f 	.word	0x0800ad9f
 800ad18:	0800ade3 	.word	0x0800ade3
 800ad1c:	0800ade3 	.word	0x0800ade3
 800ad20:	0800ade3 	.word	0x0800ade3
 800ad24:	0800ade3 	.word	0x0800ade3
 800ad28:	0800ade3 	.word	0x0800ade3
 800ad2c:	0800ade3 	.word	0x0800ade3
 800ad30:	0800ade3 	.word	0x0800ade3
 800ad34:	0800adaf 	.word	0x0800adaf
 800ad38:	0800ade3 	.word	0x0800ade3
 800ad3c:	0800ade3 	.word	0x0800ade3
 800ad40:	0800ade3 	.word	0x0800ade3
 800ad44:	0800ade3 	.word	0x0800ade3
 800ad48:	0800ade3 	.word	0x0800ade3
 800ad4c:	0800ade3 	.word	0x0800ade3
 800ad50:	0800ade3 	.word	0x0800ade3
 800ad54:	0800ade3 	.word	0x0800ade3
 800ad58:	0800ade3 	.word	0x0800ade3
 800ad5c:	0800ade3 	.word	0x0800ade3
 800ad60:	0800ade3 	.word	0x0800ade3
 800ad64:	0800ade3 	.word	0x0800ade3
 800ad68:	0800ade3 	.word	0x0800ade3
 800ad6c:	0800ade3 	.word	0x0800ade3
 800ad70:	0800ade3 	.word	0x0800ade3
 800ad74:	0800add5 	.word	0x0800add5
 800ad78:	2b40      	cmp	r3, #64	@ 0x40
 800ad7a:	d02e      	beq.n	800adda <UART_SetConfig+0xa36>
 800ad7c:	e031      	b.n	800ade2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7e:	f7fc fa43 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 800ad82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad84:	e033      	b.n	800adee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad86:	f7fc fa55 	bl	8007234 <HAL_RCC_GetPCLK2Freq>
 800ad8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad8c:	e02f      	b.n	800adee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fd fa02 	bl	800819c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad9c:	e027      	b.n	800adee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad9e:	f107 0318 	add.w	r3, r7, #24
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fd fb4e 	bl	8008444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adac:	e01f      	b.n	800adee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adae:	4b2d      	ldr	r3, [pc, #180]	@ (800ae64 <UART_SetConfig+0xac0>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d009      	beq.n	800adce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adba:	4b2a      	ldr	r3, [pc, #168]	@ (800ae64 <UART_SetConfig+0xac0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	08db      	lsrs	r3, r3, #3
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	4a28      	ldr	r2, [pc, #160]	@ (800ae68 <UART_SetConfig+0xac4>)
 800adc6:	fa22 f303 	lsr.w	r3, r2, r3
 800adca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adcc:	e00f      	b.n	800adee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800adce:	4b26      	ldr	r3, [pc, #152]	@ (800ae68 <UART_SetConfig+0xac4>)
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add2:	e00c      	b.n	800adee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800add4:	4b25      	ldr	r3, [pc, #148]	@ (800ae6c <UART_SetConfig+0xac8>)
 800add6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add8:	e009      	b.n	800adee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade0:	e005      	b.n	800adee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800adec:	bf00      	nop
    }

    if (pclk != 0U)
 800adee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d021      	beq.n	800ae38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <UART_SetConfig+0xacc>)
 800adfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adfe:	461a      	mov	r2, r3
 800ae00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae02:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	085b      	lsrs	r3, r3, #1
 800ae0c:	441a      	add	r2, r3
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	2b0f      	cmp	r3, #15
 800ae1c:	d909      	bls.n	800ae32 <UART_SetConfig+0xa8e>
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae24:	d205      	bcs.n	800ae32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	60da      	str	r2, [r3, #12]
 800ae30:	e002      	b.n	800ae38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2200      	movs	r2, #0
 800ae52:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800ae54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3748      	adds	r7, #72	@ 0x48
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae62:	bf00      	nop
 800ae64:	58024400 	.word	0x58024400
 800ae68:	03d09000 	.word	0x03d09000
 800ae6c:	003d0900 	.word	0x003d0900
 800ae70:	080140b8 	.word	0x080140b8

0800ae74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00a      	beq.n	800ae9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01a      	beq.n	800af8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af72:	d10a      	bne.n	800af8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	605a      	str	r2, [r3, #4]
  }
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afc8:	f7f8 ffac 	bl	8003f24 <HAL_GetTick>
 800afcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d10e      	bne.n	800affa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f82f 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e025      	b.n	800b046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0304 	and.w	r3, r3, #4
 800b004:	2b04      	cmp	r3, #4
 800b006:	d10e      	bne.n	800b026 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f819 	bl	800b04e <UART_WaitOnFlagUntilTimeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e00f      	b.n	800b046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2220      	movs	r2, #32
 800b032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b09c      	sub	sp, #112	@ 0x70
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	4613      	mov	r3, r2
 800b05c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b05e:	e0a9      	b.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b066:	f000 80a5 	beq.w	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b06a:	f7f8 ff5b 	bl	8003f24 <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b076:	429a      	cmp	r2, r3
 800b078:	d302      	bcc.n	800b080 <UART_WaitOnFlagUntilTimeout+0x32>
 800b07a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d140      	bne.n	800b102 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b090:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b094:	667b      	str	r3, [r7, #100]	@ 0x64
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b09e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b0a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b0ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e6      	bne.n	800b080 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c4:	f023 0301 	bic.w	r3, r3, #1
 800b0c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b0d2:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b0d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b0e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e5      	bne.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e069      	b.n	800b1d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0304 	and.w	r3, r3, #4
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d051      	beq.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b11a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b11e:	d149      	bne.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b13e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b148:	637b      	str	r3, [r7, #52]	@ 0x34
 800b14a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b14e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e6      	bne.n	800b12a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3308      	adds	r3, #8
 800b162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	e853 3f00 	ldrex	r3, [r3]
 800b16a:	613b      	str	r3, [r7, #16]
   return(result);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	f023 0301 	bic.w	r3, r3, #1
 800b172:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3308      	adds	r3, #8
 800b17a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b17c:	623a      	str	r2, [r7, #32]
 800b17e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	69f9      	ldr	r1, [r7, #28]
 800b182:	6a3a      	ldr	r2, [r7, #32]
 800b184:	e841 2300 	strex	r3, r2, [r1]
 800b188:	61bb      	str	r3, [r7, #24]
   return(result);
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e5      	bne.n	800b15c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2220      	movs	r2, #32
 800b194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e010      	b.n	800b1d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	69da      	ldr	r2, [r3, #28]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	bf0c      	ite	eq
 800b1c4:	2301      	moveq	r3, #1
 800b1c6:	2300      	movne	r3, #0
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	f43f af46 	beq.w	800b060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3770      	adds	r7, #112	@ 0x70
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b085      	sub	sp, #20
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e027      	b.n	800b244 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2224      	movs	r2, #36	@ 0x24
 800b200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 0201 	bic.w	r2, r2, #1
 800b21a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b222:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2220      	movs	r2, #32
 800b236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b264:	2302      	movs	r3, #2
 800b266:	e02d      	b.n	800b2c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2224      	movs	r2, #36	@ 0x24
 800b274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 0201 	bic.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f84f 	bl	800b348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d101      	bne.n	800b2e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e02d      	b.n	800b340 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2224      	movs	r2, #36	@ 0x24
 800b2f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f022 0201 	bic.w	r2, r2, #1
 800b30a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f811 	bl	800b348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b354:	2b00      	cmp	r3, #0
 800b356:	d108      	bne.n	800b36a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b368:	e031      	b.n	800b3ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b36a:	2310      	movs	r3, #16
 800b36c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b36e:	2310      	movs	r3, #16
 800b370:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	0e5b      	lsrs	r3, r3, #25
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	f003 0307 	and.w	r3, r3, #7
 800b380:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	0f5b      	lsrs	r3, r3, #29
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b392:	7bbb      	ldrb	r3, [r7, #14]
 800b394:	7b3a      	ldrb	r2, [r7, #12]
 800b396:	4911      	ldr	r1, [pc, #68]	@ (800b3dc <UARTEx_SetNbDataToProcess+0x94>)
 800b398:	5c8a      	ldrb	r2, [r1, r2]
 800b39a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b39e:	7b3a      	ldrb	r2, [r7, #12]
 800b3a0:	490f      	ldr	r1, [pc, #60]	@ (800b3e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b3a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	7b7a      	ldrb	r2, [r7, #13]
 800b3b4:	4909      	ldr	r1, [pc, #36]	@ (800b3dc <UARTEx_SetNbDataToProcess+0x94>)
 800b3b6:	5c8a      	ldrb	r2, [r1, r2]
 800b3b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3bc:	7b7a      	ldrb	r2, [r7, #13]
 800b3be:	4908      	ldr	r1, [pc, #32]	@ (800b3e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3ce:	bf00      	nop
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	080140d0 	.word	0x080140d0
 800b3e0:	080140d8 	.word	0x080140d8

0800b3e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	f107 001c 	add.w	r0, r7, #28
 800b3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d120      	bne.n	800b43e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b400:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68da      	ldr	r2, [r3, #12]
 800b40c:	4b2a      	ldr	r3, [pc, #168]	@ (800b4b8 <USB_CoreInit+0xd4>)
 800b40e:	4013      	ands	r3, r2
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b422:	2b01      	cmp	r3, #1
 800b424:	d105      	bne.n	800b432 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 faac 	bl	800b990 <USB_CoreReset>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]
 800b43c:	e01a      	b.n	800b474 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 faa0 	bl	800b990 <USB_CoreReset>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b45e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	639a      	str	r2, [r3, #56]	@ 0x38
 800b466:	e005      	b.n	800b474 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b46c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b476:	2b01      	cmp	r3, #1
 800b478:	d116      	bne.n	800b4a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b47e:	b29a      	uxth	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b488:	4b0c      	ldr	r3, [pc, #48]	@ (800b4bc <USB_CoreInit+0xd8>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f043 0206 	orr.w	r2, r3, #6
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f043 0220 	orr.w	r2, r3, #32
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4b4:	b004      	add	sp, #16
 800b4b6:	4770      	bx	lr
 800b4b8:	ffbdffbf 	.word	0xffbdffbf
 800b4bc:	03ee0000 	.word	0x03ee0000

0800b4c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f023 0201 	bic.w	r2, r3, #1
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b4fe:	78fb      	ldrb	r3, [r7, #3]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d115      	bne.n	800b530 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b510:	2001      	movs	r0, #1
 800b512:	f7f8 fd13 	bl	8003f3c <HAL_Delay>
      ms++;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	3301      	adds	r3, #1
 800b51a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fa29 	bl	800b974 <USB_GetMode>
 800b522:	4603      	mov	r3, r0
 800b524:	2b01      	cmp	r3, #1
 800b526:	d01e      	beq.n	800b566 <USB_SetCurrentMode+0x84>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b31      	cmp	r3, #49	@ 0x31
 800b52c:	d9f0      	bls.n	800b510 <USB_SetCurrentMode+0x2e>
 800b52e:	e01a      	b.n	800b566 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d115      	bne.n	800b562 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b542:	2001      	movs	r0, #1
 800b544:	f7f8 fcfa 	bl	8003f3c <HAL_Delay>
      ms++;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3301      	adds	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fa10 	bl	800b974 <USB_GetMode>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d005      	beq.n	800b566 <USB_SetCurrentMode+0x84>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b31      	cmp	r3, #49	@ 0x31
 800b55e:	d9f0      	bls.n	800b542 <USB_SetCurrentMode+0x60>
 800b560:	e001      	b.n	800b566 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e005      	b.n	800b572 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b32      	cmp	r3, #50	@ 0x32
 800b56a:	d101      	bne.n	800b570 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e000      	b.n	800b572 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b57c:	b084      	sub	sp, #16
 800b57e:	b580      	push	{r7, lr}
 800b580:	b086      	sub	sp, #24
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b58a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	e009      	b.n	800b5b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	3340      	adds	r3, #64	@ 0x40
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	613b      	str	r3, [r7, #16]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2b0e      	cmp	r3, #14
 800b5b4:	d9f2      	bls.n	800b59c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b5b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d11c      	bne.n	800b5f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5ca:	f043 0302 	orr.w	r3, r3, #2
 800b5ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	e005      	b.n	800b602 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b608:	461a      	mov	r2, r3
 800b60a:	2300      	movs	r3, #0
 800b60c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b614:	4619      	mov	r1, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b61c:	461a      	mov	r2, r3
 800b61e:	680b      	ldr	r3, [r1, #0]
 800b620:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b624:	2b01      	cmp	r3, #1
 800b626:	d10c      	bne.n	800b642 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d104      	bne.n	800b638 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b62e:	2100      	movs	r1, #0
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f965 	bl	800b900 <USB_SetDevSpeed>
 800b636:	e008      	b.n	800b64a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b638:	2101      	movs	r1, #1
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f960 	bl	800b900 <USB_SetDevSpeed>
 800b640:	e003      	b.n	800b64a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b642:	2103      	movs	r1, #3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f95b 	bl	800b900 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b64a:	2110      	movs	r1, #16
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8f3 	bl	800b838 <USB_FlushTxFifo>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f91f 	bl	800b8a0 <USB_FlushRxFifo>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b672:	461a      	mov	r2, r3
 800b674:	2300      	movs	r3, #0
 800b676:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b67e:	461a      	mov	r2, r3
 800b680:	2300      	movs	r3, #0
 800b682:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b68a:	461a      	mov	r2, r3
 800b68c:	2300      	movs	r3, #0
 800b68e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
 800b694:	e043      	b.n	800b71e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6ac:	d118      	bne.n	800b6e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	e013      	b.n	800b6f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	e008      	b.n	800b6f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	015a      	lsls	r2, r3, #5
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6fe:	461a      	mov	r2, r3
 800b700:	2300      	movs	r3, #0
 800b702:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b710:	461a      	mov	r2, r3
 800b712:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b716:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	3301      	adds	r3, #1
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	429a      	cmp	r2, r3
 800b724:	d3b7      	bcc.n	800b696 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b726:	2300      	movs	r3, #0
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	e043      	b.n	800b7b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b73e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b742:	d118      	bne.n	800b776 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10a      	bne.n	800b760 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	015a      	lsls	r2, r3, #5
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4413      	add	r3, r2
 800b752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b756:	461a      	mov	r2, r3
 800b758:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	e013      	b.n	800b788 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b76c:	461a      	mov	r2, r3
 800b76e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	e008      	b.n	800b788 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	015a      	lsls	r2, r3, #5
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b782:	461a      	mov	r2, r3
 800b784:	2300      	movs	r3, #0
 800b786:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b794:	461a      	mov	r2, r3
 800b796:	2300      	movs	r3, #0
 800b798:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b7ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d3b7      	bcc.n	800b72c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b7dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d105      	bne.n	800b7f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	f043 0210 	orr.w	r2, r3, #16
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	699a      	ldr	r2, [r3, #24]
 800b7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b830 <USB_DevInit+0x2b4>)
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	f043 0208 	orr.w	r2, r3, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b80e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b810:	2b01      	cmp	r3, #1
 800b812:	d105      	bne.n	800b820 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	699a      	ldr	r2, [r3, #24]
 800b818:	4b06      	ldr	r3, [pc, #24]	@ (800b834 <USB_DevInit+0x2b8>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b820:	7dfb      	ldrb	r3, [r7, #23]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b82c:	b004      	add	sp, #16
 800b82e:	4770      	bx	lr
 800b830:	803c3800 	.word	0x803c3800
 800b834:	40000004 	.word	0x40000004

0800b838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	4a13      	ldr	r2, [pc, #76]	@ (800b89c <USB_FlushTxFifo+0x64>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d901      	bls.n	800b858 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b854:	2303      	movs	r3, #3
 800b856:	e01b      	b.n	800b890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	daf2      	bge.n	800b846 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b860:	2300      	movs	r3, #0
 800b862:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	019b      	lsls	r3, r3, #6
 800b868:	f043 0220 	orr.w	r2, r3, #32
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3301      	adds	r3, #1
 800b874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	4a08      	ldr	r2, [pc, #32]	@ (800b89c <USB_FlushTxFifo+0x64>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d901      	bls.n	800b882 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e006      	b.n	800b890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	f003 0320 	and.w	r3, r3, #32
 800b88a:	2b20      	cmp	r3, #32
 800b88c:	d0f0      	beq.n	800b870 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	00030d40 	.word	0x00030d40

0800b8a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	4a11      	ldr	r2, [pc, #68]	@ (800b8fc <USB_FlushRxFifo+0x5c>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d901      	bls.n	800b8be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e018      	b.n	800b8f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	daf2      	bge.n	800b8ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2210      	movs	r2, #16
 800b8ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	4a08      	ldr	r2, [pc, #32]	@ (800b8fc <USB_FlushRxFifo+0x5c>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d901      	bls.n	800b8e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e006      	b.n	800b8f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	f003 0310 	and.w	r3, r3, #16
 800b8ea:	2b10      	cmp	r3, #16
 800b8ec:	d0f0      	beq.n	800b8d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	00030d40 	.word	0x00030d40

0800b900 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	78fb      	ldrb	r3, [r7, #3]
 800b91a:	68f9      	ldr	r1, [r7, #12]
 800b91c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b920:	4313      	orrs	r3, r2
 800b922:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b932:	b480      	push	{r7}
 800b934:	b085      	sub	sp, #20
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b94c:	f023 0303 	bic.w	r3, r3, #3
 800b950:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b960:	f043 0302 	orr.w	r3, r3, #2
 800b964:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	f003 0301 	and.w	r3, r3, #1
}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b998:	2300      	movs	r3, #0
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4a13      	ldr	r2, [pc, #76]	@ (800b9f4 <USB_CoreReset+0x64>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d901      	bls.n	800b9ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	e01b      	b.n	800b9e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	daf2      	bge.n	800b99c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	f043 0201 	orr.w	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4a09      	ldr	r2, [pc, #36]	@ (800b9f4 <USB_CoreReset+0x64>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d901      	bls.n	800b9d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	e006      	b.n	800b9e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d0f0      	beq.n	800b9c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	00030d40 	.word	0x00030d40

0800b9f8 <__NVIC_SetPriority>:
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	6039      	str	r1, [r7, #0]
 800ba02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ba04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	db0a      	blt.n	800ba22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	490c      	ldr	r1, [pc, #48]	@ (800ba44 <__NVIC_SetPriority+0x4c>)
 800ba12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba16:	0112      	lsls	r2, r2, #4
 800ba18:	b2d2      	uxtb	r2, r2
 800ba1a:	440b      	add	r3, r1
 800ba1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ba20:	e00a      	b.n	800ba38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	4908      	ldr	r1, [pc, #32]	@ (800ba48 <__NVIC_SetPriority+0x50>)
 800ba28:	88fb      	ldrh	r3, [r7, #6]
 800ba2a:	f003 030f 	and.w	r3, r3, #15
 800ba2e:	3b04      	subs	r3, #4
 800ba30:	0112      	lsls	r2, r2, #4
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	440b      	add	r3, r1
 800ba36:	761a      	strb	r2, [r3, #24]
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	e000e100 	.word	0xe000e100
 800ba48:	e000ed00 	.word	0xe000ed00

0800ba4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba50:	4b05      	ldr	r3, [pc, #20]	@ (800ba68 <SysTick_Handler+0x1c>)
 800ba52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba54:	f002 f984 	bl	800dd60 <xTaskGetSchedulerState>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d001      	beq.n	800ba62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba5e:	f000 fd9b 	bl	800c598 <xPortSysTickHandler>
  }
}
 800ba62:	bf00      	nop
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	e000e010 	.word	0xe000e010

0800ba6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ba70:	2100      	movs	r1, #0
 800ba72:	f06f 0004 	mvn.w	r0, #4
 800ba76:	f7ff ffbf 	bl	800b9f8 <__NVIC_SetPriority>
#endif
}
 800ba7a:	bf00      	nop
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba86:	f3ef 8305 	mrs	r3, IPSR
 800ba8a:	603b      	str	r3, [r7, #0]
  return(result);
 800ba8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d003      	beq.n	800ba9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ba92:	f06f 0305 	mvn.w	r3, #5
 800ba96:	607b      	str	r3, [r7, #4]
 800ba98:	e00c      	b.n	800bab4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bac4 <osKernelInitialize+0x44>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d105      	bne.n	800baae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800baa2:	4b08      	ldr	r3, [pc, #32]	@ (800bac4 <osKernelInitialize+0x44>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	607b      	str	r3, [r7, #4]
 800baac:	e002      	b.n	800bab4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800baae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bab4:	687b      	ldr	r3, [r7, #4]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	24000cf4 	.word	0x24000cf4

0800bac8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bace:	f3ef 8305 	mrs	r3, IPSR
 800bad2:	603b      	str	r3, [r7, #0]
  return(result);
 800bad4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bada:	f06f 0305 	mvn.w	r3, #5
 800bade:	607b      	str	r3, [r7, #4]
 800bae0:	e010      	b.n	800bb04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bae2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb10 <osKernelStart+0x48>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d109      	bne.n	800bafe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800baea:	f7ff ffbf 	bl	800ba6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800baee:	4b08      	ldr	r3, [pc, #32]	@ (800bb10 <osKernelStart+0x48>)
 800baf0:	2202      	movs	r2, #2
 800baf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800baf4:	f001 fcd0 	bl	800d498 <vTaskStartScheduler>
      stat = osOK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	607b      	str	r3, [r7, #4]
 800bafc:	e002      	b.n	800bb04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb04:	687b      	ldr	r3, [r7, #4]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	24000cf4 	.word	0x24000cf4

0800bb14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08e      	sub	sp, #56	@ 0x38
 800bb18:	af04      	add	r7, sp, #16
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb20:	2300      	movs	r3, #0
 800bb22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb24:	f3ef 8305 	mrs	r3, IPSR
 800bb28:	617b      	str	r3, [r7, #20]
  return(result);
 800bb2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d17e      	bne.n	800bc2e <osThreadNew+0x11a>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d07b      	beq.n	800bc2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb36:	2380      	movs	r3, #128	@ 0x80
 800bb38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb3a:	2318      	movs	r3, #24
 800bb3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bb42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d045      	beq.n	800bbda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <osThreadNew+0x48>
        name = attr->name;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d008      	beq.n	800bb82 <osThreadNew+0x6e>
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	2b38      	cmp	r3, #56	@ 0x38
 800bb74:	d805      	bhi.n	800bb82 <osThreadNew+0x6e>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <osThreadNew+0x72>
        return (NULL);
 800bb82:	2300      	movs	r3, #0
 800bb84:	e054      	b.n	800bc30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	089b      	lsrs	r3, r3, #2
 800bb94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00e      	beq.n	800bbbc <osThreadNew+0xa8>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	2ba7      	cmp	r3, #167	@ 0xa7
 800bba4:	d90a      	bls.n	800bbbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d006      	beq.n	800bbbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <osThreadNew+0xa8>
        mem = 1;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	61bb      	str	r3, [r7, #24]
 800bbba:	e010      	b.n	800bbde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10c      	bne.n	800bbde <osThreadNew+0xca>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d108      	bne.n	800bbde <osThreadNew+0xca>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d104      	bne.n	800bbde <osThreadNew+0xca>
          mem = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	61bb      	str	r3, [r7, #24]
 800bbd8:	e001      	b.n	800bbde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d110      	bne.n	800bc06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbec:	9202      	str	r2, [sp, #8]
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	6a3a      	ldr	r2, [r7, #32]
 800bbf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f001 fa58 	bl	800d0b0 <xTaskCreateStatic>
 800bc00:	4603      	mov	r3, r0
 800bc02:	613b      	str	r3, [r7, #16]
 800bc04:	e013      	b.n	800bc2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d110      	bne.n	800bc2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	f107 0310 	add.w	r3, r7, #16
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f001 faa6 	bl	800d170 <xTaskCreate>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d001      	beq.n	800bc2e <osThreadNew+0x11a>
            hTask = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc2e:	693b      	ldr	r3, [r7, #16]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3728      	adds	r7, #40	@ 0x28
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc40:	f3ef 8305 	mrs	r3, IPSR
 800bc44:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <osDelay+0x1c>
    stat = osErrorISR;
 800bc4c:	f06f 0305 	mvn.w	r3, #5
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e007      	b.n	800bc64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fbe4 	bl	800d42c <vTaskDelay>
    }
  }

  return (stat);
 800bc64:	68fb      	ldr	r3, [r7, #12]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
	...

0800bc70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4a07      	ldr	r2, [pc, #28]	@ (800bc9c <vApplicationGetIdleTaskMemory+0x2c>)
 800bc80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	4a06      	ldr	r2, [pc, #24]	@ (800bca0 <vApplicationGetIdleTaskMemory+0x30>)
 800bc86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2280      	movs	r2, #128	@ 0x80
 800bc8c:	601a      	str	r2, [r3, #0]
}
 800bc8e:	bf00      	nop
 800bc90:	3714      	adds	r7, #20
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	24000cf8 	.word	0x24000cf8
 800bca0:	24000da0 	.word	0x24000da0

0800bca4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4a07      	ldr	r2, [pc, #28]	@ (800bcd0 <vApplicationGetTimerTaskMemory+0x2c>)
 800bcb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	4a06      	ldr	r2, [pc, #24]	@ (800bcd4 <vApplicationGetTimerTaskMemory+0x30>)
 800bcba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bcc2:	601a      	str	r2, [r3, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	24000fa0 	.word	0x24000fa0
 800bcd4:	24001048 	.word	0x24001048

0800bcd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	@ 0x28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bce4:	f001 fc48 	bl	800d578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bce8:	4b5c      	ldr	r3, [pc, #368]	@ (800be5c <pvPortMalloc+0x184>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bcf0:	f000 f924 	bl	800bf3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcf4:	4b5a      	ldr	r3, [pc, #360]	@ (800be60 <pvPortMalloc+0x188>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f040 8095 	bne.w	800be2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d01e      	beq.n	800bd46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bd08:	2208      	movs	r2, #8
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f003 0307 	and.w	r3, r3, #7
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d015      	beq.n	800bd46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f023 0307 	bic.w	r3, r3, #7
 800bd20:	3308      	adds	r3, #8
 800bd22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f003 0307 	and.w	r3, r3, #7
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd40:	bf00      	nop
 800bd42:	bf00      	nop
 800bd44:	e7fd      	b.n	800bd42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d06f      	beq.n	800be2c <pvPortMalloc+0x154>
 800bd4c:	4b45      	ldr	r3, [pc, #276]	@ (800be64 <pvPortMalloc+0x18c>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d86a      	bhi.n	800be2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd56:	4b44      	ldr	r3, [pc, #272]	@ (800be68 <pvPortMalloc+0x190>)
 800bd58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd5a:	4b43      	ldr	r3, [pc, #268]	@ (800be68 <pvPortMalloc+0x190>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd60:	e004      	b.n	800bd6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d903      	bls.n	800bd7e <pvPortMalloc+0xa6>
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1f1      	bne.n	800bd62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd7e:	4b37      	ldr	r3, [pc, #220]	@ (800be5c <pvPortMalloc+0x184>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d051      	beq.n	800be2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2208      	movs	r2, #8
 800bd8e:	4413      	add	r3, r2
 800bd90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	1ad2      	subs	r2, r2, r3
 800bda2:	2308      	movs	r3, #8
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d920      	bls.n	800bdec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4413      	add	r3, r2
 800bdb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	f003 0307 	and.w	r3, r3, #7
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00b      	beq.n	800bdd4 <pvPortMalloc+0xfc>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	613b      	str	r3, [r7, #16]
}
 800bdce:	bf00      	nop
 800bdd0:	bf00      	nop
 800bdd2:	e7fd      	b.n	800bdd0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	1ad2      	subs	r2, r2, r3
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bde6:	69b8      	ldr	r0, [r7, #24]
 800bde8:	f000 f90a 	bl	800c000 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bdec:	4b1d      	ldr	r3, [pc, #116]	@ (800be64 <pvPortMalloc+0x18c>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	4a1b      	ldr	r2, [pc, #108]	@ (800be64 <pvPortMalloc+0x18c>)
 800bdf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdfa:	4b1a      	ldr	r3, [pc, #104]	@ (800be64 <pvPortMalloc+0x18c>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	4b1b      	ldr	r3, [pc, #108]	@ (800be6c <pvPortMalloc+0x194>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	429a      	cmp	r2, r3
 800be04:	d203      	bcs.n	800be0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be06:	4b17      	ldr	r3, [pc, #92]	@ (800be64 <pvPortMalloc+0x18c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a18      	ldr	r2, [pc, #96]	@ (800be6c <pvPortMalloc+0x194>)
 800be0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	4b13      	ldr	r3, [pc, #76]	@ (800be60 <pvPortMalloc+0x188>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	431a      	orrs	r2, r3
 800be18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1e:	2200      	movs	r2, #0
 800be20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be22:	4b13      	ldr	r3, [pc, #76]	@ (800be70 <pvPortMalloc+0x198>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3301      	adds	r3, #1
 800be28:	4a11      	ldr	r2, [pc, #68]	@ (800be70 <pvPortMalloc+0x198>)
 800be2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be2c:	f001 fbb2 	bl	800d594 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <pvPortMalloc+0x17a>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	60fb      	str	r3, [r7, #12]
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	e7fd      	b.n	800be4e <pvPortMalloc+0x176>
	return pvReturn;
 800be52:	69fb      	ldr	r3, [r7, #28]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3728      	adds	r7, #40	@ 0x28
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	24005050 	.word	0x24005050
 800be60:	24005064 	.word	0x24005064
 800be64:	24005054 	.word	0x24005054
 800be68:	24005048 	.word	0x24005048
 800be6c:	24005058 	.word	0x24005058
 800be70:	2400505c 	.word	0x2400505c

0800be74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d04f      	beq.n	800bf26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be86:	2308      	movs	r3, #8
 800be88:	425b      	negs	r3, r3
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	4413      	add	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	4b25      	ldr	r3, [pc, #148]	@ (800bf30 <vPortFree+0xbc>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4013      	ands	r3, r2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10b      	bne.n	800beba <vPortFree+0x46>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	60fb      	str	r3, [r7, #12]
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	e7fd      	b.n	800beb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00b      	beq.n	800beda <vPortFree+0x66>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	60bb      	str	r3, [r7, #8]
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	e7fd      	b.n	800bed6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	4b14      	ldr	r3, [pc, #80]	@ (800bf30 <vPortFree+0xbc>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4013      	ands	r3, r2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01e      	beq.n	800bf26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d11a      	bne.n	800bf26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	4b0e      	ldr	r3, [pc, #56]	@ (800bf30 <vPortFree+0xbc>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	43db      	mvns	r3, r3
 800befa:	401a      	ands	r2, r3
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf00:	f001 fb3a 	bl	800d578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	4b0a      	ldr	r3, [pc, #40]	@ (800bf34 <vPortFree+0xc0>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	4a09      	ldr	r2, [pc, #36]	@ (800bf34 <vPortFree+0xc0>)
 800bf10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf12:	6938      	ldr	r0, [r7, #16]
 800bf14:	f000 f874 	bl	800c000 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf18:	4b07      	ldr	r3, [pc, #28]	@ (800bf38 <vPortFree+0xc4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	4a06      	ldr	r2, [pc, #24]	@ (800bf38 <vPortFree+0xc4>)
 800bf20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf22:	f001 fb37 	bl	800d594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf26:	bf00      	nop
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	24005064 	.word	0x24005064
 800bf34:	24005054 	.word	0x24005054
 800bf38:	24005060 	.word	0x24005060

0800bf3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bf46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf48:	4b27      	ldr	r3, [pc, #156]	@ (800bfe8 <prvHeapInit+0xac>)
 800bf4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f003 0307 	and.w	r3, r3, #7
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00c      	beq.n	800bf70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3307      	adds	r3, #7
 800bf5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f023 0307 	bic.w	r3, r3, #7
 800bf62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	4a1f      	ldr	r2, [pc, #124]	@ (800bfe8 <prvHeapInit+0xac>)
 800bf6c:	4413      	add	r3, r2
 800bf6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf74:	4a1d      	ldr	r2, [pc, #116]	@ (800bfec <prvHeapInit+0xb0>)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf7a:	4b1c      	ldr	r3, [pc, #112]	@ (800bfec <prvHeapInit+0xb0>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	4413      	add	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf88:	2208      	movs	r2, #8
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	1a9b      	subs	r3, r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f023 0307 	bic.w	r3, r3, #7
 800bf96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4a15      	ldr	r2, [pc, #84]	@ (800bff0 <prvHeapInit+0xb4>)
 800bf9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf9e:	4b14      	ldr	r3, [pc, #80]	@ (800bff0 <prvHeapInit+0xb4>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bfa6:	4b12      	ldr	r3, [pc, #72]	@ (800bff0 <prvHeapInit+0xb4>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	1ad2      	subs	r2, r2, r3
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfbc:	4b0c      	ldr	r3, [pc, #48]	@ (800bff0 <prvHeapInit+0xb4>)
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	4a0a      	ldr	r2, [pc, #40]	@ (800bff4 <prvHeapInit+0xb8>)
 800bfca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	4a09      	ldr	r2, [pc, #36]	@ (800bff8 <prvHeapInit+0xbc>)
 800bfd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfd4:	4b09      	ldr	r3, [pc, #36]	@ (800bffc <prvHeapInit+0xc0>)
 800bfd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bfda:	601a      	str	r2, [r3, #0]
}
 800bfdc:	bf00      	nop
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	24001448 	.word	0x24001448
 800bfec:	24005048 	.word	0x24005048
 800bff0:	24005050 	.word	0x24005050
 800bff4:	24005058 	.word	0x24005058
 800bff8:	24005054 	.word	0x24005054
 800bffc:	24005064 	.word	0x24005064

0800c000 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c008:	4b28      	ldr	r3, [pc, #160]	@ (800c0ac <prvInsertBlockIntoFreeList+0xac>)
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e002      	b.n	800c014 <prvInsertBlockIntoFreeList+0x14>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d8f7      	bhi.n	800c00e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	4413      	add	r3, r2
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d108      	bne.n	800c042 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	441a      	add	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	441a      	add	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	429a      	cmp	r2, r3
 800c054:	d118      	bne.n	800c088 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	4b15      	ldr	r3, [pc, #84]	@ (800c0b0 <prvInsertBlockIntoFreeList+0xb0>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d00d      	beq.n	800c07e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	441a      	add	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	e008      	b.n	800c090 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c07e:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b0 <prvInsertBlockIntoFreeList+0xb0>)
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
 800c086:	e003      	b.n	800c090 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	429a      	cmp	r2, r3
 800c096:	d002      	beq.n	800c09e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	24005048 	.word	0x24005048
 800c0b0:	24005050 	.word	0x24005050

0800c0b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f103 0208 	add.w	r2, r3, #8
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f103 0208 	add.w	r2, r3, #8
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f103 0208 	add.w	r2, r3, #8
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c10e:	b480      	push	{r7}
 800c110:	b085      	sub	sp, #20
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	689a      	ldr	r2, [r3, #8]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	683a      	ldr	r2, [r7, #0]
 800c132:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	601a      	str	r2, [r3, #0]
}
 800c14a:	bf00      	nop
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c156:	b480      	push	{r7}
 800c158:	b085      	sub	sp, #20
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c16c:	d103      	bne.n	800c176 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	e00c      	b.n	800c190 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3308      	adds	r3, #8
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	e002      	b.n	800c184 <vListInsert+0x2e>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d2f6      	bcs.n	800c17e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	601a      	str	r2, [r3, #0]
}
 800c1bc:	bf00      	nop
 800c1be:	3714      	adds	r7, #20
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	6892      	ldr	r2, [r2, #8]
 800c1de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	6852      	ldr	r2, [r2, #4]
 800c1e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d103      	bne.n	800c1fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689a      	ldr	r2, [r3, #8]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	1e5a      	subs	r2, r3, #1
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3b04      	subs	r3, #4
 800c22c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3b04      	subs	r3, #4
 800c23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	f023 0201 	bic.w	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3b04      	subs	r3, #4
 800c24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c24c:	4a0c      	ldr	r2, [pc, #48]	@ (800c280 <pxPortInitialiseStack+0x64>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3b14      	subs	r3, #20
 800c256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3b04      	subs	r3, #4
 800c262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f06f 0202 	mvn.w	r2, #2
 800c26a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	3b20      	subs	r3, #32
 800c270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c272:	68fb      	ldr	r3, [r7, #12]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	0800c285 	.word	0x0800c285

0800c284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c28e:	4b13      	ldr	r3, [pc, #76]	@ (800c2dc <prvTaskExitError+0x58>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c296:	d00b      	beq.n	800c2b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	60fb      	str	r3, [r7, #12]
}
 800c2aa:	bf00      	nop
 800c2ac:	bf00      	nop
 800c2ae:	e7fd      	b.n	800c2ac <prvTaskExitError+0x28>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	60bb      	str	r3, [r7, #8]
}
 800c2c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2c4:	bf00      	nop
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d0fc      	beq.n	800c2c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	24000018 	.word	0x24000018

0800c2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2e0:	4b07      	ldr	r3, [pc, #28]	@ (800c300 <pxCurrentTCBConst2>)
 800c2e2:	6819      	ldr	r1, [r3, #0]
 800c2e4:	6808      	ldr	r0, [r1, #0]
 800c2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	f380 8809 	msr	PSP, r0
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f04f 0000 	mov.w	r0, #0
 800c2f6:	f380 8811 	msr	BASEPRI, r0
 800c2fa:	4770      	bx	lr
 800c2fc:	f3af 8000 	nop.w

0800c300 <pxCurrentTCBConst2>:
 800c300:	240050b0 	.word	0x240050b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop

0800c308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c308:	4808      	ldr	r0, [pc, #32]	@ (800c32c <prvPortStartFirstTask+0x24>)
 800c30a:	6800      	ldr	r0, [r0, #0]
 800c30c:	6800      	ldr	r0, [r0, #0]
 800c30e:	f380 8808 	msr	MSP, r0
 800c312:	f04f 0000 	mov.w	r0, #0
 800c316:	f380 8814 	msr	CONTROL, r0
 800c31a:	b662      	cpsie	i
 800c31c:	b661      	cpsie	f
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	df00      	svc	0
 800c328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c32a:	bf00      	nop
 800c32c:	e000ed08 	.word	0xe000ed08

0800c330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c336:	4b47      	ldr	r3, [pc, #284]	@ (800c454 <xPortStartScheduler+0x124>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a47      	ldr	r2, [pc, #284]	@ (800c458 <xPortStartScheduler+0x128>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d10b      	bne.n	800c358 <xPortStartScheduler+0x28>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	613b      	str	r3, [r7, #16]
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	e7fd      	b.n	800c354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c358:	4b3e      	ldr	r3, [pc, #248]	@ (800c454 <xPortStartScheduler+0x124>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a3f      	ldr	r2, [pc, #252]	@ (800c45c <xPortStartScheduler+0x12c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d10b      	bne.n	800c37a <xPortStartScheduler+0x4a>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	60fb      	str	r3, [r7, #12]
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	e7fd      	b.n	800c376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c37a:	4b39      	ldr	r3, [pc, #228]	@ (800c460 <xPortStartScheduler+0x130>)
 800c37c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b2db      	uxtb	r3, r3
 800c384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	22ff      	movs	r2, #255	@ 0xff
 800c38a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c394:	78fb      	ldrb	r3, [r7, #3]
 800c396:	b2db      	uxtb	r3, r3
 800c398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	4b31      	ldr	r3, [pc, #196]	@ (800c464 <xPortStartScheduler+0x134>)
 800c3a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3a2:	4b31      	ldr	r3, [pc, #196]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3a4:	2207      	movs	r2, #7
 800c3a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3a8:	e009      	b.n	800c3be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	005b      	lsls	r3, r3, #1
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3be:	78fb      	ldrb	r3, [r7, #3]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3c6:	2b80      	cmp	r3, #128	@ 0x80
 800c3c8:	d0ef      	beq.n	800c3aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c3ca:	4b27      	ldr	r3, [pc, #156]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f1c3 0307 	rsb	r3, r3, #7
 800c3d2:	2b04      	cmp	r3, #4
 800c3d4:	d00b      	beq.n	800c3ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	60bb      	str	r3, [r7, #8]
}
 800c3e8:	bf00      	nop
 800c3ea:	bf00      	nop
 800c3ec:	e7fd      	b.n	800c3ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	021b      	lsls	r3, r3, #8
 800c3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c468 <xPortStartScheduler+0x138>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c400:	4a19      	ldr	r2, [pc, #100]	@ (800c468 <xPortStartScheduler+0x138>)
 800c402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	b2da      	uxtb	r2, r3
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c40c:	4b17      	ldr	r3, [pc, #92]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a16      	ldr	r2, [pc, #88]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c418:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a13      	ldr	r2, [pc, #76]	@ (800c46c <xPortStartScheduler+0x13c>)
 800c41e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c424:	f000 f8da 	bl	800c5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c428:	4b11      	ldr	r3, [pc, #68]	@ (800c470 <xPortStartScheduler+0x140>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c42e:	f000 f8f9 	bl	800c624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c432:	4b10      	ldr	r3, [pc, #64]	@ (800c474 <xPortStartScheduler+0x144>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a0f      	ldr	r2, [pc, #60]	@ (800c474 <xPortStartScheduler+0x144>)
 800c438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c43c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c43e:	f7ff ff63 	bl	800c308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c442:	f001 fa0f 	bl	800d864 <vTaskSwitchContext>
	prvTaskExitError();
 800c446:	f7ff ff1d 	bl	800c284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3718      	adds	r7, #24
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	e000ed00 	.word	0xe000ed00
 800c458:	410fc271 	.word	0x410fc271
 800c45c:	410fc270 	.word	0x410fc270
 800c460:	e000e400 	.word	0xe000e400
 800c464:	24005068 	.word	0x24005068
 800c468:	2400506c 	.word	0x2400506c
 800c46c:	e000ed20 	.word	0xe000ed20
 800c470:	24000018 	.word	0x24000018
 800c474:	e000ef34 	.word	0xe000ef34

0800c478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	607b      	str	r3, [r7, #4]
}
 800c490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <vPortEnterCritical+0x5c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3301      	adds	r3, #1
 800c498:	4a0e      	ldr	r2, [pc, #56]	@ (800c4d4 <vPortEnterCritical+0x5c>)
 800c49a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c49c:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d4 <vPortEnterCritical+0x5c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d110      	bne.n	800c4c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d8 <vPortEnterCritical+0x60>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00b      	beq.n	800c4c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	603b      	str	r3, [r7, #0]
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	e7fd      	b.n	800c4c2 <vPortEnterCritical+0x4a>
	}
}
 800c4c6:	bf00      	nop
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	24000018 	.word	0x24000018
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4e2:	4b12      	ldr	r3, [pc, #72]	@ (800c52c <vPortExitCritical+0x50>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10b      	bne.n	800c502 <vPortExitCritical+0x26>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	607b      	str	r3, [r7, #4]
}
 800c4fc:	bf00      	nop
 800c4fe:	bf00      	nop
 800c500:	e7fd      	b.n	800c4fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c502:	4b0a      	ldr	r3, [pc, #40]	@ (800c52c <vPortExitCritical+0x50>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3b01      	subs	r3, #1
 800c508:	4a08      	ldr	r2, [pc, #32]	@ (800c52c <vPortExitCritical+0x50>)
 800c50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c50c:	4b07      	ldr	r3, [pc, #28]	@ (800c52c <vPortExitCritical+0x50>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d105      	bne.n	800c520 <vPortExitCritical+0x44>
 800c514:	2300      	movs	r3, #0
 800c516:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c51e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	24000018 	.word	0x24000018

0800c530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c530:	f3ef 8009 	mrs	r0, PSP
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	4b15      	ldr	r3, [pc, #84]	@ (800c590 <pxCurrentTCBConst>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	f01e 0f10 	tst.w	lr, #16
 800c540:	bf08      	it	eq
 800c542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	6010      	str	r0, [r2, #0]
 800c54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c554:	f380 8811 	msr	BASEPRI, r0
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f001 f980 	bl	800d864 <vTaskSwitchContext>
 800c564:	f04f 0000 	mov.w	r0, #0
 800c568:	f380 8811 	msr	BASEPRI, r0
 800c56c:	bc09      	pop	{r0, r3}
 800c56e:	6819      	ldr	r1, [r3, #0]
 800c570:	6808      	ldr	r0, [r1, #0]
 800c572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c576:	f01e 0f10 	tst.w	lr, #16
 800c57a:	bf08      	it	eq
 800c57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c580:	f380 8809 	msr	PSP, r0
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	f3af 8000 	nop.w

0800c590 <pxCurrentTCBConst>:
 800c590:	240050b0 	.word	0x240050b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop

0800c598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	607b      	str	r3, [r7, #4]
}
 800c5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5b2:	f001 f89d 	bl	800d6f0 <xTaskIncrementTick>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c5bc:	4b06      	ldr	r3, [pc, #24]	@ (800c5d8 <xPortSysTickHandler+0x40>)
 800c5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	f383 8811 	msr	BASEPRI, r3
}
 800c5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	e000ed04 	.word	0xe000ed04

0800c5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c610 <vPortSetupTimerInterrupt+0x34>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c614 <vPortSetupTimerInterrupt+0x38>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c618 <vPortSetupTimerInterrupt+0x3c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c61c <vPortSetupTimerInterrupt+0x40>)
 800c5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f6:	099b      	lsrs	r3, r3, #6
 800c5f8:	4a09      	ldr	r2, [pc, #36]	@ (800c620 <vPortSetupTimerInterrupt+0x44>)
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5fe:	4b04      	ldr	r3, [pc, #16]	@ (800c610 <vPortSetupTimerInterrupt+0x34>)
 800c600:	2207      	movs	r2, #7
 800c602:	601a      	str	r2, [r3, #0]
}
 800c604:	bf00      	nop
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	e000e010 	.word	0xe000e010
 800c614:	e000e018 	.word	0xe000e018
 800c618:	24000000 	.word	0x24000000
 800c61c:	10624dd3 	.word	0x10624dd3
 800c620:	e000e014 	.word	0xe000e014

0800c624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c634 <vPortEnableVFP+0x10>
 800c628:	6801      	ldr	r1, [r0, #0]
 800c62a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c62e:	6001      	str	r1, [r0, #0]
 800c630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c632:	bf00      	nop
 800c634:	e000ed88 	.word	0xe000ed88

0800c638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c63e:	f3ef 8305 	mrs	r3, IPSR
 800c642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b0f      	cmp	r3, #15
 800c648:	d915      	bls.n	800c676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c64a:	4a18      	ldr	r2, [pc, #96]	@ (800c6ac <vPortValidateInterruptPriority+0x74>)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c654:	4b16      	ldr	r3, [pc, #88]	@ (800c6b0 <vPortValidateInterruptPriority+0x78>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	7afa      	ldrb	r2, [r7, #11]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d20b      	bcs.n	800c676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	607b      	str	r3, [r7, #4]
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	e7fd      	b.n	800c672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c676:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b4 <vPortValidateInterruptPriority+0x7c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c67e:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b8 <vPortValidateInterruptPriority+0x80>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d90b      	bls.n	800c69e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	603b      	str	r3, [r7, #0]
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	e7fd      	b.n	800c69a <vPortValidateInterruptPriority+0x62>
	}
 800c69e:	bf00      	nop
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	e000e3f0 	.word	0xe000e3f0
 800c6b0:	24005068 	.word	0x24005068
 800c6b4:	e000ed0c 	.word	0xe000ed0c
 800c6b8:	2400506c 	.word	0x2400506c

0800c6bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10b      	bne.n	800c6e8 <xQueueGenericReset+0x2c>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60bb      	str	r3, [r7, #8]
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	e7fd      	b.n	800c6e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c6e8:	f7ff fec6 	bl	800c478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f4:	68f9      	ldr	r1, [r7, #12]
 800c6f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c6f8:	fb01 f303 	mul.w	r3, r1, r3
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c718:	3b01      	subs	r3, #1
 800c71a:	68f9      	ldr	r1, [r7, #12]
 800c71c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c71e:	fb01 f303 	mul.w	r3, r1, r3
 800c722:	441a      	add	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	22ff      	movs	r2, #255	@ 0xff
 800c72c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	22ff      	movs	r2, #255	@ 0xff
 800c734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d114      	bne.n	800c768 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d01a      	beq.n	800c77c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3310      	adds	r3, #16
 800c74a:	4618      	mov	r0, r3
 800c74c:	f001 f942 	bl	800d9d4 <xTaskRemoveFromEventList>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d012      	beq.n	800c77c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c756:	4b0d      	ldr	r3, [pc, #52]	@ (800c78c <xQueueGenericReset+0xd0>)
 800c758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	e009      	b.n	800c77c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3310      	adds	r3, #16
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff fca1 	bl	800c0b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3324      	adds	r3, #36	@ 0x24
 800c776:	4618      	mov	r0, r3
 800c778:	f7ff fc9c 	bl	800c0b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c77c:	f7ff feae 	bl	800c4dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c780:	2301      	movs	r3, #1
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	e000ed04 	.word	0xe000ed04

0800c790 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c790:	b580      	push	{r7, lr}
 800c792:	b08e      	sub	sp, #56	@ 0x38
 800c794:	af02      	add	r7, sp, #8
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10b      	bne.n	800c7bc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c7b6:	bf00      	nop
 800c7b8:	bf00      	nop
 800c7ba:	e7fd      	b.n	800c7b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10b      	bne.n	800c7da <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop
 800c7d8:	e7fd      	b.n	800c7d6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <xQueueGenericCreateStatic+0x56>
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <xQueueGenericCreateStatic+0x5a>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e000      	b.n	800c7ec <xQueueGenericCreateStatic+0x5c>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10b      	bne.n	800c808 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	623b      	str	r3, [r7, #32]
}
 800c802:	bf00      	nop
 800c804:	bf00      	nop
 800c806:	e7fd      	b.n	800c804 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d102      	bne.n	800c814 <xQueueGenericCreateStatic+0x84>
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <xQueueGenericCreateStatic+0x88>
 800c814:	2301      	movs	r3, #1
 800c816:	e000      	b.n	800c81a <xQueueGenericCreateStatic+0x8a>
 800c818:	2300      	movs	r3, #0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10b      	bne.n	800c836 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	61fb      	str	r3, [r7, #28]
}
 800c830:	bf00      	nop
 800c832:	bf00      	nop
 800c834:	e7fd      	b.n	800c832 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c836:	2350      	movs	r3, #80	@ 0x50
 800c838:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2b50      	cmp	r3, #80	@ 0x50
 800c83e:	d00b      	beq.n	800c858 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	61bb      	str	r3, [r7, #24]
}
 800c852:	bf00      	nop
 800c854:	bf00      	nop
 800c856:	e7fd      	b.n	800c854 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c858:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00d      	beq.n	800c880 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c86c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	4613      	mov	r3, r2
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f000 f805 	bl	800c88a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c882:	4618      	mov	r0, r3
 800c884:	3730      	adds	r7, #48	@ 0x30
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
 800c896:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	69ba      	ldr	r2, [r7, #24]
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	e002      	b.n	800c8ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c8b8:	2101      	movs	r1, #1
 800c8ba:	69b8      	ldr	r0, [r7, #24]
 800c8bc:	f7ff fefe 	bl	800c6bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	78fa      	ldrb	r2, [r7, #3]
 800c8c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c8c8:	bf00      	nop
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b08e      	sub	sp, #56	@ 0x38
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10b      	bne.n	800c904 <xQueueGenericSend+0x34>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c8fe:	bf00      	nop
 800c900:	bf00      	nop
 800c902:	e7fd      	b.n	800c900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d103      	bne.n	800c912 <xQueueGenericSend+0x42>
 800c90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <xQueueGenericSend+0x46>
 800c912:	2301      	movs	r3, #1
 800c914:	e000      	b.n	800c918 <xQueueGenericSend+0x48>
 800c916:	2300      	movs	r3, #0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10b      	bne.n	800c934 <xQueueGenericSend+0x64>
	__asm volatile
 800c91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c920:	f383 8811 	msr	BASEPRI, r3
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	e7fd      	b.n	800c930 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b02      	cmp	r3, #2
 800c938:	d103      	bne.n	800c942 <xQueueGenericSend+0x72>
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d101      	bne.n	800c946 <xQueueGenericSend+0x76>
 800c942:	2301      	movs	r3, #1
 800c944:	e000      	b.n	800c948 <xQueueGenericSend+0x78>
 800c946:	2300      	movs	r3, #0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10b      	bne.n	800c964 <xQueueGenericSend+0x94>
	__asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c950:	f383 8811 	msr	BASEPRI, r3
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	623b      	str	r3, [r7, #32]
}
 800c95e:	bf00      	nop
 800c960:	bf00      	nop
 800c962:	e7fd      	b.n	800c960 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c964:	f001 f9fc 	bl	800dd60 <xTaskGetSchedulerState>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <xQueueGenericSend+0xa4>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <xQueueGenericSend+0xa8>
 800c974:	2301      	movs	r3, #1
 800c976:	e000      	b.n	800c97a <xQueueGenericSend+0xaa>
 800c978:	2300      	movs	r3, #0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10b      	bne.n	800c996 <xQueueGenericSend+0xc6>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	61fb      	str	r3, [r7, #28]
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	e7fd      	b.n	800c992 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c996:	f7ff fd6f 	bl	800c478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c99c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d302      	bcc.n	800c9ac <xQueueGenericSend+0xdc>
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d129      	bne.n	800ca00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9b2:	f000 fa0f 	bl	800cdd4 <prvCopyDataToQueue>
 800c9b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d010      	beq.n	800c9e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c2:	3324      	adds	r3, #36	@ 0x24
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f001 f805 	bl	800d9d4 <xTaskRemoveFromEventList>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d013      	beq.n	800c9f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c9d0:	4b3f      	ldr	r3, [pc, #252]	@ (800cad0 <xQueueGenericSend+0x200>)
 800c9d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	e00a      	b.n	800c9f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d007      	beq.n	800c9f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c9e8:	4b39      	ldr	r3, [pc, #228]	@ (800cad0 <xQueueGenericSend+0x200>)
 800c9ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9f8:	f7ff fd70 	bl	800c4dc <vPortExitCritical>
				return pdPASS;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e063      	b.n	800cac8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d103      	bne.n	800ca0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca06:	f7ff fd69 	bl	800c4dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e05c      	b.n	800cac8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d106      	bne.n	800ca22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca14:	f107 0314 	add.w	r3, r7, #20
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f001 f83f 	bl	800da9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca22:	f7ff fd5b 	bl	800c4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca26:	f000 fda7 	bl	800d578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca2a:	f7ff fd25 	bl	800c478 <vPortEnterCritical>
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca34:	b25b      	sxtb	r3, r3
 800ca36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca3a:	d103      	bne.n	800ca44 <xQueueGenericSend+0x174>
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca4a:	b25b      	sxtb	r3, r3
 800ca4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca50:	d103      	bne.n	800ca5a <xQueueGenericSend+0x18a>
 800ca52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca5a:	f7ff fd3f 	bl	800c4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca5e:	1d3a      	adds	r2, r7, #4
 800ca60:	f107 0314 	add.w	r3, r7, #20
 800ca64:	4611      	mov	r1, r2
 800ca66:	4618      	mov	r0, r3
 800ca68:	f001 f82e 	bl	800dac8 <xTaskCheckForTimeOut>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d124      	bne.n	800cabc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca74:	f000 faa6 	bl	800cfc4 <prvIsQueueFull>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d018      	beq.n	800cab0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca80:	3310      	adds	r3, #16
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	4611      	mov	r1, r2
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 ff52 	bl	800d930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca8e:	f000 fa31 	bl	800cef4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca92:	f000 fd7f 	bl	800d594 <xTaskResumeAll>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f47f af7c 	bne.w	800c996 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	@ (800cad0 <xQueueGenericSend+0x200>)
 800caa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	e772      	b.n	800c996 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cab2:	f000 fa1f 	bl	800cef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cab6:	f000 fd6d 	bl	800d594 <xTaskResumeAll>
 800caba:	e76c      	b.n	800c996 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cabc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cabe:	f000 fa19 	bl	800cef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cac2:	f000 fd67 	bl	800d594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3738      	adds	r7, #56	@ 0x38
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	e000ed04 	.word	0xe000ed04

0800cad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b090      	sub	sp, #64	@ 0x40
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10b      	bne.n	800cb04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cafe:	bf00      	nop
 800cb00:	bf00      	nop
 800cb02:	e7fd      	b.n	800cb00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d103      	bne.n	800cb12 <xQueueGenericSendFromISR+0x3e>
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <xQueueGenericSendFromISR+0x42>
 800cb12:	2301      	movs	r3, #1
 800cb14:	e000      	b.n	800cb18 <xQueueGenericSendFromISR+0x44>
 800cb16:	2300      	movs	r3, #0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10b      	bne.n	800cb34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	e7fd      	b.n	800cb30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d103      	bne.n	800cb42 <xQueueGenericSendFromISR+0x6e>
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d101      	bne.n	800cb46 <xQueueGenericSendFromISR+0x72>
 800cb42:	2301      	movs	r3, #1
 800cb44:	e000      	b.n	800cb48 <xQueueGenericSendFromISR+0x74>
 800cb46:	2300      	movs	r3, #0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d10b      	bne.n	800cb64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	623b      	str	r3, [r7, #32]
}
 800cb5e:	bf00      	nop
 800cb60:	bf00      	nop
 800cb62:	e7fd      	b.n	800cb60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb64:	f7ff fd68 	bl	800c638 <vPortValidateInterruptPriority>
	__asm volatile
 800cb68:	f3ef 8211 	mrs	r2, BASEPRI
 800cb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	61fa      	str	r2, [r7, #28]
 800cb7e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cb80:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb82:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d302      	bcc.n	800cb96 <xQueueGenericSendFromISR+0xc2>
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d12f      	bne.n	800cbf6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	68b9      	ldr	r1, [r7, #8]
 800cbaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cbac:	f000 f912 	bl	800cdd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cbb0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbb8:	d112      	bne.n	800cbe0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d016      	beq.n	800cbf0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc4:	3324      	adds	r3, #36	@ 0x24
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 ff04 	bl	800d9d4 <xTaskRemoveFromEventList>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00e      	beq.n	800cbf0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00b      	beq.n	800cbf0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e007      	b.n	800cbf0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cbe0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	b25a      	sxtb	r2, r3
 800cbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cbf4:	e001      	b.n	800cbfa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbfc:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f383 8811 	msr	BASEPRI, r3
}
 800cc04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3740      	adds	r7, #64	@ 0x40
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08c      	sub	sp, #48	@ 0x30
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10b      	bne.n	800cc42 <xQueueReceive+0x32>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	623b      	str	r3, [r7, #32]
}
 800cc3c:	bf00      	nop
 800cc3e:	bf00      	nop
 800cc40:	e7fd      	b.n	800cc3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <xQueueReceive+0x40>
 800cc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d101      	bne.n	800cc54 <xQueueReceive+0x44>
 800cc50:	2301      	movs	r3, #1
 800cc52:	e000      	b.n	800cc56 <xQueueReceive+0x46>
 800cc54:	2300      	movs	r3, #0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d10b      	bne.n	800cc72 <xQueueReceive+0x62>
	__asm volatile
 800cc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	61fb      	str	r3, [r7, #28]
}
 800cc6c:	bf00      	nop
 800cc6e:	bf00      	nop
 800cc70:	e7fd      	b.n	800cc6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc72:	f001 f875 	bl	800dd60 <xTaskGetSchedulerState>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <xQueueReceive+0x72>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <xQueueReceive+0x76>
 800cc82:	2301      	movs	r3, #1
 800cc84:	e000      	b.n	800cc88 <xQueueReceive+0x78>
 800cc86:	2300      	movs	r3, #0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10b      	bne.n	800cca4 <xQueueReceive+0x94>
	__asm volatile
 800cc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	61bb      	str	r3, [r7, #24]
}
 800cc9e:	bf00      	nop
 800cca0:	bf00      	nop
 800cca2:	e7fd      	b.n	800cca0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cca4:	f7ff fbe8 	bl	800c478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01f      	beq.n	800ccf4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccb4:	68b9      	ldr	r1, [r7, #8]
 800ccb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccb8:	f000 f8f6 	bl	800cea8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	1e5a      	subs	r2, r3, #1
 800ccc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	691b      	ldr	r3, [r3, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00f      	beq.n	800ccec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccce:	3310      	adds	r3, #16
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 fe7f 	bl	800d9d4 <xTaskRemoveFromEventList>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d007      	beq.n	800ccec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ccdc:	4b3c      	ldr	r3, [pc, #240]	@ (800cdd0 <xQueueReceive+0x1c0>)
 800ccde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cce2:	601a      	str	r2, [r3, #0]
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ccec:	f7ff fbf6 	bl	800c4dc <vPortExitCritical>
				return pdPASS;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e069      	b.n	800cdc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d103      	bne.n	800cd02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccfa:	f7ff fbef 	bl	800c4dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e062      	b.n	800cdc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d106      	bne.n	800cd16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd08:	f107 0310 	add.w	r3, r7, #16
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f000 fec5 	bl	800da9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd12:	2301      	movs	r3, #1
 800cd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd16:	f7ff fbe1 	bl	800c4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd1a:	f000 fc2d 	bl	800d578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd1e:	f7ff fbab 	bl	800c478 <vPortEnterCritical>
 800cd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd28:	b25b      	sxtb	r3, r3
 800cd2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd2e:	d103      	bne.n	800cd38 <xQueueReceive+0x128>
 800cd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd32:	2200      	movs	r2, #0
 800cd34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd3e:	b25b      	sxtb	r3, r3
 800cd40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd44:	d103      	bne.n	800cd4e <xQueueReceive+0x13e>
 800cd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd4e:	f7ff fbc5 	bl	800c4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd52:	1d3a      	adds	r2, r7, #4
 800cd54:	f107 0310 	add.w	r3, r7, #16
 800cd58:	4611      	mov	r1, r2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 feb4 	bl	800dac8 <xTaskCheckForTimeOut>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d123      	bne.n	800cdae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd68:	f000 f916 	bl	800cf98 <prvIsQueueEmpty>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d017      	beq.n	800cda2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd74:	3324      	adds	r3, #36	@ 0x24
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 fdd8 	bl	800d930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd82:	f000 f8b7 	bl	800cef4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd86:	f000 fc05 	bl	800d594 <xTaskResumeAll>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d189      	bne.n	800cca4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cd90:	4b0f      	ldr	r3, [pc, #60]	@ (800cdd0 <xQueueReceive+0x1c0>)
 800cd92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	e780      	b.n	800cca4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cda2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cda4:	f000 f8a6 	bl	800cef4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cda8:	f000 fbf4 	bl	800d594 <xTaskResumeAll>
 800cdac:	e77a      	b.n	800cca4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cdae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdb0:	f000 f8a0 	bl	800cef4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdb4:	f000 fbee 	bl	800d594 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdba:	f000 f8ed 	bl	800cf98 <prvIsQueueEmpty>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f43f af6f 	beq.w	800cca4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cdc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3730      	adds	r7, #48	@ 0x30
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	e000ed04 	.word	0xe000ed04

0800cdd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cde0:	2300      	movs	r3, #0
 800cde2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10d      	bne.n	800ce0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d14d      	bne.n	800ce96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 ffcc 	bl	800dd9c <xTaskPriorityDisinherit>
 800ce04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	609a      	str	r2, [r3, #8]
 800ce0c:	e043      	b.n	800ce96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d119      	bne.n	800ce48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6858      	ldr	r0, [r3, #4]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	f002 fd1d 	bl	800f85e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce2c:	441a      	add	r2, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d32b      	bcc.n	800ce96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	605a      	str	r2, [r3, #4]
 800ce46:	e026      	b.n	800ce96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	68d8      	ldr	r0, [r3, #12]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce50:	461a      	mov	r2, r3
 800ce52:	68b9      	ldr	r1, [r7, #8]
 800ce54:	f002 fd03 	bl	800f85e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68da      	ldr	r2, [r3, #12]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce60:	425b      	negs	r3, r3
 800ce62:	441a      	add	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	68da      	ldr	r2, [r3, #12]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d207      	bcs.n	800ce84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	689a      	ldr	r2, [r3, #8]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7c:	425b      	negs	r3, r3
 800ce7e:	441a      	add	r2, r3
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d105      	bne.n	800ce96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d002      	beq.n	800ce96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ce9e:	697b      	ldr	r3, [r7, #20]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d018      	beq.n	800ceec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68da      	ldr	r2, [r3, #12]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cec2:	441a      	add	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d303      	bcc.n	800cedc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	68d9      	ldr	r1, [r3, #12]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee4:	461a      	mov	r2, r3
 800cee6:	6838      	ldr	r0, [r7, #0]
 800cee8:	f002 fcb9 	bl	800f85e <memcpy>
	}
}
 800ceec:	bf00      	nop
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cefc:	f7ff fabc 	bl	800c478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf08:	e011      	b.n	800cf2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d012      	beq.n	800cf38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3324      	adds	r3, #36	@ 0x24
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 fd5c 	bl	800d9d4 <xTaskRemoveFromEventList>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cf22:	f000 fe35 	bl	800db90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	dce9      	bgt.n	800cf0a <prvUnlockQueue+0x16>
 800cf36:	e000      	b.n	800cf3a <prvUnlockQueue+0x46>
					break;
 800cf38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	22ff      	movs	r2, #255	@ 0xff
 800cf3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cf42:	f7ff facb 	bl	800c4dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cf46:	f7ff fa97 	bl	800c478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf52:	e011      	b.n	800cf78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d012      	beq.n	800cf82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3310      	adds	r3, #16
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fd37 	bl	800d9d4 <xTaskRemoveFromEventList>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf6c:	f000 fe10 	bl	800db90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dce9      	bgt.n	800cf54 <prvUnlockQueue+0x60>
 800cf80:	e000      	b.n	800cf84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	22ff      	movs	r2, #255	@ 0xff
 800cf88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cf8c:	f7ff faa6 	bl	800c4dc <vPortExitCritical>
}
 800cf90:	bf00      	nop
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfa0:	f7ff fa6a 	bl	800c478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d102      	bne.n	800cfb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cfac:	2301      	movs	r3, #1
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	e001      	b.n	800cfb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfb6:	f7ff fa91 	bl	800c4dc <vPortExitCritical>

	return xReturn;
 800cfba:	68fb      	ldr	r3, [r7, #12]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfcc:	f7ff fa54 	bl	800c478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d102      	bne.n	800cfe2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	60fb      	str	r3, [r7, #12]
 800cfe0:	e001      	b.n	800cfe6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfe6:	f7ff fa79 	bl	800c4dc <vPortExitCritical>

	return xReturn;
 800cfea:	68fb      	ldr	r3, [r7, #12]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cffe:	2300      	movs	r3, #0
 800d000:	60fb      	str	r3, [r7, #12]
 800d002:	e014      	b.n	800d02e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d004:	4a0f      	ldr	r2, [pc, #60]	@ (800d044 <vQueueAddToRegistry+0x50>)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10b      	bne.n	800d028 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d010:	490c      	ldr	r1, [pc, #48]	@ (800d044 <vQueueAddToRegistry+0x50>)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d01a:	4a0a      	ldr	r2, [pc, #40]	@ (800d044 <vQueueAddToRegistry+0x50>)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	00db      	lsls	r3, r3, #3
 800d020:	4413      	add	r3, r2
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d026:	e006      	b.n	800d036 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	3301      	adds	r3, #1
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b07      	cmp	r3, #7
 800d032:	d9e7      	bls.n	800d004 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d034:	bf00      	nop
 800d036:	bf00      	nop
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	24005070 	.word	0x24005070

0800d048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d058:	f7ff fa0e 	bl	800c478 <vPortEnterCritical>
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d062:	b25b      	sxtb	r3, r3
 800d064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d068:	d103      	bne.n	800d072 <vQueueWaitForMessageRestricted+0x2a>
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d078:	b25b      	sxtb	r3, r3
 800d07a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d07e:	d103      	bne.n	800d088 <vQueueWaitForMessageRestricted+0x40>
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d088:	f7ff fa28 	bl	800c4dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	3324      	adds	r3, #36	@ 0x24
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	68b9      	ldr	r1, [r7, #8]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 fc6d 	bl	800d97c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d0a2:	6978      	ldr	r0, [r7, #20]
 800d0a4:	f7ff ff26 	bl	800cef4 <prvUnlockQueue>
	}
 800d0a8:	bf00      	nop
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08e      	sub	sp, #56	@ 0x38
 800d0b4:	af04      	add	r7, sp, #16
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10b      	bne.n	800d0dc <xTaskCreateStatic+0x2c>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	623b      	str	r3, [r7, #32]
}
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	e7fd      	b.n	800d0d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <xTaskCreateStatic+0x4a>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	61fb      	str	r3, [r7, #28]
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	e7fd      	b.n	800d0f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d0fa:	23a8      	movs	r3, #168	@ 0xa8
 800d0fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	2ba8      	cmp	r3, #168	@ 0xa8
 800d102:	d00b      	beq.n	800d11c <xTaskCreateStatic+0x6c>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	61bb      	str	r3, [r7, #24]
}
 800d116:	bf00      	nop
 800d118:	bf00      	nop
 800d11a:	e7fd      	b.n	800d118 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d11c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d120:	2b00      	cmp	r3, #0
 800d122:	d01e      	beq.n	800d162 <xTaskCreateStatic+0xb2>
 800d124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d126:	2b00      	cmp	r3, #0
 800d128:	d01b      	beq.n	800d162 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d132:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	2202      	movs	r2, #2
 800d138:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d13c:	2300      	movs	r3, #0
 800d13e:	9303      	str	r3, [sp, #12]
 800d140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d142:	9302      	str	r3, [sp, #8]
 800d144:	f107 0314 	add.w	r3, r7, #20
 800d148:	9301      	str	r3, [sp, #4]
 800d14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	68b9      	ldr	r1, [r7, #8]
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f000 f851 	bl	800d1fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d15a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d15c:	f000 f8f6 	bl	800d34c <prvAddNewTaskToReadyList>
 800d160:	e001      	b.n	800d166 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d166:	697b      	ldr	r3, [r7, #20]
	}
 800d168:	4618      	mov	r0, r3
 800d16a:	3728      	adds	r7, #40	@ 0x28
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08c      	sub	sp, #48	@ 0x30
 800d174:	af04      	add	r7, sp, #16
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	603b      	str	r3, [r7, #0]
 800d17c:	4613      	mov	r3, r2
 800d17e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d180:	88fb      	ldrh	r3, [r7, #6]
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4618      	mov	r0, r3
 800d186:	f7fe fda7 	bl	800bcd8 <pvPortMalloc>
 800d18a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00e      	beq.n	800d1b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d192:	20a8      	movs	r0, #168	@ 0xa8
 800d194:	f7fe fda0 	bl	800bcd8 <pvPortMalloc>
 800d198:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d003      	beq.n	800d1a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1a6:	e005      	b.n	800d1b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d1a8:	6978      	ldr	r0, [r7, #20]
 800d1aa:	f7fe fe63 	bl	800be74 <vPortFree>
 800d1ae:	e001      	b.n	800d1b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d017      	beq.n	800d1ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d1c2:	88fa      	ldrh	r2, [r7, #6]
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	9303      	str	r3, [sp, #12]
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	9302      	str	r3, [sp, #8]
 800d1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	68b9      	ldr	r1, [r7, #8]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f000 f80f 	bl	800d1fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1de:	69f8      	ldr	r0, [r7, #28]
 800d1e0:	f000 f8b4 	bl	800d34c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	61bb      	str	r3, [r7, #24]
 800d1e8:	e002      	b.n	800d1f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1f0:	69bb      	ldr	r3, [r7, #24]
	}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3720      	adds	r7, #32
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	461a      	mov	r2, r3
 800d214:	21a5      	movs	r1, #165	@ 0xa5
 800d216:	f002 fa4d 	bl	800f6b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d224:	440b      	add	r3, r1
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	f023 0307 	bic.w	r3, r3, #7
 800d232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00b      	beq.n	800d256 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	617b      	str	r3, [r7, #20]
}
 800d250:	bf00      	nop
 800d252:	bf00      	nop
 800d254:	e7fd      	b.n	800d252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d01f      	beq.n	800d29c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d25c:	2300      	movs	r3, #0
 800d25e:	61fb      	str	r3, [r7, #28]
 800d260:	e012      	b.n	800d288 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	4413      	add	r3, r2
 800d268:	7819      	ldrb	r1, [r3, #0]
 800d26a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	4413      	add	r3, r2
 800d270:	3334      	adds	r3, #52	@ 0x34
 800d272:	460a      	mov	r2, r1
 800d274:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	4413      	add	r3, r2
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d006      	beq.n	800d290 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	3301      	adds	r3, #1
 800d286:	61fb      	str	r3, [r7, #28]
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	2b0f      	cmp	r3, #15
 800d28c:	d9e9      	bls.n	800d262 <prvInitialiseNewTask+0x66>
 800d28e:	e000      	b.n	800d292 <prvInitialiseNewTask+0x96>
			{
				break;
 800d290:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d29a:	e003      	b.n	800d2a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a6:	2b37      	cmp	r3, #55	@ 0x37
 800d2a8:	d901      	bls.n	800d2ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d2aa:	2337      	movs	r3, #55	@ 0x37
 800d2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2bc:	2200      	movs	r2, #0
 800d2be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fe ff15 	bl	800c0f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2cc:	3318      	adds	r3, #24
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fe ff10 	bl	800c0f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fc:	3354      	adds	r3, #84	@ 0x54
 800d2fe:	224c      	movs	r2, #76	@ 0x4c
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f002 f9d6 	bl	800f6b4 <memset>
 800d308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30a:	4a0d      	ldr	r2, [pc, #52]	@ (800d340 <prvInitialiseNewTask+0x144>)
 800d30c:	659a      	str	r2, [r3, #88]	@ 0x58
 800d30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d310:	4a0c      	ldr	r2, [pc, #48]	@ (800d344 <prvInitialiseNewTask+0x148>)
 800d312:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d316:	4a0c      	ldr	r2, [pc, #48]	@ (800d348 <prvInitialiseNewTask+0x14c>)
 800d318:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	68f9      	ldr	r1, [r7, #12]
 800d31e:	69b8      	ldr	r0, [r7, #24]
 800d320:	f7fe ff7c 	bl	800c21c <pxPortInitialiseStack>
 800d324:	4602      	mov	r2, r0
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d336:	bf00      	nop
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	240056dc 	.word	0x240056dc
 800d344:	24005744 	.word	0x24005744
 800d348:	240057ac 	.word	0x240057ac

0800d34c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d354:	f7ff f890 	bl	800c478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d358:	4b2d      	ldr	r3, [pc, #180]	@ (800d410 <prvAddNewTaskToReadyList+0xc4>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3301      	adds	r3, #1
 800d35e:	4a2c      	ldr	r2, [pc, #176]	@ (800d410 <prvAddNewTaskToReadyList+0xc4>)
 800d360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d362:	4b2c      	ldr	r3, [pc, #176]	@ (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d109      	bne.n	800d37e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d36a:	4a2a      	ldr	r2, [pc, #168]	@ (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d370:	4b27      	ldr	r3, [pc, #156]	@ (800d410 <prvAddNewTaskToReadyList+0xc4>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d110      	bne.n	800d39a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d378:	f000 fc2e 	bl	800dbd8 <prvInitialiseTaskLists>
 800d37c:	e00d      	b.n	800d39a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d37e:	4b26      	ldr	r3, [pc, #152]	@ (800d418 <prvAddNewTaskToReadyList+0xcc>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d109      	bne.n	800d39a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d386:	4b23      	ldr	r3, [pc, #140]	@ (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d390:	429a      	cmp	r2, r3
 800d392:	d802      	bhi.n	800d39a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d394:	4a1f      	ldr	r2, [pc, #124]	@ (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d39a:	4b20      	ldr	r3, [pc, #128]	@ (800d41c <prvAddNewTaskToReadyList+0xd0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	4a1e      	ldr	r2, [pc, #120]	@ (800d41c <prvAddNewTaskToReadyList+0xd0>)
 800d3a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800d41c <prvAddNewTaskToReadyList+0xd0>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3b0:	4b1b      	ldr	r3, [pc, #108]	@ (800d420 <prvAddNewTaskToReadyList+0xd4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d903      	bls.n	800d3c0 <prvAddNewTaskToReadyList+0x74>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3bc:	4a18      	ldr	r2, [pc, #96]	@ (800d420 <prvAddNewTaskToReadyList+0xd4>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4a15      	ldr	r2, [pc, #84]	@ (800d424 <prvAddNewTaskToReadyList+0xd8>)
 800d3ce:	441a      	add	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	f7fe fe99 	bl	800c10e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d3dc:	f7ff f87e 	bl	800c4dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d3e0:	4b0d      	ldr	r3, [pc, #52]	@ (800d418 <prvAddNewTaskToReadyList+0xcc>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00e      	beq.n	800d406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d207      	bcs.n	800d406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d428 <prvAddNewTaskToReadyList+0xdc>)
 800d3f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d406:	bf00      	nop
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	24005584 	.word	0x24005584
 800d414:	240050b0 	.word	0x240050b0
 800d418:	24005590 	.word	0x24005590
 800d41c:	240055a0 	.word	0x240055a0
 800d420:	2400558c 	.word	0x2400558c
 800d424:	240050b4 	.word	0x240050b4
 800d428:	e000ed04 	.word	0xe000ed04

0800d42c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d434:	2300      	movs	r3, #0
 800d436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d018      	beq.n	800d470 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d43e:	4b14      	ldr	r3, [pc, #80]	@ (800d490 <vTaskDelay+0x64>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00b      	beq.n	800d45e <vTaskDelay+0x32>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60bb      	str	r3, [r7, #8]
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	e7fd      	b.n	800d45a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d45e:	f000 f88b 	bl	800d578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d462:	2100      	movs	r1, #0
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fd09 	bl	800de7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d46a:	f000 f893 	bl	800d594 <xTaskResumeAll>
 800d46e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d107      	bne.n	800d486 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d476:	4b07      	ldr	r3, [pc, #28]	@ (800d494 <vTaskDelay+0x68>)
 800d478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d486:	bf00      	nop
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	240055ac 	.word	0x240055ac
 800d494:	e000ed04 	.word	0xe000ed04

0800d498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08a      	sub	sp, #40	@ 0x28
 800d49c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d4a6:	463a      	mov	r2, r7
 800d4a8:	1d39      	adds	r1, r7, #4
 800d4aa:	f107 0308 	add.w	r3, r7, #8
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fe fbde 	bl	800bc70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	9202      	str	r2, [sp, #8]
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	460a      	mov	r2, r1
 800d4c6:	4924      	ldr	r1, [pc, #144]	@ (800d558 <vTaskStartScheduler+0xc0>)
 800d4c8:	4824      	ldr	r0, [pc, #144]	@ (800d55c <vTaskStartScheduler+0xc4>)
 800d4ca:	f7ff fdf1 	bl	800d0b0 <xTaskCreateStatic>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	4a23      	ldr	r2, [pc, #140]	@ (800d560 <vTaskStartScheduler+0xc8>)
 800d4d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d4d4:	4b22      	ldr	r3, [pc, #136]	@ (800d560 <vTaskStartScheduler+0xc8>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	617b      	str	r3, [r7, #20]
 800d4e0:	e001      	b.n	800d4e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d102      	bne.n	800d4f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d4ec:	f000 fd1a 	bl	800df24 <xTimerCreateTimerTask>
 800d4f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d11b      	bne.n	800d530 <vTaskStartScheduler+0x98>
	__asm volatile
 800d4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	613b      	str	r3, [r7, #16]
}
 800d50a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d50c:	4b15      	ldr	r3, [pc, #84]	@ (800d564 <vTaskStartScheduler+0xcc>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3354      	adds	r3, #84	@ 0x54
 800d512:	4a15      	ldr	r2, [pc, #84]	@ (800d568 <vTaskStartScheduler+0xd0>)
 800d514:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d516:	4b15      	ldr	r3, [pc, #84]	@ (800d56c <vTaskStartScheduler+0xd4>)
 800d518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d51c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d51e:	4b14      	ldr	r3, [pc, #80]	@ (800d570 <vTaskStartScheduler+0xd8>)
 800d520:	2201      	movs	r2, #1
 800d522:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d524:	4b13      	ldr	r3, [pc, #76]	@ (800d574 <vTaskStartScheduler+0xdc>)
 800d526:	2200      	movs	r2, #0
 800d528:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d52a:	f7fe ff01 	bl	800c330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d52e:	e00f      	b.n	800d550 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d536:	d10b      	bne.n	800d550 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	60fb      	str	r3, [r7, #12]
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	e7fd      	b.n	800d54c <vTaskStartScheduler+0xb4>
}
 800d550:	bf00      	nop
 800d552:	3718      	adds	r7, #24
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	08014054 	.word	0x08014054
 800d55c:	0800dba9 	.word	0x0800dba9
 800d560:	240055a8 	.word	0x240055a8
 800d564:	240050b0 	.word	0x240050b0
 800d568:	24000028 	.word	0x24000028
 800d56c:	240055a4 	.word	0x240055a4
 800d570:	24005590 	.word	0x24005590
 800d574:	24005588 	.word	0x24005588

0800d578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d578:	b480      	push	{r7}
 800d57a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d57c:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <vTaskSuspendAll+0x18>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	4a03      	ldr	r2, [pc, #12]	@ (800d590 <vTaskSuspendAll+0x18>)
 800d584:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d586:	bf00      	nop
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	240055ac 	.word	0x240055ac

0800d594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5a2:	4b42      	ldr	r3, [pc, #264]	@ (800d6ac <xTaskResumeAll+0x118>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10b      	bne.n	800d5c2 <xTaskResumeAll+0x2e>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	603b      	str	r3, [r7, #0]
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	e7fd      	b.n	800d5be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d5c2:	f7fe ff59 	bl	800c478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d5c6:	4b39      	ldr	r3, [pc, #228]	@ (800d6ac <xTaskResumeAll+0x118>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	4a37      	ldr	r2, [pc, #220]	@ (800d6ac <xTaskResumeAll+0x118>)
 800d5ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5d0:	4b36      	ldr	r3, [pc, #216]	@ (800d6ac <xTaskResumeAll+0x118>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d162      	bne.n	800d69e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5d8:	4b35      	ldr	r3, [pc, #212]	@ (800d6b0 <xTaskResumeAll+0x11c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d05e      	beq.n	800d69e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5e0:	e02f      	b.n	800d642 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e2:	4b34      	ldr	r3, [pc, #208]	@ (800d6b4 <xTaskResumeAll+0x120>)
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3318      	adds	r3, #24
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe fdea 	bl	800c1c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fe fde5 	bl	800c1c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d602:	4b2d      	ldr	r3, [pc, #180]	@ (800d6b8 <xTaskResumeAll+0x124>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	d903      	bls.n	800d612 <xTaskResumeAll+0x7e>
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d60e:	4a2a      	ldr	r2, [pc, #168]	@ (800d6b8 <xTaskResumeAll+0x124>)
 800d610:	6013      	str	r3, [r2, #0]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d616:	4613      	mov	r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4413      	add	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4a27      	ldr	r2, [pc, #156]	@ (800d6bc <xTaskResumeAll+0x128>)
 800d620:	441a      	add	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3304      	adds	r3, #4
 800d626:	4619      	mov	r1, r3
 800d628:	4610      	mov	r0, r2
 800d62a:	f7fe fd70 	bl	800c10e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d632:	4b23      	ldr	r3, [pc, #140]	@ (800d6c0 <xTaskResumeAll+0x12c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d638:	429a      	cmp	r2, r3
 800d63a:	d302      	bcc.n	800d642 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d63c:	4b21      	ldr	r3, [pc, #132]	@ (800d6c4 <xTaskResumeAll+0x130>)
 800d63e:	2201      	movs	r2, #1
 800d640:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d642:	4b1c      	ldr	r3, [pc, #112]	@ (800d6b4 <xTaskResumeAll+0x120>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1cb      	bne.n	800d5e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d650:	f000 fb66 	bl	800dd20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d654:	4b1c      	ldr	r3, [pc, #112]	@ (800d6c8 <xTaskResumeAll+0x134>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d010      	beq.n	800d682 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d660:	f000 f846 	bl	800d6f0 <xTaskIncrementTick>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d002      	beq.n	800d670 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d66a:	4b16      	ldr	r3, [pc, #88]	@ (800d6c4 <xTaskResumeAll+0x130>)
 800d66c:	2201      	movs	r2, #1
 800d66e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	3b01      	subs	r3, #1
 800d674:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1f1      	bne.n	800d660 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d67c:	4b12      	ldr	r3, [pc, #72]	@ (800d6c8 <xTaskResumeAll+0x134>)
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d682:	4b10      	ldr	r3, [pc, #64]	@ (800d6c4 <xTaskResumeAll+0x130>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d68a:	2301      	movs	r3, #1
 800d68c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d68e:	4b0f      	ldr	r3, [pc, #60]	@ (800d6cc <xTaskResumeAll+0x138>)
 800d690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d694:	601a      	str	r2, [r3, #0]
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d69e:	f7fe ff1d 	bl	800c4dc <vPortExitCritical>

	return xAlreadyYielded;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	240055ac 	.word	0x240055ac
 800d6b0:	24005584 	.word	0x24005584
 800d6b4:	24005544 	.word	0x24005544
 800d6b8:	2400558c 	.word	0x2400558c
 800d6bc:	240050b4 	.word	0x240050b4
 800d6c0:	240050b0 	.word	0x240050b0
 800d6c4:	24005598 	.word	0x24005598
 800d6c8:	24005594 	.word	0x24005594
 800d6cc:	e000ed04 	.word	0xe000ed04

0800d6d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d6d6:	4b05      	ldr	r3, [pc, #20]	@ (800d6ec <xTaskGetTickCount+0x1c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d6dc:	687b      	ldr	r3, [r7, #4]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	24005588 	.word	0x24005588

0800d6f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b086      	sub	sp, #24
 800d6f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6fa:	4b4f      	ldr	r3, [pc, #316]	@ (800d838 <xTaskIncrementTick+0x148>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f040 8090 	bne.w	800d824 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d704:	4b4d      	ldr	r3, [pc, #308]	@ (800d83c <xTaskIncrementTick+0x14c>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3301      	adds	r3, #1
 800d70a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d70c:	4a4b      	ldr	r2, [pc, #300]	@ (800d83c <xTaskIncrementTick+0x14c>)
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d121      	bne.n	800d75c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d718:	4b49      	ldr	r3, [pc, #292]	@ (800d840 <xTaskIncrementTick+0x150>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00b      	beq.n	800d73a <xTaskIncrementTick+0x4a>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	603b      	str	r3, [r7, #0]
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop
 800d738:	e7fd      	b.n	800d736 <xTaskIncrementTick+0x46>
 800d73a:	4b41      	ldr	r3, [pc, #260]	@ (800d840 <xTaskIncrementTick+0x150>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	60fb      	str	r3, [r7, #12]
 800d740:	4b40      	ldr	r3, [pc, #256]	@ (800d844 <xTaskIncrementTick+0x154>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a3e      	ldr	r2, [pc, #248]	@ (800d840 <xTaskIncrementTick+0x150>)
 800d746:	6013      	str	r3, [r2, #0]
 800d748:	4a3e      	ldr	r2, [pc, #248]	@ (800d844 <xTaskIncrementTick+0x154>)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6013      	str	r3, [r2, #0]
 800d74e:	4b3e      	ldr	r3, [pc, #248]	@ (800d848 <xTaskIncrementTick+0x158>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	4a3c      	ldr	r2, [pc, #240]	@ (800d848 <xTaskIncrementTick+0x158>)
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	f000 fae2 	bl	800dd20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d75c:	4b3b      	ldr	r3, [pc, #236]	@ (800d84c <xTaskIncrementTick+0x15c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	693a      	ldr	r2, [r7, #16]
 800d762:	429a      	cmp	r2, r3
 800d764:	d349      	bcc.n	800d7fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d766:	4b36      	ldr	r3, [pc, #216]	@ (800d840 <xTaskIncrementTick+0x150>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d104      	bne.n	800d77a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d770:	4b36      	ldr	r3, [pc, #216]	@ (800d84c <xTaskIncrementTick+0x15c>)
 800d772:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d776:	601a      	str	r2, [r3, #0]
					break;
 800d778:	e03f      	b.n	800d7fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d77a:	4b31      	ldr	r3, [pc, #196]	@ (800d840 <xTaskIncrementTick+0x150>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d203      	bcs.n	800d79a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d792:	4a2e      	ldr	r2, [pc, #184]	@ (800d84c <xTaskIncrementTick+0x15c>)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d798:	e02f      	b.n	800d7fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	3304      	adds	r3, #4
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7fe fd12 	bl	800c1c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d004      	beq.n	800d7b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	3318      	adds	r3, #24
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fe fd09 	bl	800c1c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ba:	4b25      	ldr	r3, [pc, #148]	@ (800d850 <xTaskIncrementTick+0x160>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d903      	bls.n	800d7ca <xTaskIncrementTick+0xda>
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c6:	4a22      	ldr	r2, [pc, #136]	@ (800d850 <xTaskIncrementTick+0x160>)
 800d7c8:	6013      	str	r3, [r2, #0]
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4413      	add	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4a1f      	ldr	r2, [pc, #124]	@ (800d854 <xTaskIncrementTick+0x164>)
 800d7d8:	441a      	add	r2, r3
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	3304      	adds	r3, #4
 800d7de:	4619      	mov	r1, r3
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	f7fe fc94 	bl	800c10e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d858 <xTaskIncrementTick+0x168>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d3b8      	bcc.n	800d766 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7f8:	e7b5      	b.n	800d766 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d7fa:	4b17      	ldr	r3, [pc, #92]	@ (800d858 <xTaskIncrementTick+0x168>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d800:	4914      	ldr	r1, [pc, #80]	@ (800d854 <xTaskIncrementTick+0x164>)
 800d802:	4613      	mov	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	440b      	add	r3, r1
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d901      	bls.n	800d816 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d812:	2301      	movs	r3, #1
 800d814:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d816:	4b11      	ldr	r3, [pc, #68]	@ (800d85c <xTaskIncrementTick+0x16c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d007      	beq.n	800d82e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d81e:	2301      	movs	r3, #1
 800d820:	617b      	str	r3, [r7, #20]
 800d822:	e004      	b.n	800d82e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d824:	4b0e      	ldr	r3, [pc, #56]	@ (800d860 <xTaskIncrementTick+0x170>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	3301      	adds	r3, #1
 800d82a:	4a0d      	ldr	r2, [pc, #52]	@ (800d860 <xTaskIncrementTick+0x170>)
 800d82c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d82e:	697b      	ldr	r3, [r7, #20]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	240055ac 	.word	0x240055ac
 800d83c:	24005588 	.word	0x24005588
 800d840:	2400553c 	.word	0x2400553c
 800d844:	24005540 	.word	0x24005540
 800d848:	2400559c 	.word	0x2400559c
 800d84c:	240055a4 	.word	0x240055a4
 800d850:	2400558c 	.word	0x2400558c
 800d854:	240050b4 	.word	0x240050b4
 800d858:	240050b0 	.word	0x240050b0
 800d85c:	24005598 	.word	0x24005598
 800d860:	24005594 	.word	0x24005594

0800d864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d86a:	4b2b      	ldr	r3, [pc, #172]	@ (800d918 <vTaskSwitchContext+0xb4>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d003      	beq.n	800d87a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d872:	4b2a      	ldr	r3, [pc, #168]	@ (800d91c <vTaskSwitchContext+0xb8>)
 800d874:	2201      	movs	r2, #1
 800d876:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d878:	e047      	b.n	800d90a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d87a:	4b28      	ldr	r3, [pc, #160]	@ (800d91c <vTaskSwitchContext+0xb8>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d880:	4b27      	ldr	r3, [pc, #156]	@ (800d920 <vTaskSwitchContext+0xbc>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60fb      	str	r3, [r7, #12]
 800d886:	e011      	b.n	800d8ac <vTaskSwitchContext+0x48>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10b      	bne.n	800d8a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	607b      	str	r3, [r7, #4]
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <vTaskSwitchContext+0x3e>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	491d      	ldr	r1, [pc, #116]	@ (800d924 <vTaskSwitchContext+0xc0>)
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4413      	add	r3, r2
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	440b      	add	r3, r1
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d0e3      	beq.n	800d888 <vTaskSwitchContext+0x24>
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	4413      	add	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4a16      	ldr	r2, [pc, #88]	@ (800d924 <vTaskSwitchContext+0xc0>)
 800d8cc:	4413      	add	r3, r2
 800d8ce:	60bb      	str	r3, [r7, #8]
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	685a      	ldr	r2, [r3, #4]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	605a      	str	r2, [r3, #4]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d104      	bne.n	800d8f0 <vTaskSwitchContext+0x8c>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	605a      	str	r2, [r3, #4]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	4a0c      	ldr	r2, [pc, #48]	@ (800d928 <vTaskSwitchContext+0xc4>)
 800d8f8:	6013      	str	r3, [r2, #0]
 800d8fa:	4a09      	ldr	r2, [pc, #36]	@ (800d920 <vTaskSwitchContext+0xbc>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d900:	4b09      	ldr	r3, [pc, #36]	@ (800d928 <vTaskSwitchContext+0xc4>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3354      	adds	r3, #84	@ 0x54
 800d906:	4a09      	ldr	r2, [pc, #36]	@ (800d92c <vTaskSwitchContext+0xc8>)
 800d908:	6013      	str	r3, [r2, #0]
}
 800d90a:	bf00      	nop
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	240055ac 	.word	0x240055ac
 800d91c:	24005598 	.word	0x24005598
 800d920:	2400558c 	.word	0x2400558c
 800d924:	240050b4 	.word	0x240050b4
 800d928:	240050b0 	.word	0x240050b0
 800d92c:	24000028 	.word	0x24000028

0800d930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10b      	bne.n	800d958 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	60fb      	str	r3, [r7, #12]
}
 800d952:	bf00      	nop
 800d954:	bf00      	nop
 800d956:	e7fd      	b.n	800d954 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d958:	4b07      	ldr	r3, [pc, #28]	@ (800d978 <vTaskPlaceOnEventList+0x48>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3318      	adds	r3, #24
 800d95e:	4619      	mov	r1, r3
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7fe fbf8 	bl	800c156 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d966:	2101      	movs	r1, #1
 800d968:	6838      	ldr	r0, [r7, #0]
 800d96a:	f000 fa87 	bl	800de7c <prvAddCurrentTaskToDelayedList>
}
 800d96e:	bf00      	nop
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	240050b0 	.word	0x240050b0

0800d97c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10b      	bne.n	800d9a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	617b      	str	r3, [r7, #20]
}
 800d9a0:	bf00      	nop
 800d9a2:	bf00      	nop
 800d9a4:	e7fd      	b.n	800d9a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	3318      	adds	r3, #24
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f7fe fbad 	bl	800c10e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d002      	beq.n	800d9c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d9be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9c0:	6879      	ldr	r1, [r7, #4]
 800d9c2:	68b8      	ldr	r0, [r7, #8]
 800d9c4:	f000 fa5a 	bl	800de7c <prvAddCurrentTaskToDelayedList>
	}
 800d9c8:	bf00      	nop
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	240050b0 	.word	0x240050b0

0800d9d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10b      	bne.n	800da02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	60fb      	str	r3, [r7, #12]
}
 800d9fc:	bf00      	nop
 800d9fe:	bf00      	nop
 800da00:	e7fd      	b.n	800d9fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	3318      	adds	r3, #24
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe fbde 	bl	800c1c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da0c:	4b1d      	ldr	r3, [pc, #116]	@ (800da84 <xTaskRemoveFromEventList+0xb0>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d11d      	bne.n	800da50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	3304      	adds	r3, #4
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fe fbd5 	bl	800c1c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da22:	4b19      	ldr	r3, [pc, #100]	@ (800da88 <xTaskRemoveFromEventList+0xb4>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	429a      	cmp	r2, r3
 800da28:	d903      	bls.n	800da32 <xTaskRemoveFromEventList+0x5e>
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da2e:	4a16      	ldr	r2, [pc, #88]	@ (800da88 <xTaskRemoveFromEventList+0xb4>)
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da36:	4613      	mov	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4a13      	ldr	r2, [pc, #76]	@ (800da8c <xTaskRemoveFromEventList+0xb8>)
 800da40:	441a      	add	r2, r3
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	3304      	adds	r3, #4
 800da46:	4619      	mov	r1, r3
 800da48:	4610      	mov	r0, r2
 800da4a:	f7fe fb60 	bl	800c10e <vListInsertEnd>
 800da4e:	e005      	b.n	800da5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	3318      	adds	r3, #24
 800da54:	4619      	mov	r1, r3
 800da56:	480e      	ldr	r0, [pc, #56]	@ (800da90 <xTaskRemoveFromEventList+0xbc>)
 800da58:	f7fe fb59 	bl	800c10e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da60:	4b0c      	ldr	r3, [pc, #48]	@ (800da94 <xTaskRemoveFromEventList+0xc0>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da66:	429a      	cmp	r2, r3
 800da68:	d905      	bls.n	800da76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da6a:	2301      	movs	r3, #1
 800da6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800da6e:	4b0a      	ldr	r3, [pc, #40]	@ (800da98 <xTaskRemoveFromEventList+0xc4>)
 800da70:	2201      	movs	r2, #1
 800da72:	601a      	str	r2, [r3, #0]
 800da74:	e001      	b.n	800da7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800da76:	2300      	movs	r3, #0
 800da78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800da7a:	697b      	ldr	r3, [r7, #20]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	240055ac 	.word	0x240055ac
 800da88:	2400558c 	.word	0x2400558c
 800da8c:	240050b4 	.word	0x240050b4
 800da90:	24005544 	.word	0x24005544
 800da94:	240050b0 	.word	0x240050b0
 800da98:	24005598 	.word	0x24005598

0800da9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800daa4:	4b06      	ldr	r3, [pc, #24]	@ (800dac0 <vTaskInternalSetTimeOutState+0x24>)
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800daac:	4b05      	ldr	r3, [pc, #20]	@ (800dac4 <vTaskInternalSetTimeOutState+0x28>)
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	605a      	str	r2, [r3, #4]
}
 800dab4:	bf00      	nop
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	2400559c 	.word	0x2400559c
 800dac4:	24005588 	.word	0x24005588

0800dac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10b      	bne.n	800daf0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	613b      	str	r3, [r7, #16]
}
 800daea:	bf00      	nop
 800daec:	bf00      	nop
 800daee:	e7fd      	b.n	800daec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10b      	bne.n	800db0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800daf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	60fb      	str	r3, [r7, #12]
}
 800db08:	bf00      	nop
 800db0a:	bf00      	nop
 800db0c:	e7fd      	b.n	800db0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800db0e:	f7fe fcb3 	bl	800c478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db12:	4b1d      	ldr	r3, [pc, #116]	@ (800db88 <xTaskCheckForTimeOut+0xc0>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	69ba      	ldr	r2, [r7, #24]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db2a:	d102      	bne.n	800db32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db2c:	2300      	movs	r3, #0
 800db2e:	61fb      	str	r3, [r7, #28]
 800db30:	e023      	b.n	800db7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	4b15      	ldr	r3, [pc, #84]	@ (800db8c <xTaskCheckForTimeOut+0xc4>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d007      	beq.n	800db4e <xTaskCheckForTimeOut+0x86>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	69ba      	ldr	r2, [r7, #24]
 800db44:	429a      	cmp	r2, r3
 800db46:	d302      	bcc.n	800db4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db48:	2301      	movs	r3, #1
 800db4a:	61fb      	str	r3, [r7, #28]
 800db4c:	e015      	b.n	800db7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	429a      	cmp	r2, r3
 800db56:	d20b      	bcs.n	800db70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	1ad2      	subs	r2, r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff99 	bl	800da9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800db6a:	2300      	movs	r3, #0
 800db6c:	61fb      	str	r3, [r7, #28]
 800db6e:	e004      	b.n	800db7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800db76:	2301      	movs	r3, #1
 800db78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800db7a:	f7fe fcaf 	bl	800c4dc <vPortExitCritical>

	return xReturn;
 800db7e:	69fb      	ldr	r3, [r7, #28]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3720      	adds	r7, #32
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	24005588 	.word	0x24005588
 800db8c:	2400559c 	.word	0x2400559c

0800db90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800db90:	b480      	push	{r7}
 800db92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800db94:	4b03      	ldr	r3, [pc, #12]	@ (800dba4 <vTaskMissedYield+0x14>)
 800db96:	2201      	movs	r2, #1
 800db98:	601a      	str	r2, [r3, #0]
}
 800db9a:	bf00      	nop
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	24005598 	.word	0x24005598

0800dba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dbb0:	f000 f852 	bl	800dc58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dbb4:	4b06      	ldr	r3, [pc, #24]	@ (800dbd0 <prvIdleTask+0x28>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d9f9      	bls.n	800dbb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dbbc:	4b05      	ldr	r3, [pc, #20]	@ (800dbd4 <prvIdleTask+0x2c>)
 800dbbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dbcc:	e7f0      	b.n	800dbb0 <prvIdleTask+0x8>
 800dbce:	bf00      	nop
 800dbd0:	240050b4 	.word	0x240050b4
 800dbd4:	e000ed04 	.word	0xe000ed04

0800dbd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbde:	2300      	movs	r3, #0
 800dbe0:	607b      	str	r3, [r7, #4]
 800dbe2:	e00c      	b.n	800dbfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	4413      	add	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4a12      	ldr	r2, [pc, #72]	@ (800dc38 <prvInitialiseTaskLists+0x60>)
 800dbf0:	4413      	add	r3, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe fa5e 	bl	800c0b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	607b      	str	r3, [r7, #4]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b37      	cmp	r3, #55	@ 0x37
 800dc02:	d9ef      	bls.n	800dbe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc04:	480d      	ldr	r0, [pc, #52]	@ (800dc3c <prvInitialiseTaskLists+0x64>)
 800dc06:	f7fe fa55 	bl	800c0b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc0a:	480d      	ldr	r0, [pc, #52]	@ (800dc40 <prvInitialiseTaskLists+0x68>)
 800dc0c:	f7fe fa52 	bl	800c0b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc10:	480c      	ldr	r0, [pc, #48]	@ (800dc44 <prvInitialiseTaskLists+0x6c>)
 800dc12:	f7fe fa4f 	bl	800c0b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc16:	480c      	ldr	r0, [pc, #48]	@ (800dc48 <prvInitialiseTaskLists+0x70>)
 800dc18:	f7fe fa4c 	bl	800c0b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc1c:	480b      	ldr	r0, [pc, #44]	@ (800dc4c <prvInitialiseTaskLists+0x74>)
 800dc1e:	f7fe fa49 	bl	800c0b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc22:	4b0b      	ldr	r3, [pc, #44]	@ (800dc50 <prvInitialiseTaskLists+0x78>)
 800dc24:	4a05      	ldr	r2, [pc, #20]	@ (800dc3c <prvInitialiseTaskLists+0x64>)
 800dc26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc28:	4b0a      	ldr	r3, [pc, #40]	@ (800dc54 <prvInitialiseTaskLists+0x7c>)
 800dc2a:	4a05      	ldr	r2, [pc, #20]	@ (800dc40 <prvInitialiseTaskLists+0x68>)
 800dc2c:	601a      	str	r2, [r3, #0]
}
 800dc2e:	bf00      	nop
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	240050b4 	.word	0x240050b4
 800dc3c:	24005514 	.word	0x24005514
 800dc40:	24005528 	.word	0x24005528
 800dc44:	24005544 	.word	0x24005544
 800dc48:	24005558 	.word	0x24005558
 800dc4c:	24005570 	.word	0x24005570
 800dc50:	2400553c 	.word	0x2400553c
 800dc54:	24005540 	.word	0x24005540

0800dc58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc5e:	e019      	b.n	800dc94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dc60:	f7fe fc0a 	bl	800c478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc64:	4b10      	ldr	r3, [pc, #64]	@ (800dca8 <prvCheckTasksWaitingTermination+0x50>)
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	3304      	adds	r3, #4
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fe faa9 	bl	800c1c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dc76:	4b0d      	ldr	r3, [pc, #52]	@ (800dcac <prvCheckTasksWaitingTermination+0x54>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	4a0b      	ldr	r2, [pc, #44]	@ (800dcac <prvCheckTasksWaitingTermination+0x54>)
 800dc7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dc80:	4b0b      	ldr	r3, [pc, #44]	@ (800dcb0 <prvCheckTasksWaitingTermination+0x58>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	3b01      	subs	r3, #1
 800dc86:	4a0a      	ldr	r2, [pc, #40]	@ (800dcb0 <prvCheckTasksWaitingTermination+0x58>)
 800dc88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dc8a:	f7fe fc27 	bl	800c4dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f810 	bl	800dcb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc94:	4b06      	ldr	r3, [pc, #24]	@ (800dcb0 <prvCheckTasksWaitingTermination+0x58>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1e1      	bne.n	800dc60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dc9c:	bf00      	nop
 800dc9e:	bf00      	nop
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	24005558 	.word	0x24005558
 800dcac:	24005584 	.word	0x24005584
 800dcb0:	2400556c 	.word	0x2400556c

0800dcb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3354      	adds	r3, #84	@ 0x54
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f001 fd13 	bl	800f6ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d108      	bne.n	800dce2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe f8cd 	bl	800be74 <vPortFree>
				vPortFree( pxTCB );
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7fe f8ca 	bl	800be74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dce0:	e019      	b.n	800dd16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d103      	bne.n	800dcf4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7fe f8c1 	bl	800be74 <vPortFree>
	}
 800dcf2:	e010      	b.n	800dd16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d00b      	beq.n	800dd16 <prvDeleteTCB+0x62>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	60fb      	str	r3, [r7, #12]
}
 800dd10:	bf00      	nop
 800dd12:	bf00      	nop
 800dd14:	e7fd      	b.n	800dd12 <prvDeleteTCB+0x5e>
	}
 800dd16:	bf00      	nop
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd26:	4b0c      	ldr	r3, [pc, #48]	@ (800dd58 <prvResetNextTaskUnblockTime+0x38>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d104      	bne.n	800dd3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd30:	4b0a      	ldr	r3, [pc, #40]	@ (800dd5c <prvResetNextTaskUnblockTime+0x3c>)
 800dd32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd38:	e008      	b.n	800dd4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd3a:	4b07      	ldr	r3, [pc, #28]	@ (800dd58 <prvResetNextTaskUnblockTime+0x38>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	4a04      	ldr	r2, [pc, #16]	@ (800dd5c <prvResetNextTaskUnblockTime+0x3c>)
 800dd4a:	6013      	str	r3, [r2, #0]
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	2400553c 	.word	0x2400553c
 800dd5c:	240055a4 	.word	0x240055a4

0800dd60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dd66:	4b0b      	ldr	r3, [pc, #44]	@ (800dd94 <xTaskGetSchedulerState+0x34>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d102      	bne.n	800dd74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	607b      	str	r3, [r7, #4]
 800dd72:	e008      	b.n	800dd86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd74:	4b08      	ldr	r3, [pc, #32]	@ (800dd98 <xTaskGetSchedulerState+0x38>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d102      	bne.n	800dd82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	607b      	str	r3, [r7, #4]
 800dd80:	e001      	b.n	800dd86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dd82:	2300      	movs	r3, #0
 800dd84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dd86:	687b      	ldr	r3, [r7, #4]
	}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	24005590 	.word	0x24005590
 800dd98:	240055ac 	.word	0x240055ac

0800dd9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d058      	beq.n	800de64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ddb2:	4b2f      	ldr	r3, [pc, #188]	@ (800de70 <xTaskPriorityDisinherit+0xd4>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d00b      	beq.n	800ddd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	60fb      	str	r3, [r7, #12]
}
 800ddce:	bf00      	nop
 800ddd0:	bf00      	nop
 800ddd2:	e7fd      	b.n	800ddd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10b      	bne.n	800ddf4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	60bb      	str	r3, [r7, #8]
}
 800ddee:	bf00      	nop
 800ddf0:	bf00      	nop
 800ddf2:	e7fd      	b.n	800ddf0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddf8:	1e5a      	subs	r2, r3, #1
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de06:	429a      	cmp	r2, r3
 800de08:	d02c      	beq.n	800de64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d128      	bne.n	800de64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	3304      	adds	r3, #4
 800de16:	4618      	mov	r0, r3
 800de18:	f7fe f9d6 	bl	800c1c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de34:	4b0f      	ldr	r3, [pc, #60]	@ (800de74 <xTaskPriorityDisinherit+0xd8>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d903      	bls.n	800de44 <xTaskPriorityDisinherit+0xa8>
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de40:	4a0c      	ldr	r2, [pc, #48]	@ (800de74 <xTaskPriorityDisinherit+0xd8>)
 800de42:	6013      	str	r3, [r2, #0]
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de48:	4613      	mov	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4413      	add	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4a09      	ldr	r2, [pc, #36]	@ (800de78 <xTaskPriorityDisinherit+0xdc>)
 800de52:	441a      	add	r2, r3
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	3304      	adds	r3, #4
 800de58:	4619      	mov	r1, r3
 800de5a:	4610      	mov	r0, r2
 800de5c:	f7fe f957 	bl	800c10e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de60:	2301      	movs	r3, #1
 800de62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de64:	697b      	ldr	r3, [r7, #20]
	}
 800de66:	4618      	mov	r0, r3
 800de68:	3718      	adds	r7, #24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	240050b0 	.word	0x240050b0
 800de74:	2400558c 	.word	0x2400558c
 800de78:	240050b4 	.word	0x240050b4

0800de7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de86:	4b21      	ldr	r3, [pc, #132]	@ (800df0c <prvAddCurrentTaskToDelayedList+0x90>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de8c:	4b20      	ldr	r3, [pc, #128]	@ (800df10 <prvAddCurrentTaskToDelayedList+0x94>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	3304      	adds	r3, #4
 800de92:	4618      	mov	r0, r3
 800de94:	f7fe f998 	bl	800c1c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de9e:	d10a      	bne.n	800deb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d007      	beq.n	800deb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dea6:	4b1a      	ldr	r3, [pc, #104]	@ (800df10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	3304      	adds	r3, #4
 800deac:	4619      	mov	r1, r3
 800deae:	4819      	ldr	r0, [pc, #100]	@ (800df14 <prvAddCurrentTaskToDelayedList+0x98>)
 800deb0:	f7fe f92d 	bl	800c10e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800deb4:	e026      	b.n	800df04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4413      	add	r3, r2
 800debc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800debe:	4b14      	ldr	r3, [pc, #80]	@ (800df10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	429a      	cmp	r2, r3
 800decc:	d209      	bcs.n	800dee2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dece:	4b12      	ldr	r3, [pc, #72]	@ (800df18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4b0f      	ldr	r3, [pc, #60]	@ (800df10 <prvAddCurrentTaskToDelayedList+0x94>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	3304      	adds	r3, #4
 800ded8:	4619      	mov	r1, r3
 800deda:	4610      	mov	r0, r2
 800dedc:	f7fe f93b 	bl	800c156 <vListInsert>
}
 800dee0:	e010      	b.n	800df04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dee2:	4b0e      	ldr	r3, [pc, #56]	@ (800df1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	4b0a      	ldr	r3, [pc, #40]	@ (800df10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3304      	adds	r3, #4
 800deec:	4619      	mov	r1, r3
 800deee:	4610      	mov	r0, r2
 800def0:	f7fe f931 	bl	800c156 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800def4:	4b0a      	ldr	r3, [pc, #40]	@ (800df20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	429a      	cmp	r2, r3
 800defc:	d202      	bcs.n	800df04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800defe:	4a08      	ldr	r2, [pc, #32]	@ (800df20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	6013      	str	r3, [r2, #0]
}
 800df04:	bf00      	nop
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	24005588 	.word	0x24005588
 800df10:	240050b0 	.word	0x240050b0
 800df14:	24005570 	.word	0x24005570
 800df18:	24005540 	.word	0x24005540
 800df1c:	2400553c 	.word	0x2400553c
 800df20:	240055a4 	.word	0x240055a4

0800df24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	@ 0x28
 800df28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df2e:	f000 fb13 	bl	800e558 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df32:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa8 <xTimerCreateTimerTask+0x84>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d021      	beq.n	800df7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df3e:	2300      	movs	r3, #0
 800df40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df42:	1d3a      	adds	r2, r7, #4
 800df44:	f107 0108 	add.w	r1, r7, #8
 800df48:	f107 030c 	add.w	r3, r7, #12
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fd fea9 	bl	800bca4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	9202      	str	r2, [sp, #8]
 800df5a:	9301      	str	r3, [sp, #4]
 800df5c:	2302      	movs	r3, #2
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	2300      	movs	r3, #0
 800df62:	460a      	mov	r2, r1
 800df64:	4911      	ldr	r1, [pc, #68]	@ (800dfac <xTimerCreateTimerTask+0x88>)
 800df66:	4812      	ldr	r0, [pc, #72]	@ (800dfb0 <xTimerCreateTimerTask+0x8c>)
 800df68:	f7ff f8a2 	bl	800d0b0 <xTaskCreateStatic>
 800df6c:	4603      	mov	r3, r0
 800df6e:	4a11      	ldr	r2, [pc, #68]	@ (800dfb4 <xTimerCreateTimerTask+0x90>)
 800df70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df72:	4b10      	ldr	r3, [pc, #64]	@ (800dfb4 <xTimerCreateTimerTask+0x90>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800df7a:	2301      	movs	r3, #1
 800df7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d10b      	bne.n	800df9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	613b      	str	r3, [r7, #16]
}
 800df96:	bf00      	nop
 800df98:	bf00      	nop
 800df9a:	e7fd      	b.n	800df98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df9c:	697b      	ldr	r3, [r7, #20]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3718      	adds	r7, #24
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	240055e0 	.word	0x240055e0
 800dfac:	0801405c 	.word	0x0801405c
 800dfb0:	0800e0f1 	.word	0x0800e0f1
 800dfb4:	240055e4 	.word	0x240055e4

0800dfb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b08a      	sub	sp, #40	@ 0x28
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
 800dfc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10b      	bne.n	800dfe8 <xTimerGenericCommand+0x30>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	623b      	str	r3, [r7, #32]
}
 800dfe2:	bf00      	nop
 800dfe4:	bf00      	nop
 800dfe6:	e7fd      	b.n	800dfe4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dfe8:	4b19      	ldr	r3, [pc, #100]	@ (800e050 <xTimerGenericCommand+0x98>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d02a      	beq.n	800e046 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b05      	cmp	r3, #5
 800e000:	dc18      	bgt.n	800e034 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e002:	f7ff fead 	bl	800dd60 <xTaskGetSchedulerState>
 800e006:	4603      	mov	r3, r0
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d109      	bne.n	800e020 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e00c:	4b10      	ldr	r3, [pc, #64]	@ (800e050 <xTimerGenericCommand+0x98>)
 800e00e:	6818      	ldr	r0, [r3, #0]
 800e010:	f107 0110 	add.w	r1, r7, #16
 800e014:	2300      	movs	r3, #0
 800e016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e018:	f7fe fc5a 	bl	800c8d0 <xQueueGenericSend>
 800e01c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e01e:	e012      	b.n	800e046 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e020:	4b0b      	ldr	r3, [pc, #44]	@ (800e050 <xTimerGenericCommand+0x98>)
 800e022:	6818      	ldr	r0, [r3, #0]
 800e024:	f107 0110 	add.w	r1, r7, #16
 800e028:	2300      	movs	r3, #0
 800e02a:	2200      	movs	r2, #0
 800e02c:	f7fe fc50 	bl	800c8d0 <xQueueGenericSend>
 800e030:	6278      	str	r0, [r7, #36]	@ 0x24
 800e032:	e008      	b.n	800e046 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e034:	4b06      	ldr	r3, [pc, #24]	@ (800e050 <xTimerGenericCommand+0x98>)
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	f107 0110 	add.w	r1, r7, #16
 800e03c:	2300      	movs	r3, #0
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	f7fe fd48 	bl	800cad4 <xQueueGenericSendFromISR>
 800e044:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3728      	adds	r7, #40	@ 0x28
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	240055e0 	.word	0x240055e0

0800e054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af02      	add	r7, sp, #8
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e05e:	4b23      	ldr	r3, [pc, #140]	@ (800e0ec <prvProcessExpiredTimer+0x98>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	3304      	adds	r3, #4
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fe f8ab 	bl	800c1c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e078:	f003 0304 	and.w	r3, r3, #4
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d023      	beq.n	800e0c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	699a      	ldr	r2, [r3, #24]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	18d1      	adds	r1, r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	683a      	ldr	r2, [r7, #0]
 800e08c:	6978      	ldr	r0, [r7, #20]
 800e08e:	f000 f8d5 	bl	800e23c <prvInsertTimerInActiveList>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d020      	beq.n	800e0da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e098:	2300      	movs	r3, #0
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	2300      	movs	r3, #0
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	6978      	ldr	r0, [r7, #20]
 800e0a4:	f7ff ff88 	bl	800dfb8 <xTimerGenericCommand>
 800e0a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d114      	bne.n	800e0da <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	60fb      	str	r3, [r7, #12]
}
 800e0c2:	bf00      	nop
 800e0c4:	bf00      	nop
 800e0c6:	e7fd      	b.n	800e0c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0ce:	f023 0301 	bic.w	r3, r3, #1
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	6978      	ldr	r0, [r7, #20]
 800e0e0:	4798      	blx	r3
}
 800e0e2:	bf00      	nop
 800e0e4:	3718      	adds	r7, #24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	240055d8 	.word	0x240055d8

0800e0f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0f8:	f107 0308 	add.w	r3, r7, #8
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 f859 	bl	800e1b4 <prvGetNextExpireTime>
 800e102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	4619      	mov	r1, r3
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f000 f805 	bl	800e118 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e10e:	f000 f8d7 	bl	800e2c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e112:	bf00      	nop
 800e114:	e7f0      	b.n	800e0f8 <prvTimerTask+0x8>
	...

0800e118 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e122:	f7ff fa29 	bl	800d578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e126:	f107 0308 	add.w	r3, r7, #8
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 f866 	bl	800e1fc <prvSampleTimeNow>
 800e130:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d130      	bne.n	800e19a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10a      	bne.n	800e154 <prvProcessTimerOrBlockTask+0x3c>
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	429a      	cmp	r2, r3
 800e144:	d806      	bhi.n	800e154 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e146:	f7ff fa25 	bl	800d594 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e14a:	68f9      	ldr	r1, [r7, #12]
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7ff ff81 	bl	800e054 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e152:	e024      	b.n	800e19e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d008      	beq.n	800e16c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e15a:	4b13      	ldr	r3, [pc, #76]	@ (800e1a8 <prvProcessTimerOrBlockTask+0x90>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d101      	bne.n	800e168 <prvProcessTimerOrBlockTask+0x50>
 800e164:	2301      	movs	r3, #1
 800e166:	e000      	b.n	800e16a <prvProcessTimerOrBlockTask+0x52>
 800e168:	2300      	movs	r3, #0
 800e16a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e16c:	4b0f      	ldr	r3, [pc, #60]	@ (800e1ac <prvProcessTimerOrBlockTask+0x94>)
 800e16e:	6818      	ldr	r0, [r3, #0]
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	683a      	ldr	r2, [r7, #0]
 800e178:	4619      	mov	r1, r3
 800e17a:	f7fe ff65 	bl	800d048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e17e:	f7ff fa09 	bl	800d594 <xTaskResumeAll>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d10a      	bne.n	800e19e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e188:	4b09      	ldr	r3, [pc, #36]	@ (800e1b0 <prvProcessTimerOrBlockTask+0x98>)
 800e18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e18e:	601a      	str	r2, [r3, #0]
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	f3bf 8f6f 	isb	sy
}
 800e198:	e001      	b.n	800e19e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e19a:	f7ff f9fb 	bl	800d594 <xTaskResumeAll>
}
 800e19e:	bf00      	nop
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	240055dc 	.word	0x240055dc
 800e1ac:	240055e0 	.word	0x240055e0
 800e1b0:	e000ed04 	.word	0xe000ed04

0800e1b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e1bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e1f8 <prvGetNextExpireTime+0x44>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <prvGetNextExpireTime+0x16>
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	e000      	b.n	800e1cc <prvGetNextExpireTime+0x18>
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d105      	bne.n	800e1e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1d8:	4b07      	ldr	r3, [pc, #28]	@ (800e1f8 <prvGetNextExpireTime+0x44>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	e001      	b.n	800e1e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	240055d8 	.word	0x240055d8

0800e1fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e204:	f7ff fa64 	bl	800d6d0 <xTaskGetTickCount>
 800e208:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e20a:	4b0b      	ldr	r3, [pc, #44]	@ (800e238 <prvSampleTimeNow+0x3c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	429a      	cmp	r2, r3
 800e212:	d205      	bcs.n	800e220 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e214:	f000 f93a 	bl	800e48c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	e002      	b.n	800e226 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e226:	4a04      	ldr	r2, [pc, #16]	@ (800e238 <prvSampleTimeNow+0x3c>)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e22c:	68fb      	ldr	r3, [r7, #12]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	240055e8 	.word	0x240055e8

0800e23c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d812      	bhi.n	800e288 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	1ad2      	subs	r2, r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d302      	bcc.n	800e276 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e270:	2301      	movs	r3, #1
 800e272:	617b      	str	r3, [r7, #20]
 800e274:	e01b      	b.n	800e2ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e276:	4b10      	ldr	r3, [pc, #64]	@ (800e2b8 <prvInsertTimerInActiveList+0x7c>)
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	3304      	adds	r3, #4
 800e27e:	4619      	mov	r1, r3
 800e280:	4610      	mov	r0, r2
 800e282:	f7fd ff68 	bl	800c156 <vListInsert>
 800e286:	e012      	b.n	800e2ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d206      	bcs.n	800e29e <prvInsertTimerInActiveList+0x62>
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d302      	bcc.n	800e29e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e298:	2301      	movs	r3, #1
 800e29a:	617b      	str	r3, [r7, #20]
 800e29c:	e007      	b.n	800e2ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e29e:	4b07      	ldr	r3, [pc, #28]	@ (800e2bc <prvInsertTimerInActiveList+0x80>)
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	f7fd ff54 	bl	800c156 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e2ae:	697b      	ldr	r3, [r7, #20]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3718      	adds	r7, #24
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	240055dc 	.word	0x240055dc
 800e2bc:	240055d8 	.word	0x240055d8

0800e2c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08e      	sub	sp, #56	@ 0x38
 800e2c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2c6:	e0ce      	b.n	800e466 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	da19      	bge.n	800e302 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e2ce:	1d3b      	adds	r3, r7, #4
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10b      	bne.n	800e2f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	61fb      	str	r3, [r7, #28]
}
 800e2ec:	bf00      	nop
 800e2ee:	bf00      	nop
 800e2f0:	e7fd      	b.n	800e2ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2f8:	6850      	ldr	r0, [r2, #4]
 800e2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2fc:	6892      	ldr	r2, [r2, #8]
 800e2fe:	4611      	mov	r1, r2
 800e300:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f2c0 80ae 	blt.w	800e466 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e310:	695b      	ldr	r3, [r3, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d004      	beq.n	800e320 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e318:	3304      	adds	r3, #4
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fd ff54 	bl	800c1c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e320:	463b      	mov	r3, r7
 800e322:	4618      	mov	r0, r3
 800e324:	f7ff ff6a 	bl	800e1fc <prvSampleTimeNow>
 800e328:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b09      	cmp	r3, #9
 800e32e:	f200 8097 	bhi.w	800e460 <prvProcessReceivedCommands+0x1a0>
 800e332:	a201      	add	r2, pc, #4	@ (adr r2, 800e338 <prvProcessReceivedCommands+0x78>)
 800e334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e338:	0800e361 	.word	0x0800e361
 800e33c:	0800e361 	.word	0x0800e361
 800e340:	0800e361 	.word	0x0800e361
 800e344:	0800e3d7 	.word	0x0800e3d7
 800e348:	0800e3eb 	.word	0x0800e3eb
 800e34c:	0800e437 	.word	0x0800e437
 800e350:	0800e361 	.word	0x0800e361
 800e354:	0800e361 	.word	0x0800e361
 800e358:	0800e3d7 	.word	0x0800e3d7
 800e35c:	0800e3eb 	.word	0x0800e3eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e366:	f043 0301 	orr.w	r3, r3, #1
 800e36a:	b2da      	uxtb	r2, r3
 800e36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	18d1      	adds	r1, r2, r3
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e37e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e380:	f7ff ff5c 	bl	800e23c <prvInsertTimerInActiveList>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d06c      	beq.n	800e464 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38c:	6a1b      	ldr	r3, [r3, #32]
 800e38e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e390:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e398:	f003 0304 	and.w	r3, r3, #4
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d061      	beq.n	800e464 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a4:	699b      	ldr	r3, [r3, #24]
 800e3a6:	441a      	add	r2, r3
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3b2:	f7ff fe01 	bl	800dfb8 <xTimerGenericCommand>
 800e3b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d152      	bne.n	800e464 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	61bb      	str	r3, [r7, #24]
}
 800e3d0:	bf00      	nop
 800e3d2:	bf00      	nop
 800e3d4:	e7fd      	b.n	800e3d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3dc:	f023 0301 	bic.w	r3, r3, #1
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e3e8:	e03d      	b.n	800e466 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3f0:	f043 0301 	orr.w	r3, r3, #1
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e400:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10b      	bne.n	800e422 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	617b      	str	r3, [r7, #20]
}
 800e41c:	bf00      	nop
 800e41e:	bf00      	nop
 800e420:	e7fd      	b.n	800e41e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e424:	699a      	ldr	r2, [r3, #24]
 800e426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e428:	18d1      	adds	r1, r2, r3
 800e42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e42e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e430:	f7ff ff04 	bl	800e23c <prvInsertTimerInActiveList>
					break;
 800e434:	e017      	b.n	800e466 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e43c:	f003 0302 	and.w	r3, r3, #2
 800e440:	2b00      	cmp	r3, #0
 800e442:	d103      	bne.n	800e44c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e446:	f7fd fd15 	bl	800be74 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e44a:	e00c      	b.n	800e466 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e452:	f023 0301 	bic.w	r3, r3, #1
 800e456:	b2da      	uxtb	r2, r3
 800e458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e45a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e45e:	e002      	b.n	800e466 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e460:	bf00      	nop
 800e462:	e000      	b.n	800e466 <prvProcessReceivedCommands+0x1a6>
					break;
 800e464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e466:	4b08      	ldr	r3, [pc, #32]	@ (800e488 <prvProcessReceivedCommands+0x1c8>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	1d39      	adds	r1, r7, #4
 800e46c:	2200      	movs	r2, #0
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe fbce 	bl	800cc10 <xQueueReceive>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	f47f af26 	bne.w	800e2c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e47c:	bf00      	nop
 800e47e:	bf00      	nop
 800e480:	3730      	adds	r7, #48	@ 0x30
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	240055e0 	.word	0x240055e0

0800e48c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b088      	sub	sp, #32
 800e490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e492:	e049      	b.n	800e528 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e494:	4b2e      	ldr	r3, [pc, #184]	@ (800e550 <prvSwitchTimerLists+0xc4>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e49e:	4b2c      	ldr	r3, [pc, #176]	@ (800e550 <prvSwitchTimerLists+0xc4>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fd fe8b 	bl	800c1c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4c0:	f003 0304 	and.w	r3, r3, #4
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d02f      	beq.n	800e528 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	699b      	ldr	r3, [r3, #24]
 800e4cc:	693a      	ldr	r2, [r7, #16]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e4d2:	68ba      	ldr	r2, [r7, #8]
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d90e      	bls.n	800e4f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800e550 <prvSwitchTimerLists+0xc4>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	f7fd fe30 	bl	800c156 <vListInsert>
 800e4f6:	e017      	b.n	800e528 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	693a      	ldr	r2, [r7, #16]
 800e500:	2100      	movs	r1, #0
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f7ff fd58 	bl	800dfb8 <xTimerGenericCommand>
 800e508:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10b      	bne.n	800e528 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	603b      	str	r3, [r7, #0]
}
 800e522:	bf00      	nop
 800e524:	bf00      	nop
 800e526:	e7fd      	b.n	800e524 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e528:	4b09      	ldr	r3, [pc, #36]	@ (800e550 <prvSwitchTimerLists+0xc4>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1b0      	bne.n	800e494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e532:	4b07      	ldr	r3, [pc, #28]	@ (800e550 <prvSwitchTimerLists+0xc4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e538:	4b06      	ldr	r3, [pc, #24]	@ (800e554 <prvSwitchTimerLists+0xc8>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a04      	ldr	r2, [pc, #16]	@ (800e550 <prvSwitchTimerLists+0xc4>)
 800e53e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e540:	4a04      	ldr	r2, [pc, #16]	@ (800e554 <prvSwitchTimerLists+0xc8>)
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	6013      	str	r3, [r2, #0]
}
 800e546:	bf00      	nop
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	240055d8 	.word	0x240055d8
 800e554:	240055dc 	.word	0x240055dc

0800e558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e55e:	f7fd ff8b 	bl	800c478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e562:	4b15      	ldr	r3, [pc, #84]	@ (800e5b8 <prvCheckForValidListAndQueue+0x60>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d120      	bne.n	800e5ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e56a:	4814      	ldr	r0, [pc, #80]	@ (800e5bc <prvCheckForValidListAndQueue+0x64>)
 800e56c:	f7fd fda2 	bl	800c0b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e570:	4813      	ldr	r0, [pc, #76]	@ (800e5c0 <prvCheckForValidListAndQueue+0x68>)
 800e572:	f7fd fd9f 	bl	800c0b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e576:	4b13      	ldr	r3, [pc, #76]	@ (800e5c4 <prvCheckForValidListAndQueue+0x6c>)
 800e578:	4a10      	ldr	r2, [pc, #64]	@ (800e5bc <prvCheckForValidListAndQueue+0x64>)
 800e57a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e57c:	4b12      	ldr	r3, [pc, #72]	@ (800e5c8 <prvCheckForValidListAndQueue+0x70>)
 800e57e:	4a10      	ldr	r2, [pc, #64]	@ (800e5c0 <prvCheckForValidListAndQueue+0x68>)
 800e580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e582:	2300      	movs	r3, #0
 800e584:	9300      	str	r3, [sp, #0]
 800e586:	4b11      	ldr	r3, [pc, #68]	@ (800e5cc <prvCheckForValidListAndQueue+0x74>)
 800e588:	4a11      	ldr	r2, [pc, #68]	@ (800e5d0 <prvCheckForValidListAndQueue+0x78>)
 800e58a:	2110      	movs	r1, #16
 800e58c:	200a      	movs	r0, #10
 800e58e:	f7fe f8ff 	bl	800c790 <xQueueGenericCreateStatic>
 800e592:	4603      	mov	r3, r0
 800e594:	4a08      	ldr	r2, [pc, #32]	@ (800e5b8 <prvCheckForValidListAndQueue+0x60>)
 800e596:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e598:	4b07      	ldr	r3, [pc, #28]	@ (800e5b8 <prvCheckForValidListAndQueue+0x60>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d005      	beq.n	800e5ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5a0:	4b05      	ldr	r3, [pc, #20]	@ (800e5b8 <prvCheckForValidListAndQueue+0x60>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	490b      	ldr	r1, [pc, #44]	@ (800e5d4 <prvCheckForValidListAndQueue+0x7c>)
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fe fd24 	bl	800cff4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5ac:	f7fd ff96 	bl	800c4dc <vPortExitCritical>
}
 800e5b0:	bf00      	nop
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	240055e0 	.word	0x240055e0
 800e5bc:	240055b0 	.word	0x240055b0
 800e5c0:	240055c4 	.word	0x240055c4
 800e5c4:	240055d8 	.word	0x240055d8
 800e5c8:	240055dc 	.word	0x240055dc
 800e5cc:	2400568c 	.word	0x2400568c
 800e5d0:	240055ec 	.word	0x240055ec
 800e5d4:	08014064 	.word	0x08014064

0800e5d8 <__cvt>:
 800e5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5da:	ed2d 8b02 	vpush	{d8}
 800e5de:	eeb0 8b40 	vmov.f64	d8, d0
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	4617      	mov	r7, r2
 800e5e6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e5e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e5ea:	ee18 2a90 	vmov	r2, s17
 800e5ee:	f025 0520 	bic.w	r5, r5, #32
 800e5f2:	2a00      	cmp	r2, #0
 800e5f4:	bfb6      	itet	lt
 800e5f6:	222d      	movlt	r2, #45	@ 0x2d
 800e5f8:	2200      	movge	r2, #0
 800e5fa:	eeb1 8b40 	vneglt.f64	d8, d0
 800e5fe:	2d46      	cmp	r5, #70	@ 0x46
 800e600:	460c      	mov	r4, r1
 800e602:	701a      	strb	r2, [r3, #0]
 800e604:	d004      	beq.n	800e610 <__cvt+0x38>
 800e606:	2d45      	cmp	r5, #69	@ 0x45
 800e608:	d100      	bne.n	800e60c <__cvt+0x34>
 800e60a:	3401      	adds	r4, #1
 800e60c:	2102      	movs	r1, #2
 800e60e:	e000      	b.n	800e612 <__cvt+0x3a>
 800e610:	2103      	movs	r1, #3
 800e612:	ab03      	add	r3, sp, #12
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	ab02      	add	r3, sp, #8
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	4622      	mov	r2, r4
 800e61c:	4633      	mov	r3, r6
 800e61e:	eeb0 0b48 	vmov.f64	d0, d8
 800e622:	f001 f9b9 	bl	800f998 <_dtoa_r>
 800e626:	2d47      	cmp	r5, #71	@ 0x47
 800e628:	d114      	bne.n	800e654 <__cvt+0x7c>
 800e62a:	07fb      	lsls	r3, r7, #31
 800e62c:	d50a      	bpl.n	800e644 <__cvt+0x6c>
 800e62e:	1902      	adds	r2, r0, r4
 800e630:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e638:	bf08      	it	eq
 800e63a:	9203      	streq	r2, [sp, #12]
 800e63c:	2130      	movs	r1, #48	@ 0x30
 800e63e:	9b03      	ldr	r3, [sp, #12]
 800e640:	4293      	cmp	r3, r2
 800e642:	d319      	bcc.n	800e678 <__cvt+0xa0>
 800e644:	9b03      	ldr	r3, [sp, #12]
 800e646:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e648:	1a1b      	subs	r3, r3, r0
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	b005      	add	sp, #20
 800e64e:	ecbd 8b02 	vpop	{d8}
 800e652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e654:	2d46      	cmp	r5, #70	@ 0x46
 800e656:	eb00 0204 	add.w	r2, r0, r4
 800e65a:	d1e9      	bne.n	800e630 <__cvt+0x58>
 800e65c:	7803      	ldrb	r3, [r0, #0]
 800e65e:	2b30      	cmp	r3, #48	@ 0x30
 800e660:	d107      	bne.n	800e672 <__cvt+0x9a>
 800e662:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66a:	bf1c      	itt	ne
 800e66c:	f1c4 0401 	rsbne	r4, r4, #1
 800e670:	6034      	strne	r4, [r6, #0]
 800e672:	6833      	ldr	r3, [r6, #0]
 800e674:	441a      	add	r2, r3
 800e676:	e7db      	b.n	800e630 <__cvt+0x58>
 800e678:	1c5c      	adds	r4, r3, #1
 800e67a:	9403      	str	r4, [sp, #12]
 800e67c:	7019      	strb	r1, [r3, #0]
 800e67e:	e7de      	b.n	800e63e <__cvt+0x66>

0800e680 <__exponent>:
 800e680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e682:	2900      	cmp	r1, #0
 800e684:	bfba      	itte	lt
 800e686:	4249      	neglt	r1, r1
 800e688:	232d      	movlt	r3, #45	@ 0x2d
 800e68a:	232b      	movge	r3, #43	@ 0x2b
 800e68c:	2909      	cmp	r1, #9
 800e68e:	7002      	strb	r2, [r0, #0]
 800e690:	7043      	strb	r3, [r0, #1]
 800e692:	dd29      	ble.n	800e6e8 <__exponent+0x68>
 800e694:	f10d 0307 	add.w	r3, sp, #7
 800e698:	461d      	mov	r5, r3
 800e69a:	270a      	movs	r7, #10
 800e69c:	461a      	mov	r2, r3
 800e69e:	fbb1 f6f7 	udiv	r6, r1, r7
 800e6a2:	fb07 1416 	mls	r4, r7, r6, r1
 800e6a6:	3430      	adds	r4, #48	@ 0x30
 800e6a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	2c63      	cmp	r4, #99	@ 0x63
 800e6b0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e6b4:	4631      	mov	r1, r6
 800e6b6:	dcf1      	bgt.n	800e69c <__exponent+0x1c>
 800e6b8:	3130      	adds	r1, #48	@ 0x30
 800e6ba:	1e94      	subs	r4, r2, #2
 800e6bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e6c0:	1c41      	adds	r1, r0, #1
 800e6c2:	4623      	mov	r3, r4
 800e6c4:	42ab      	cmp	r3, r5
 800e6c6:	d30a      	bcc.n	800e6de <__exponent+0x5e>
 800e6c8:	f10d 0309 	add.w	r3, sp, #9
 800e6cc:	1a9b      	subs	r3, r3, r2
 800e6ce:	42ac      	cmp	r4, r5
 800e6d0:	bf88      	it	hi
 800e6d2:	2300      	movhi	r3, #0
 800e6d4:	3302      	adds	r3, #2
 800e6d6:	4403      	add	r3, r0
 800e6d8:	1a18      	subs	r0, r3, r0
 800e6da:	b003      	add	sp, #12
 800e6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6de:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e6e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e6e6:	e7ed      	b.n	800e6c4 <__exponent+0x44>
 800e6e8:	2330      	movs	r3, #48	@ 0x30
 800e6ea:	3130      	adds	r1, #48	@ 0x30
 800e6ec:	7083      	strb	r3, [r0, #2]
 800e6ee:	70c1      	strb	r1, [r0, #3]
 800e6f0:	1d03      	adds	r3, r0, #4
 800e6f2:	e7f1      	b.n	800e6d8 <__exponent+0x58>
 800e6f4:	0000      	movs	r0, r0
	...

0800e6f8 <_printf_float>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	b08d      	sub	sp, #52	@ 0x34
 800e6fe:	460c      	mov	r4, r1
 800e700:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e704:	4616      	mov	r6, r2
 800e706:	461f      	mov	r7, r3
 800e708:	4605      	mov	r5, r0
 800e70a:	f000 ffdb 	bl	800f6c4 <_localeconv_r>
 800e70e:	f8d0 b000 	ldr.w	fp, [r0]
 800e712:	4658      	mov	r0, fp
 800e714:	f7f1 fe34 	bl	8000380 <strlen>
 800e718:	2300      	movs	r3, #0
 800e71a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e71c:	f8d8 3000 	ldr.w	r3, [r8]
 800e720:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e724:	6822      	ldr	r2, [r4, #0]
 800e726:	9005      	str	r0, [sp, #20]
 800e728:	3307      	adds	r3, #7
 800e72a:	f023 0307 	bic.w	r3, r3, #7
 800e72e:	f103 0108 	add.w	r1, r3, #8
 800e732:	f8c8 1000 	str.w	r1, [r8]
 800e736:	ed93 0b00 	vldr	d0, [r3]
 800e73a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e998 <_printf_float+0x2a0>
 800e73e:	eeb0 7bc0 	vabs.f64	d7, d0
 800e742:	eeb4 7b46 	vcmp.f64	d7, d6
 800e746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e74e:	dd24      	ble.n	800e79a <_printf_float+0xa2>
 800e750:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e758:	d502      	bpl.n	800e760 <_printf_float+0x68>
 800e75a:	232d      	movs	r3, #45	@ 0x2d
 800e75c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e760:	498f      	ldr	r1, [pc, #572]	@ (800e9a0 <_printf_float+0x2a8>)
 800e762:	4b90      	ldr	r3, [pc, #576]	@ (800e9a4 <_printf_float+0x2ac>)
 800e764:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e768:	bf94      	ite	ls
 800e76a:	4688      	movls	r8, r1
 800e76c:	4698      	movhi	r8, r3
 800e76e:	f022 0204 	bic.w	r2, r2, #4
 800e772:	2303      	movs	r3, #3
 800e774:	6123      	str	r3, [r4, #16]
 800e776:	6022      	str	r2, [r4, #0]
 800e778:	f04f 0a00 	mov.w	sl, #0
 800e77c:	9700      	str	r7, [sp, #0]
 800e77e:	4633      	mov	r3, r6
 800e780:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e782:	4621      	mov	r1, r4
 800e784:	4628      	mov	r0, r5
 800e786:	f000 f9d1 	bl	800eb2c <_printf_common>
 800e78a:	3001      	adds	r0, #1
 800e78c:	f040 8089 	bne.w	800e8a2 <_printf_float+0x1aa>
 800e790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e794:	b00d      	add	sp, #52	@ 0x34
 800e796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79a:	eeb4 0b40 	vcmp.f64	d0, d0
 800e79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a2:	d709      	bvc.n	800e7b8 <_printf_float+0xc0>
 800e7a4:	ee10 3a90 	vmov	r3, s1
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	bfbc      	itt	lt
 800e7ac:	232d      	movlt	r3, #45	@ 0x2d
 800e7ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e7b2:	497d      	ldr	r1, [pc, #500]	@ (800e9a8 <_printf_float+0x2b0>)
 800e7b4:	4b7d      	ldr	r3, [pc, #500]	@ (800e9ac <_printf_float+0x2b4>)
 800e7b6:	e7d5      	b.n	800e764 <_printf_float+0x6c>
 800e7b8:	6863      	ldr	r3, [r4, #4]
 800e7ba:	1c59      	adds	r1, r3, #1
 800e7bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e7c0:	d139      	bne.n	800e836 <_printf_float+0x13e>
 800e7c2:	2306      	movs	r3, #6
 800e7c4:	6063      	str	r3, [r4, #4]
 800e7c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	6022      	str	r2, [r4, #0]
 800e7ce:	9303      	str	r3, [sp, #12]
 800e7d0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e7d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e7d6:	ab09      	add	r3, sp, #36	@ 0x24
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	6861      	ldr	r1, [r4, #4]
 800e7dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	f7ff fef9 	bl	800e5d8 <__cvt>
 800e7e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e7ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7ec:	4680      	mov	r8, r0
 800e7ee:	d129      	bne.n	800e844 <_printf_float+0x14c>
 800e7f0:	1cc8      	adds	r0, r1, #3
 800e7f2:	db02      	blt.n	800e7fa <_printf_float+0x102>
 800e7f4:	6863      	ldr	r3, [r4, #4]
 800e7f6:	4299      	cmp	r1, r3
 800e7f8:	dd41      	ble.n	800e87e <_printf_float+0x186>
 800e7fa:	f1a9 0902 	sub.w	r9, r9, #2
 800e7fe:	fa5f f989 	uxtb.w	r9, r9
 800e802:	3901      	subs	r1, #1
 800e804:	464a      	mov	r2, r9
 800e806:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e80a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e80c:	f7ff ff38 	bl	800e680 <__exponent>
 800e810:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e812:	1813      	adds	r3, r2, r0
 800e814:	2a01      	cmp	r2, #1
 800e816:	4682      	mov	sl, r0
 800e818:	6123      	str	r3, [r4, #16]
 800e81a:	dc02      	bgt.n	800e822 <_printf_float+0x12a>
 800e81c:	6822      	ldr	r2, [r4, #0]
 800e81e:	07d2      	lsls	r2, r2, #31
 800e820:	d501      	bpl.n	800e826 <_printf_float+0x12e>
 800e822:	3301      	adds	r3, #1
 800e824:	6123      	str	r3, [r4, #16]
 800e826:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d0a6      	beq.n	800e77c <_printf_float+0x84>
 800e82e:	232d      	movs	r3, #45	@ 0x2d
 800e830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e834:	e7a2      	b.n	800e77c <_printf_float+0x84>
 800e836:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e83a:	d1c4      	bne.n	800e7c6 <_printf_float+0xce>
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1c2      	bne.n	800e7c6 <_printf_float+0xce>
 800e840:	2301      	movs	r3, #1
 800e842:	e7bf      	b.n	800e7c4 <_printf_float+0xcc>
 800e844:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e848:	d9db      	bls.n	800e802 <_printf_float+0x10a>
 800e84a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e84e:	d118      	bne.n	800e882 <_printf_float+0x18a>
 800e850:	2900      	cmp	r1, #0
 800e852:	6863      	ldr	r3, [r4, #4]
 800e854:	dd0b      	ble.n	800e86e <_printf_float+0x176>
 800e856:	6121      	str	r1, [r4, #16]
 800e858:	b913      	cbnz	r3, 800e860 <_printf_float+0x168>
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	07d0      	lsls	r0, r2, #31
 800e85e:	d502      	bpl.n	800e866 <_printf_float+0x16e>
 800e860:	3301      	adds	r3, #1
 800e862:	440b      	add	r3, r1
 800e864:	6123      	str	r3, [r4, #16]
 800e866:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e868:	f04f 0a00 	mov.w	sl, #0
 800e86c:	e7db      	b.n	800e826 <_printf_float+0x12e>
 800e86e:	b913      	cbnz	r3, 800e876 <_printf_float+0x17e>
 800e870:	6822      	ldr	r2, [r4, #0]
 800e872:	07d2      	lsls	r2, r2, #31
 800e874:	d501      	bpl.n	800e87a <_printf_float+0x182>
 800e876:	3302      	adds	r3, #2
 800e878:	e7f4      	b.n	800e864 <_printf_float+0x16c>
 800e87a:	2301      	movs	r3, #1
 800e87c:	e7f2      	b.n	800e864 <_printf_float+0x16c>
 800e87e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e884:	4299      	cmp	r1, r3
 800e886:	db05      	blt.n	800e894 <_printf_float+0x19c>
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	6121      	str	r1, [r4, #16]
 800e88c:	07d8      	lsls	r0, r3, #31
 800e88e:	d5ea      	bpl.n	800e866 <_printf_float+0x16e>
 800e890:	1c4b      	adds	r3, r1, #1
 800e892:	e7e7      	b.n	800e864 <_printf_float+0x16c>
 800e894:	2900      	cmp	r1, #0
 800e896:	bfd4      	ite	le
 800e898:	f1c1 0202 	rsble	r2, r1, #2
 800e89c:	2201      	movgt	r2, #1
 800e89e:	4413      	add	r3, r2
 800e8a0:	e7e0      	b.n	800e864 <_printf_float+0x16c>
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	055a      	lsls	r2, r3, #21
 800e8a6:	d407      	bmi.n	800e8b8 <_printf_float+0x1c0>
 800e8a8:	6923      	ldr	r3, [r4, #16]
 800e8aa:	4642      	mov	r2, r8
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	47b8      	blx	r7
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	d12a      	bne.n	800e90c <_printf_float+0x214>
 800e8b6:	e76b      	b.n	800e790 <_printf_float+0x98>
 800e8b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e8bc:	f240 80e0 	bls.w	800ea80 <_printf_float+0x388>
 800e8c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e8c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8cc:	d133      	bne.n	800e936 <_printf_float+0x23e>
 800e8ce:	4a38      	ldr	r2, [pc, #224]	@ (800e9b0 <_printf_float+0x2b8>)
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	4631      	mov	r1, r6
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	47b8      	blx	r7
 800e8d8:	3001      	adds	r0, #1
 800e8da:	f43f af59 	beq.w	800e790 <_printf_float+0x98>
 800e8de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e8e2:	4543      	cmp	r3, r8
 800e8e4:	db02      	blt.n	800e8ec <_printf_float+0x1f4>
 800e8e6:	6823      	ldr	r3, [r4, #0]
 800e8e8:	07d8      	lsls	r0, r3, #31
 800e8ea:	d50f      	bpl.n	800e90c <_printf_float+0x214>
 800e8ec:	9b05      	ldr	r3, [sp, #20]
 800e8ee:	465a      	mov	r2, fp
 800e8f0:	4631      	mov	r1, r6
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	47b8      	blx	r7
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	f43f af4a 	beq.w	800e790 <_printf_float+0x98>
 800e8fc:	f04f 0900 	mov.w	r9, #0
 800e900:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e904:	f104 0a1a 	add.w	sl, r4, #26
 800e908:	45c8      	cmp	r8, r9
 800e90a:	dc09      	bgt.n	800e920 <_printf_float+0x228>
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	079b      	lsls	r3, r3, #30
 800e910:	f100 8107 	bmi.w	800eb22 <_printf_float+0x42a>
 800e914:	68e0      	ldr	r0, [r4, #12]
 800e916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e918:	4298      	cmp	r0, r3
 800e91a:	bfb8      	it	lt
 800e91c:	4618      	movlt	r0, r3
 800e91e:	e739      	b.n	800e794 <_printf_float+0x9c>
 800e920:	2301      	movs	r3, #1
 800e922:	4652      	mov	r2, sl
 800e924:	4631      	mov	r1, r6
 800e926:	4628      	mov	r0, r5
 800e928:	47b8      	blx	r7
 800e92a:	3001      	adds	r0, #1
 800e92c:	f43f af30 	beq.w	800e790 <_printf_float+0x98>
 800e930:	f109 0901 	add.w	r9, r9, #1
 800e934:	e7e8      	b.n	800e908 <_printf_float+0x210>
 800e936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dc3b      	bgt.n	800e9b4 <_printf_float+0x2bc>
 800e93c:	4a1c      	ldr	r2, [pc, #112]	@ (800e9b0 <_printf_float+0x2b8>)
 800e93e:	2301      	movs	r3, #1
 800e940:	4631      	mov	r1, r6
 800e942:	4628      	mov	r0, r5
 800e944:	47b8      	blx	r7
 800e946:	3001      	adds	r0, #1
 800e948:	f43f af22 	beq.w	800e790 <_printf_float+0x98>
 800e94c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e950:	ea59 0303 	orrs.w	r3, r9, r3
 800e954:	d102      	bne.n	800e95c <_printf_float+0x264>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	07d9      	lsls	r1, r3, #31
 800e95a:	d5d7      	bpl.n	800e90c <_printf_float+0x214>
 800e95c:	9b05      	ldr	r3, [sp, #20]
 800e95e:	465a      	mov	r2, fp
 800e960:	4631      	mov	r1, r6
 800e962:	4628      	mov	r0, r5
 800e964:	47b8      	blx	r7
 800e966:	3001      	adds	r0, #1
 800e968:	f43f af12 	beq.w	800e790 <_printf_float+0x98>
 800e96c:	f04f 0a00 	mov.w	sl, #0
 800e970:	f104 0b1a 	add.w	fp, r4, #26
 800e974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e976:	425b      	negs	r3, r3
 800e978:	4553      	cmp	r3, sl
 800e97a:	dc01      	bgt.n	800e980 <_printf_float+0x288>
 800e97c:	464b      	mov	r3, r9
 800e97e:	e794      	b.n	800e8aa <_printf_float+0x1b2>
 800e980:	2301      	movs	r3, #1
 800e982:	465a      	mov	r2, fp
 800e984:	4631      	mov	r1, r6
 800e986:	4628      	mov	r0, r5
 800e988:	47b8      	blx	r7
 800e98a:	3001      	adds	r0, #1
 800e98c:	f43f af00 	beq.w	800e790 <_printf_float+0x98>
 800e990:	f10a 0a01 	add.w	sl, sl, #1
 800e994:	e7ee      	b.n	800e974 <_printf_float+0x27c>
 800e996:	bf00      	nop
 800e998:	ffffffff 	.word	0xffffffff
 800e99c:	7fefffff 	.word	0x7fefffff
 800e9a0:	080140e0 	.word	0x080140e0
 800e9a4:	080140e4 	.word	0x080140e4
 800e9a8:	080140e8 	.word	0x080140e8
 800e9ac:	080140ec 	.word	0x080140ec
 800e9b0:	080140f0 	.word	0x080140f0
 800e9b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9ba:	4553      	cmp	r3, sl
 800e9bc:	bfa8      	it	ge
 800e9be:	4653      	movge	r3, sl
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	4699      	mov	r9, r3
 800e9c4:	dc37      	bgt.n	800ea36 <_printf_float+0x33e>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	9307      	str	r3, [sp, #28]
 800e9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9ce:	f104 021a 	add.w	r2, r4, #26
 800e9d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e9d4:	9907      	ldr	r1, [sp, #28]
 800e9d6:	9306      	str	r3, [sp, #24]
 800e9d8:	eba3 0309 	sub.w	r3, r3, r9
 800e9dc:	428b      	cmp	r3, r1
 800e9de:	dc31      	bgt.n	800ea44 <_printf_float+0x34c>
 800e9e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9e2:	459a      	cmp	sl, r3
 800e9e4:	dc3b      	bgt.n	800ea5e <_printf_float+0x366>
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	07da      	lsls	r2, r3, #31
 800e9ea:	d438      	bmi.n	800ea5e <_printf_float+0x366>
 800e9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ee:	ebaa 0903 	sub.w	r9, sl, r3
 800e9f2:	9b06      	ldr	r3, [sp, #24]
 800e9f4:	ebaa 0303 	sub.w	r3, sl, r3
 800e9f8:	4599      	cmp	r9, r3
 800e9fa:	bfa8      	it	ge
 800e9fc:	4699      	movge	r9, r3
 800e9fe:	f1b9 0f00 	cmp.w	r9, #0
 800ea02:	dc34      	bgt.n	800ea6e <_printf_float+0x376>
 800ea04:	f04f 0800 	mov.w	r8, #0
 800ea08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea0c:	f104 0b1a 	add.w	fp, r4, #26
 800ea10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea12:	ebaa 0303 	sub.w	r3, sl, r3
 800ea16:	eba3 0309 	sub.w	r3, r3, r9
 800ea1a:	4543      	cmp	r3, r8
 800ea1c:	f77f af76 	ble.w	800e90c <_printf_float+0x214>
 800ea20:	2301      	movs	r3, #1
 800ea22:	465a      	mov	r2, fp
 800ea24:	4631      	mov	r1, r6
 800ea26:	4628      	mov	r0, r5
 800ea28:	47b8      	blx	r7
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	f43f aeb0 	beq.w	800e790 <_printf_float+0x98>
 800ea30:	f108 0801 	add.w	r8, r8, #1
 800ea34:	e7ec      	b.n	800ea10 <_printf_float+0x318>
 800ea36:	4642      	mov	r2, r8
 800ea38:	4631      	mov	r1, r6
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	47b8      	blx	r7
 800ea3e:	3001      	adds	r0, #1
 800ea40:	d1c1      	bne.n	800e9c6 <_printf_float+0x2ce>
 800ea42:	e6a5      	b.n	800e790 <_printf_float+0x98>
 800ea44:	2301      	movs	r3, #1
 800ea46:	4631      	mov	r1, r6
 800ea48:	4628      	mov	r0, r5
 800ea4a:	9206      	str	r2, [sp, #24]
 800ea4c:	47b8      	blx	r7
 800ea4e:	3001      	adds	r0, #1
 800ea50:	f43f ae9e 	beq.w	800e790 <_printf_float+0x98>
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	9a06      	ldr	r2, [sp, #24]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	9307      	str	r3, [sp, #28]
 800ea5c:	e7b9      	b.n	800e9d2 <_printf_float+0x2da>
 800ea5e:	9b05      	ldr	r3, [sp, #20]
 800ea60:	465a      	mov	r2, fp
 800ea62:	4631      	mov	r1, r6
 800ea64:	4628      	mov	r0, r5
 800ea66:	47b8      	blx	r7
 800ea68:	3001      	adds	r0, #1
 800ea6a:	d1bf      	bne.n	800e9ec <_printf_float+0x2f4>
 800ea6c:	e690      	b.n	800e790 <_printf_float+0x98>
 800ea6e:	9a06      	ldr	r2, [sp, #24]
 800ea70:	464b      	mov	r3, r9
 800ea72:	4442      	add	r2, r8
 800ea74:	4631      	mov	r1, r6
 800ea76:	4628      	mov	r0, r5
 800ea78:	47b8      	blx	r7
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	d1c2      	bne.n	800ea04 <_printf_float+0x30c>
 800ea7e:	e687      	b.n	800e790 <_printf_float+0x98>
 800ea80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ea84:	f1b9 0f01 	cmp.w	r9, #1
 800ea88:	dc01      	bgt.n	800ea8e <_printf_float+0x396>
 800ea8a:	07db      	lsls	r3, r3, #31
 800ea8c:	d536      	bpl.n	800eafc <_printf_float+0x404>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	4642      	mov	r2, r8
 800ea92:	4631      	mov	r1, r6
 800ea94:	4628      	mov	r0, r5
 800ea96:	47b8      	blx	r7
 800ea98:	3001      	adds	r0, #1
 800ea9a:	f43f ae79 	beq.w	800e790 <_printf_float+0x98>
 800ea9e:	9b05      	ldr	r3, [sp, #20]
 800eaa0:	465a      	mov	r2, fp
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	47b8      	blx	r7
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	f43f ae71 	beq.w	800e790 <_printf_float+0x98>
 800eaae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800eab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaba:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800eabe:	d018      	beq.n	800eaf2 <_printf_float+0x3fa>
 800eac0:	464b      	mov	r3, r9
 800eac2:	f108 0201 	add.w	r2, r8, #1
 800eac6:	4631      	mov	r1, r6
 800eac8:	4628      	mov	r0, r5
 800eaca:	47b8      	blx	r7
 800eacc:	3001      	adds	r0, #1
 800eace:	d10c      	bne.n	800eaea <_printf_float+0x3f2>
 800ead0:	e65e      	b.n	800e790 <_printf_float+0x98>
 800ead2:	2301      	movs	r3, #1
 800ead4:	465a      	mov	r2, fp
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	47b8      	blx	r7
 800eadc:	3001      	adds	r0, #1
 800eade:	f43f ae57 	beq.w	800e790 <_printf_float+0x98>
 800eae2:	f108 0801 	add.w	r8, r8, #1
 800eae6:	45c8      	cmp	r8, r9
 800eae8:	dbf3      	blt.n	800ead2 <_printf_float+0x3da>
 800eaea:	4653      	mov	r3, sl
 800eaec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eaf0:	e6dc      	b.n	800e8ac <_printf_float+0x1b4>
 800eaf2:	f04f 0800 	mov.w	r8, #0
 800eaf6:	f104 0b1a 	add.w	fp, r4, #26
 800eafa:	e7f4      	b.n	800eae6 <_printf_float+0x3ee>
 800eafc:	2301      	movs	r3, #1
 800eafe:	4642      	mov	r2, r8
 800eb00:	e7e1      	b.n	800eac6 <_printf_float+0x3ce>
 800eb02:	2301      	movs	r3, #1
 800eb04:	464a      	mov	r2, r9
 800eb06:	4631      	mov	r1, r6
 800eb08:	4628      	mov	r0, r5
 800eb0a:	47b8      	blx	r7
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	f43f ae3f 	beq.w	800e790 <_printf_float+0x98>
 800eb12:	f108 0801 	add.w	r8, r8, #1
 800eb16:	68e3      	ldr	r3, [r4, #12]
 800eb18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb1a:	1a5b      	subs	r3, r3, r1
 800eb1c:	4543      	cmp	r3, r8
 800eb1e:	dcf0      	bgt.n	800eb02 <_printf_float+0x40a>
 800eb20:	e6f8      	b.n	800e914 <_printf_float+0x21c>
 800eb22:	f04f 0800 	mov.w	r8, #0
 800eb26:	f104 0919 	add.w	r9, r4, #25
 800eb2a:	e7f4      	b.n	800eb16 <_printf_float+0x41e>

0800eb2c <_printf_common>:
 800eb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb30:	4616      	mov	r6, r2
 800eb32:	4698      	mov	r8, r3
 800eb34:	688a      	ldr	r2, [r1, #8]
 800eb36:	690b      	ldr	r3, [r1, #16]
 800eb38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	bfb8      	it	lt
 800eb40:	4613      	movlt	r3, r2
 800eb42:	6033      	str	r3, [r6, #0]
 800eb44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb48:	4607      	mov	r7, r0
 800eb4a:	460c      	mov	r4, r1
 800eb4c:	b10a      	cbz	r2, 800eb52 <_printf_common+0x26>
 800eb4e:	3301      	adds	r3, #1
 800eb50:	6033      	str	r3, [r6, #0]
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	0699      	lsls	r1, r3, #26
 800eb56:	bf42      	ittt	mi
 800eb58:	6833      	ldrmi	r3, [r6, #0]
 800eb5a:	3302      	addmi	r3, #2
 800eb5c:	6033      	strmi	r3, [r6, #0]
 800eb5e:	6825      	ldr	r5, [r4, #0]
 800eb60:	f015 0506 	ands.w	r5, r5, #6
 800eb64:	d106      	bne.n	800eb74 <_printf_common+0x48>
 800eb66:	f104 0a19 	add.w	sl, r4, #25
 800eb6a:	68e3      	ldr	r3, [r4, #12]
 800eb6c:	6832      	ldr	r2, [r6, #0]
 800eb6e:	1a9b      	subs	r3, r3, r2
 800eb70:	42ab      	cmp	r3, r5
 800eb72:	dc26      	bgt.n	800ebc2 <_printf_common+0x96>
 800eb74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb78:	6822      	ldr	r2, [r4, #0]
 800eb7a:	3b00      	subs	r3, #0
 800eb7c:	bf18      	it	ne
 800eb7e:	2301      	movne	r3, #1
 800eb80:	0692      	lsls	r2, r2, #26
 800eb82:	d42b      	bmi.n	800ebdc <_printf_common+0xb0>
 800eb84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb88:	4641      	mov	r1, r8
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	47c8      	blx	r9
 800eb8e:	3001      	adds	r0, #1
 800eb90:	d01e      	beq.n	800ebd0 <_printf_common+0xa4>
 800eb92:	6823      	ldr	r3, [r4, #0]
 800eb94:	6922      	ldr	r2, [r4, #16]
 800eb96:	f003 0306 	and.w	r3, r3, #6
 800eb9a:	2b04      	cmp	r3, #4
 800eb9c:	bf02      	ittt	eq
 800eb9e:	68e5      	ldreq	r5, [r4, #12]
 800eba0:	6833      	ldreq	r3, [r6, #0]
 800eba2:	1aed      	subeq	r5, r5, r3
 800eba4:	68a3      	ldr	r3, [r4, #8]
 800eba6:	bf0c      	ite	eq
 800eba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebac:	2500      	movne	r5, #0
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	bfc4      	itt	gt
 800ebb2:	1a9b      	subgt	r3, r3, r2
 800ebb4:	18ed      	addgt	r5, r5, r3
 800ebb6:	2600      	movs	r6, #0
 800ebb8:	341a      	adds	r4, #26
 800ebba:	42b5      	cmp	r5, r6
 800ebbc:	d11a      	bne.n	800ebf4 <_printf_common+0xc8>
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	e008      	b.n	800ebd4 <_printf_common+0xa8>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	4652      	mov	r2, sl
 800ebc6:	4641      	mov	r1, r8
 800ebc8:	4638      	mov	r0, r7
 800ebca:	47c8      	blx	r9
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d103      	bne.n	800ebd8 <_printf_common+0xac>
 800ebd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd8:	3501      	adds	r5, #1
 800ebda:	e7c6      	b.n	800eb6a <_printf_common+0x3e>
 800ebdc:	18e1      	adds	r1, r4, r3
 800ebde:	1c5a      	adds	r2, r3, #1
 800ebe0:	2030      	movs	r0, #48	@ 0x30
 800ebe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebe6:	4422      	add	r2, r4
 800ebe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebf0:	3302      	adds	r3, #2
 800ebf2:	e7c7      	b.n	800eb84 <_printf_common+0x58>
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	4622      	mov	r2, r4
 800ebf8:	4641      	mov	r1, r8
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	47c8      	blx	r9
 800ebfe:	3001      	adds	r0, #1
 800ec00:	d0e6      	beq.n	800ebd0 <_printf_common+0xa4>
 800ec02:	3601      	adds	r6, #1
 800ec04:	e7d9      	b.n	800ebba <_printf_common+0x8e>
	...

0800ec08 <_printf_i>:
 800ec08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec0c:	7e0f      	ldrb	r7, [r1, #24]
 800ec0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec10:	2f78      	cmp	r7, #120	@ 0x78
 800ec12:	4691      	mov	r9, r2
 800ec14:	4680      	mov	r8, r0
 800ec16:	460c      	mov	r4, r1
 800ec18:	469a      	mov	sl, r3
 800ec1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec1e:	d807      	bhi.n	800ec30 <_printf_i+0x28>
 800ec20:	2f62      	cmp	r7, #98	@ 0x62
 800ec22:	d80a      	bhi.n	800ec3a <_printf_i+0x32>
 800ec24:	2f00      	cmp	r7, #0
 800ec26:	f000 80d2 	beq.w	800edce <_printf_i+0x1c6>
 800ec2a:	2f58      	cmp	r7, #88	@ 0x58
 800ec2c:	f000 80b9 	beq.w	800eda2 <_printf_i+0x19a>
 800ec30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec38:	e03a      	b.n	800ecb0 <_printf_i+0xa8>
 800ec3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec3e:	2b15      	cmp	r3, #21
 800ec40:	d8f6      	bhi.n	800ec30 <_printf_i+0x28>
 800ec42:	a101      	add	r1, pc, #4	@ (adr r1, 800ec48 <_printf_i+0x40>)
 800ec44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec48:	0800eca1 	.word	0x0800eca1
 800ec4c:	0800ecb5 	.word	0x0800ecb5
 800ec50:	0800ec31 	.word	0x0800ec31
 800ec54:	0800ec31 	.word	0x0800ec31
 800ec58:	0800ec31 	.word	0x0800ec31
 800ec5c:	0800ec31 	.word	0x0800ec31
 800ec60:	0800ecb5 	.word	0x0800ecb5
 800ec64:	0800ec31 	.word	0x0800ec31
 800ec68:	0800ec31 	.word	0x0800ec31
 800ec6c:	0800ec31 	.word	0x0800ec31
 800ec70:	0800ec31 	.word	0x0800ec31
 800ec74:	0800edb5 	.word	0x0800edb5
 800ec78:	0800ecdf 	.word	0x0800ecdf
 800ec7c:	0800ed6f 	.word	0x0800ed6f
 800ec80:	0800ec31 	.word	0x0800ec31
 800ec84:	0800ec31 	.word	0x0800ec31
 800ec88:	0800edd7 	.word	0x0800edd7
 800ec8c:	0800ec31 	.word	0x0800ec31
 800ec90:	0800ecdf 	.word	0x0800ecdf
 800ec94:	0800ec31 	.word	0x0800ec31
 800ec98:	0800ec31 	.word	0x0800ec31
 800ec9c:	0800ed77 	.word	0x0800ed77
 800eca0:	6833      	ldr	r3, [r6, #0]
 800eca2:	1d1a      	adds	r2, r3, #4
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	6032      	str	r2, [r6, #0]
 800eca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e09d      	b.n	800edf0 <_printf_i+0x1e8>
 800ecb4:	6833      	ldr	r3, [r6, #0]
 800ecb6:	6820      	ldr	r0, [r4, #0]
 800ecb8:	1d19      	adds	r1, r3, #4
 800ecba:	6031      	str	r1, [r6, #0]
 800ecbc:	0606      	lsls	r6, r0, #24
 800ecbe:	d501      	bpl.n	800ecc4 <_printf_i+0xbc>
 800ecc0:	681d      	ldr	r5, [r3, #0]
 800ecc2:	e003      	b.n	800eccc <_printf_i+0xc4>
 800ecc4:	0645      	lsls	r5, r0, #25
 800ecc6:	d5fb      	bpl.n	800ecc0 <_printf_i+0xb8>
 800ecc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eccc:	2d00      	cmp	r5, #0
 800ecce:	da03      	bge.n	800ecd8 <_printf_i+0xd0>
 800ecd0:	232d      	movs	r3, #45	@ 0x2d
 800ecd2:	426d      	negs	r5, r5
 800ecd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecd8:	4859      	ldr	r0, [pc, #356]	@ (800ee40 <_printf_i+0x238>)
 800ecda:	230a      	movs	r3, #10
 800ecdc:	e011      	b.n	800ed02 <_printf_i+0xfa>
 800ecde:	6821      	ldr	r1, [r4, #0]
 800ece0:	6833      	ldr	r3, [r6, #0]
 800ece2:	0608      	lsls	r0, r1, #24
 800ece4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ece8:	d402      	bmi.n	800ecf0 <_printf_i+0xe8>
 800ecea:	0649      	lsls	r1, r1, #25
 800ecec:	bf48      	it	mi
 800ecee:	b2ad      	uxthmi	r5, r5
 800ecf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecf2:	4853      	ldr	r0, [pc, #332]	@ (800ee40 <_printf_i+0x238>)
 800ecf4:	6033      	str	r3, [r6, #0]
 800ecf6:	bf14      	ite	ne
 800ecf8:	230a      	movne	r3, #10
 800ecfa:	2308      	moveq	r3, #8
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed02:	6866      	ldr	r6, [r4, #4]
 800ed04:	60a6      	str	r6, [r4, #8]
 800ed06:	2e00      	cmp	r6, #0
 800ed08:	bfa2      	ittt	ge
 800ed0a:	6821      	ldrge	r1, [r4, #0]
 800ed0c:	f021 0104 	bicge.w	r1, r1, #4
 800ed10:	6021      	strge	r1, [r4, #0]
 800ed12:	b90d      	cbnz	r5, 800ed18 <_printf_i+0x110>
 800ed14:	2e00      	cmp	r6, #0
 800ed16:	d04b      	beq.n	800edb0 <_printf_i+0x1a8>
 800ed18:	4616      	mov	r6, r2
 800ed1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed1e:	fb03 5711 	mls	r7, r3, r1, r5
 800ed22:	5dc7      	ldrb	r7, [r0, r7]
 800ed24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed28:	462f      	mov	r7, r5
 800ed2a:	42bb      	cmp	r3, r7
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	d9f4      	bls.n	800ed1a <_printf_i+0x112>
 800ed30:	2b08      	cmp	r3, #8
 800ed32:	d10b      	bne.n	800ed4c <_printf_i+0x144>
 800ed34:	6823      	ldr	r3, [r4, #0]
 800ed36:	07df      	lsls	r7, r3, #31
 800ed38:	d508      	bpl.n	800ed4c <_printf_i+0x144>
 800ed3a:	6923      	ldr	r3, [r4, #16]
 800ed3c:	6861      	ldr	r1, [r4, #4]
 800ed3e:	4299      	cmp	r1, r3
 800ed40:	bfde      	ittt	le
 800ed42:	2330      	movle	r3, #48	@ 0x30
 800ed44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed48:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ed4c:	1b92      	subs	r2, r2, r6
 800ed4e:	6122      	str	r2, [r4, #16]
 800ed50:	f8cd a000 	str.w	sl, [sp]
 800ed54:	464b      	mov	r3, r9
 800ed56:	aa03      	add	r2, sp, #12
 800ed58:	4621      	mov	r1, r4
 800ed5a:	4640      	mov	r0, r8
 800ed5c:	f7ff fee6 	bl	800eb2c <_printf_common>
 800ed60:	3001      	adds	r0, #1
 800ed62:	d14a      	bne.n	800edfa <_printf_i+0x1f2>
 800ed64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed68:	b004      	add	sp, #16
 800ed6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed6e:	6823      	ldr	r3, [r4, #0]
 800ed70:	f043 0320 	orr.w	r3, r3, #32
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	4833      	ldr	r0, [pc, #204]	@ (800ee44 <_printf_i+0x23c>)
 800ed78:	2778      	movs	r7, #120	@ 0x78
 800ed7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	6831      	ldr	r1, [r6, #0]
 800ed82:	061f      	lsls	r7, r3, #24
 800ed84:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed88:	d402      	bmi.n	800ed90 <_printf_i+0x188>
 800ed8a:	065f      	lsls	r7, r3, #25
 800ed8c:	bf48      	it	mi
 800ed8e:	b2ad      	uxthmi	r5, r5
 800ed90:	6031      	str	r1, [r6, #0]
 800ed92:	07d9      	lsls	r1, r3, #31
 800ed94:	bf44      	itt	mi
 800ed96:	f043 0320 	orrmi.w	r3, r3, #32
 800ed9a:	6023      	strmi	r3, [r4, #0]
 800ed9c:	b11d      	cbz	r5, 800eda6 <_printf_i+0x19e>
 800ed9e:	2310      	movs	r3, #16
 800eda0:	e7ac      	b.n	800ecfc <_printf_i+0xf4>
 800eda2:	4827      	ldr	r0, [pc, #156]	@ (800ee40 <_printf_i+0x238>)
 800eda4:	e7e9      	b.n	800ed7a <_printf_i+0x172>
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	f023 0320 	bic.w	r3, r3, #32
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	e7f6      	b.n	800ed9e <_printf_i+0x196>
 800edb0:	4616      	mov	r6, r2
 800edb2:	e7bd      	b.n	800ed30 <_printf_i+0x128>
 800edb4:	6833      	ldr	r3, [r6, #0]
 800edb6:	6825      	ldr	r5, [r4, #0]
 800edb8:	6961      	ldr	r1, [r4, #20]
 800edba:	1d18      	adds	r0, r3, #4
 800edbc:	6030      	str	r0, [r6, #0]
 800edbe:	062e      	lsls	r6, r5, #24
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	d501      	bpl.n	800edc8 <_printf_i+0x1c0>
 800edc4:	6019      	str	r1, [r3, #0]
 800edc6:	e002      	b.n	800edce <_printf_i+0x1c6>
 800edc8:	0668      	lsls	r0, r5, #25
 800edca:	d5fb      	bpl.n	800edc4 <_printf_i+0x1bc>
 800edcc:	8019      	strh	r1, [r3, #0]
 800edce:	2300      	movs	r3, #0
 800edd0:	6123      	str	r3, [r4, #16]
 800edd2:	4616      	mov	r6, r2
 800edd4:	e7bc      	b.n	800ed50 <_printf_i+0x148>
 800edd6:	6833      	ldr	r3, [r6, #0]
 800edd8:	1d1a      	adds	r2, r3, #4
 800edda:	6032      	str	r2, [r6, #0]
 800eddc:	681e      	ldr	r6, [r3, #0]
 800edde:	6862      	ldr	r2, [r4, #4]
 800ede0:	2100      	movs	r1, #0
 800ede2:	4630      	mov	r0, r6
 800ede4:	f7f1 fa7c 	bl	80002e0 <memchr>
 800ede8:	b108      	cbz	r0, 800edee <_printf_i+0x1e6>
 800edea:	1b80      	subs	r0, r0, r6
 800edec:	6060      	str	r0, [r4, #4]
 800edee:	6863      	ldr	r3, [r4, #4]
 800edf0:	6123      	str	r3, [r4, #16]
 800edf2:	2300      	movs	r3, #0
 800edf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edf8:	e7aa      	b.n	800ed50 <_printf_i+0x148>
 800edfa:	6923      	ldr	r3, [r4, #16]
 800edfc:	4632      	mov	r2, r6
 800edfe:	4649      	mov	r1, r9
 800ee00:	4640      	mov	r0, r8
 800ee02:	47d0      	blx	sl
 800ee04:	3001      	adds	r0, #1
 800ee06:	d0ad      	beq.n	800ed64 <_printf_i+0x15c>
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	079b      	lsls	r3, r3, #30
 800ee0c:	d413      	bmi.n	800ee36 <_printf_i+0x22e>
 800ee0e:	68e0      	ldr	r0, [r4, #12]
 800ee10:	9b03      	ldr	r3, [sp, #12]
 800ee12:	4298      	cmp	r0, r3
 800ee14:	bfb8      	it	lt
 800ee16:	4618      	movlt	r0, r3
 800ee18:	e7a6      	b.n	800ed68 <_printf_i+0x160>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	4632      	mov	r2, r6
 800ee1e:	4649      	mov	r1, r9
 800ee20:	4640      	mov	r0, r8
 800ee22:	47d0      	blx	sl
 800ee24:	3001      	adds	r0, #1
 800ee26:	d09d      	beq.n	800ed64 <_printf_i+0x15c>
 800ee28:	3501      	adds	r5, #1
 800ee2a:	68e3      	ldr	r3, [r4, #12]
 800ee2c:	9903      	ldr	r1, [sp, #12]
 800ee2e:	1a5b      	subs	r3, r3, r1
 800ee30:	42ab      	cmp	r3, r5
 800ee32:	dcf2      	bgt.n	800ee1a <_printf_i+0x212>
 800ee34:	e7eb      	b.n	800ee0e <_printf_i+0x206>
 800ee36:	2500      	movs	r5, #0
 800ee38:	f104 0619 	add.w	r6, r4, #25
 800ee3c:	e7f5      	b.n	800ee2a <_printf_i+0x222>
 800ee3e:	bf00      	nop
 800ee40:	080140f2 	.word	0x080140f2
 800ee44:	08014103 	.word	0x08014103

0800ee48 <_scanf_float>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	b087      	sub	sp, #28
 800ee4e:	4617      	mov	r7, r2
 800ee50:	9303      	str	r3, [sp, #12]
 800ee52:	688b      	ldr	r3, [r1, #8]
 800ee54:	1e5a      	subs	r2, r3, #1
 800ee56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ee5a:	bf81      	itttt	hi
 800ee5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ee60:	eb03 0b05 	addhi.w	fp, r3, r5
 800ee64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ee68:	608b      	strhi	r3, [r1, #8]
 800ee6a:	680b      	ldr	r3, [r1, #0]
 800ee6c:	460a      	mov	r2, r1
 800ee6e:	f04f 0500 	mov.w	r5, #0
 800ee72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ee76:	f842 3b1c 	str.w	r3, [r2], #28
 800ee7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee7e:	4680      	mov	r8, r0
 800ee80:	460c      	mov	r4, r1
 800ee82:	bf98      	it	ls
 800ee84:	f04f 0b00 	movls.w	fp, #0
 800ee88:	9201      	str	r2, [sp, #4]
 800ee8a:	4616      	mov	r6, r2
 800ee8c:	46aa      	mov	sl, r5
 800ee8e:	46a9      	mov	r9, r5
 800ee90:	9502      	str	r5, [sp, #8]
 800ee92:	68a2      	ldr	r2, [r4, #8]
 800ee94:	b152      	cbz	r2, 800eeac <_scanf_float+0x64>
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ee9c:	d864      	bhi.n	800ef68 <_scanf_float+0x120>
 800ee9e:	2b40      	cmp	r3, #64	@ 0x40
 800eea0:	d83c      	bhi.n	800ef1c <_scanf_float+0xd4>
 800eea2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800eea6:	b2c8      	uxtb	r0, r1
 800eea8:	280e      	cmp	r0, #14
 800eeaa:	d93a      	bls.n	800ef22 <_scanf_float+0xda>
 800eeac:	f1b9 0f00 	cmp.w	r9, #0
 800eeb0:	d003      	beq.n	800eeba <_scanf_float+0x72>
 800eeb2:	6823      	ldr	r3, [r4, #0]
 800eeb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eeb8:	6023      	str	r3, [r4, #0]
 800eeba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800eebe:	f1ba 0f01 	cmp.w	sl, #1
 800eec2:	f200 8117 	bhi.w	800f0f4 <_scanf_float+0x2ac>
 800eec6:	9b01      	ldr	r3, [sp, #4]
 800eec8:	429e      	cmp	r6, r3
 800eeca:	f200 8108 	bhi.w	800f0de <_scanf_float+0x296>
 800eece:	2001      	movs	r0, #1
 800eed0:	b007      	add	sp, #28
 800eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eeda:	2a0d      	cmp	r2, #13
 800eedc:	d8e6      	bhi.n	800eeac <_scanf_float+0x64>
 800eede:	a101      	add	r1, pc, #4	@ (adr r1, 800eee4 <_scanf_float+0x9c>)
 800eee0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eee4:	0800f02b 	.word	0x0800f02b
 800eee8:	0800eead 	.word	0x0800eead
 800eeec:	0800eead 	.word	0x0800eead
 800eef0:	0800eead 	.word	0x0800eead
 800eef4:	0800f08b 	.word	0x0800f08b
 800eef8:	0800f063 	.word	0x0800f063
 800eefc:	0800eead 	.word	0x0800eead
 800ef00:	0800eead 	.word	0x0800eead
 800ef04:	0800f039 	.word	0x0800f039
 800ef08:	0800eead 	.word	0x0800eead
 800ef0c:	0800eead 	.word	0x0800eead
 800ef10:	0800eead 	.word	0x0800eead
 800ef14:	0800eead 	.word	0x0800eead
 800ef18:	0800eff1 	.word	0x0800eff1
 800ef1c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ef20:	e7db      	b.n	800eeda <_scanf_float+0x92>
 800ef22:	290e      	cmp	r1, #14
 800ef24:	d8c2      	bhi.n	800eeac <_scanf_float+0x64>
 800ef26:	a001      	add	r0, pc, #4	@ (adr r0, 800ef2c <_scanf_float+0xe4>)
 800ef28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ef2c:	0800efe1 	.word	0x0800efe1
 800ef30:	0800eead 	.word	0x0800eead
 800ef34:	0800efe1 	.word	0x0800efe1
 800ef38:	0800f077 	.word	0x0800f077
 800ef3c:	0800eead 	.word	0x0800eead
 800ef40:	0800ef89 	.word	0x0800ef89
 800ef44:	0800efc7 	.word	0x0800efc7
 800ef48:	0800efc7 	.word	0x0800efc7
 800ef4c:	0800efc7 	.word	0x0800efc7
 800ef50:	0800efc7 	.word	0x0800efc7
 800ef54:	0800efc7 	.word	0x0800efc7
 800ef58:	0800efc7 	.word	0x0800efc7
 800ef5c:	0800efc7 	.word	0x0800efc7
 800ef60:	0800efc7 	.word	0x0800efc7
 800ef64:	0800efc7 	.word	0x0800efc7
 800ef68:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef6a:	d809      	bhi.n	800ef80 <_scanf_float+0x138>
 800ef6c:	2b60      	cmp	r3, #96	@ 0x60
 800ef6e:	d8b2      	bhi.n	800eed6 <_scanf_float+0x8e>
 800ef70:	2b54      	cmp	r3, #84	@ 0x54
 800ef72:	d07b      	beq.n	800f06c <_scanf_float+0x224>
 800ef74:	2b59      	cmp	r3, #89	@ 0x59
 800ef76:	d199      	bne.n	800eeac <_scanf_float+0x64>
 800ef78:	2d07      	cmp	r5, #7
 800ef7a:	d197      	bne.n	800eeac <_scanf_float+0x64>
 800ef7c:	2508      	movs	r5, #8
 800ef7e:	e02c      	b.n	800efda <_scanf_float+0x192>
 800ef80:	2b74      	cmp	r3, #116	@ 0x74
 800ef82:	d073      	beq.n	800f06c <_scanf_float+0x224>
 800ef84:	2b79      	cmp	r3, #121	@ 0x79
 800ef86:	e7f6      	b.n	800ef76 <_scanf_float+0x12e>
 800ef88:	6821      	ldr	r1, [r4, #0]
 800ef8a:	05c8      	lsls	r0, r1, #23
 800ef8c:	d51b      	bpl.n	800efc6 <_scanf_float+0x17e>
 800ef8e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ef92:	6021      	str	r1, [r4, #0]
 800ef94:	f109 0901 	add.w	r9, r9, #1
 800ef98:	f1bb 0f00 	cmp.w	fp, #0
 800ef9c:	d003      	beq.n	800efa6 <_scanf_float+0x15e>
 800ef9e:	3201      	adds	r2, #1
 800efa0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800efa4:	60a2      	str	r2, [r4, #8]
 800efa6:	68a3      	ldr	r3, [r4, #8]
 800efa8:	3b01      	subs	r3, #1
 800efaa:	60a3      	str	r3, [r4, #8]
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	3301      	adds	r3, #1
 800efb0:	6123      	str	r3, [r4, #16]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3b01      	subs	r3, #1
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	607b      	str	r3, [r7, #4]
 800efba:	f340 8087 	ble.w	800f0cc <_scanf_float+0x284>
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	3301      	adds	r3, #1
 800efc2:	603b      	str	r3, [r7, #0]
 800efc4:	e765      	b.n	800ee92 <_scanf_float+0x4a>
 800efc6:	eb1a 0105 	adds.w	r1, sl, r5
 800efca:	f47f af6f 	bne.w	800eeac <_scanf_float+0x64>
 800efce:	6822      	ldr	r2, [r4, #0]
 800efd0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800efd4:	6022      	str	r2, [r4, #0]
 800efd6:	460d      	mov	r5, r1
 800efd8:	468a      	mov	sl, r1
 800efda:	f806 3b01 	strb.w	r3, [r6], #1
 800efde:	e7e2      	b.n	800efa6 <_scanf_float+0x15e>
 800efe0:	6822      	ldr	r2, [r4, #0]
 800efe2:	0610      	lsls	r0, r2, #24
 800efe4:	f57f af62 	bpl.w	800eeac <_scanf_float+0x64>
 800efe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800efec:	6022      	str	r2, [r4, #0]
 800efee:	e7f4      	b.n	800efda <_scanf_float+0x192>
 800eff0:	f1ba 0f00 	cmp.w	sl, #0
 800eff4:	d10e      	bne.n	800f014 <_scanf_float+0x1cc>
 800eff6:	f1b9 0f00 	cmp.w	r9, #0
 800effa:	d10e      	bne.n	800f01a <_scanf_float+0x1d2>
 800effc:	6822      	ldr	r2, [r4, #0]
 800effe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f002:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f006:	d108      	bne.n	800f01a <_scanf_float+0x1d2>
 800f008:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f00c:	6022      	str	r2, [r4, #0]
 800f00e:	f04f 0a01 	mov.w	sl, #1
 800f012:	e7e2      	b.n	800efda <_scanf_float+0x192>
 800f014:	f1ba 0f02 	cmp.w	sl, #2
 800f018:	d055      	beq.n	800f0c6 <_scanf_float+0x27e>
 800f01a:	2d01      	cmp	r5, #1
 800f01c:	d002      	beq.n	800f024 <_scanf_float+0x1dc>
 800f01e:	2d04      	cmp	r5, #4
 800f020:	f47f af44 	bne.w	800eeac <_scanf_float+0x64>
 800f024:	3501      	adds	r5, #1
 800f026:	b2ed      	uxtb	r5, r5
 800f028:	e7d7      	b.n	800efda <_scanf_float+0x192>
 800f02a:	f1ba 0f01 	cmp.w	sl, #1
 800f02e:	f47f af3d 	bne.w	800eeac <_scanf_float+0x64>
 800f032:	f04f 0a02 	mov.w	sl, #2
 800f036:	e7d0      	b.n	800efda <_scanf_float+0x192>
 800f038:	b97d      	cbnz	r5, 800f05a <_scanf_float+0x212>
 800f03a:	f1b9 0f00 	cmp.w	r9, #0
 800f03e:	f47f af38 	bne.w	800eeb2 <_scanf_float+0x6a>
 800f042:	6822      	ldr	r2, [r4, #0]
 800f044:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f048:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f04c:	f040 8101 	bne.w	800f252 <_scanf_float+0x40a>
 800f050:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f054:	6022      	str	r2, [r4, #0]
 800f056:	2501      	movs	r5, #1
 800f058:	e7bf      	b.n	800efda <_scanf_float+0x192>
 800f05a:	2d03      	cmp	r5, #3
 800f05c:	d0e2      	beq.n	800f024 <_scanf_float+0x1dc>
 800f05e:	2d05      	cmp	r5, #5
 800f060:	e7de      	b.n	800f020 <_scanf_float+0x1d8>
 800f062:	2d02      	cmp	r5, #2
 800f064:	f47f af22 	bne.w	800eeac <_scanf_float+0x64>
 800f068:	2503      	movs	r5, #3
 800f06a:	e7b6      	b.n	800efda <_scanf_float+0x192>
 800f06c:	2d06      	cmp	r5, #6
 800f06e:	f47f af1d 	bne.w	800eeac <_scanf_float+0x64>
 800f072:	2507      	movs	r5, #7
 800f074:	e7b1      	b.n	800efda <_scanf_float+0x192>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	0591      	lsls	r1, r2, #22
 800f07a:	f57f af17 	bpl.w	800eeac <_scanf_float+0x64>
 800f07e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f082:	6022      	str	r2, [r4, #0]
 800f084:	f8cd 9008 	str.w	r9, [sp, #8]
 800f088:	e7a7      	b.n	800efda <_scanf_float+0x192>
 800f08a:	6822      	ldr	r2, [r4, #0]
 800f08c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f090:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f094:	d006      	beq.n	800f0a4 <_scanf_float+0x25c>
 800f096:	0550      	lsls	r0, r2, #21
 800f098:	f57f af08 	bpl.w	800eeac <_scanf_float+0x64>
 800f09c:	f1b9 0f00 	cmp.w	r9, #0
 800f0a0:	f000 80d7 	beq.w	800f252 <_scanf_float+0x40a>
 800f0a4:	0591      	lsls	r1, r2, #22
 800f0a6:	bf58      	it	pl
 800f0a8:	9902      	ldrpl	r1, [sp, #8]
 800f0aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0ae:	bf58      	it	pl
 800f0b0:	eba9 0101 	subpl.w	r1, r9, r1
 800f0b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f0b8:	bf58      	it	pl
 800f0ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f0be:	6022      	str	r2, [r4, #0]
 800f0c0:	f04f 0900 	mov.w	r9, #0
 800f0c4:	e789      	b.n	800efda <_scanf_float+0x192>
 800f0c6:	f04f 0a03 	mov.w	sl, #3
 800f0ca:	e786      	b.n	800efda <_scanf_float+0x192>
 800f0cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	4798      	blx	r3
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	f43f aedb 	beq.w	800ee92 <_scanf_float+0x4a>
 800f0dc:	e6e6      	b.n	800eeac <_scanf_float+0x64>
 800f0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0e6:	463a      	mov	r2, r7
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	4798      	blx	r3
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	6123      	str	r3, [r4, #16]
 800f0f2:	e6e8      	b.n	800eec6 <_scanf_float+0x7e>
 800f0f4:	1e6b      	subs	r3, r5, #1
 800f0f6:	2b06      	cmp	r3, #6
 800f0f8:	d824      	bhi.n	800f144 <_scanf_float+0x2fc>
 800f0fa:	2d02      	cmp	r5, #2
 800f0fc:	d836      	bhi.n	800f16c <_scanf_float+0x324>
 800f0fe:	9b01      	ldr	r3, [sp, #4]
 800f100:	429e      	cmp	r6, r3
 800f102:	f67f aee4 	bls.w	800eece <_scanf_float+0x86>
 800f106:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f10a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f10e:	463a      	mov	r2, r7
 800f110:	4640      	mov	r0, r8
 800f112:	4798      	blx	r3
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	3b01      	subs	r3, #1
 800f118:	6123      	str	r3, [r4, #16]
 800f11a:	e7f0      	b.n	800f0fe <_scanf_float+0x2b6>
 800f11c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f120:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f124:	463a      	mov	r2, r7
 800f126:	4640      	mov	r0, r8
 800f128:	4798      	blx	r3
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	3b01      	subs	r3, #1
 800f12e:	6123      	str	r3, [r4, #16]
 800f130:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f134:	fa5f fa8a 	uxtb.w	sl, sl
 800f138:	f1ba 0f02 	cmp.w	sl, #2
 800f13c:	d1ee      	bne.n	800f11c <_scanf_float+0x2d4>
 800f13e:	3d03      	subs	r5, #3
 800f140:	b2ed      	uxtb	r5, r5
 800f142:	1b76      	subs	r6, r6, r5
 800f144:	6823      	ldr	r3, [r4, #0]
 800f146:	05da      	lsls	r2, r3, #23
 800f148:	d530      	bpl.n	800f1ac <_scanf_float+0x364>
 800f14a:	055b      	lsls	r3, r3, #21
 800f14c:	d511      	bpl.n	800f172 <_scanf_float+0x32a>
 800f14e:	9b01      	ldr	r3, [sp, #4]
 800f150:	429e      	cmp	r6, r3
 800f152:	f67f aebc 	bls.w	800eece <_scanf_float+0x86>
 800f156:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f15a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f15e:	463a      	mov	r2, r7
 800f160:	4640      	mov	r0, r8
 800f162:	4798      	blx	r3
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	3b01      	subs	r3, #1
 800f168:	6123      	str	r3, [r4, #16]
 800f16a:	e7f0      	b.n	800f14e <_scanf_float+0x306>
 800f16c:	46aa      	mov	sl, r5
 800f16e:	46b3      	mov	fp, r6
 800f170:	e7de      	b.n	800f130 <_scanf_float+0x2e8>
 800f172:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f176:	6923      	ldr	r3, [r4, #16]
 800f178:	2965      	cmp	r1, #101	@ 0x65
 800f17a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f17e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800f182:	6123      	str	r3, [r4, #16]
 800f184:	d00c      	beq.n	800f1a0 <_scanf_float+0x358>
 800f186:	2945      	cmp	r1, #69	@ 0x45
 800f188:	d00a      	beq.n	800f1a0 <_scanf_float+0x358>
 800f18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f18e:	463a      	mov	r2, r7
 800f190:	4640      	mov	r0, r8
 800f192:	4798      	blx	r3
 800f194:	6923      	ldr	r3, [r4, #16]
 800f196:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f19a:	3b01      	subs	r3, #1
 800f19c:	1eb5      	subs	r5, r6, #2
 800f19e:	6123      	str	r3, [r4, #16]
 800f1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1a4:	463a      	mov	r2, r7
 800f1a6:	4640      	mov	r0, r8
 800f1a8:	4798      	blx	r3
 800f1aa:	462e      	mov	r6, r5
 800f1ac:	6822      	ldr	r2, [r4, #0]
 800f1ae:	f012 0210 	ands.w	r2, r2, #16
 800f1b2:	d001      	beq.n	800f1b8 <_scanf_float+0x370>
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	e68b      	b.n	800eed0 <_scanf_float+0x88>
 800f1b8:	7032      	strb	r2, [r6, #0]
 800f1ba:	6823      	ldr	r3, [r4, #0]
 800f1bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f1c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1c4:	d11a      	bne.n	800f1fc <_scanf_float+0x3b4>
 800f1c6:	9b02      	ldr	r3, [sp, #8]
 800f1c8:	454b      	cmp	r3, r9
 800f1ca:	eba3 0209 	sub.w	r2, r3, r9
 800f1ce:	d121      	bne.n	800f214 <_scanf_float+0x3cc>
 800f1d0:	9901      	ldr	r1, [sp, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	4640      	mov	r0, r8
 800f1d6:	f002 fc95 	bl	8011b04 <_strtod_r>
 800f1da:	9b03      	ldr	r3, [sp, #12]
 800f1dc:	6821      	ldr	r1, [r4, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f011 0f02 	tst.w	r1, #2
 800f1e4:	f103 0204 	add.w	r2, r3, #4
 800f1e8:	d01f      	beq.n	800f22a <_scanf_float+0x3e2>
 800f1ea:	9903      	ldr	r1, [sp, #12]
 800f1ec:	600a      	str	r2, [r1, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	ed83 0b00 	vstr	d0, [r3]
 800f1f4:	68e3      	ldr	r3, [r4, #12]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	60e3      	str	r3, [r4, #12]
 800f1fa:	e7db      	b.n	800f1b4 <_scanf_float+0x36c>
 800f1fc:	9b04      	ldr	r3, [sp, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d0e6      	beq.n	800f1d0 <_scanf_float+0x388>
 800f202:	9905      	ldr	r1, [sp, #20]
 800f204:	230a      	movs	r3, #10
 800f206:	3101      	adds	r1, #1
 800f208:	4640      	mov	r0, r8
 800f20a:	f002 fcfb 	bl	8011c04 <_strtol_r>
 800f20e:	9b04      	ldr	r3, [sp, #16]
 800f210:	9e05      	ldr	r6, [sp, #20]
 800f212:	1ac2      	subs	r2, r0, r3
 800f214:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f218:	429e      	cmp	r6, r3
 800f21a:	bf28      	it	cs
 800f21c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f220:	490d      	ldr	r1, [pc, #52]	@ (800f258 <_scanf_float+0x410>)
 800f222:	4630      	mov	r0, r6
 800f224:	f000 f94e 	bl	800f4c4 <siprintf>
 800f228:	e7d2      	b.n	800f1d0 <_scanf_float+0x388>
 800f22a:	f011 0f04 	tst.w	r1, #4
 800f22e:	9903      	ldr	r1, [sp, #12]
 800f230:	600a      	str	r2, [r1, #0]
 800f232:	d1dc      	bne.n	800f1ee <_scanf_float+0x3a6>
 800f234:	eeb4 0b40 	vcmp.f64	d0, d0
 800f238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23c:	681d      	ldr	r5, [r3, #0]
 800f23e:	d705      	bvc.n	800f24c <_scanf_float+0x404>
 800f240:	4806      	ldr	r0, [pc, #24]	@ (800f25c <_scanf_float+0x414>)
 800f242:	f000 fb1b 	bl	800f87c <nanf>
 800f246:	ed85 0a00 	vstr	s0, [r5]
 800f24a:	e7d3      	b.n	800f1f4 <_scanf_float+0x3ac>
 800f24c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f250:	e7f9      	b.n	800f246 <_scanf_float+0x3fe>
 800f252:	f04f 0900 	mov.w	r9, #0
 800f256:	e630      	b.n	800eeba <_scanf_float+0x72>
 800f258:	08014114 	.word	0x08014114
 800f25c:	080144ad 	.word	0x080144ad

0800f260 <std>:
 800f260:	2300      	movs	r3, #0
 800f262:	b510      	push	{r4, lr}
 800f264:	4604      	mov	r4, r0
 800f266:	e9c0 3300 	strd	r3, r3, [r0]
 800f26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f26e:	6083      	str	r3, [r0, #8]
 800f270:	8181      	strh	r1, [r0, #12]
 800f272:	6643      	str	r3, [r0, #100]	@ 0x64
 800f274:	81c2      	strh	r2, [r0, #14]
 800f276:	6183      	str	r3, [r0, #24]
 800f278:	4619      	mov	r1, r3
 800f27a:	2208      	movs	r2, #8
 800f27c:	305c      	adds	r0, #92	@ 0x5c
 800f27e:	f000 fa19 	bl	800f6b4 <memset>
 800f282:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b8 <std+0x58>)
 800f284:	6263      	str	r3, [r4, #36]	@ 0x24
 800f286:	4b0d      	ldr	r3, [pc, #52]	@ (800f2bc <std+0x5c>)
 800f288:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f28a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c0 <std+0x60>)
 800f28c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f28e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c4 <std+0x64>)
 800f290:	6323      	str	r3, [r4, #48]	@ 0x30
 800f292:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c8 <std+0x68>)
 800f294:	6224      	str	r4, [r4, #32]
 800f296:	429c      	cmp	r4, r3
 800f298:	d006      	beq.n	800f2a8 <std+0x48>
 800f29a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f29e:	4294      	cmp	r4, r2
 800f2a0:	d002      	beq.n	800f2a8 <std+0x48>
 800f2a2:	33d0      	adds	r3, #208	@ 0xd0
 800f2a4:	429c      	cmp	r4, r3
 800f2a6:	d105      	bne.n	800f2b4 <std+0x54>
 800f2a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2b0:	f000 bad2 	b.w	800f858 <__retarget_lock_init_recursive>
 800f2b4:	bd10      	pop	{r4, pc}
 800f2b6:	bf00      	nop
 800f2b8:	0800f505 	.word	0x0800f505
 800f2bc:	0800f527 	.word	0x0800f527
 800f2c0:	0800f55f 	.word	0x0800f55f
 800f2c4:	0800f583 	.word	0x0800f583
 800f2c8:	240056dc 	.word	0x240056dc

0800f2cc <stdio_exit_handler>:
 800f2cc:	4a02      	ldr	r2, [pc, #8]	@ (800f2d8 <stdio_exit_handler+0xc>)
 800f2ce:	4903      	ldr	r1, [pc, #12]	@ (800f2dc <stdio_exit_handler+0x10>)
 800f2d0:	4803      	ldr	r0, [pc, #12]	@ (800f2e0 <stdio_exit_handler+0x14>)
 800f2d2:	f000 b869 	b.w	800f3a8 <_fwalk_sglue>
 800f2d6:	bf00      	nop
 800f2d8:	2400001c 	.word	0x2400001c
 800f2dc:	08012245 	.word	0x08012245
 800f2e0:	2400002c 	.word	0x2400002c

0800f2e4 <cleanup_stdio>:
 800f2e4:	6841      	ldr	r1, [r0, #4]
 800f2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800f318 <cleanup_stdio+0x34>)
 800f2e8:	4299      	cmp	r1, r3
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	d001      	beq.n	800f2f4 <cleanup_stdio+0x10>
 800f2f0:	f002 ffa8 	bl	8012244 <_fflush_r>
 800f2f4:	68a1      	ldr	r1, [r4, #8]
 800f2f6:	4b09      	ldr	r3, [pc, #36]	@ (800f31c <cleanup_stdio+0x38>)
 800f2f8:	4299      	cmp	r1, r3
 800f2fa:	d002      	beq.n	800f302 <cleanup_stdio+0x1e>
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	f002 ffa1 	bl	8012244 <_fflush_r>
 800f302:	68e1      	ldr	r1, [r4, #12]
 800f304:	4b06      	ldr	r3, [pc, #24]	@ (800f320 <cleanup_stdio+0x3c>)
 800f306:	4299      	cmp	r1, r3
 800f308:	d004      	beq.n	800f314 <cleanup_stdio+0x30>
 800f30a:	4620      	mov	r0, r4
 800f30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f310:	f002 bf98 	b.w	8012244 <_fflush_r>
 800f314:	bd10      	pop	{r4, pc}
 800f316:	bf00      	nop
 800f318:	240056dc 	.word	0x240056dc
 800f31c:	24005744 	.word	0x24005744
 800f320:	240057ac 	.word	0x240057ac

0800f324 <global_stdio_init.part.0>:
 800f324:	b510      	push	{r4, lr}
 800f326:	4b0b      	ldr	r3, [pc, #44]	@ (800f354 <global_stdio_init.part.0+0x30>)
 800f328:	4c0b      	ldr	r4, [pc, #44]	@ (800f358 <global_stdio_init.part.0+0x34>)
 800f32a:	4a0c      	ldr	r2, [pc, #48]	@ (800f35c <global_stdio_init.part.0+0x38>)
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	4620      	mov	r0, r4
 800f330:	2200      	movs	r2, #0
 800f332:	2104      	movs	r1, #4
 800f334:	f7ff ff94 	bl	800f260 <std>
 800f338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f33c:	2201      	movs	r2, #1
 800f33e:	2109      	movs	r1, #9
 800f340:	f7ff ff8e 	bl	800f260 <std>
 800f344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f348:	2202      	movs	r2, #2
 800f34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f34e:	2112      	movs	r1, #18
 800f350:	f7ff bf86 	b.w	800f260 <std>
 800f354:	24005814 	.word	0x24005814
 800f358:	240056dc 	.word	0x240056dc
 800f35c:	0800f2cd 	.word	0x0800f2cd

0800f360 <__sfp_lock_acquire>:
 800f360:	4801      	ldr	r0, [pc, #4]	@ (800f368 <__sfp_lock_acquire+0x8>)
 800f362:	f000 ba7a 	b.w	800f85a <__retarget_lock_acquire_recursive>
 800f366:	bf00      	nop
 800f368:	2400581d 	.word	0x2400581d

0800f36c <__sfp_lock_release>:
 800f36c:	4801      	ldr	r0, [pc, #4]	@ (800f374 <__sfp_lock_release+0x8>)
 800f36e:	f000 ba75 	b.w	800f85c <__retarget_lock_release_recursive>
 800f372:	bf00      	nop
 800f374:	2400581d 	.word	0x2400581d

0800f378 <__sinit>:
 800f378:	b510      	push	{r4, lr}
 800f37a:	4604      	mov	r4, r0
 800f37c:	f7ff fff0 	bl	800f360 <__sfp_lock_acquire>
 800f380:	6a23      	ldr	r3, [r4, #32]
 800f382:	b11b      	cbz	r3, 800f38c <__sinit+0x14>
 800f384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f388:	f7ff bff0 	b.w	800f36c <__sfp_lock_release>
 800f38c:	4b04      	ldr	r3, [pc, #16]	@ (800f3a0 <__sinit+0x28>)
 800f38e:	6223      	str	r3, [r4, #32]
 800f390:	4b04      	ldr	r3, [pc, #16]	@ (800f3a4 <__sinit+0x2c>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1f5      	bne.n	800f384 <__sinit+0xc>
 800f398:	f7ff ffc4 	bl	800f324 <global_stdio_init.part.0>
 800f39c:	e7f2      	b.n	800f384 <__sinit+0xc>
 800f39e:	bf00      	nop
 800f3a0:	0800f2e5 	.word	0x0800f2e5
 800f3a4:	24005814 	.word	0x24005814

0800f3a8 <_fwalk_sglue>:
 800f3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	4688      	mov	r8, r1
 800f3b0:	4614      	mov	r4, r2
 800f3b2:	2600      	movs	r6, #0
 800f3b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3b8:	f1b9 0901 	subs.w	r9, r9, #1
 800f3bc:	d505      	bpl.n	800f3ca <_fwalk_sglue+0x22>
 800f3be:	6824      	ldr	r4, [r4, #0]
 800f3c0:	2c00      	cmp	r4, #0
 800f3c2:	d1f7      	bne.n	800f3b4 <_fwalk_sglue+0xc>
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ca:	89ab      	ldrh	r3, [r5, #12]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d907      	bls.n	800f3e0 <_fwalk_sglue+0x38>
 800f3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	d003      	beq.n	800f3e0 <_fwalk_sglue+0x38>
 800f3d8:	4629      	mov	r1, r5
 800f3da:	4638      	mov	r0, r7
 800f3dc:	47c0      	blx	r8
 800f3de:	4306      	orrs	r6, r0
 800f3e0:	3568      	adds	r5, #104	@ 0x68
 800f3e2:	e7e9      	b.n	800f3b8 <_fwalk_sglue+0x10>

0800f3e4 <iprintf>:
 800f3e4:	b40f      	push	{r0, r1, r2, r3}
 800f3e6:	b507      	push	{r0, r1, r2, lr}
 800f3e8:	4906      	ldr	r1, [pc, #24]	@ (800f404 <iprintf+0x20>)
 800f3ea:	ab04      	add	r3, sp, #16
 800f3ec:	6808      	ldr	r0, [r1, #0]
 800f3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3f2:	6881      	ldr	r1, [r0, #8]
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	f002 fd89 	bl	8011f0c <_vfiprintf_r>
 800f3fa:	b003      	add	sp, #12
 800f3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f400:	b004      	add	sp, #16
 800f402:	4770      	bx	lr
 800f404:	24000028 	.word	0x24000028

0800f408 <_puts_r>:
 800f408:	6a03      	ldr	r3, [r0, #32]
 800f40a:	b570      	push	{r4, r5, r6, lr}
 800f40c:	6884      	ldr	r4, [r0, #8]
 800f40e:	4605      	mov	r5, r0
 800f410:	460e      	mov	r6, r1
 800f412:	b90b      	cbnz	r3, 800f418 <_puts_r+0x10>
 800f414:	f7ff ffb0 	bl	800f378 <__sinit>
 800f418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f41a:	07db      	lsls	r3, r3, #31
 800f41c:	d405      	bmi.n	800f42a <_puts_r+0x22>
 800f41e:	89a3      	ldrh	r3, [r4, #12]
 800f420:	0598      	lsls	r0, r3, #22
 800f422:	d402      	bmi.n	800f42a <_puts_r+0x22>
 800f424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f426:	f000 fa18 	bl	800f85a <__retarget_lock_acquire_recursive>
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	0719      	lsls	r1, r3, #28
 800f42e:	d502      	bpl.n	800f436 <_puts_r+0x2e>
 800f430:	6923      	ldr	r3, [r4, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d135      	bne.n	800f4a2 <_puts_r+0x9a>
 800f436:	4621      	mov	r1, r4
 800f438:	4628      	mov	r0, r5
 800f43a:	f000 f8e5 	bl	800f608 <__swsetup_r>
 800f43e:	b380      	cbz	r0, 800f4a2 <_puts_r+0x9a>
 800f440:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f446:	07da      	lsls	r2, r3, #31
 800f448:	d405      	bmi.n	800f456 <_puts_r+0x4e>
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	059b      	lsls	r3, r3, #22
 800f44e:	d402      	bmi.n	800f456 <_puts_r+0x4e>
 800f450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f452:	f000 fa03 	bl	800f85c <__retarget_lock_release_recursive>
 800f456:	4628      	mov	r0, r5
 800f458:	bd70      	pop	{r4, r5, r6, pc}
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	da04      	bge.n	800f468 <_puts_r+0x60>
 800f45e:	69a2      	ldr	r2, [r4, #24]
 800f460:	429a      	cmp	r2, r3
 800f462:	dc17      	bgt.n	800f494 <_puts_r+0x8c>
 800f464:	290a      	cmp	r1, #10
 800f466:	d015      	beq.n	800f494 <_puts_r+0x8c>
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	6022      	str	r2, [r4, #0]
 800f46e:	7019      	strb	r1, [r3, #0]
 800f470:	68a3      	ldr	r3, [r4, #8]
 800f472:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f476:	3b01      	subs	r3, #1
 800f478:	60a3      	str	r3, [r4, #8]
 800f47a:	2900      	cmp	r1, #0
 800f47c:	d1ed      	bne.n	800f45a <_puts_r+0x52>
 800f47e:	2b00      	cmp	r3, #0
 800f480:	da11      	bge.n	800f4a6 <_puts_r+0x9e>
 800f482:	4622      	mov	r2, r4
 800f484:	210a      	movs	r1, #10
 800f486:	4628      	mov	r0, r5
 800f488:	f000 f87f 	bl	800f58a <__swbuf_r>
 800f48c:	3001      	adds	r0, #1
 800f48e:	d0d7      	beq.n	800f440 <_puts_r+0x38>
 800f490:	250a      	movs	r5, #10
 800f492:	e7d7      	b.n	800f444 <_puts_r+0x3c>
 800f494:	4622      	mov	r2, r4
 800f496:	4628      	mov	r0, r5
 800f498:	f000 f877 	bl	800f58a <__swbuf_r>
 800f49c:	3001      	adds	r0, #1
 800f49e:	d1e7      	bne.n	800f470 <_puts_r+0x68>
 800f4a0:	e7ce      	b.n	800f440 <_puts_r+0x38>
 800f4a2:	3e01      	subs	r6, #1
 800f4a4:	e7e4      	b.n	800f470 <_puts_r+0x68>
 800f4a6:	6823      	ldr	r3, [r4, #0]
 800f4a8:	1c5a      	adds	r2, r3, #1
 800f4aa:	6022      	str	r2, [r4, #0]
 800f4ac:	220a      	movs	r2, #10
 800f4ae:	701a      	strb	r2, [r3, #0]
 800f4b0:	e7ee      	b.n	800f490 <_puts_r+0x88>
	...

0800f4b4 <puts>:
 800f4b4:	4b02      	ldr	r3, [pc, #8]	@ (800f4c0 <puts+0xc>)
 800f4b6:	4601      	mov	r1, r0
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	f7ff bfa5 	b.w	800f408 <_puts_r>
 800f4be:	bf00      	nop
 800f4c0:	24000028 	.word	0x24000028

0800f4c4 <siprintf>:
 800f4c4:	b40e      	push	{r1, r2, r3}
 800f4c6:	b500      	push	{lr}
 800f4c8:	b09c      	sub	sp, #112	@ 0x70
 800f4ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800f4cc:	9002      	str	r0, [sp, #8]
 800f4ce:	9006      	str	r0, [sp, #24]
 800f4d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f4d4:	4809      	ldr	r0, [pc, #36]	@ (800f4fc <siprintf+0x38>)
 800f4d6:	9107      	str	r1, [sp, #28]
 800f4d8:	9104      	str	r1, [sp, #16]
 800f4da:	4909      	ldr	r1, [pc, #36]	@ (800f500 <siprintf+0x3c>)
 800f4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4e0:	9105      	str	r1, [sp, #20]
 800f4e2:	6800      	ldr	r0, [r0, #0]
 800f4e4:	9301      	str	r3, [sp, #4]
 800f4e6:	a902      	add	r1, sp, #8
 800f4e8:	f002 fbea 	bl	8011cc0 <_svfiprintf_r>
 800f4ec:	9b02      	ldr	r3, [sp, #8]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	701a      	strb	r2, [r3, #0]
 800f4f2:	b01c      	add	sp, #112	@ 0x70
 800f4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4f8:	b003      	add	sp, #12
 800f4fa:	4770      	bx	lr
 800f4fc:	24000028 	.word	0x24000028
 800f500:	ffff0208 	.word	0xffff0208

0800f504 <__sread>:
 800f504:	b510      	push	{r4, lr}
 800f506:	460c      	mov	r4, r1
 800f508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f50c:	f000 f956 	bl	800f7bc <_read_r>
 800f510:	2800      	cmp	r0, #0
 800f512:	bfab      	itete	ge
 800f514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f516:	89a3      	ldrhlt	r3, [r4, #12]
 800f518:	181b      	addge	r3, r3, r0
 800f51a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f51e:	bfac      	ite	ge
 800f520:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f522:	81a3      	strhlt	r3, [r4, #12]
 800f524:	bd10      	pop	{r4, pc}

0800f526 <__swrite>:
 800f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	461f      	mov	r7, r3
 800f52c:	898b      	ldrh	r3, [r1, #12]
 800f52e:	05db      	lsls	r3, r3, #23
 800f530:	4605      	mov	r5, r0
 800f532:	460c      	mov	r4, r1
 800f534:	4616      	mov	r6, r2
 800f536:	d505      	bpl.n	800f544 <__swrite+0x1e>
 800f538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f53c:	2302      	movs	r3, #2
 800f53e:	2200      	movs	r2, #0
 800f540:	f000 f92a 	bl	800f798 <_lseek_r>
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f54a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f54e:	81a3      	strh	r3, [r4, #12]
 800f550:	4632      	mov	r2, r6
 800f552:	463b      	mov	r3, r7
 800f554:	4628      	mov	r0, r5
 800f556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f55a:	f000 b941 	b.w	800f7e0 <_write_r>

0800f55e <__sseek>:
 800f55e:	b510      	push	{r4, lr}
 800f560:	460c      	mov	r4, r1
 800f562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f566:	f000 f917 	bl	800f798 <_lseek_r>
 800f56a:	1c43      	adds	r3, r0, #1
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	bf15      	itete	ne
 800f570:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f57a:	81a3      	strheq	r3, [r4, #12]
 800f57c:	bf18      	it	ne
 800f57e:	81a3      	strhne	r3, [r4, #12]
 800f580:	bd10      	pop	{r4, pc}

0800f582 <__sclose>:
 800f582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f586:	f000 b8a1 	b.w	800f6cc <_close_r>

0800f58a <__swbuf_r>:
 800f58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58c:	460e      	mov	r6, r1
 800f58e:	4614      	mov	r4, r2
 800f590:	4605      	mov	r5, r0
 800f592:	b118      	cbz	r0, 800f59c <__swbuf_r+0x12>
 800f594:	6a03      	ldr	r3, [r0, #32]
 800f596:	b90b      	cbnz	r3, 800f59c <__swbuf_r+0x12>
 800f598:	f7ff feee 	bl	800f378 <__sinit>
 800f59c:	69a3      	ldr	r3, [r4, #24]
 800f59e:	60a3      	str	r3, [r4, #8]
 800f5a0:	89a3      	ldrh	r3, [r4, #12]
 800f5a2:	071a      	lsls	r2, r3, #28
 800f5a4:	d501      	bpl.n	800f5aa <__swbuf_r+0x20>
 800f5a6:	6923      	ldr	r3, [r4, #16]
 800f5a8:	b943      	cbnz	r3, 800f5bc <__swbuf_r+0x32>
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f000 f82b 	bl	800f608 <__swsetup_r>
 800f5b2:	b118      	cbz	r0, 800f5bc <__swbuf_r+0x32>
 800f5b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f5b8:	4638      	mov	r0, r7
 800f5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	6922      	ldr	r2, [r4, #16]
 800f5c0:	1a98      	subs	r0, r3, r2
 800f5c2:	6963      	ldr	r3, [r4, #20]
 800f5c4:	b2f6      	uxtb	r6, r6
 800f5c6:	4283      	cmp	r3, r0
 800f5c8:	4637      	mov	r7, r6
 800f5ca:	dc05      	bgt.n	800f5d8 <__swbuf_r+0x4e>
 800f5cc:	4621      	mov	r1, r4
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	f002 fe38 	bl	8012244 <_fflush_r>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d1ed      	bne.n	800f5b4 <__swbuf_r+0x2a>
 800f5d8:	68a3      	ldr	r3, [r4, #8]
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	60a3      	str	r3, [r4, #8]
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	6022      	str	r2, [r4, #0]
 800f5e4:	701e      	strb	r6, [r3, #0]
 800f5e6:	6962      	ldr	r2, [r4, #20]
 800f5e8:	1c43      	adds	r3, r0, #1
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d004      	beq.n	800f5f8 <__swbuf_r+0x6e>
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	07db      	lsls	r3, r3, #31
 800f5f2:	d5e1      	bpl.n	800f5b8 <__swbuf_r+0x2e>
 800f5f4:	2e0a      	cmp	r6, #10
 800f5f6:	d1df      	bne.n	800f5b8 <__swbuf_r+0x2e>
 800f5f8:	4621      	mov	r1, r4
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f002 fe22 	bl	8012244 <_fflush_r>
 800f600:	2800      	cmp	r0, #0
 800f602:	d0d9      	beq.n	800f5b8 <__swbuf_r+0x2e>
 800f604:	e7d6      	b.n	800f5b4 <__swbuf_r+0x2a>
	...

0800f608 <__swsetup_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4b29      	ldr	r3, [pc, #164]	@ (800f6b0 <__swsetup_r+0xa8>)
 800f60c:	4605      	mov	r5, r0
 800f60e:	6818      	ldr	r0, [r3, #0]
 800f610:	460c      	mov	r4, r1
 800f612:	b118      	cbz	r0, 800f61c <__swsetup_r+0x14>
 800f614:	6a03      	ldr	r3, [r0, #32]
 800f616:	b90b      	cbnz	r3, 800f61c <__swsetup_r+0x14>
 800f618:	f7ff feae 	bl	800f378 <__sinit>
 800f61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f620:	0719      	lsls	r1, r3, #28
 800f622:	d422      	bmi.n	800f66a <__swsetup_r+0x62>
 800f624:	06da      	lsls	r2, r3, #27
 800f626:	d407      	bmi.n	800f638 <__swsetup_r+0x30>
 800f628:	2209      	movs	r2, #9
 800f62a:	602a      	str	r2, [r5, #0]
 800f62c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f630:	81a3      	strh	r3, [r4, #12]
 800f632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f636:	e033      	b.n	800f6a0 <__swsetup_r+0x98>
 800f638:	0758      	lsls	r0, r3, #29
 800f63a:	d512      	bpl.n	800f662 <__swsetup_r+0x5a>
 800f63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f63e:	b141      	cbz	r1, 800f652 <__swsetup_r+0x4a>
 800f640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f644:	4299      	cmp	r1, r3
 800f646:	d002      	beq.n	800f64e <__swsetup_r+0x46>
 800f648:	4628      	mov	r0, r5
 800f64a:	f000 fefb 	bl	8010444 <_free_r>
 800f64e:	2300      	movs	r3, #0
 800f650:	6363      	str	r3, [r4, #52]	@ 0x34
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f658:	81a3      	strh	r3, [r4, #12]
 800f65a:	2300      	movs	r3, #0
 800f65c:	6063      	str	r3, [r4, #4]
 800f65e:	6923      	ldr	r3, [r4, #16]
 800f660:	6023      	str	r3, [r4, #0]
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	f043 0308 	orr.w	r3, r3, #8
 800f668:	81a3      	strh	r3, [r4, #12]
 800f66a:	6923      	ldr	r3, [r4, #16]
 800f66c:	b94b      	cbnz	r3, 800f682 <__swsetup_r+0x7a>
 800f66e:	89a3      	ldrh	r3, [r4, #12]
 800f670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f678:	d003      	beq.n	800f682 <__swsetup_r+0x7a>
 800f67a:	4621      	mov	r1, r4
 800f67c:	4628      	mov	r0, r5
 800f67e:	f002 fe2f 	bl	80122e0 <__smakebuf_r>
 800f682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f686:	f013 0201 	ands.w	r2, r3, #1
 800f68a:	d00a      	beq.n	800f6a2 <__swsetup_r+0x9a>
 800f68c:	2200      	movs	r2, #0
 800f68e:	60a2      	str	r2, [r4, #8]
 800f690:	6962      	ldr	r2, [r4, #20]
 800f692:	4252      	negs	r2, r2
 800f694:	61a2      	str	r2, [r4, #24]
 800f696:	6922      	ldr	r2, [r4, #16]
 800f698:	b942      	cbnz	r2, 800f6ac <__swsetup_r+0xa4>
 800f69a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f69e:	d1c5      	bne.n	800f62c <__swsetup_r+0x24>
 800f6a0:	bd38      	pop	{r3, r4, r5, pc}
 800f6a2:	0799      	lsls	r1, r3, #30
 800f6a4:	bf58      	it	pl
 800f6a6:	6962      	ldrpl	r2, [r4, #20]
 800f6a8:	60a2      	str	r2, [r4, #8]
 800f6aa:	e7f4      	b.n	800f696 <__swsetup_r+0x8e>
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	e7f7      	b.n	800f6a0 <__swsetup_r+0x98>
 800f6b0:	24000028 	.word	0x24000028

0800f6b4 <memset>:
 800f6b4:	4402      	add	r2, r0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d100      	bne.n	800f6be <memset+0xa>
 800f6bc:	4770      	bx	lr
 800f6be:	f803 1b01 	strb.w	r1, [r3], #1
 800f6c2:	e7f9      	b.n	800f6b8 <memset+0x4>

0800f6c4 <_localeconv_r>:
 800f6c4:	4800      	ldr	r0, [pc, #0]	@ (800f6c8 <_localeconv_r+0x4>)
 800f6c6:	4770      	bx	lr
 800f6c8:	24000168 	.word	0x24000168

0800f6cc <_close_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	4d06      	ldr	r5, [pc, #24]	@ (800f6e8 <_close_r+0x1c>)
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	4608      	mov	r0, r1
 800f6d6:	602b      	str	r3, [r5, #0]
 800f6d8:	f7f3 fa2a 	bl	8002b30 <_close>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	d102      	bne.n	800f6e6 <_close_r+0x1a>
 800f6e0:	682b      	ldr	r3, [r5, #0]
 800f6e2:	b103      	cbz	r3, 800f6e6 <_close_r+0x1a>
 800f6e4:	6023      	str	r3, [r4, #0]
 800f6e6:	bd38      	pop	{r3, r4, r5, pc}
 800f6e8:	24005818 	.word	0x24005818

0800f6ec <_reclaim_reent>:
 800f6ec:	4b29      	ldr	r3, [pc, #164]	@ (800f794 <_reclaim_reent+0xa8>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4283      	cmp	r3, r0
 800f6f2:	b570      	push	{r4, r5, r6, lr}
 800f6f4:	4604      	mov	r4, r0
 800f6f6:	d04b      	beq.n	800f790 <_reclaim_reent+0xa4>
 800f6f8:	69c3      	ldr	r3, [r0, #28]
 800f6fa:	b1ab      	cbz	r3, 800f728 <_reclaim_reent+0x3c>
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	b16b      	cbz	r3, 800f71c <_reclaim_reent+0x30>
 800f700:	2500      	movs	r5, #0
 800f702:	69e3      	ldr	r3, [r4, #28]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	5959      	ldr	r1, [r3, r5]
 800f708:	2900      	cmp	r1, #0
 800f70a:	d13b      	bne.n	800f784 <_reclaim_reent+0x98>
 800f70c:	3504      	adds	r5, #4
 800f70e:	2d80      	cmp	r5, #128	@ 0x80
 800f710:	d1f7      	bne.n	800f702 <_reclaim_reent+0x16>
 800f712:	69e3      	ldr	r3, [r4, #28]
 800f714:	4620      	mov	r0, r4
 800f716:	68d9      	ldr	r1, [r3, #12]
 800f718:	f000 fe94 	bl	8010444 <_free_r>
 800f71c:	69e3      	ldr	r3, [r4, #28]
 800f71e:	6819      	ldr	r1, [r3, #0]
 800f720:	b111      	cbz	r1, 800f728 <_reclaim_reent+0x3c>
 800f722:	4620      	mov	r0, r4
 800f724:	f000 fe8e 	bl	8010444 <_free_r>
 800f728:	6961      	ldr	r1, [r4, #20]
 800f72a:	b111      	cbz	r1, 800f732 <_reclaim_reent+0x46>
 800f72c:	4620      	mov	r0, r4
 800f72e:	f000 fe89 	bl	8010444 <_free_r>
 800f732:	69e1      	ldr	r1, [r4, #28]
 800f734:	b111      	cbz	r1, 800f73c <_reclaim_reent+0x50>
 800f736:	4620      	mov	r0, r4
 800f738:	f000 fe84 	bl	8010444 <_free_r>
 800f73c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f73e:	b111      	cbz	r1, 800f746 <_reclaim_reent+0x5a>
 800f740:	4620      	mov	r0, r4
 800f742:	f000 fe7f 	bl	8010444 <_free_r>
 800f746:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f748:	b111      	cbz	r1, 800f750 <_reclaim_reent+0x64>
 800f74a:	4620      	mov	r0, r4
 800f74c:	f000 fe7a 	bl	8010444 <_free_r>
 800f750:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f752:	b111      	cbz	r1, 800f75a <_reclaim_reent+0x6e>
 800f754:	4620      	mov	r0, r4
 800f756:	f000 fe75 	bl	8010444 <_free_r>
 800f75a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f75c:	b111      	cbz	r1, 800f764 <_reclaim_reent+0x78>
 800f75e:	4620      	mov	r0, r4
 800f760:	f000 fe70 	bl	8010444 <_free_r>
 800f764:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f766:	b111      	cbz	r1, 800f76e <_reclaim_reent+0x82>
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fe6b 	bl	8010444 <_free_r>
 800f76e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f770:	b111      	cbz	r1, 800f778 <_reclaim_reent+0x8c>
 800f772:	4620      	mov	r0, r4
 800f774:	f000 fe66 	bl	8010444 <_free_r>
 800f778:	6a23      	ldr	r3, [r4, #32]
 800f77a:	b14b      	cbz	r3, 800f790 <_reclaim_reent+0xa4>
 800f77c:	4620      	mov	r0, r4
 800f77e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f782:	4718      	bx	r3
 800f784:	680e      	ldr	r6, [r1, #0]
 800f786:	4620      	mov	r0, r4
 800f788:	f000 fe5c 	bl	8010444 <_free_r>
 800f78c:	4631      	mov	r1, r6
 800f78e:	e7bb      	b.n	800f708 <_reclaim_reent+0x1c>
 800f790:	bd70      	pop	{r4, r5, r6, pc}
 800f792:	bf00      	nop
 800f794:	24000028 	.word	0x24000028

0800f798 <_lseek_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4d07      	ldr	r5, [pc, #28]	@ (800f7b8 <_lseek_r+0x20>)
 800f79c:	4604      	mov	r4, r0
 800f79e:	4608      	mov	r0, r1
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	602a      	str	r2, [r5, #0]
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	f7f3 f9e9 	bl	8002b7e <_lseek>
 800f7ac:	1c43      	adds	r3, r0, #1
 800f7ae:	d102      	bne.n	800f7b6 <_lseek_r+0x1e>
 800f7b0:	682b      	ldr	r3, [r5, #0]
 800f7b2:	b103      	cbz	r3, 800f7b6 <_lseek_r+0x1e>
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	bd38      	pop	{r3, r4, r5, pc}
 800f7b8:	24005818 	.word	0x24005818

0800f7bc <_read_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	@ (800f7dc <_read_r+0x20>)
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	4608      	mov	r0, r1
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	602a      	str	r2, [r5, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f7f3 f977 	bl	8002abe <_read>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_read_r+0x1e>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_read_r+0x1e>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	24005818 	.word	0x24005818

0800f7e0 <_write_r>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4d07      	ldr	r5, [pc, #28]	@ (800f800 <_write_r+0x20>)
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	4611      	mov	r1, r2
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	602a      	str	r2, [r5, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f7f3 f982 	bl	8002af8 <_write>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_write_r+0x1e>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_write_r+0x1e>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	24005818 	.word	0x24005818

0800f804 <__errno>:
 800f804:	4b01      	ldr	r3, [pc, #4]	@ (800f80c <__errno+0x8>)
 800f806:	6818      	ldr	r0, [r3, #0]
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	24000028 	.word	0x24000028

0800f810 <__libc_init_array>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4d0d      	ldr	r5, [pc, #52]	@ (800f848 <__libc_init_array+0x38>)
 800f814:	4c0d      	ldr	r4, [pc, #52]	@ (800f84c <__libc_init_array+0x3c>)
 800f816:	1b64      	subs	r4, r4, r5
 800f818:	10a4      	asrs	r4, r4, #2
 800f81a:	2600      	movs	r6, #0
 800f81c:	42a6      	cmp	r6, r4
 800f81e:	d109      	bne.n	800f834 <__libc_init_array+0x24>
 800f820:	4d0b      	ldr	r5, [pc, #44]	@ (800f850 <__libc_init_array+0x40>)
 800f822:	4c0c      	ldr	r4, [pc, #48]	@ (800f854 <__libc_init_array+0x44>)
 800f824:	f004 fb4a 	bl	8013ebc <_init>
 800f828:	1b64      	subs	r4, r4, r5
 800f82a:	10a4      	asrs	r4, r4, #2
 800f82c:	2600      	movs	r6, #0
 800f82e:	42a6      	cmp	r6, r4
 800f830:	d105      	bne.n	800f83e <__libc_init_array+0x2e>
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	f855 3b04 	ldr.w	r3, [r5], #4
 800f838:	4798      	blx	r3
 800f83a:	3601      	adds	r6, #1
 800f83c:	e7ee      	b.n	800f81c <__libc_init_array+0xc>
 800f83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f842:	4798      	blx	r3
 800f844:	3601      	adds	r6, #1
 800f846:	e7f2      	b.n	800f82e <__libc_init_array+0x1e>
 800f848:	08014770 	.word	0x08014770
 800f84c:	08014770 	.word	0x08014770
 800f850:	08014770 	.word	0x08014770
 800f854:	08014774 	.word	0x08014774

0800f858 <__retarget_lock_init_recursive>:
 800f858:	4770      	bx	lr

0800f85a <__retarget_lock_acquire_recursive>:
 800f85a:	4770      	bx	lr

0800f85c <__retarget_lock_release_recursive>:
 800f85c:	4770      	bx	lr

0800f85e <memcpy>:
 800f85e:	440a      	add	r2, r1
 800f860:	4291      	cmp	r1, r2
 800f862:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f866:	d100      	bne.n	800f86a <memcpy+0xc>
 800f868:	4770      	bx	lr
 800f86a:	b510      	push	{r4, lr}
 800f86c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f870:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f874:	4291      	cmp	r1, r2
 800f876:	d1f9      	bne.n	800f86c <memcpy+0xe>
 800f878:	bd10      	pop	{r4, pc}
	...

0800f87c <nanf>:
 800f87c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f884 <nanf+0x8>
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	7fc00000 	.word	0x7fc00000

0800f888 <quorem>:
 800f888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	6903      	ldr	r3, [r0, #16]
 800f88e:	690c      	ldr	r4, [r1, #16]
 800f890:	42a3      	cmp	r3, r4
 800f892:	4607      	mov	r7, r0
 800f894:	db7e      	blt.n	800f994 <quorem+0x10c>
 800f896:	3c01      	subs	r4, #1
 800f898:	f101 0814 	add.w	r8, r1, #20
 800f89c:	00a3      	lsls	r3, r4, #2
 800f89e:	f100 0514 	add.w	r5, r0, #20
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8a8:	9301      	str	r3, [sp, #4]
 800f8aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8be:	d32e      	bcc.n	800f91e <quorem+0x96>
 800f8c0:	f04f 0a00 	mov.w	sl, #0
 800f8c4:	46c4      	mov	ip, r8
 800f8c6:	46ae      	mov	lr, r5
 800f8c8:	46d3      	mov	fp, sl
 800f8ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f8ce:	b298      	uxth	r0, r3
 800f8d0:	fb06 a000 	mla	r0, r6, r0, sl
 800f8d4:	0c02      	lsrs	r2, r0, #16
 800f8d6:	0c1b      	lsrs	r3, r3, #16
 800f8d8:	fb06 2303 	mla	r3, r6, r3, r2
 800f8dc:	f8de 2000 	ldr.w	r2, [lr]
 800f8e0:	b280      	uxth	r0, r0
 800f8e2:	b292      	uxth	r2, r2
 800f8e4:	1a12      	subs	r2, r2, r0
 800f8e6:	445a      	add	r2, fp
 800f8e8:	f8de 0000 	ldr.w	r0, [lr]
 800f8ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f8f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f8fa:	b292      	uxth	r2, r2
 800f8fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f900:	45e1      	cmp	r9, ip
 800f902:	f84e 2b04 	str.w	r2, [lr], #4
 800f906:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f90a:	d2de      	bcs.n	800f8ca <quorem+0x42>
 800f90c:	9b00      	ldr	r3, [sp, #0]
 800f90e:	58eb      	ldr	r3, [r5, r3]
 800f910:	b92b      	cbnz	r3, 800f91e <quorem+0x96>
 800f912:	9b01      	ldr	r3, [sp, #4]
 800f914:	3b04      	subs	r3, #4
 800f916:	429d      	cmp	r5, r3
 800f918:	461a      	mov	r2, r3
 800f91a:	d32f      	bcc.n	800f97c <quorem+0xf4>
 800f91c:	613c      	str	r4, [r7, #16]
 800f91e:	4638      	mov	r0, r7
 800f920:	f001 f954 	bl	8010bcc <__mcmp>
 800f924:	2800      	cmp	r0, #0
 800f926:	db25      	blt.n	800f974 <quorem+0xec>
 800f928:	4629      	mov	r1, r5
 800f92a:	2000      	movs	r0, #0
 800f92c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f930:	f8d1 c000 	ldr.w	ip, [r1]
 800f934:	fa1f fe82 	uxth.w	lr, r2
 800f938:	fa1f f38c 	uxth.w	r3, ip
 800f93c:	eba3 030e 	sub.w	r3, r3, lr
 800f940:	4403      	add	r3, r0
 800f942:	0c12      	lsrs	r2, r2, #16
 800f944:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f948:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f952:	45c1      	cmp	r9, r8
 800f954:	f841 3b04 	str.w	r3, [r1], #4
 800f958:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f95c:	d2e6      	bcs.n	800f92c <quorem+0xa4>
 800f95e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f966:	b922      	cbnz	r2, 800f972 <quorem+0xea>
 800f968:	3b04      	subs	r3, #4
 800f96a:	429d      	cmp	r5, r3
 800f96c:	461a      	mov	r2, r3
 800f96e:	d30b      	bcc.n	800f988 <quorem+0x100>
 800f970:	613c      	str	r4, [r7, #16]
 800f972:	3601      	adds	r6, #1
 800f974:	4630      	mov	r0, r6
 800f976:	b003      	add	sp, #12
 800f978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97c:	6812      	ldr	r2, [r2, #0]
 800f97e:	3b04      	subs	r3, #4
 800f980:	2a00      	cmp	r2, #0
 800f982:	d1cb      	bne.n	800f91c <quorem+0x94>
 800f984:	3c01      	subs	r4, #1
 800f986:	e7c6      	b.n	800f916 <quorem+0x8e>
 800f988:	6812      	ldr	r2, [r2, #0]
 800f98a:	3b04      	subs	r3, #4
 800f98c:	2a00      	cmp	r2, #0
 800f98e:	d1ef      	bne.n	800f970 <quorem+0xe8>
 800f990:	3c01      	subs	r4, #1
 800f992:	e7ea      	b.n	800f96a <quorem+0xe2>
 800f994:	2000      	movs	r0, #0
 800f996:	e7ee      	b.n	800f976 <quorem+0xee>

0800f998 <_dtoa_r>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	ed2d 8b02 	vpush	{d8}
 800f9a0:	69c7      	ldr	r7, [r0, #28]
 800f9a2:	b091      	sub	sp, #68	@ 0x44
 800f9a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9a8:	ec55 4b10 	vmov	r4, r5, d0
 800f9ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f9ae:	9107      	str	r1, [sp, #28]
 800f9b0:	4681      	mov	r9, r0
 800f9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800f9b6:	b97f      	cbnz	r7, 800f9d8 <_dtoa_r+0x40>
 800f9b8:	2010      	movs	r0, #16
 800f9ba:	f000 fd8d 	bl	80104d8 <malloc>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	f8c9 001c 	str.w	r0, [r9, #28]
 800f9c4:	b920      	cbnz	r0, 800f9d0 <_dtoa_r+0x38>
 800f9c6:	4ba0      	ldr	r3, [pc, #640]	@ (800fc48 <_dtoa_r+0x2b0>)
 800f9c8:	21ef      	movs	r1, #239	@ 0xef
 800f9ca:	48a0      	ldr	r0, [pc, #640]	@ (800fc4c <_dtoa_r+0x2b4>)
 800f9cc:	f002 fd2c 	bl	8012428 <__assert_func>
 800f9d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f9d4:	6007      	str	r7, [r0, #0]
 800f9d6:	60c7      	str	r7, [r0, #12]
 800f9d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9dc:	6819      	ldr	r1, [r3, #0]
 800f9de:	b159      	cbz	r1, 800f9f8 <_dtoa_r+0x60>
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	604a      	str	r2, [r1, #4]
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	4093      	lsls	r3, r2
 800f9e8:	608b      	str	r3, [r1, #8]
 800f9ea:	4648      	mov	r0, r9
 800f9ec:	f000 fe6a 	bl	80106c4 <_Bfree>
 800f9f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	601a      	str	r2, [r3, #0]
 800f9f8:	1e2b      	subs	r3, r5, #0
 800f9fa:	bfbb      	ittet	lt
 800f9fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa00:	9303      	strlt	r3, [sp, #12]
 800fa02:	2300      	movge	r3, #0
 800fa04:	2201      	movlt	r2, #1
 800fa06:	bfac      	ite	ge
 800fa08:	6033      	strge	r3, [r6, #0]
 800fa0a:	6032      	strlt	r2, [r6, #0]
 800fa0c:	4b90      	ldr	r3, [pc, #576]	@ (800fc50 <_dtoa_r+0x2b8>)
 800fa0e:	9e03      	ldr	r6, [sp, #12]
 800fa10:	43b3      	bics	r3, r6
 800fa12:	d110      	bne.n	800fa36 <_dtoa_r+0x9e>
 800fa14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa16:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa1a:	6013      	str	r3, [r2, #0]
 800fa1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fa20:	4323      	orrs	r3, r4
 800fa22:	f000 84de 	beq.w	80103e2 <_dtoa_r+0xa4a>
 800fa26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa28:	4f8a      	ldr	r7, [pc, #552]	@ (800fc54 <_dtoa_r+0x2bc>)
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 84e0 	beq.w	80103f0 <_dtoa_r+0xa58>
 800fa30:	1cfb      	adds	r3, r7, #3
 800fa32:	f000 bcdb 	b.w	80103ec <_dtoa_r+0xa54>
 800fa36:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fa3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa42:	d10a      	bne.n	800fa5a <_dtoa_r+0xc2>
 800fa44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa46:	2301      	movs	r3, #1
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa4c:	b113      	cbz	r3, 800fa54 <_dtoa_r+0xbc>
 800fa4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fa50:	4b81      	ldr	r3, [pc, #516]	@ (800fc58 <_dtoa_r+0x2c0>)
 800fa52:	6013      	str	r3, [r2, #0]
 800fa54:	4f81      	ldr	r7, [pc, #516]	@ (800fc5c <_dtoa_r+0x2c4>)
 800fa56:	f000 bccb 	b.w	80103f0 <_dtoa_r+0xa58>
 800fa5a:	aa0e      	add	r2, sp, #56	@ 0x38
 800fa5c:	a90f      	add	r1, sp, #60	@ 0x3c
 800fa5e:	4648      	mov	r0, r9
 800fa60:	eeb0 0b48 	vmov.f64	d0, d8
 800fa64:	f001 f9d2 	bl	8010e0c <__d2b>
 800fa68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fa6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa6e:	9001      	str	r0, [sp, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d045      	beq.n	800fb00 <_dtoa_r+0x168>
 800fa74:	eeb0 7b48 	vmov.f64	d7, d8
 800fa78:	ee18 1a90 	vmov	r1, s17
 800fa7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fa80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fa84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fa88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fa8c:	2500      	movs	r5, #0
 800fa8e:	ee07 1a90 	vmov	s15, r1
 800fa92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fa96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fc30 <_dtoa_r+0x298>
 800fa9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fa9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fc38 <_dtoa_r+0x2a0>
 800faa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800faa6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fc40 <_dtoa_r+0x2a8>
 800faaa:	ee07 3a90 	vmov	s15, r3
 800faae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fab2:	eeb0 7b46 	vmov.f64	d7, d6
 800fab6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800faba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fabe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac6:	ee16 8a90 	vmov	r8, s13
 800faca:	d508      	bpl.n	800fade <_dtoa_r+0x146>
 800facc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fad0:	eeb4 6b47 	vcmp.f64	d6, d7
 800fad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad8:	bf18      	it	ne
 800fada:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800fade:	f1b8 0f16 	cmp.w	r8, #22
 800fae2:	d82b      	bhi.n	800fb3c <_dtoa_r+0x1a4>
 800fae4:	495e      	ldr	r1, [pc, #376]	@ (800fc60 <_dtoa_r+0x2c8>)
 800fae6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800faea:	ed91 7b00 	vldr	d7, [r1]
 800faee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800faf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf6:	d501      	bpl.n	800fafc <_dtoa_r+0x164>
 800faf8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fafc:	2100      	movs	r1, #0
 800fafe:	e01e      	b.n	800fb3e <_dtoa_r+0x1a6>
 800fb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb02:	4413      	add	r3, r2
 800fb04:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fb08:	2920      	cmp	r1, #32
 800fb0a:	bfc1      	itttt	gt
 800fb0c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fb10:	408e      	lslgt	r6, r1
 800fb12:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fb16:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fb1a:	bfd6      	itet	le
 800fb1c:	f1c1 0120 	rsble	r1, r1, #32
 800fb20:	4331      	orrgt	r1, r6
 800fb22:	fa04 f101 	lslle.w	r1, r4, r1
 800fb26:	ee07 1a90 	vmov	s15, r1
 800fb2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	ee17 1a90 	vmov	r1, s15
 800fb34:	2501      	movs	r5, #1
 800fb36:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fb3a:	e7a8      	b.n	800fa8e <_dtoa_r+0xf6>
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	1ad2      	subs	r2, r2, r3
 800fb40:	1e53      	subs	r3, r2, #1
 800fb42:	9306      	str	r3, [sp, #24]
 800fb44:	bf45      	ittet	mi
 800fb46:	f1c2 0301 	rsbmi	r3, r2, #1
 800fb4a:	9305      	strmi	r3, [sp, #20]
 800fb4c:	2300      	movpl	r3, #0
 800fb4e:	2300      	movmi	r3, #0
 800fb50:	bf4c      	ite	mi
 800fb52:	9306      	strmi	r3, [sp, #24]
 800fb54:	9305      	strpl	r3, [sp, #20]
 800fb56:	f1b8 0f00 	cmp.w	r8, #0
 800fb5a:	910c      	str	r1, [sp, #48]	@ 0x30
 800fb5c:	db18      	blt.n	800fb90 <_dtoa_r+0x1f8>
 800fb5e:	9b06      	ldr	r3, [sp, #24]
 800fb60:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fb64:	4443      	add	r3, r8
 800fb66:	9306      	str	r3, [sp, #24]
 800fb68:	2300      	movs	r3, #0
 800fb6a:	9a07      	ldr	r2, [sp, #28]
 800fb6c:	2a09      	cmp	r2, #9
 800fb6e:	d849      	bhi.n	800fc04 <_dtoa_r+0x26c>
 800fb70:	2a05      	cmp	r2, #5
 800fb72:	bfc4      	itt	gt
 800fb74:	3a04      	subgt	r2, #4
 800fb76:	9207      	strgt	r2, [sp, #28]
 800fb78:	9a07      	ldr	r2, [sp, #28]
 800fb7a:	f1a2 0202 	sub.w	r2, r2, #2
 800fb7e:	bfcc      	ite	gt
 800fb80:	2400      	movgt	r4, #0
 800fb82:	2401      	movle	r4, #1
 800fb84:	2a03      	cmp	r2, #3
 800fb86:	d848      	bhi.n	800fc1a <_dtoa_r+0x282>
 800fb88:	e8df f002 	tbb	[pc, r2]
 800fb8c:	3a2c2e0b 	.word	0x3a2c2e0b
 800fb90:	9b05      	ldr	r3, [sp, #20]
 800fb92:	2200      	movs	r2, #0
 800fb94:	eba3 0308 	sub.w	r3, r3, r8
 800fb98:	9305      	str	r3, [sp, #20]
 800fb9a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fb9c:	f1c8 0300 	rsb	r3, r8, #0
 800fba0:	e7e3      	b.n	800fb6a <_dtoa_r+0x1d2>
 800fba2:	2200      	movs	r2, #0
 800fba4:	9208      	str	r2, [sp, #32]
 800fba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fba8:	2a00      	cmp	r2, #0
 800fbaa:	dc39      	bgt.n	800fc20 <_dtoa_r+0x288>
 800fbac:	f04f 0b01 	mov.w	fp, #1
 800fbb0:	46da      	mov	sl, fp
 800fbb2:	465a      	mov	r2, fp
 800fbb4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fbb8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	2004      	movs	r0, #4
 800fbc0:	f100 0614 	add.w	r6, r0, #20
 800fbc4:	4296      	cmp	r6, r2
 800fbc6:	d930      	bls.n	800fc2a <_dtoa_r+0x292>
 800fbc8:	6079      	str	r1, [r7, #4]
 800fbca:	4648      	mov	r0, r9
 800fbcc:	9304      	str	r3, [sp, #16]
 800fbce:	f000 fd39 	bl	8010644 <_Balloc>
 800fbd2:	9b04      	ldr	r3, [sp, #16]
 800fbd4:	4607      	mov	r7, r0
 800fbd6:	2800      	cmp	r0, #0
 800fbd8:	d146      	bne.n	800fc68 <_dtoa_r+0x2d0>
 800fbda:	4b22      	ldr	r3, [pc, #136]	@ (800fc64 <_dtoa_r+0x2cc>)
 800fbdc:	4602      	mov	r2, r0
 800fbde:	f240 11af 	movw	r1, #431	@ 0x1af
 800fbe2:	e6f2      	b.n	800f9ca <_dtoa_r+0x32>
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	e7dd      	b.n	800fba4 <_dtoa_r+0x20c>
 800fbe8:	2200      	movs	r2, #0
 800fbea:	9208      	str	r2, [sp, #32]
 800fbec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbee:	eb08 0b02 	add.w	fp, r8, r2
 800fbf2:	f10b 0a01 	add.w	sl, fp, #1
 800fbf6:	4652      	mov	r2, sl
 800fbf8:	2a01      	cmp	r2, #1
 800fbfa:	bfb8      	it	lt
 800fbfc:	2201      	movlt	r2, #1
 800fbfe:	e7db      	b.n	800fbb8 <_dtoa_r+0x220>
 800fc00:	2201      	movs	r2, #1
 800fc02:	e7f2      	b.n	800fbea <_dtoa_r+0x252>
 800fc04:	2401      	movs	r4, #1
 800fc06:	2200      	movs	r2, #0
 800fc08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fc0c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fc10:	2100      	movs	r1, #0
 800fc12:	46da      	mov	sl, fp
 800fc14:	2212      	movs	r2, #18
 800fc16:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc18:	e7ce      	b.n	800fbb8 <_dtoa_r+0x220>
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	9208      	str	r2, [sp, #32]
 800fc1e:	e7f5      	b.n	800fc0c <_dtoa_r+0x274>
 800fc20:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fc24:	46da      	mov	sl, fp
 800fc26:	465a      	mov	r2, fp
 800fc28:	e7c6      	b.n	800fbb8 <_dtoa_r+0x220>
 800fc2a:	3101      	adds	r1, #1
 800fc2c:	0040      	lsls	r0, r0, #1
 800fc2e:	e7c7      	b.n	800fbc0 <_dtoa_r+0x228>
 800fc30:	636f4361 	.word	0x636f4361
 800fc34:	3fd287a7 	.word	0x3fd287a7
 800fc38:	8b60c8b3 	.word	0x8b60c8b3
 800fc3c:	3fc68a28 	.word	0x3fc68a28
 800fc40:	509f79fb 	.word	0x509f79fb
 800fc44:	3fd34413 	.word	0x3fd34413
 800fc48:	08014126 	.word	0x08014126
 800fc4c:	0801413d 	.word	0x0801413d
 800fc50:	7ff00000 	.word	0x7ff00000
 800fc54:	08014122 	.word	0x08014122
 800fc58:	080140f1 	.word	0x080140f1
 800fc5c:	080140f0 	.word	0x080140f0
 800fc60:	08014238 	.word	0x08014238
 800fc64:	08014195 	.word	0x08014195
 800fc68:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fc6c:	f1ba 0f0e 	cmp.w	sl, #14
 800fc70:	6010      	str	r0, [r2, #0]
 800fc72:	d86f      	bhi.n	800fd54 <_dtoa_r+0x3bc>
 800fc74:	2c00      	cmp	r4, #0
 800fc76:	d06d      	beq.n	800fd54 <_dtoa_r+0x3bc>
 800fc78:	f1b8 0f00 	cmp.w	r8, #0
 800fc7c:	f340 80c2 	ble.w	800fe04 <_dtoa_r+0x46c>
 800fc80:	4aca      	ldr	r2, [pc, #808]	@ (800ffac <_dtoa_r+0x614>)
 800fc82:	f008 010f 	and.w	r1, r8, #15
 800fc86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fc8a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fc8e:	ed92 7b00 	vldr	d7, [r2]
 800fc92:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fc96:	f000 80a9 	beq.w	800fdec <_dtoa_r+0x454>
 800fc9a:	4ac5      	ldr	r2, [pc, #788]	@ (800ffb0 <_dtoa_r+0x618>)
 800fc9c:	ed92 6b08 	vldr	d6, [r2, #32]
 800fca0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fca4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fca8:	f001 010f 	and.w	r1, r1, #15
 800fcac:	2203      	movs	r2, #3
 800fcae:	48c0      	ldr	r0, [pc, #768]	@ (800ffb0 <_dtoa_r+0x618>)
 800fcb0:	2900      	cmp	r1, #0
 800fcb2:	f040 809d 	bne.w	800fdf0 <_dtoa_r+0x458>
 800fcb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fcba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fcbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fcc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fcc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fcc8:	2900      	cmp	r1, #0
 800fcca:	f000 80c1 	beq.w	800fe50 <_dtoa_r+0x4b8>
 800fcce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fcd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcda:	f140 80b9 	bpl.w	800fe50 <_dtoa_r+0x4b8>
 800fcde:	f1ba 0f00 	cmp.w	sl, #0
 800fce2:	f000 80b5 	beq.w	800fe50 <_dtoa_r+0x4b8>
 800fce6:	f1bb 0f00 	cmp.w	fp, #0
 800fcea:	dd31      	ble.n	800fd50 <_dtoa_r+0x3b8>
 800fcec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fcf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fcf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fcf8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800fcfc:	9104      	str	r1, [sp, #16]
 800fcfe:	3201      	adds	r2, #1
 800fd00:	465c      	mov	r4, fp
 800fd02:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fd06:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800fd0a:	ee07 2a90 	vmov	s15, r2
 800fd0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fd12:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fd16:	ee15 2a90 	vmov	r2, s11
 800fd1a:	ec51 0b15 	vmov	r0, r1, d5
 800fd1e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800fd22:	2c00      	cmp	r4, #0
 800fd24:	f040 8098 	bne.w	800fe58 <_dtoa_r+0x4c0>
 800fd28:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800fd2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fd30:	ec41 0b17 	vmov	d7, r0, r1
 800fd34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd3c:	f300 8261 	bgt.w	8010202 <_dtoa_r+0x86a>
 800fd40:	eeb1 7b47 	vneg.f64	d7, d7
 800fd44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4c:	f100 80f5 	bmi.w	800ff3a <_dtoa_r+0x5a2>
 800fd50:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fd54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fd56:	2a00      	cmp	r2, #0
 800fd58:	f2c0 812c 	blt.w	800ffb4 <_dtoa_r+0x61c>
 800fd5c:	f1b8 0f0e 	cmp.w	r8, #14
 800fd60:	f300 8128 	bgt.w	800ffb4 <_dtoa_r+0x61c>
 800fd64:	4b91      	ldr	r3, [pc, #580]	@ (800ffac <_dtoa_r+0x614>)
 800fd66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd6a:	ed93 6b00 	vldr	d6, [r3]
 800fd6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	da03      	bge.n	800fd7c <_dtoa_r+0x3e4>
 800fd74:	f1ba 0f00 	cmp.w	sl, #0
 800fd78:	f340 80d2 	ble.w	800ff20 <_dtoa_r+0x588>
 800fd7c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800fd80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd84:	463e      	mov	r6, r7
 800fd86:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fd8a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fd8e:	ee15 3a10 	vmov	r3, s10
 800fd92:	3330      	adds	r3, #48	@ 0x30
 800fd94:	f806 3b01 	strb.w	r3, [r6], #1
 800fd98:	1bf3      	subs	r3, r6, r7
 800fd9a:	459a      	cmp	sl, r3
 800fd9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fda0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fda4:	f040 80f8 	bne.w	800ff98 <_dtoa_r+0x600>
 800fda8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fdac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb4:	f300 80dd 	bgt.w	800ff72 <_dtoa_r+0x5da>
 800fdb8:	eeb4 7b46 	vcmp.f64	d7, d6
 800fdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc0:	d104      	bne.n	800fdcc <_dtoa_r+0x434>
 800fdc2:	ee15 3a10 	vmov	r3, s10
 800fdc6:	07db      	lsls	r3, r3, #31
 800fdc8:	f100 80d3 	bmi.w	800ff72 <_dtoa_r+0x5da>
 800fdcc:	9901      	ldr	r1, [sp, #4]
 800fdce:	4648      	mov	r0, r9
 800fdd0:	f000 fc78 	bl	80106c4 <_Bfree>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fdd8:	7033      	strb	r3, [r6, #0]
 800fdda:	f108 0301 	add.w	r3, r8, #1
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f000 8304 	beq.w	80103f0 <_dtoa_r+0xa58>
 800fde8:	601e      	str	r6, [r3, #0]
 800fdea:	e301      	b.n	80103f0 <_dtoa_r+0xa58>
 800fdec:	2202      	movs	r2, #2
 800fdee:	e75e      	b.n	800fcae <_dtoa_r+0x316>
 800fdf0:	07cc      	lsls	r4, r1, #31
 800fdf2:	d504      	bpl.n	800fdfe <_dtoa_r+0x466>
 800fdf4:	ed90 6b00 	vldr	d6, [r0]
 800fdf8:	3201      	adds	r2, #1
 800fdfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fdfe:	1049      	asrs	r1, r1, #1
 800fe00:	3008      	adds	r0, #8
 800fe02:	e755      	b.n	800fcb0 <_dtoa_r+0x318>
 800fe04:	d022      	beq.n	800fe4c <_dtoa_r+0x4b4>
 800fe06:	f1c8 0100 	rsb	r1, r8, #0
 800fe0a:	4a68      	ldr	r2, [pc, #416]	@ (800ffac <_dtoa_r+0x614>)
 800fe0c:	f001 000f 	and.w	r0, r1, #15
 800fe10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fe14:	ed92 7b00 	vldr	d7, [r2]
 800fe18:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fe1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe20:	4863      	ldr	r0, [pc, #396]	@ (800ffb0 <_dtoa_r+0x618>)
 800fe22:	1109      	asrs	r1, r1, #4
 800fe24:	2400      	movs	r4, #0
 800fe26:	2202      	movs	r2, #2
 800fe28:	b929      	cbnz	r1, 800fe36 <_dtoa_r+0x49e>
 800fe2a:	2c00      	cmp	r4, #0
 800fe2c:	f43f af49 	beq.w	800fcc2 <_dtoa_r+0x32a>
 800fe30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe34:	e745      	b.n	800fcc2 <_dtoa_r+0x32a>
 800fe36:	07ce      	lsls	r6, r1, #31
 800fe38:	d505      	bpl.n	800fe46 <_dtoa_r+0x4ae>
 800fe3a:	ed90 6b00 	vldr	d6, [r0]
 800fe3e:	3201      	adds	r2, #1
 800fe40:	2401      	movs	r4, #1
 800fe42:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe46:	1049      	asrs	r1, r1, #1
 800fe48:	3008      	adds	r0, #8
 800fe4a:	e7ed      	b.n	800fe28 <_dtoa_r+0x490>
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	e738      	b.n	800fcc2 <_dtoa_r+0x32a>
 800fe50:	f8cd 8010 	str.w	r8, [sp, #16]
 800fe54:	4654      	mov	r4, sl
 800fe56:	e754      	b.n	800fd02 <_dtoa_r+0x36a>
 800fe58:	4a54      	ldr	r2, [pc, #336]	@ (800ffac <_dtoa_r+0x614>)
 800fe5a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800fe5e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800fe62:	9a08      	ldr	r2, [sp, #32]
 800fe64:	ec41 0b17 	vmov	d7, r0, r1
 800fe68:	443c      	add	r4, r7
 800fe6a:	b34a      	cbz	r2, 800fec0 <_dtoa_r+0x528>
 800fe6c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800fe70:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800fe74:	463e      	mov	r6, r7
 800fe76:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fe7a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fe7e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fe82:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fe86:	ee14 2a90 	vmov	r2, s9
 800fe8a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fe8e:	3230      	adds	r2, #48	@ 0x30
 800fe90:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fe94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fe98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9c:	f806 2b01 	strb.w	r2, [r6], #1
 800fea0:	d438      	bmi.n	800ff14 <_dtoa_r+0x57c>
 800fea2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fea6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800feaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feae:	d462      	bmi.n	800ff76 <_dtoa_r+0x5de>
 800feb0:	42a6      	cmp	r6, r4
 800feb2:	f43f af4d 	beq.w	800fd50 <_dtoa_r+0x3b8>
 800feb6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800feba:	ee26 6b03 	vmul.f64	d6, d6, d3
 800febe:	e7e0      	b.n	800fe82 <_dtoa_r+0x4ea>
 800fec0:	4621      	mov	r1, r4
 800fec2:	463e      	mov	r6, r7
 800fec4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fec8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fecc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fed0:	ee14 2a90 	vmov	r2, s9
 800fed4:	3230      	adds	r2, #48	@ 0x30
 800fed6:	f806 2b01 	strb.w	r2, [r6], #1
 800feda:	42a6      	cmp	r6, r4
 800fedc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fee0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fee4:	d119      	bne.n	800ff1a <_dtoa_r+0x582>
 800fee6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800feea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800feee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800fef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef6:	dc3e      	bgt.n	800ff76 <_dtoa_r+0x5de>
 800fef8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fefc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ff00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff04:	f57f af24 	bpl.w	800fd50 <_dtoa_r+0x3b8>
 800ff08:	460e      	mov	r6, r1
 800ff0a:	3901      	subs	r1, #1
 800ff0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ff10:	2b30      	cmp	r3, #48	@ 0x30
 800ff12:	d0f9      	beq.n	800ff08 <_dtoa_r+0x570>
 800ff14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ff18:	e758      	b.n	800fdcc <_dtoa_r+0x434>
 800ff1a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ff1e:	e7d5      	b.n	800fecc <_dtoa_r+0x534>
 800ff20:	d10b      	bne.n	800ff3a <_dtoa_r+0x5a2>
 800ff22:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff26:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff36:	f2c0 8161 	blt.w	80101fc <_dtoa_r+0x864>
 800ff3a:	2400      	movs	r4, #0
 800ff3c:	4625      	mov	r5, r4
 800ff3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff40:	43db      	mvns	r3, r3
 800ff42:	9304      	str	r3, [sp, #16]
 800ff44:	463e      	mov	r6, r7
 800ff46:	f04f 0800 	mov.w	r8, #0
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	4648      	mov	r0, r9
 800ff4e:	f000 fbb9 	bl	80106c4 <_Bfree>
 800ff52:	2d00      	cmp	r5, #0
 800ff54:	d0de      	beq.n	800ff14 <_dtoa_r+0x57c>
 800ff56:	f1b8 0f00 	cmp.w	r8, #0
 800ff5a:	d005      	beq.n	800ff68 <_dtoa_r+0x5d0>
 800ff5c:	45a8      	cmp	r8, r5
 800ff5e:	d003      	beq.n	800ff68 <_dtoa_r+0x5d0>
 800ff60:	4641      	mov	r1, r8
 800ff62:	4648      	mov	r0, r9
 800ff64:	f000 fbae 	bl	80106c4 <_Bfree>
 800ff68:	4629      	mov	r1, r5
 800ff6a:	4648      	mov	r0, r9
 800ff6c:	f000 fbaa 	bl	80106c4 <_Bfree>
 800ff70:	e7d0      	b.n	800ff14 <_dtoa_r+0x57c>
 800ff72:	f8cd 8010 	str.w	r8, [sp, #16]
 800ff76:	4633      	mov	r3, r6
 800ff78:	461e      	mov	r6, r3
 800ff7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff7e:	2a39      	cmp	r2, #57	@ 0x39
 800ff80:	d106      	bne.n	800ff90 <_dtoa_r+0x5f8>
 800ff82:	429f      	cmp	r7, r3
 800ff84:	d1f8      	bne.n	800ff78 <_dtoa_r+0x5e0>
 800ff86:	9a04      	ldr	r2, [sp, #16]
 800ff88:	3201      	adds	r2, #1
 800ff8a:	9204      	str	r2, [sp, #16]
 800ff8c:	2230      	movs	r2, #48	@ 0x30
 800ff8e:	703a      	strb	r2, [r7, #0]
 800ff90:	781a      	ldrb	r2, [r3, #0]
 800ff92:	3201      	adds	r2, #1
 800ff94:	701a      	strb	r2, [r3, #0]
 800ff96:	e7bd      	b.n	800ff14 <_dtoa_r+0x57c>
 800ff98:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ff9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa4:	f47f aeef 	bne.w	800fd86 <_dtoa_r+0x3ee>
 800ffa8:	e710      	b.n	800fdcc <_dtoa_r+0x434>
 800ffaa:	bf00      	nop
 800ffac:	08014238 	.word	0x08014238
 800ffb0:	08014210 	.word	0x08014210
 800ffb4:	9908      	ldr	r1, [sp, #32]
 800ffb6:	2900      	cmp	r1, #0
 800ffb8:	f000 80e3 	beq.w	8010182 <_dtoa_r+0x7ea>
 800ffbc:	9907      	ldr	r1, [sp, #28]
 800ffbe:	2901      	cmp	r1, #1
 800ffc0:	f300 80c8 	bgt.w	8010154 <_dtoa_r+0x7bc>
 800ffc4:	2d00      	cmp	r5, #0
 800ffc6:	f000 80c1 	beq.w	801014c <_dtoa_r+0x7b4>
 800ffca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ffce:	9e05      	ldr	r6, [sp, #20]
 800ffd0:	461c      	mov	r4, r3
 800ffd2:	9304      	str	r3, [sp, #16]
 800ffd4:	9b05      	ldr	r3, [sp, #20]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	9305      	str	r3, [sp, #20]
 800ffda:	9b06      	ldr	r3, [sp, #24]
 800ffdc:	2101      	movs	r1, #1
 800ffde:	4413      	add	r3, r2
 800ffe0:	4648      	mov	r0, r9
 800ffe2:	9306      	str	r3, [sp, #24]
 800ffe4:	f000 fc6c 	bl	80108c0 <__i2b>
 800ffe8:	9b04      	ldr	r3, [sp, #16]
 800ffea:	4605      	mov	r5, r0
 800ffec:	b166      	cbz	r6, 8010008 <_dtoa_r+0x670>
 800ffee:	9a06      	ldr	r2, [sp, #24]
 800fff0:	2a00      	cmp	r2, #0
 800fff2:	dd09      	ble.n	8010008 <_dtoa_r+0x670>
 800fff4:	42b2      	cmp	r2, r6
 800fff6:	9905      	ldr	r1, [sp, #20]
 800fff8:	bfa8      	it	ge
 800fffa:	4632      	movge	r2, r6
 800fffc:	1a89      	subs	r1, r1, r2
 800fffe:	9105      	str	r1, [sp, #20]
 8010000:	9906      	ldr	r1, [sp, #24]
 8010002:	1ab6      	subs	r6, r6, r2
 8010004:	1a8a      	subs	r2, r1, r2
 8010006:	9206      	str	r2, [sp, #24]
 8010008:	b1fb      	cbz	r3, 801004a <_dtoa_r+0x6b2>
 801000a:	9a08      	ldr	r2, [sp, #32]
 801000c:	2a00      	cmp	r2, #0
 801000e:	f000 80bc 	beq.w	801018a <_dtoa_r+0x7f2>
 8010012:	b19c      	cbz	r4, 801003c <_dtoa_r+0x6a4>
 8010014:	4629      	mov	r1, r5
 8010016:	4622      	mov	r2, r4
 8010018:	4648      	mov	r0, r9
 801001a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801001c:	f000 fd10 	bl	8010a40 <__pow5mult>
 8010020:	9a01      	ldr	r2, [sp, #4]
 8010022:	4601      	mov	r1, r0
 8010024:	4605      	mov	r5, r0
 8010026:	4648      	mov	r0, r9
 8010028:	f000 fc60 	bl	80108ec <__multiply>
 801002c:	9901      	ldr	r1, [sp, #4]
 801002e:	9004      	str	r0, [sp, #16]
 8010030:	4648      	mov	r0, r9
 8010032:	f000 fb47 	bl	80106c4 <_Bfree>
 8010036:	9a04      	ldr	r2, [sp, #16]
 8010038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801003a:	9201      	str	r2, [sp, #4]
 801003c:	1b1a      	subs	r2, r3, r4
 801003e:	d004      	beq.n	801004a <_dtoa_r+0x6b2>
 8010040:	9901      	ldr	r1, [sp, #4]
 8010042:	4648      	mov	r0, r9
 8010044:	f000 fcfc 	bl	8010a40 <__pow5mult>
 8010048:	9001      	str	r0, [sp, #4]
 801004a:	2101      	movs	r1, #1
 801004c:	4648      	mov	r0, r9
 801004e:	f000 fc37 	bl	80108c0 <__i2b>
 8010052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010054:	4604      	mov	r4, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	f000 81d0 	beq.w	80103fc <_dtoa_r+0xa64>
 801005c:	461a      	mov	r2, r3
 801005e:	4601      	mov	r1, r0
 8010060:	4648      	mov	r0, r9
 8010062:	f000 fced 	bl	8010a40 <__pow5mult>
 8010066:	9b07      	ldr	r3, [sp, #28]
 8010068:	2b01      	cmp	r3, #1
 801006a:	4604      	mov	r4, r0
 801006c:	f300 8095 	bgt.w	801019a <_dtoa_r+0x802>
 8010070:	9b02      	ldr	r3, [sp, #8]
 8010072:	2b00      	cmp	r3, #0
 8010074:	f040 808b 	bne.w	801018e <_dtoa_r+0x7f6>
 8010078:	9b03      	ldr	r3, [sp, #12]
 801007a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801007e:	2a00      	cmp	r2, #0
 8010080:	f040 8087 	bne.w	8010192 <_dtoa_r+0x7fa>
 8010084:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010088:	0d12      	lsrs	r2, r2, #20
 801008a:	0512      	lsls	r2, r2, #20
 801008c:	2a00      	cmp	r2, #0
 801008e:	f000 8082 	beq.w	8010196 <_dtoa_r+0x7fe>
 8010092:	9b05      	ldr	r3, [sp, #20]
 8010094:	3301      	adds	r3, #1
 8010096:	9305      	str	r3, [sp, #20]
 8010098:	9b06      	ldr	r3, [sp, #24]
 801009a:	3301      	adds	r3, #1
 801009c:	9306      	str	r3, [sp, #24]
 801009e:	2301      	movs	r3, #1
 80100a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 81af 	beq.w	8010408 <_dtoa_r+0xa70>
 80100aa:	6922      	ldr	r2, [r4, #16]
 80100ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80100b0:	6910      	ldr	r0, [r2, #16]
 80100b2:	f000 fbb9 	bl	8010828 <__hi0bits>
 80100b6:	f1c0 0020 	rsb	r0, r0, #32
 80100ba:	9b06      	ldr	r3, [sp, #24]
 80100bc:	4418      	add	r0, r3
 80100be:	f010 001f 	ands.w	r0, r0, #31
 80100c2:	d076      	beq.n	80101b2 <_dtoa_r+0x81a>
 80100c4:	f1c0 0220 	rsb	r2, r0, #32
 80100c8:	2a04      	cmp	r2, #4
 80100ca:	dd69      	ble.n	80101a0 <_dtoa_r+0x808>
 80100cc:	9b05      	ldr	r3, [sp, #20]
 80100ce:	f1c0 001c 	rsb	r0, r0, #28
 80100d2:	4403      	add	r3, r0
 80100d4:	9305      	str	r3, [sp, #20]
 80100d6:	9b06      	ldr	r3, [sp, #24]
 80100d8:	4406      	add	r6, r0
 80100da:	4403      	add	r3, r0
 80100dc:	9306      	str	r3, [sp, #24]
 80100de:	9b05      	ldr	r3, [sp, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	dd05      	ble.n	80100f0 <_dtoa_r+0x758>
 80100e4:	9901      	ldr	r1, [sp, #4]
 80100e6:	461a      	mov	r2, r3
 80100e8:	4648      	mov	r0, r9
 80100ea:	f000 fd03 	bl	8010af4 <__lshift>
 80100ee:	9001      	str	r0, [sp, #4]
 80100f0:	9b06      	ldr	r3, [sp, #24]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	dd05      	ble.n	8010102 <_dtoa_r+0x76a>
 80100f6:	4621      	mov	r1, r4
 80100f8:	461a      	mov	r2, r3
 80100fa:	4648      	mov	r0, r9
 80100fc:	f000 fcfa 	bl	8010af4 <__lshift>
 8010100:	4604      	mov	r4, r0
 8010102:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010104:	2b00      	cmp	r3, #0
 8010106:	d056      	beq.n	80101b6 <_dtoa_r+0x81e>
 8010108:	9801      	ldr	r0, [sp, #4]
 801010a:	4621      	mov	r1, r4
 801010c:	f000 fd5e 	bl	8010bcc <__mcmp>
 8010110:	2800      	cmp	r0, #0
 8010112:	da50      	bge.n	80101b6 <_dtoa_r+0x81e>
 8010114:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8010118:	9304      	str	r3, [sp, #16]
 801011a:	9901      	ldr	r1, [sp, #4]
 801011c:	2300      	movs	r3, #0
 801011e:	220a      	movs	r2, #10
 8010120:	4648      	mov	r0, r9
 8010122:	f000 faf1 	bl	8010708 <__multadd>
 8010126:	9b08      	ldr	r3, [sp, #32]
 8010128:	9001      	str	r0, [sp, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	f000 816e 	beq.w	801040c <_dtoa_r+0xa74>
 8010130:	4629      	mov	r1, r5
 8010132:	2300      	movs	r3, #0
 8010134:	220a      	movs	r2, #10
 8010136:	4648      	mov	r0, r9
 8010138:	f000 fae6 	bl	8010708 <__multadd>
 801013c:	f1bb 0f00 	cmp.w	fp, #0
 8010140:	4605      	mov	r5, r0
 8010142:	dc64      	bgt.n	801020e <_dtoa_r+0x876>
 8010144:	9b07      	ldr	r3, [sp, #28]
 8010146:	2b02      	cmp	r3, #2
 8010148:	dc3e      	bgt.n	80101c8 <_dtoa_r+0x830>
 801014a:	e060      	b.n	801020e <_dtoa_r+0x876>
 801014c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801014e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010152:	e73c      	b.n	800ffce <_dtoa_r+0x636>
 8010154:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8010158:	42a3      	cmp	r3, r4
 801015a:	bfbf      	itttt	lt
 801015c:	1ae2      	sublt	r2, r4, r3
 801015e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010160:	189b      	addlt	r3, r3, r2
 8010162:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010164:	bfae      	itee	ge
 8010166:	1b1c      	subge	r4, r3, r4
 8010168:	4623      	movlt	r3, r4
 801016a:	2400      	movlt	r4, #0
 801016c:	f1ba 0f00 	cmp.w	sl, #0
 8010170:	bfb5      	itete	lt
 8010172:	9a05      	ldrlt	r2, [sp, #20]
 8010174:	9e05      	ldrge	r6, [sp, #20]
 8010176:	eba2 060a 	sublt.w	r6, r2, sl
 801017a:	4652      	movge	r2, sl
 801017c:	bfb8      	it	lt
 801017e:	2200      	movlt	r2, #0
 8010180:	e727      	b.n	800ffd2 <_dtoa_r+0x63a>
 8010182:	9e05      	ldr	r6, [sp, #20]
 8010184:	9d08      	ldr	r5, [sp, #32]
 8010186:	461c      	mov	r4, r3
 8010188:	e730      	b.n	800ffec <_dtoa_r+0x654>
 801018a:	461a      	mov	r2, r3
 801018c:	e758      	b.n	8010040 <_dtoa_r+0x6a8>
 801018e:	2300      	movs	r3, #0
 8010190:	e786      	b.n	80100a0 <_dtoa_r+0x708>
 8010192:	9b02      	ldr	r3, [sp, #8]
 8010194:	e784      	b.n	80100a0 <_dtoa_r+0x708>
 8010196:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010198:	e783      	b.n	80100a2 <_dtoa_r+0x70a>
 801019a:	2300      	movs	r3, #0
 801019c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801019e:	e784      	b.n	80100aa <_dtoa_r+0x712>
 80101a0:	d09d      	beq.n	80100de <_dtoa_r+0x746>
 80101a2:	9b05      	ldr	r3, [sp, #20]
 80101a4:	321c      	adds	r2, #28
 80101a6:	4413      	add	r3, r2
 80101a8:	9305      	str	r3, [sp, #20]
 80101aa:	9b06      	ldr	r3, [sp, #24]
 80101ac:	4416      	add	r6, r2
 80101ae:	4413      	add	r3, r2
 80101b0:	e794      	b.n	80100dc <_dtoa_r+0x744>
 80101b2:	4602      	mov	r2, r0
 80101b4:	e7f5      	b.n	80101a2 <_dtoa_r+0x80a>
 80101b6:	f1ba 0f00 	cmp.w	sl, #0
 80101ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80101be:	46d3      	mov	fp, sl
 80101c0:	dc21      	bgt.n	8010206 <_dtoa_r+0x86e>
 80101c2:	9b07      	ldr	r3, [sp, #28]
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	dd1e      	ble.n	8010206 <_dtoa_r+0x86e>
 80101c8:	f1bb 0f00 	cmp.w	fp, #0
 80101cc:	f47f aeb7 	bne.w	800ff3e <_dtoa_r+0x5a6>
 80101d0:	4621      	mov	r1, r4
 80101d2:	465b      	mov	r3, fp
 80101d4:	2205      	movs	r2, #5
 80101d6:	4648      	mov	r0, r9
 80101d8:	f000 fa96 	bl	8010708 <__multadd>
 80101dc:	4601      	mov	r1, r0
 80101de:	4604      	mov	r4, r0
 80101e0:	9801      	ldr	r0, [sp, #4]
 80101e2:	f000 fcf3 	bl	8010bcc <__mcmp>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	f77f aea9 	ble.w	800ff3e <_dtoa_r+0x5a6>
 80101ec:	463e      	mov	r6, r7
 80101ee:	2331      	movs	r3, #49	@ 0x31
 80101f0:	f806 3b01 	strb.w	r3, [r6], #1
 80101f4:	9b04      	ldr	r3, [sp, #16]
 80101f6:	3301      	adds	r3, #1
 80101f8:	9304      	str	r3, [sp, #16]
 80101fa:	e6a4      	b.n	800ff46 <_dtoa_r+0x5ae>
 80101fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8010200:	4654      	mov	r4, sl
 8010202:	4625      	mov	r5, r4
 8010204:	e7f2      	b.n	80101ec <_dtoa_r+0x854>
 8010206:	9b08      	ldr	r3, [sp, #32]
 8010208:	2b00      	cmp	r3, #0
 801020a:	f000 8103 	beq.w	8010414 <_dtoa_r+0xa7c>
 801020e:	2e00      	cmp	r6, #0
 8010210:	dd05      	ble.n	801021e <_dtoa_r+0x886>
 8010212:	4629      	mov	r1, r5
 8010214:	4632      	mov	r2, r6
 8010216:	4648      	mov	r0, r9
 8010218:	f000 fc6c 	bl	8010af4 <__lshift>
 801021c:	4605      	mov	r5, r0
 801021e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010220:	2b00      	cmp	r3, #0
 8010222:	d058      	beq.n	80102d6 <_dtoa_r+0x93e>
 8010224:	6869      	ldr	r1, [r5, #4]
 8010226:	4648      	mov	r0, r9
 8010228:	f000 fa0c 	bl	8010644 <_Balloc>
 801022c:	4606      	mov	r6, r0
 801022e:	b928      	cbnz	r0, 801023c <_dtoa_r+0x8a4>
 8010230:	4b82      	ldr	r3, [pc, #520]	@ (801043c <_dtoa_r+0xaa4>)
 8010232:	4602      	mov	r2, r0
 8010234:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010238:	f7ff bbc7 	b.w	800f9ca <_dtoa_r+0x32>
 801023c:	692a      	ldr	r2, [r5, #16]
 801023e:	3202      	adds	r2, #2
 8010240:	0092      	lsls	r2, r2, #2
 8010242:	f105 010c 	add.w	r1, r5, #12
 8010246:	300c      	adds	r0, #12
 8010248:	f7ff fb09 	bl	800f85e <memcpy>
 801024c:	2201      	movs	r2, #1
 801024e:	4631      	mov	r1, r6
 8010250:	4648      	mov	r0, r9
 8010252:	f000 fc4f 	bl	8010af4 <__lshift>
 8010256:	1c7b      	adds	r3, r7, #1
 8010258:	9305      	str	r3, [sp, #20]
 801025a:	eb07 030b 	add.w	r3, r7, fp
 801025e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010260:	9b02      	ldr	r3, [sp, #8]
 8010262:	f003 0301 	and.w	r3, r3, #1
 8010266:	46a8      	mov	r8, r5
 8010268:	9308      	str	r3, [sp, #32]
 801026a:	4605      	mov	r5, r0
 801026c:	9b05      	ldr	r3, [sp, #20]
 801026e:	9801      	ldr	r0, [sp, #4]
 8010270:	4621      	mov	r1, r4
 8010272:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8010276:	f7ff fb07 	bl	800f888 <quorem>
 801027a:	4641      	mov	r1, r8
 801027c:	9002      	str	r0, [sp, #8]
 801027e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010282:	9801      	ldr	r0, [sp, #4]
 8010284:	f000 fca2 	bl	8010bcc <__mcmp>
 8010288:	462a      	mov	r2, r5
 801028a:	9006      	str	r0, [sp, #24]
 801028c:	4621      	mov	r1, r4
 801028e:	4648      	mov	r0, r9
 8010290:	f000 fcb8 	bl	8010c04 <__mdiff>
 8010294:	68c2      	ldr	r2, [r0, #12]
 8010296:	4606      	mov	r6, r0
 8010298:	b9fa      	cbnz	r2, 80102da <_dtoa_r+0x942>
 801029a:	4601      	mov	r1, r0
 801029c:	9801      	ldr	r0, [sp, #4]
 801029e:	f000 fc95 	bl	8010bcc <__mcmp>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4631      	mov	r1, r6
 80102a6:	4648      	mov	r0, r9
 80102a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80102aa:	f000 fa0b 	bl	80106c4 <_Bfree>
 80102ae:	9b07      	ldr	r3, [sp, #28]
 80102b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102b2:	9e05      	ldr	r6, [sp, #20]
 80102b4:	ea43 0102 	orr.w	r1, r3, r2
 80102b8:	9b08      	ldr	r3, [sp, #32]
 80102ba:	4319      	orrs	r1, r3
 80102bc:	d10f      	bne.n	80102de <_dtoa_r+0x946>
 80102be:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80102c2:	d028      	beq.n	8010316 <_dtoa_r+0x97e>
 80102c4:	9b06      	ldr	r3, [sp, #24]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	dd02      	ble.n	80102d0 <_dtoa_r+0x938>
 80102ca:	9b02      	ldr	r3, [sp, #8]
 80102cc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80102d0:	f88b a000 	strb.w	sl, [fp]
 80102d4:	e639      	b.n	800ff4a <_dtoa_r+0x5b2>
 80102d6:	4628      	mov	r0, r5
 80102d8:	e7bd      	b.n	8010256 <_dtoa_r+0x8be>
 80102da:	2201      	movs	r2, #1
 80102dc:	e7e2      	b.n	80102a4 <_dtoa_r+0x90c>
 80102de:	9b06      	ldr	r3, [sp, #24]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	db04      	blt.n	80102ee <_dtoa_r+0x956>
 80102e4:	9907      	ldr	r1, [sp, #28]
 80102e6:	430b      	orrs	r3, r1
 80102e8:	9908      	ldr	r1, [sp, #32]
 80102ea:	430b      	orrs	r3, r1
 80102ec:	d120      	bne.n	8010330 <_dtoa_r+0x998>
 80102ee:	2a00      	cmp	r2, #0
 80102f0:	ddee      	ble.n	80102d0 <_dtoa_r+0x938>
 80102f2:	9901      	ldr	r1, [sp, #4]
 80102f4:	2201      	movs	r2, #1
 80102f6:	4648      	mov	r0, r9
 80102f8:	f000 fbfc 	bl	8010af4 <__lshift>
 80102fc:	4621      	mov	r1, r4
 80102fe:	9001      	str	r0, [sp, #4]
 8010300:	f000 fc64 	bl	8010bcc <__mcmp>
 8010304:	2800      	cmp	r0, #0
 8010306:	dc03      	bgt.n	8010310 <_dtoa_r+0x978>
 8010308:	d1e2      	bne.n	80102d0 <_dtoa_r+0x938>
 801030a:	f01a 0f01 	tst.w	sl, #1
 801030e:	d0df      	beq.n	80102d0 <_dtoa_r+0x938>
 8010310:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010314:	d1d9      	bne.n	80102ca <_dtoa_r+0x932>
 8010316:	2339      	movs	r3, #57	@ 0x39
 8010318:	f88b 3000 	strb.w	r3, [fp]
 801031c:	4633      	mov	r3, r6
 801031e:	461e      	mov	r6, r3
 8010320:	3b01      	subs	r3, #1
 8010322:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010326:	2a39      	cmp	r2, #57	@ 0x39
 8010328:	d053      	beq.n	80103d2 <_dtoa_r+0xa3a>
 801032a:	3201      	adds	r2, #1
 801032c:	701a      	strb	r2, [r3, #0]
 801032e:	e60c      	b.n	800ff4a <_dtoa_r+0x5b2>
 8010330:	2a00      	cmp	r2, #0
 8010332:	dd07      	ble.n	8010344 <_dtoa_r+0x9ac>
 8010334:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010338:	d0ed      	beq.n	8010316 <_dtoa_r+0x97e>
 801033a:	f10a 0301 	add.w	r3, sl, #1
 801033e:	f88b 3000 	strb.w	r3, [fp]
 8010342:	e602      	b.n	800ff4a <_dtoa_r+0x5b2>
 8010344:	9b05      	ldr	r3, [sp, #20]
 8010346:	9a05      	ldr	r2, [sp, #20]
 8010348:	f803 ac01 	strb.w	sl, [r3, #-1]
 801034c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801034e:	4293      	cmp	r3, r2
 8010350:	d029      	beq.n	80103a6 <_dtoa_r+0xa0e>
 8010352:	9901      	ldr	r1, [sp, #4]
 8010354:	2300      	movs	r3, #0
 8010356:	220a      	movs	r2, #10
 8010358:	4648      	mov	r0, r9
 801035a:	f000 f9d5 	bl	8010708 <__multadd>
 801035e:	45a8      	cmp	r8, r5
 8010360:	9001      	str	r0, [sp, #4]
 8010362:	f04f 0300 	mov.w	r3, #0
 8010366:	f04f 020a 	mov.w	r2, #10
 801036a:	4641      	mov	r1, r8
 801036c:	4648      	mov	r0, r9
 801036e:	d107      	bne.n	8010380 <_dtoa_r+0x9e8>
 8010370:	f000 f9ca 	bl	8010708 <__multadd>
 8010374:	4680      	mov	r8, r0
 8010376:	4605      	mov	r5, r0
 8010378:	9b05      	ldr	r3, [sp, #20]
 801037a:	3301      	adds	r3, #1
 801037c:	9305      	str	r3, [sp, #20]
 801037e:	e775      	b.n	801026c <_dtoa_r+0x8d4>
 8010380:	f000 f9c2 	bl	8010708 <__multadd>
 8010384:	4629      	mov	r1, r5
 8010386:	4680      	mov	r8, r0
 8010388:	2300      	movs	r3, #0
 801038a:	220a      	movs	r2, #10
 801038c:	4648      	mov	r0, r9
 801038e:	f000 f9bb 	bl	8010708 <__multadd>
 8010392:	4605      	mov	r5, r0
 8010394:	e7f0      	b.n	8010378 <_dtoa_r+0x9e0>
 8010396:	f1bb 0f00 	cmp.w	fp, #0
 801039a:	bfcc      	ite	gt
 801039c:	465e      	movgt	r6, fp
 801039e:	2601      	movle	r6, #1
 80103a0:	443e      	add	r6, r7
 80103a2:	f04f 0800 	mov.w	r8, #0
 80103a6:	9901      	ldr	r1, [sp, #4]
 80103a8:	2201      	movs	r2, #1
 80103aa:	4648      	mov	r0, r9
 80103ac:	f000 fba2 	bl	8010af4 <__lshift>
 80103b0:	4621      	mov	r1, r4
 80103b2:	9001      	str	r0, [sp, #4]
 80103b4:	f000 fc0a 	bl	8010bcc <__mcmp>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	dcaf      	bgt.n	801031c <_dtoa_r+0x984>
 80103bc:	d102      	bne.n	80103c4 <_dtoa_r+0xa2c>
 80103be:	f01a 0f01 	tst.w	sl, #1
 80103c2:	d1ab      	bne.n	801031c <_dtoa_r+0x984>
 80103c4:	4633      	mov	r3, r6
 80103c6:	461e      	mov	r6, r3
 80103c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103cc:	2a30      	cmp	r2, #48	@ 0x30
 80103ce:	d0fa      	beq.n	80103c6 <_dtoa_r+0xa2e>
 80103d0:	e5bb      	b.n	800ff4a <_dtoa_r+0x5b2>
 80103d2:	429f      	cmp	r7, r3
 80103d4:	d1a3      	bne.n	801031e <_dtoa_r+0x986>
 80103d6:	9b04      	ldr	r3, [sp, #16]
 80103d8:	3301      	adds	r3, #1
 80103da:	9304      	str	r3, [sp, #16]
 80103dc:	2331      	movs	r3, #49	@ 0x31
 80103de:	703b      	strb	r3, [r7, #0]
 80103e0:	e5b3      	b.n	800ff4a <_dtoa_r+0x5b2>
 80103e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80103e4:	4f16      	ldr	r7, [pc, #88]	@ (8010440 <_dtoa_r+0xaa8>)
 80103e6:	b11b      	cbz	r3, 80103f0 <_dtoa_r+0xa58>
 80103e8:	f107 0308 	add.w	r3, r7, #8
 80103ec:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	4638      	mov	r0, r7
 80103f2:	b011      	add	sp, #68	@ 0x44
 80103f4:	ecbd 8b02 	vpop	{d8}
 80103f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fc:	9b07      	ldr	r3, [sp, #28]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	f77f ae36 	ble.w	8010070 <_dtoa_r+0x6d8>
 8010404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010406:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010408:	2001      	movs	r0, #1
 801040a:	e656      	b.n	80100ba <_dtoa_r+0x722>
 801040c:	f1bb 0f00 	cmp.w	fp, #0
 8010410:	f77f aed7 	ble.w	80101c2 <_dtoa_r+0x82a>
 8010414:	463e      	mov	r6, r7
 8010416:	9801      	ldr	r0, [sp, #4]
 8010418:	4621      	mov	r1, r4
 801041a:	f7ff fa35 	bl	800f888 <quorem>
 801041e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010422:	f806 ab01 	strb.w	sl, [r6], #1
 8010426:	1bf2      	subs	r2, r6, r7
 8010428:	4593      	cmp	fp, r2
 801042a:	ddb4      	ble.n	8010396 <_dtoa_r+0x9fe>
 801042c:	9901      	ldr	r1, [sp, #4]
 801042e:	2300      	movs	r3, #0
 8010430:	220a      	movs	r2, #10
 8010432:	4648      	mov	r0, r9
 8010434:	f000 f968 	bl	8010708 <__multadd>
 8010438:	9001      	str	r0, [sp, #4]
 801043a:	e7ec      	b.n	8010416 <_dtoa_r+0xa7e>
 801043c:	08014195 	.word	0x08014195
 8010440:	08014119 	.word	0x08014119

08010444 <_free_r>:
 8010444:	b538      	push	{r3, r4, r5, lr}
 8010446:	4605      	mov	r5, r0
 8010448:	2900      	cmp	r1, #0
 801044a:	d041      	beq.n	80104d0 <_free_r+0x8c>
 801044c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010450:	1f0c      	subs	r4, r1, #4
 8010452:	2b00      	cmp	r3, #0
 8010454:	bfb8      	it	lt
 8010456:	18e4      	addlt	r4, r4, r3
 8010458:	f000 f8e8 	bl	801062c <__malloc_lock>
 801045c:	4a1d      	ldr	r2, [pc, #116]	@ (80104d4 <_free_r+0x90>)
 801045e:	6813      	ldr	r3, [r2, #0]
 8010460:	b933      	cbnz	r3, 8010470 <_free_r+0x2c>
 8010462:	6063      	str	r3, [r4, #4]
 8010464:	6014      	str	r4, [r2, #0]
 8010466:	4628      	mov	r0, r5
 8010468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801046c:	f000 b8e4 	b.w	8010638 <__malloc_unlock>
 8010470:	42a3      	cmp	r3, r4
 8010472:	d908      	bls.n	8010486 <_free_r+0x42>
 8010474:	6820      	ldr	r0, [r4, #0]
 8010476:	1821      	adds	r1, r4, r0
 8010478:	428b      	cmp	r3, r1
 801047a:	bf01      	itttt	eq
 801047c:	6819      	ldreq	r1, [r3, #0]
 801047e:	685b      	ldreq	r3, [r3, #4]
 8010480:	1809      	addeq	r1, r1, r0
 8010482:	6021      	streq	r1, [r4, #0]
 8010484:	e7ed      	b.n	8010462 <_free_r+0x1e>
 8010486:	461a      	mov	r2, r3
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	b10b      	cbz	r3, 8010490 <_free_r+0x4c>
 801048c:	42a3      	cmp	r3, r4
 801048e:	d9fa      	bls.n	8010486 <_free_r+0x42>
 8010490:	6811      	ldr	r1, [r2, #0]
 8010492:	1850      	adds	r0, r2, r1
 8010494:	42a0      	cmp	r0, r4
 8010496:	d10b      	bne.n	80104b0 <_free_r+0x6c>
 8010498:	6820      	ldr	r0, [r4, #0]
 801049a:	4401      	add	r1, r0
 801049c:	1850      	adds	r0, r2, r1
 801049e:	4283      	cmp	r3, r0
 80104a0:	6011      	str	r1, [r2, #0]
 80104a2:	d1e0      	bne.n	8010466 <_free_r+0x22>
 80104a4:	6818      	ldr	r0, [r3, #0]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	6053      	str	r3, [r2, #4]
 80104aa:	4408      	add	r0, r1
 80104ac:	6010      	str	r0, [r2, #0]
 80104ae:	e7da      	b.n	8010466 <_free_r+0x22>
 80104b0:	d902      	bls.n	80104b8 <_free_r+0x74>
 80104b2:	230c      	movs	r3, #12
 80104b4:	602b      	str	r3, [r5, #0]
 80104b6:	e7d6      	b.n	8010466 <_free_r+0x22>
 80104b8:	6820      	ldr	r0, [r4, #0]
 80104ba:	1821      	adds	r1, r4, r0
 80104bc:	428b      	cmp	r3, r1
 80104be:	bf04      	itt	eq
 80104c0:	6819      	ldreq	r1, [r3, #0]
 80104c2:	685b      	ldreq	r3, [r3, #4]
 80104c4:	6063      	str	r3, [r4, #4]
 80104c6:	bf04      	itt	eq
 80104c8:	1809      	addeq	r1, r1, r0
 80104ca:	6021      	streq	r1, [r4, #0]
 80104cc:	6054      	str	r4, [r2, #4]
 80104ce:	e7ca      	b.n	8010466 <_free_r+0x22>
 80104d0:	bd38      	pop	{r3, r4, r5, pc}
 80104d2:	bf00      	nop
 80104d4:	24005824 	.word	0x24005824

080104d8 <malloc>:
 80104d8:	4b02      	ldr	r3, [pc, #8]	@ (80104e4 <malloc+0xc>)
 80104da:	4601      	mov	r1, r0
 80104dc:	6818      	ldr	r0, [r3, #0]
 80104de:	f000 b825 	b.w	801052c <_malloc_r>
 80104e2:	bf00      	nop
 80104e4:	24000028 	.word	0x24000028

080104e8 <sbrk_aligned>:
 80104e8:	b570      	push	{r4, r5, r6, lr}
 80104ea:	4e0f      	ldr	r6, [pc, #60]	@ (8010528 <sbrk_aligned+0x40>)
 80104ec:	460c      	mov	r4, r1
 80104ee:	6831      	ldr	r1, [r6, #0]
 80104f0:	4605      	mov	r5, r0
 80104f2:	b911      	cbnz	r1, 80104fa <sbrk_aligned+0x12>
 80104f4:	f001 ff7e 	bl	80123f4 <_sbrk_r>
 80104f8:	6030      	str	r0, [r6, #0]
 80104fa:	4621      	mov	r1, r4
 80104fc:	4628      	mov	r0, r5
 80104fe:	f001 ff79 	bl	80123f4 <_sbrk_r>
 8010502:	1c43      	adds	r3, r0, #1
 8010504:	d103      	bne.n	801050e <sbrk_aligned+0x26>
 8010506:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801050a:	4620      	mov	r0, r4
 801050c:	bd70      	pop	{r4, r5, r6, pc}
 801050e:	1cc4      	adds	r4, r0, #3
 8010510:	f024 0403 	bic.w	r4, r4, #3
 8010514:	42a0      	cmp	r0, r4
 8010516:	d0f8      	beq.n	801050a <sbrk_aligned+0x22>
 8010518:	1a21      	subs	r1, r4, r0
 801051a:	4628      	mov	r0, r5
 801051c:	f001 ff6a 	bl	80123f4 <_sbrk_r>
 8010520:	3001      	adds	r0, #1
 8010522:	d1f2      	bne.n	801050a <sbrk_aligned+0x22>
 8010524:	e7ef      	b.n	8010506 <sbrk_aligned+0x1e>
 8010526:	bf00      	nop
 8010528:	24005820 	.word	0x24005820

0801052c <_malloc_r>:
 801052c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010530:	1ccd      	adds	r5, r1, #3
 8010532:	f025 0503 	bic.w	r5, r5, #3
 8010536:	3508      	adds	r5, #8
 8010538:	2d0c      	cmp	r5, #12
 801053a:	bf38      	it	cc
 801053c:	250c      	movcc	r5, #12
 801053e:	2d00      	cmp	r5, #0
 8010540:	4606      	mov	r6, r0
 8010542:	db01      	blt.n	8010548 <_malloc_r+0x1c>
 8010544:	42a9      	cmp	r1, r5
 8010546:	d904      	bls.n	8010552 <_malloc_r+0x26>
 8010548:	230c      	movs	r3, #12
 801054a:	6033      	str	r3, [r6, #0]
 801054c:	2000      	movs	r0, #0
 801054e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010628 <_malloc_r+0xfc>
 8010556:	f000 f869 	bl	801062c <__malloc_lock>
 801055a:	f8d8 3000 	ldr.w	r3, [r8]
 801055e:	461c      	mov	r4, r3
 8010560:	bb44      	cbnz	r4, 80105b4 <_malloc_r+0x88>
 8010562:	4629      	mov	r1, r5
 8010564:	4630      	mov	r0, r6
 8010566:	f7ff ffbf 	bl	80104e8 <sbrk_aligned>
 801056a:	1c43      	adds	r3, r0, #1
 801056c:	4604      	mov	r4, r0
 801056e:	d158      	bne.n	8010622 <_malloc_r+0xf6>
 8010570:	f8d8 4000 	ldr.w	r4, [r8]
 8010574:	4627      	mov	r7, r4
 8010576:	2f00      	cmp	r7, #0
 8010578:	d143      	bne.n	8010602 <_malloc_r+0xd6>
 801057a:	2c00      	cmp	r4, #0
 801057c:	d04b      	beq.n	8010616 <_malloc_r+0xea>
 801057e:	6823      	ldr	r3, [r4, #0]
 8010580:	4639      	mov	r1, r7
 8010582:	4630      	mov	r0, r6
 8010584:	eb04 0903 	add.w	r9, r4, r3
 8010588:	f001 ff34 	bl	80123f4 <_sbrk_r>
 801058c:	4581      	cmp	r9, r0
 801058e:	d142      	bne.n	8010616 <_malloc_r+0xea>
 8010590:	6821      	ldr	r1, [r4, #0]
 8010592:	1a6d      	subs	r5, r5, r1
 8010594:	4629      	mov	r1, r5
 8010596:	4630      	mov	r0, r6
 8010598:	f7ff ffa6 	bl	80104e8 <sbrk_aligned>
 801059c:	3001      	adds	r0, #1
 801059e:	d03a      	beq.n	8010616 <_malloc_r+0xea>
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	442b      	add	r3, r5
 80105a4:	6023      	str	r3, [r4, #0]
 80105a6:	f8d8 3000 	ldr.w	r3, [r8]
 80105aa:	685a      	ldr	r2, [r3, #4]
 80105ac:	bb62      	cbnz	r2, 8010608 <_malloc_r+0xdc>
 80105ae:	f8c8 7000 	str.w	r7, [r8]
 80105b2:	e00f      	b.n	80105d4 <_malloc_r+0xa8>
 80105b4:	6822      	ldr	r2, [r4, #0]
 80105b6:	1b52      	subs	r2, r2, r5
 80105b8:	d420      	bmi.n	80105fc <_malloc_r+0xd0>
 80105ba:	2a0b      	cmp	r2, #11
 80105bc:	d917      	bls.n	80105ee <_malloc_r+0xc2>
 80105be:	1961      	adds	r1, r4, r5
 80105c0:	42a3      	cmp	r3, r4
 80105c2:	6025      	str	r5, [r4, #0]
 80105c4:	bf18      	it	ne
 80105c6:	6059      	strne	r1, [r3, #4]
 80105c8:	6863      	ldr	r3, [r4, #4]
 80105ca:	bf08      	it	eq
 80105cc:	f8c8 1000 	streq.w	r1, [r8]
 80105d0:	5162      	str	r2, [r4, r5]
 80105d2:	604b      	str	r3, [r1, #4]
 80105d4:	4630      	mov	r0, r6
 80105d6:	f000 f82f 	bl	8010638 <__malloc_unlock>
 80105da:	f104 000b 	add.w	r0, r4, #11
 80105de:	1d23      	adds	r3, r4, #4
 80105e0:	f020 0007 	bic.w	r0, r0, #7
 80105e4:	1ac2      	subs	r2, r0, r3
 80105e6:	bf1c      	itt	ne
 80105e8:	1a1b      	subne	r3, r3, r0
 80105ea:	50a3      	strne	r3, [r4, r2]
 80105ec:	e7af      	b.n	801054e <_malloc_r+0x22>
 80105ee:	6862      	ldr	r2, [r4, #4]
 80105f0:	42a3      	cmp	r3, r4
 80105f2:	bf0c      	ite	eq
 80105f4:	f8c8 2000 	streq.w	r2, [r8]
 80105f8:	605a      	strne	r2, [r3, #4]
 80105fa:	e7eb      	b.n	80105d4 <_malloc_r+0xa8>
 80105fc:	4623      	mov	r3, r4
 80105fe:	6864      	ldr	r4, [r4, #4]
 8010600:	e7ae      	b.n	8010560 <_malloc_r+0x34>
 8010602:	463c      	mov	r4, r7
 8010604:	687f      	ldr	r7, [r7, #4]
 8010606:	e7b6      	b.n	8010576 <_malloc_r+0x4a>
 8010608:	461a      	mov	r2, r3
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	42a3      	cmp	r3, r4
 801060e:	d1fb      	bne.n	8010608 <_malloc_r+0xdc>
 8010610:	2300      	movs	r3, #0
 8010612:	6053      	str	r3, [r2, #4]
 8010614:	e7de      	b.n	80105d4 <_malloc_r+0xa8>
 8010616:	230c      	movs	r3, #12
 8010618:	6033      	str	r3, [r6, #0]
 801061a:	4630      	mov	r0, r6
 801061c:	f000 f80c 	bl	8010638 <__malloc_unlock>
 8010620:	e794      	b.n	801054c <_malloc_r+0x20>
 8010622:	6005      	str	r5, [r0, #0]
 8010624:	e7d6      	b.n	80105d4 <_malloc_r+0xa8>
 8010626:	bf00      	nop
 8010628:	24005824 	.word	0x24005824

0801062c <__malloc_lock>:
 801062c:	4801      	ldr	r0, [pc, #4]	@ (8010634 <__malloc_lock+0x8>)
 801062e:	f7ff b914 	b.w	800f85a <__retarget_lock_acquire_recursive>
 8010632:	bf00      	nop
 8010634:	2400581c 	.word	0x2400581c

08010638 <__malloc_unlock>:
 8010638:	4801      	ldr	r0, [pc, #4]	@ (8010640 <__malloc_unlock+0x8>)
 801063a:	f7ff b90f 	b.w	800f85c <__retarget_lock_release_recursive>
 801063e:	bf00      	nop
 8010640:	2400581c 	.word	0x2400581c

08010644 <_Balloc>:
 8010644:	b570      	push	{r4, r5, r6, lr}
 8010646:	69c6      	ldr	r6, [r0, #28]
 8010648:	4604      	mov	r4, r0
 801064a:	460d      	mov	r5, r1
 801064c:	b976      	cbnz	r6, 801066c <_Balloc+0x28>
 801064e:	2010      	movs	r0, #16
 8010650:	f7ff ff42 	bl	80104d8 <malloc>
 8010654:	4602      	mov	r2, r0
 8010656:	61e0      	str	r0, [r4, #28]
 8010658:	b920      	cbnz	r0, 8010664 <_Balloc+0x20>
 801065a:	4b18      	ldr	r3, [pc, #96]	@ (80106bc <_Balloc+0x78>)
 801065c:	4818      	ldr	r0, [pc, #96]	@ (80106c0 <_Balloc+0x7c>)
 801065e:	216b      	movs	r1, #107	@ 0x6b
 8010660:	f001 fee2 	bl	8012428 <__assert_func>
 8010664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010668:	6006      	str	r6, [r0, #0]
 801066a:	60c6      	str	r6, [r0, #12]
 801066c:	69e6      	ldr	r6, [r4, #28]
 801066e:	68f3      	ldr	r3, [r6, #12]
 8010670:	b183      	cbz	r3, 8010694 <_Balloc+0x50>
 8010672:	69e3      	ldr	r3, [r4, #28]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801067a:	b9b8      	cbnz	r0, 80106ac <_Balloc+0x68>
 801067c:	2101      	movs	r1, #1
 801067e:	fa01 f605 	lsl.w	r6, r1, r5
 8010682:	1d72      	adds	r2, r6, #5
 8010684:	0092      	lsls	r2, r2, #2
 8010686:	4620      	mov	r0, r4
 8010688:	f001 feec 	bl	8012464 <_calloc_r>
 801068c:	b160      	cbz	r0, 80106a8 <_Balloc+0x64>
 801068e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010692:	e00e      	b.n	80106b2 <_Balloc+0x6e>
 8010694:	2221      	movs	r2, #33	@ 0x21
 8010696:	2104      	movs	r1, #4
 8010698:	4620      	mov	r0, r4
 801069a:	f001 fee3 	bl	8012464 <_calloc_r>
 801069e:	69e3      	ldr	r3, [r4, #28]
 80106a0:	60f0      	str	r0, [r6, #12]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1e4      	bne.n	8010672 <_Balloc+0x2e>
 80106a8:	2000      	movs	r0, #0
 80106aa:	bd70      	pop	{r4, r5, r6, pc}
 80106ac:	6802      	ldr	r2, [r0, #0]
 80106ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106b2:	2300      	movs	r3, #0
 80106b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106b8:	e7f7      	b.n	80106aa <_Balloc+0x66>
 80106ba:	bf00      	nop
 80106bc:	08014126 	.word	0x08014126
 80106c0:	080141a6 	.word	0x080141a6

080106c4 <_Bfree>:
 80106c4:	b570      	push	{r4, r5, r6, lr}
 80106c6:	69c6      	ldr	r6, [r0, #28]
 80106c8:	4605      	mov	r5, r0
 80106ca:	460c      	mov	r4, r1
 80106cc:	b976      	cbnz	r6, 80106ec <_Bfree+0x28>
 80106ce:	2010      	movs	r0, #16
 80106d0:	f7ff ff02 	bl	80104d8 <malloc>
 80106d4:	4602      	mov	r2, r0
 80106d6:	61e8      	str	r0, [r5, #28]
 80106d8:	b920      	cbnz	r0, 80106e4 <_Bfree+0x20>
 80106da:	4b09      	ldr	r3, [pc, #36]	@ (8010700 <_Bfree+0x3c>)
 80106dc:	4809      	ldr	r0, [pc, #36]	@ (8010704 <_Bfree+0x40>)
 80106de:	218f      	movs	r1, #143	@ 0x8f
 80106e0:	f001 fea2 	bl	8012428 <__assert_func>
 80106e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106e8:	6006      	str	r6, [r0, #0]
 80106ea:	60c6      	str	r6, [r0, #12]
 80106ec:	b13c      	cbz	r4, 80106fe <_Bfree+0x3a>
 80106ee:	69eb      	ldr	r3, [r5, #28]
 80106f0:	6862      	ldr	r2, [r4, #4]
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106f8:	6021      	str	r1, [r4, #0]
 80106fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106fe:	bd70      	pop	{r4, r5, r6, pc}
 8010700:	08014126 	.word	0x08014126
 8010704:	080141a6 	.word	0x080141a6

08010708 <__multadd>:
 8010708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070c:	690d      	ldr	r5, [r1, #16]
 801070e:	4607      	mov	r7, r0
 8010710:	460c      	mov	r4, r1
 8010712:	461e      	mov	r6, r3
 8010714:	f101 0c14 	add.w	ip, r1, #20
 8010718:	2000      	movs	r0, #0
 801071a:	f8dc 3000 	ldr.w	r3, [ip]
 801071e:	b299      	uxth	r1, r3
 8010720:	fb02 6101 	mla	r1, r2, r1, r6
 8010724:	0c1e      	lsrs	r6, r3, #16
 8010726:	0c0b      	lsrs	r3, r1, #16
 8010728:	fb02 3306 	mla	r3, r2, r6, r3
 801072c:	b289      	uxth	r1, r1
 801072e:	3001      	adds	r0, #1
 8010730:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010734:	4285      	cmp	r5, r0
 8010736:	f84c 1b04 	str.w	r1, [ip], #4
 801073a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801073e:	dcec      	bgt.n	801071a <__multadd+0x12>
 8010740:	b30e      	cbz	r6, 8010786 <__multadd+0x7e>
 8010742:	68a3      	ldr	r3, [r4, #8]
 8010744:	42ab      	cmp	r3, r5
 8010746:	dc19      	bgt.n	801077c <__multadd+0x74>
 8010748:	6861      	ldr	r1, [r4, #4]
 801074a:	4638      	mov	r0, r7
 801074c:	3101      	adds	r1, #1
 801074e:	f7ff ff79 	bl	8010644 <_Balloc>
 8010752:	4680      	mov	r8, r0
 8010754:	b928      	cbnz	r0, 8010762 <__multadd+0x5a>
 8010756:	4602      	mov	r2, r0
 8010758:	4b0c      	ldr	r3, [pc, #48]	@ (801078c <__multadd+0x84>)
 801075a:	480d      	ldr	r0, [pc, #52]	@ (8010790 <__multadd+0x88>)
 801075c:	21ba      	movs	r1, #186	@ 0xba
 801075e:	f001 fe63 	bl	8012428 <__assert_func>
 8010762:	6922      	ldr	r2, [r4, #16]
 8010764:	3202      	adds	r2, #2
 8010766:	f104 010c 	add.w	r1, r4, #12
 801076a:	0092      	lsls	r2, r2, #2
 801076c:	300c      	adds	r0, #12
 801076e:	f7ff f876 	bl	800f85e <memcpy>
 8010772:	4621      	mov	r1, r4
 8010774:	4638      	mov	r0, r7
 8010776:	f7ff ffa5 	bl	80106c4 <_Bfree>
 801077a:	4644      	mov	r4, r8
 801077c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010780:	3501      	adds	r5, #1
 8010782:	615e      	str	r6, [r3, #20]
 8010784:	6125      	str	r5, [r4, #16]
 8010786:	4620      	mov	r0, r4
 8010788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801078c:	08014195 	.word	0x08014195
 8010790:	080141a6 	.word	0x080141a6

08010794 <__s2b>:
 8010794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010798:	460c      	mov	r4, r1
 801079a:	4615      	mov	r5, r2
 801079c:	461f      	mov	r7, r3
 801079e:	2209      	movs	r2, #9
 80107a0:	3308      	adds	r3, #8
 80107a2:	4606      	mov	r6, r0
 80107a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80107a8:	2100      	movs	r1, #0
 80107aa:	2201      	movs	r2, #1
 80107ac:	429a      	cmp	r2, r3
 80107ae:	db09      	blt.n	80107c4 <__s2b+0x30>
 80107b0:	4630      	mov	r0, r6
 80107b2:	f7ff ff47 	bl	8010644 <_Balloc>
 80107b6:	b940      	cbnz	r0, 80107ca <__s2b+0x36>
 80107b8:	4602      	mov	r2, r0
 80107ba:	4b19      	ldr	r3, [pc, #100]	@ (8010820 <__s2b+0x8c>)
 80107bc:	4819      	ldr	r0, [pc, #100]	@ (8010824 <__s2b+0x90>)
 80107be:	21d3      	movs	r1, #211	@ 0xd3
 80107c0:	f001 fe32 	bl	8012428 <__assert_func>
 80107c4:	0052      	lsls	r2, r2, #1
 80107c6:	3101      	adds	r1, #1
 80107c8:	e7f0      	b.n	80107ac <__s2b+0x18>
 80107ca:	9b08      	ldr	r3, [sp, #32]
 80107cc:	6143      	str	r3, [r0, #20]
 80107ce:	2d09      	cmp	r5, #9
 80107d0:	f04f 0301 	mov.w	r3, #1
 80107d4:	6103      	str	r3, [r0, #16]
 80107d6:	dd16      	ble.n	8010806 <__s2b+0x72>
 80107d8:	f104 0909 	add.w	r9, r4, #9
 80107dc:	46c8      	mov	r8, r9
 80107de:	442c      	add	r4, r5
 80107e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80107e4:	4601      	mov	r1, r0
 80107e6:	3b30      	subs	r3, #48	@ 0x30
 80107e8:	220a      	movs	r2, #10
 80107ea:	4630      	mov	r0, r6
 80107ec:	f7ff ff8c 	bl	8010708 <__multadd>
 80107f0:	45a0      	cmp	r8, r4
 80107f2:	d1f5      	bne.n	80107e0 <__s2b+0x4c>
 80107f4:	f1a5 0408 	sub.w	r4, r5, #8
 80107f8:	444c      	add	r4, r9
 80107fa:	1b2d      	subs	r5, r5, r4
 80107fc:	1963      	adds	r3, r4, r5
 80107fe:	42bb      	cmp	r3, r7
 8010800:	db04      	blt.n	801080c <__s2b+0x78>
 8010802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010806:	340a      	adds	r4, #10
 8010808:	2509      	movs	r5, #9
 801080a:	e7f6      	b.n	80107fa <__s2b+0x66>
 801080c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010810:	4601      	mov	r1, r0
 8010812:	3b30      	subs	r3, #48	@ 0x30
 8010814:	220a      	movs	r2, #10
 8010816:	4630      	mov	r0, r6
 8010818:	f7ff ff76 	bl	8010708 <__multadd>
 801081c:	e7ee      	b.n	80107fc <__s2b+0x68>
 801081e:	bf00      	nop
 8010820:	08014195 	.word	0x08014195
 8010824:	080141a6 	.word	0x080141a6

08010828 <__hi0bits>:
 8010828:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801082c:	4603      	mov	r3, r0
 801082e:	bf36      	itet	cc
 8010830:	0403      	lslcc	r3, r0, #16
 8010832:	2000      	movcs	r0, #0
 8010834:	2010      	movcc	r0, #16
 8010836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801083a:	bf3c      	itt	cc
 801083c:	021b      	lslcc	r3, r3, #8
 801083e:	3008      	addcc	r0, #8
 8010840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010844:	bf3c      	itt	cc
 8010846:	011b      	lslcc	r3, r3, #4
 8010848:	3004      	addcc	r0, #4
 801084a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801084e:	bf3c      	itt	cc
 8010850:	009b      	lslcc	r3, r3, #2
 8010852:	3002      	addcc	r0, #2
 8010854:	2b00      	cmp	r3, #0
 8010856:	db05      	blt.n	8010864 <__hi0bits+0x3c>
 8010858:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801085c:	f100 0001 	add.w	r0, r0, #1
 8010860:	bf08      	it	eq
 8010862:	2020      	moveq	r0, #32
 8010864:	4770      	bx	lr

08010866 <__lo0bits>:
 8010866:	6803      	ldr	r3, [r0, #0]
 8010868:	4602      	mov	r2, r0
 801086a:	f013 0007 	ands.w	r0, r3, #7
 801086e:	d00b      	beq.n	8010888 <__lo0bits+0x22>
 8010870:	07d9      	lsls	r1, r3, #31
 8010872:	d421      	bmi.n	80108b8 <__lo0bits+0x52>
 8010874:	0798      	lsls	r0, r3, #30
 8010876:	bf49      	itett	mi
 8010878:	085b      	lsrmi	r3, r3, #1
 801087a:	089b      	lsrpl	r3, r3, #2
 801087c:	2001      	movmi	r0, #1
 801087e:	6013      	strmi	r3, [r2, #0]
 8010880:	bf5c      	itt	pl
 8010882:	6013      	strpl	r3, [r2, #0]
 8010884:	2002      	movpl	r0, #2
 8010886:	4770      	bx	lr
 8010888:	b299      	uxth	r1, r3
 801088a:	b909      	cbnz	r1, 8010890 <__lo0bits+0x2a>
 801088c:	0c1b      	lsrs	r3, r3, #16
 801088e:	2010      	movs	r0, #16
 8010890:	b2d9      	uxtb	r1, r3
 8010892:	b909      	cbnz	r1, 8010898 <__lo0bits+0x32>
 8010894:	3008      	adds	r0, #8
 8010896:	0a1b      	lsrs	r3, r3, #8
 8010898:	0719      	lsls	r1, r3, #28
 801089a:	bf04      	itt	eq
 801089c:	091b      	lsreq	r3, r3, #4
 801089e:	3004      	addeq	r0, #4
 80108a0:	0799      	lsls	r1, r3, #30
 80108a2:	bf04      	itt	eq
 80108a4:	089b      	lsreq	r3, r3, #2
 80108a6:	3002      	addeq	r0, #2
 80108a8:	07d9      	lsls	r1, r3, #31
 80108aa:	d403      	bmi.n	80108b4 <__lo0bits+0x4e>
 80108ac:	085b      	lsrs	r3, r3, #1
 80108ae:	f100 0001 	add.w	r0, r0, #1
 80108b2:	d003      	beq.n	80108bc <__lo0bits+0x56>
 80108b4:	6013      	str	r3, [r2, #0]
 80108b6:	4770      	bx	lr
 80108b8:	2000      	movs	r0, #0
 80108ba:	4770      	bx	lr
 80108bc:	2020      	movs	r0, #32
 80108be:	4770      	bx	lr

080108c0 <__i2b>:
 80108c0:	b510      	push	{r4, lr}
 80108c2:	460c      	mov	r4, r1
 80108c4:	2101      	movs	r1, #1
 80108c6:	f7ff febd 	bl	8010644 <_Balloc>
 80108ca:	4602      	mov	r2, r0
 80108cc:	b928      	cbnz	r0, 80108da <__i2b+0x1a>
 80108ce:	4b05      	ldr	r3, [pc, #20]	@ (80108e4 <__i2b+0x24>)
 80108d0:	4805      	ldr	r0, [pc, #20]	@ (80108e8 <__i2b+0x28>)
 80108d2:	f240 1145 	movw	r1, #325	@ 0x145
 80108d6:	f001 fda7 	bl	8012428 <__assert_func>
 80108da:	2301      	movs	r3, #1
 80108dc:	6144      	str	r4, [r0, #20]
 80108de:	6103      	str	r3, [r0, #16]
 80108e0:	bd10      	pop	{r4, pc}
 80108e2:	bf00      	nop
 80108e4:	08014195 	.word	0x08014195
 80108e8:	080141a6 	.word	0x080141a6

080108ec <__multiply>:
 80108ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f0:	4614      	mov	r4, r2
 80108f2:	690a      	ldr	r2, [r1, #16]
 80108f4:	6923      	ldr	r3, [r4, #16]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	bfa8      	it	ge
 80108fa:	4623      	movge	r3, r4
 80108fc:	460f      	mov	r7, r1
 80108fe:	bfa4      	itt	ge
 8010900:	460c      	movge	r4, r1
 8010902:	461f      	movge	r7, r3
 8010904:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010908:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801090c:	68a3      	ldr	r3, [r4, #8]
 801090e:	6861      	ldr	r1, [r4, #4]
 8010910:	eb0a 0609 	add.w	r6, sl, r9
 8010914:	42b3      	cmp	r3, r6
 8010916:	b085      	sub	sp, #20
 8010918:	bfb8      	it	lt
 801091a:	3101      	addlt	r1, #1
 801091c:	f7ff fe92 	bl	8010644 <_Balloc>
 8010920:	b930      	cbnz	r0, 8010930 <__multiply+0x44>
 8010922:	4602      	mov	r2, r0
 8010924:	4b44      	ldr	r3, [pc, #272]	@ (8010a38 <__multiply+0x14c>)
 8010926:	4845      	ldr	r0, [pc, #276]	@ (8010a3c <__multiply+0x150>)
 8010928:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801092c:	f001 fd7c 	bl	8012428 <__assert_func>
 8010930:	f100 0514 	add.w	r5, r0, #20
 8010934:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010938:	462b      	mov	r3, r5
 801093a:	2200      	movs	r2, #0
 801093c:	4543      	cmp	r3, r8
 801093e:	d321      	bcc.n	8010984 <__multiply+0x98>
 8010940:	f107 0114 	add.w	r1, r7, #20
 8010944:	f104 0214 	add.w	r2, r4, #20
 8010948:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801094c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010950:	9302      	str	r3, [sp, #8]
 8010952:	1b13      	subs	r3, r2, r4
 8010954:	3b15      	subs	r3, #21
 8010956:	f023 0303 	bic.w	r3, r3, #3
 801095a:	3304      	adds	r3, #4
 801095c:	f104 0715 	add.w	r7, r4, #21
 8010960:	42ba      	cmp	r2, r7
 8010962:	bf38      	it	cc
 8010964:	2304      	movcc	r3, #4
 8010966:	9301      	str	r3, [sp, #4]
 8010968:	9b02      	ldr	r3, [sp, #8]
 801096a:	9103      	str	r1, [sp, #12]
 801096c:	428b      	cmp	r3, r1
 801096e:	d80c      	bhi.n	801098a <__multiply+0x9e>
 8010970:	2e00      	cmp	r6, #0
 8010972:	dd03      	ble.n	801097c <__multiply+0x90>
 8010974:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010978:	2b00      	cmp	r3, #0
 801097a:	d05b      	beq.n	8010a34 <__multiply+0x148>
 801097c:	6106      	str	r6, [r0, #16]
 801097e:	b005      	add	sp, #20
 8010980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010984:	f843 2b04 	str.w	r2, [r3], #4
 8010988:	e7d8      	b.n	801093c <__multiply+0x50>
 801098a:	f8b1 a000 	ldrh.w	sl, [r1]
 801098e:	f1ba 0f00 	cmp.w	sl, #0
 8010992:	d024      	beq.n	80109de <__multiply+0xf2>
 8010994:	f104 0e14 	add.w	lr, r4, #20
 8010998:	46a9      	mov	r9, r5
 801099a:	f04f 0c00 	mov.w	ip, #0
 801099e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80109a2:	f8d9 3000 	ldr.w	r3, [r9]
 80109a6:	fa1f fb87 	uxth.w	fp, r7
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80109b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80109b4:	f8d9 7000 	ldr.w	r7, [r9]
 80109b8:	4463      	add	r3, ip
 80109ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80109be:	fb0a c70b 	mla	r7, sl, fp, ip
 80109c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80109cc:	4572      	cmp	r2, lr
 80109ce:	f849 3b04 	str.w	r3, [r9], #4
 80109d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80109d6:	d8e2      	bhi.n	801099e <__multiply+0xb2>
 80109d8:	9b01      	ldr	r3, [sp, #4]
 80109da:	f845 c003 	str.w	ip, [r5, r3]
 80109de:	9b03      	ldr	r3, [sp, #12]
 80109e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80109e4:	3104      	adds	r1, #4
 80109e6:	f1b9 0f00 	cmp.w	r9, #0
 80109ea:	d021      	beq.n	8010a30 <__multiply+0x144>
 80109ec:	682b      	ldr	r3, [r5, #0]
 80109ee:	f104 0c14 	add.w	ip, r4, #20
 80109f2:	46ae      	mov	lr, r5
 80109f4:	f04f 0a00 	mov.w	sl, #0
 80109f8:	f8bc b000 	ldrh.w	fp, [ip]
 80109fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010a00:	fb09 770b 	mla	r7, r9, fp, r7
 8010a04:	4457      	add	r7, sl
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010a0c:	f84e 3b04 	str.w	r3, [lr], #4
 8010a10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010a14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a18:	f8be 3000 	ldrh.w	r3, [lr]
 8010a1c:	fb09 330a 	mla	r3, r9, sl, r3
 8010a20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010a24:	4562      	cmp	r2, ip
 8010a26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a2a:	d8e5      	bhi.n	80109f8 <__multiply+0x10c>
 8010a2c:	9f01      	ldr	r7, [sp, #4]
 8010a2e:	51eb      	str	r3, [r5, r7]
 8010a30:	3504      	adds	r5, #4
 8010a32:	e799      	b.n	8010968 <__multiply+0x7c>
 8010a34:	3e01      	subs	r6, #1
 8010a36:	e79b      	b.n	8010970 <__multiply+0x84>
 8010a38:	08014195 	.word	0x08014195
 8010a3c:	080141a6 	.word	0x080141a6

08010a40 <__pow5mult>:
 8010a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a44:	4615      	mov	r5, r2
 8010a46:	f012 0203 	ands.w	r2, r2, #3
 8010a4a:	4607      	mov	r7, r0
 8010a4c:	460e      	mov	r6, r1
 8010a4e:	d007      	beq.n	8010a60 <__pow5mult+0x20>
 8010a50:	4c25      	ldr	r4, [pc, #148]	@ (8010ae8 <__pow5mult+0xa8>)
 8010a52:	3a01      	subs	r2, #1
 8010a54:	2300      	movs	r3, #0
 8010a56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a5a:	f7ff fe55 	bl	8010708 <__multadd>
 8010a5e:	4606      	mov	r6, r0
 8010a60:	10ad      	asrs	r5, r5, #2
 8010a62:	d03d      	beq.n	8010ae0 <__pow5mult+0xa0>
 8010a64:	69fc      	ldr	r4, [r7, #28]
 8010a66:	b97c      	cbnz	r4, 8010a88 <__pow5mult+0x48>
 8010a68:	2010      	movs	r0, #16
 8010a6a:	f7ff fd35 	bl	80104d8 <malloc>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	61f8      	str	r0, [r7, #28]
 8010a72:	b928      	cbnz	r0, 8010a80 <__pow5mult+0x40>
 8010a74:	4b1d      	ldr	r3, [pc, #116]	@ (8010aec <__pow5mult+0xac>)
 8010a76:	481e      	ldr	r0, [pc, #120]	@ (8010af0 <__pow5mult+0xb0>)
 8010a78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010a7c:	f001 fcd4 	bl	8012428 <__assert_func>
 8010a80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a84:	6004      	str	r4, [r0, #0]
 8010a86:	60c4      	str	r4, [r0, #12]
 8010a88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010a8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a90:	b94c      	cbnz	r4, 8010aa6 <__pow5mult+0x66>
 8010a92:	f240 2171 	movw	r1, #625	@ 0x271
 8010a96:	4638      	mov	r0, r7
 8010a98:	f7ff ff12 	bl	80108c0 <__i2b>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	6003      	str	r3, [r0, #0]
 8010aa6:	f04f 0900 	mov.w	r9, #0
 8010aaa:	07eb      	lsls	r3, r5, #31
 8010aac:	d50a      	bpl.n	8010ac4 <__pow5mult+0x84>
 8010aae:	4631      	mov	r1, r6
 8010ab0:	4622      	mov	r2, r4
 8010ab2:	4638      	mov	r0, r7
 8010ab4:	f7ff ff1a 	bl	80108ec <__multiply>
 8010ab8:	4631      	mov	r1, r6
 8010aba:	4680      	mov	r8, r0
 8010abc:	4638      	mov	r0, r7
 8010abe:	f7ff fe01 	bl	80106c4 <_Bfree>
 8010ac2:	4646      	mov	r6, r8
 8010ac4:	106d      	asrs	r5, r5, #1
 8010ac6:	d00b      	beq.n	8010ae0 <__pow5mult+0xa0>
 8010ac8:	6820      	ldr	r0, [r4, #0]
 8010aca:	b938      	cbnz	r0, 8010adc <__pow5mult+0x9c>
 8010acc:	4622      	mov	r2, r4
 8010ace:	4621      	mov	r1, r4
 8010ad0:	4638      	mov	r0, r7
 8010ad2:	f7ff ff0b 	bl	80108ec <__multiply>
 8010ad6:	6020      	str	r0, [r4, #0]
 8010ad8:	f8c0 9000 	str.w	r9, [r0]
 8010adc:	4604      	mov	r4, r0
 8010ade:	e7e4      	b.n	8010aaa <__pow5mult+0x6a>
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ae6:	bf00      	nop
 8010ae8:	08014200 	.word	0x08014200
 8010aec:	08014126 	.word	0x08014126
 8010af0:	080141a6 	.word	0x080141a6

08010af4 <__lshift>:
 8010af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af8:	460c      	mov	r4, r1
 8010afa:	6849      	ldr	r1, [r1, #4]
 8010afc:	6923      	ldr	r3, [r4, #16]
 8010afe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b02:	68a3      	ldr	r3, [r4, #8]
 8010b04:	4607      	mov	r7, r0
 8010b06:	4691      	mov	r9, r2
 8010b08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b0c:	f108 0601 	add.w	r6, r8, #1
 8010b10:	42b3      	cmp	r3, r6
 8010b12:	db0b      	blt.n	8010b2c <__lshift+0x38>
 8010b14:	4638      	mov	r0, r7
 8010b16:	f7ff fd95 	bl	8010644 <_Balloc>
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	b948      	cbnz	r0, 8010b32 <__lshift+0x3e>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	4b28      	ldr	r3, [pc, #160]	@ (8010bc4 <__lshift+0xd0>)
 8010b22:	4829      	ldr	r0, [pc, #164]	@ (8010bc8 <__lshift+0xd4>)
 8010b24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010b28:	f001 fc7e 	bl	8012428 <__assert_func>
 8010b2c:	3101      	adds	r1, #1
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	e7ee      	b.n	8010b10 <__lshift+0x1c>
 8010b32:	2300      	movs	r3, #0
 8010b34:	f100 0114 	add.w	r1, r0, #20
 8010b38:	f100 0210 	add.w	r2, r0, #16
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	4553      	cmp	r3, sl
 8010b40:	db33      	blt.n	8010baa <__lshift+0xb6>
 8010b42:	6920      	ldr	r0, [r4, #16]
 8010b44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b48:	f104 0314 	add.w	r3, r4, #20
 8010b4c:	f019 091f 	ands.w	r9, r9, #31
 8010b50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b58:	d02b      	beq.n	8010bb2 <__lshift+0xbe>
 8010b5a:	f1c9 0e20 	rsb	lr, r9, #32
 8010b5e:	468a      	mov	sl, r1
 8010b60:	2200      	movs	r2, #0
 8010b62:	6818      	ldr	r0, [r3, #0]
 8010b64:	fa00 f009 	lsl.w	r0, r0, r9
 8010b68:	4310      	orrs	r0, r2
 8010b6a:	f84a 0b04 	str.w	r0, [sl], #4
 8010b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b72:	459c      	cmp	ip, r3
 8010b74:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b78:	d8f3      	bhi.n	8010b62 <__lshift+0x6e>
 8010b7a:	ebac 0304 	sub.w	r3, ip, r4
 8010b7e:	3b15      	subs	r3, #21
 8010b80:	f023 0303 	bic.w	r3, r3, #3
 8010b84:	3304      	adds	r3, #4
 8010b86:	f104 0015 	add.w	r0, r4, #21
 8010b8a:	4584      	cmp	ip, r0
 8010b8c:	bf38      	it	cc
 8010b8e:	2304      	movcc	r3, #4
 8010b90:	50ca      	str	r2, [r1, r3]
 8010b92:	b10a      	cbz	r2, 8010b98 <__lshift+0xa4>
 8010b94:	f108 0602 	add.w	r6, r8, #2
 8010b98:	3e01      	subs	r6, #1
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	612e      	str	r6, [r5, #16]
 8010b9e:	4621      	mov	r1, r4
 8010ba0:	f7ff fd90 	bl	80106c4 <_Bfree>
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010baa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010bae:	3301      	adds	r3, #1
 8010bb0:	e7c5      	b.n	8010b3e <__lshift+0x4a>
 8010bb2:	3904      	subs	r1, #4
 8010bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bbc:	459c      	cmp	ip, r3
 8010bbe:	d8f9      	bhi.n	8010bb4 <__lshift+0xc0>
 8010bc0:	e7ea      	b.n	8010b98 <__lshift+0xa4>
 8010bc2:	bf00      	nop
 8010bc4:	08014195 	.word	0x08014195
 8010bc8:	080141a6 	.word	0x080141a6

08010bcc <__mcmp>:
 8010bcc:	690a      	ldr	r2, [r1, #16]
 8010bce:	4603      	mov	r3, r0
 8010bd0:	6900      	ldr	r0, [r0, #16]
 8010bd2:	1a80      	subs	r0, r0, r2
 8010bd4:	b530      	push	{r4, r5, lr}
 8010bd6:	d10e      	bne.n	8010bf6 <__mcmp+0x2a>
 8010bd8:	3314      	adds	r3, #20
 8010bda:	3114      	adds	r1, #20
 8010bdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010be0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010be4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010be8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010bec:	4295      	cmp	r5, r2
 8010bee:	d003      	beq.n	8010bf8 <__mcmp+0x2c>
 8010bf0:	d205      	bcs.n	8010bfe <__mcmp+0x32>
 8010bf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bf6:	bd30      	pop	{r4, r5, pc}
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	d3f3      	bcc.n	8010be4 <__mcmp+0x18>
 8010bfc:	e7fb      	b.n	8010bf6 <__mcmp+0x2a>
 8010bfe:	2001      	movs	r0, #1
 8010c00:	e7f9      	b.n	8010bf6 <__mcmp+0x2a>
	...

08010c04 <__mdiff>:
 8010c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c08:	4689      	mov	r9, r1
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	4648      	mov	r0, r9
 8010c10:	4614      	mov	r4, r2
 8010c12:	f7ff ffdb 	bl	8010bcc <__mcmp>
 8010c16:	1e05      	subs	r5, r0, #0
 8010c18:	d112      	bne.n	8010c40 <__mdiff+0x3c>
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	f7ff fd11 	bl	8010644 <_Balloc>
 8010c22:	4602      	mov	r2, r0
 8010c24:	b928      	cbnz	r0, 8010c32 <__mdiff+0x2e>
 8010c26:	4b3f      	ldr	r3, [pc, #252]	@ (8010d24 <__mdiff+0x120>)
 8010c28:	f240 2137 	movw	r1, #567	@ 0x237
 8010c2c:	483e      	ldr	r0, [pc, #248]	@ (8010d28 <__mdiff+0x124>)
 8010c2e:	f001 fbfb 	bl	8012428 <__assert_func>
 8010c32:	2301      	movs	r3, #1
 8010c34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c38:	4610      	mov	r0, r2
 8010c3a:	b003      	add	sp, #12
 8010c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c40:	bfbc      	itt	lt
 8010c42:	464b      	movlt	r3, r9
 8010c44:	46a1      	movlt	r9, r4
 8010c46:	4630      	mov	r0, r6
 8010c48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c4c:	bfba      	itte	lt
 8010c4e:	461c      	movlt	r4, r3
 8010c50:	2501      	movlt	r5, #1
 8010c52:	2500      	movge	r5, #0
 8010c54:	f7ff fcf6 	bl	8010644 <_Balloc>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	b918      	cbnz	r0, 8010c64 <__mdiff+0x60>
 8010c5c:	4b31      	ldr	r3, [pc, #196]	@ (8010d24 <__mdiff+0x120>)
 8010c5e:	f240 2145 	movw	r1, #581	@ 0x245
 8010c62:	e7e3      	b.n	8010c2c <__mdiff+0x28>
 8010c64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010c68:	6926      	ldr	r6, [r4, #16]
 8010c6a:	60c5      	str	r5, [r0, #12]
 8010c6c:	f109 0310 	add.w	r3, r9, #16
 8010c70:	f109 0514 	add.w	r5, r9, #20
 8010c74:	f104 0e14 	add.w	lr, r4, #20
 8010c78:	f100 0b14 	add.w	fp, r0, #20
 8010c7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010c80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010c84:	9301      	str	r3, [sp, #4]
 8010c86:	46d9      	mov	r9, fp
 8010c88:	f04f 0c00 	mov.w	ip, #0
 8010c8c:	9b01      	ldr	r3, [sp, #4]
 8010c8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010c92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	fa1f f38a 	uxth.w	r3, sl
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	b283      	uxth	r3, r0
 8010ca0:	1acb      	subs	r3, r1, r3
 8010ca2:	0c00      	lsrs	r0, r0, #16
 8010ca4:	4463      	add	r3, ip
 8010ca6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010caa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010cb4:	4576      	cmp	r6, lr
 8010cb6:	f849 3b04 	str.w	r3, [r9], #4
 8010cba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010cbe:	d8e5      	bhi.n	8010c8c <__mdiff+0x88>
 8010cc0:	1b33      	subs	r3, r6, r4
 8010cc2:	3b15      	subs	r3, #21
 8010cc4:	f023 0303 	bic.w	r3, r3, #3
 8010cc8:	3415      	adds	r4, #21
 8010cca:	3304      	adds	r3, #4
 8010ccc:	42a6      	cmp	r6, r4
 8010cce:	bf38      	it	cc
 8010cd0:	2304      	movcc	r3, #4
 8010cd2:	441d      	add	r5, r3
 8010cd4:	445b      	add	r3, fp
 8010cd6:	461e      	mov	r6, r3
 8010cd8:	462c      	mov	r4, r5
 8010cda:	4544      	cmp	r4, r8
 8010cdc:	d30e      	bcc.n	8010cfc <__mdiff+0xf8>
 8010cde:	f108 0103 	add.w	r1, r8, #3
 8010ce2:	1b49      	subs	r1, r1, r5
 8010ce4:	f021 0103 	bic.w	r1, r1, #3
 8010ce8:	3d03      	subs	r5, #3
 8010cea:	45a8      	cmp	r8, r5
 8010cec:	bf38      	it	cc
 8010cee:	2100      	movcc	r1, #0
 8010cf0:	440b      	add	r3, r1
 8010cf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cf6:	b191      	cbz	r1, 8010d1e <__mdiff+0x11a>
 8010cf8:	6117      	str	r7, [r2, #16]
 8010cfa:	e79d      	b.n	8010c38 <__mdiff+0x34>
 8010cfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8010d00:	46e6      	mov	lr, ip
 8010d02:	0c08      	lsrs	r0, r1, #16
 8010d04:	fa1c fc81 	uxtah	ip, ip, r1
 8010d08:	4471      	add	r1, lr
 8010d0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010d0e:	b289      	uxth	r1, r1
 8010d10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010d14:	f846 1b04 	str.w	r1, [r6], #4
 8010d18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d1c:	e7dd      	b.n	8010cda <__mdiff+0xd6>
 8010d1e:	3f01      	subs	r7, #1
 8010d20:	e7e7      	b.n	8010cf2 <__mdiff+0xee>
 8010d22:	bf00      	nop
 8010d24:	08014195 	.word	0x08014195
 8010d28:	080141a6 	.word	0x080141a6

08010d2c <__ulp>:
 8010d2c:	b082      	sub	sp, #8
 8010d2e:	ed8d 0b00 	vstr	d0, [sp]
 8010d32:	9a01      	ldr	r2, [sp, #4]
 8010d34:	4b0f      	ldr	r3, [pc, #60]	@ (8010d74 <__ulp+0x48>)
 8010d36:	4013      	ands	r3, r2
 8010d38:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dc08      	bgt.n	8010d52 <__ulp+0x26>
 8010d40:	425b      	negs	r3, r3
 8010d42:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010d46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010d4a:	da04      	bge.n	8010d56 <__ulp+0x2a>
 8010d4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010d50:	4113      	asrs	r3, r2
 8010d52:	2200      	movs	r2, #0
 8010d54:	e008      	b.n	8010d68 <__ulp+0x3c>
 8010d56:	f1a2 0314 	sub.w	r3, r2, #20
 8010d5a:	2b1e      	cmp	r3, #30
 8010d5c:	bfda      	itte	le
 8010d5e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010d62:	40da      	lsrle	r2, r3
 8010d64:	2201      	movgt	r2, #1
 8010d66:	2300      	movs	r3, #0
 8010d68:	4619      	mov	r1, r3
 8010d6a:	4610      	mov	r0, r2
 8010d6c:	ec41 0b10 	vmov	d0, r0, r1
 8010d70:	b002      	add	sp, #8
 8010d72:	4770      	bx	lr
 8010d74:	7ff00000 	.word	0x7ff00000

08010d78 <__b2d>:
 8010d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7c:	6906      	ldr	r6, [r0, #16]
 8010d7e:	f100 0814 	add.w	r8, r0, #20
 8010d82:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010d86:	1f37      	subs	r7, r6, #4
 8010d88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010d8c:	4610      	mov	r0, r2
 8010d8e:	f7ff fd4b 	bl	8010828 <__hi0bits>
 8010d92:	f1c0 0320 	rsb	r3, r0, #32
 8010d96:	280a      	cmp	r0, #10
 8010d98:	600b      	str	r3, [r1, #0]
 8010d9a:	491b      	ldr	r1, [pc, #108]	@ (8010e08 <__b2d+0x90>)
 8010d9c:	dc15      	bgt.n	8010dca <__b2d+0x52>
 8010d9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010da2:	fa22 f30c 	lsr.w	r3, r2, ip
 8010da6:	45b8      	cmp	r8, r7
 8010da8:	ea43 0501 	orr.w	r5, r3, r1
 8010dac:	bf34      	ite	cc
 8010dae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010db2:	2300      	movcs	r3, #0
 8010db4:	3015      	adds	r0, #21
 8010db6:	fa02 f000 	lsl.w	r0, r2, r0
 8010dba:	fa23 f30c 	lsr.w	r3, r3, ip
 8010dbe:	4303      	orrs	r3, r0
 8010dc0:	461c      	mov	r4, r3
 8010dc2:	ec45 4b10 	vmov	d0, r4, r5
 8010dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dca:	45b8      	cmp	r8, r7
 8010dcc:	bf3a      	itte	cc
 8010dce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010dd2:	f1a6 0708 	subcc.w	r7, r6, #8
 8010dd6:	2300      	movcs	r3, #0
 8010dd8:	380b      	subs	r0, #11
 8010dda:	d012      	beq.n	8010e02 <__b2d+0x8a>
 8010ddc:	f1c0 0120 	rsb	r1, r0, #32
 8010de0:	fa23 f401 	lsr.w	r4, r3, r1
 8010de4:	4082      	lsls	r2, r0
 8010de6:	4322      	orrs	r2, r4
 8010de8:	4547      	cmp	r7, r8
 8010dea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010dee:	bf8c      	ite	hi
 8010df0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010df4:	2200      	movls	r2, #0
 8010df6:	4083      	lsls	r3, r0
 8010df8:	40ca      	lsrs	r2, r1
 8010dfa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	e7de      	b.n	8010dc0 <__b2d+0x48>
 8010e02:	ea42 0501 	orr.w	r5, r2, r1
 8010e06:	e7db      	b.n	8010dc0 <__b2d+0x48>
 8010e08:	3ff00000 	.word	0x3ff00000

08010e0c <__d2b>:
 8010e0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e10:	460f      	mov	r7, r1
 8010e12:	2101      	movs	r1, #1
 8010e14:	ec59 8b10 	vmov	r8, r9, d0
 8010e18:	4616      	mov	r6, r2
 8010e1a:	f7ff fc13 	bl	8010644 <_Balloc>
 8010e1e:	4604      	mov	r4, r0
 8010e20:	b930      	cbnz	r0, 8010e30 <__d2b+0x24>
 8010e22:	4602      	mov	r2, r0
 8010e24:	4b23      	ldr	r3, [pc, #140]	@ (8010eb4 <__d2b+0xa8>)
 8010e26:	4824      	ldr	r0, [pc, #144]	@ (8010eb8 <__d2b+0xac>)
 8010e28:	f240 310f 	movw	r1, #783	@ 0x30f
 8010e2c:	f001 fafc 	bl	8012428 <__assert_func>
 8010e30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010e34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e38:	b10d      	cbz	r5, 8010e3e <__d2b+0x32>
 8010e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010e3e:	9301      	str	r3, [sp, #4]
 8010e40:	f1b8 0300 	subs.w	r3, r8, #0
 8010e44:	d023      	beq.n	8010e8e <__d2b+0x82>
 8010e46:	4668      	mov	r0, sp
 8010e48:	9300      	str	r3, [sp, #0]
 8010e4a:	f7ff fd0c 	bl	8010866 <__lo0bits>
 8010e4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e52:	b1d0      	cbz	r0, 8010e8a <__d2b+0x7e>
 8010e54:	f1c0 0320 	rsb	r3, r0, #32
 8010e58:	fa02 f303 	lsl.w	r3, r2, r3
 8010e5c:	430b      	orrs	r3, r1
 8010e5e:	40c2      	lsrs	r2, r0
 8010e60:	6163      	str	r3, [r4, #20]
 8010e62:	9201      	str	r2, [sp, #4]
 8010e64:	9b01      	ldr	r3, [sp, #4]
 8010e66:	61a3      	str	r3, [r4, #24]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	bf0c      	ite	eq
 8010e6c:	2201      	moveq	r2, #1
 8010e6e:	2202      	movne	r2, #2
 8010e70:	6122      	str	r2, [r4, #16]
 8010e72:	b1a5      	cbz	r5, 8010e9e <__d2b+0x92>
 8010e74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010e78:	4405      	add	r5, r0
 8010e7a:	603d      	str	r5, [r7, #0]
 8010e7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010e80:	6030      	str	r0, [r6, #0]
 8010e82:	4620      	mov	r0, r4
 8010e84:	b003      	add	sp, #12
 8010e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e8a:	6161      	str	r1, [r4, #20]
 8010e8c:	e7ea      	b.n	8010e64 <__d2b+0x58>
 8010e8e:	a801      	add	r0, sp, #4
 8010e90:	f7ff fce9 	bl	8010866 <__lo0bits>
 8010e94:	9b01      	ldr	r3, [sp, #4]
 8010e96:	6163      	str	r3, [r4, #20]
 8010e98:	3020      	adds	r0, #32
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	e7e8      	b.n	8010e70 <__d2b+0x64>
 8010e9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ea2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010ea6:	6038      	str	r0, [r7, #0]
 8010ea8:	6918      	ldr	r0, [r3, #16]
 8010eaa:	f7ff fcbd 	bl	8010828 <__hi0bits>
 8010eae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010eb2:	e7e5      	b.n	8010e80 <__d2b+0x74>
 8010eb4:	08014195 	.word	0x08014195
 8010eb8:	080141a6 	.word	0x080141a6

08010ebc <__ratio>:
 8010ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec0:	4688      	mov	r8, r1
 8010ec2:	4669      	mov	r1, sp
 8010ec4:	4681      	mov	r9, r0
 8010ec6:	f7ff ff57 	bl	8010d78 <__b2d>
 8010eca:	a901      	add	r1, sp, #4
 8010ecc:	4640      	mov	r0, r8
 8010ece:	ec55 4b10 	vmov	r4, r5, d0
 8010ed2:	f7ff ff51 	bl	8010d78 <__b2d>
 8010ed6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010eda:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010ede:	1ad2      	subs	r2, r2, r3
 8010ee0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010ee4:	1a5b      	subs	r3, r3, r1
 8010ee6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8010eea:	ec57 6b10 	vmov	r6, r7, d0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	bfd6      	itet	le
 8010ef2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ef6:	462a      	movgt	r2, r5
 8010ef8:	463a      	movle	r2, r7
 8010efa:	46ab      	mov	fp, r5
 8010efc:	46a2      	mov	sl, r4
 8010efe:	bfce      	itee	gt
 8010f00:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010f04:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010f08:	ee00 3a90 	vmovle	s1, r3
 8010f0c:	ec4b ab17 	vmov	d7, sl, fp
 8010f10:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010f14:	b003      	add	sp, #12
 8010f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f1a <__copybits>:
 8010f1a:	3901      	subs	r1, #1
 8010f1c:	b570      	push	{r4, r5, r6, lr}
 8010f1e:	1149      	asrs	r1, r1, #5
 8010f20:	6914      	ldr	r4, [r2, #16]
 8010f22:	3101      	adds	r1, #1
 8010f24:	f102 0314 	add.w	r3, r2, #20
 8010f28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010f2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010f30:	1f05      	subs	r5, r0, #4
 8010f32:	42a3      	cmp	r3, r4
 8010f34:	d30c      	bcc.n	8010f50 <__copybits+0x36>
 8010f36:	1aa3      	subs	r3, r4, r2
 8010f38:	3b11      	subs	r3, #17
 8010f3a:	f023 0303 	bic.w	r3, r3, #3
 8010f3e:	3211      	adds	r2, #17
 8010f40:	42a2      	cmp	r2, r4
 8010f42:	bf88      	it	hi
 8010f44:	2300      	movhi	r3, #0
 8010f46:	4418      	add	r0, r3
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4288      	cmp	r0, r1
 8010f4c:	d305      	bcc.n	8010f5a <__copybits+0x40>
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}
 8010f50:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f54:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f58:	e7eb      	b.n	8010f32 <__copybits+0x18>
 8010f5a:	f840 3b04 	str.w	r3, [r0], #4
 8010f5e:	e7f4      	b.n	8010f4a <__copybits+0x30>

08010f60 <__any_on>:
 8010f60:	f100 0214 	add.w	r2, r0, #20
 8010f64:	6900      	ldr	r0, [r0, #16]
 8010f66:	114b      	asrs	r3, r1, #5
 8010f68:	4298      	cmp	r0, r3
 8010f6a:	b510      	push	{r4, lr}
 8010f6c:	db11      	blt.n	8010f92 <__any_on+0x32>
 8010f6e:	dd0a      	ble.n	8010f86 <__any_on+0x26>
 8010f70:	f011 011f 	ands.w	r1, r1, #31
 8010f74:	d007      	beq.n	8010f86 <__any_on+0x26>
 8010f76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010f7a:	fa24 f001 	lsr.w	r0, r4, r1
 8010f7e:	fa00 f101 	lsl.w	r1, r0, r1
 8010f82:	428c      	cmp	r4, r1
 8010f84:	d10b      	bne.n	8010f9e <__any_on+0x3e>
 8010f86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d803      	bhi.n	8010f96 <__any_on+0x36>
 8010f8e:	2000      	movs	r0, #0
 8010f90:	bd10      	pop	{r4, pc}
 8010f92:	4603      	mov	r3, r0
 8010f94:	e7f7      	b.n	8010f86 <__any_on+0x26>
 8010f96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f9a:	2900      	cmp	r1, #0
 8010f9c:	d0f5      	beq.n	8010f8a <__any_on+0x2a>
 8010f9e:	2001      	movs	r0, #1
 8010fa0:	e7f6      	b.n	8010f90 <__any_on+0x30>

08010fa2 <sulp>:
 8010fa2:	b570      	push	{r4, r5, r6, lr}
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	4616      	mov	r6, r2
 8010faa:	ec45 4b10 	vmov	d0, r4, r5
 8010fae:	f7ff febd 	bl	8010d2c <__ulp>
 8010fb2:	b17e      	cbz	r6, 8010fd4 <sulp+0x32>
 8010fb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010fb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	dd09      	ble.n	8010fd4 <sulp+0x32>
 8010fc0:	051b      	lsls	r3, r3, #20
 8010fc2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8010fcc:	ec41 0b17 	vmov	d7, r0, r1
 8010fd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010fd8 <_strtod_l>:
 8010fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fdc:	ed2d 8b0a 	vpush	{d8-d12}
 8010fe0:	b097      	sub	sp, #92	@ 0x5c
 8010fe2:	4688      	mov	r8, r1
 8010fe4:	920e      	str	r2, [sp, #56]	@ 0x38
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	9212      	str	r2, [sp, #72]	@ 0x48
 8010fea:	9005      	str	r0, [sp, #20]
 8010fec:	f04f 0a00 	mov.w	sl, #0
 8010ff0:	f04f 0b00 	mov.w	fp, #0
 8010ff4:	460a      	mov	r2, r1
 8010ff6:	9211      	str	r2, [sp, #68]	@ 0x44
 8010ff8:	7811      	ldrb	r1, [r2, #0]
 8010ffa:	292b      	cmp	r1, #43	@ 0x2b
 8010ffc:	d04c      	beq.n	8011098 <_strtod_l+0xc0>
 8010ffe:	d839      	bhi.n	8011074 <_strtod_l+0x9c>
 8011000:	290d      	cmp	r1, #13
 8011002:	d833      	bhi.n	801106c <_strtod_l+0x94>
 8011004:	2908      	cmp	r1, #8
 8011006:	d833      	bhi.n	8011070 <_strtod_l+0x98>
 8011008:	2900      	cmp	r1, #0
 801100a:	d03c      	beq.n	8011086 <_strtod_l+0xae>
 801100c:	2200      	movs	r2, #0
 801100e:	9208      	str	r2, [sp, #32]
 8011010:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8011012:	782a      	ldrb	r2, [r5, #0]
 8011014:	2a30      	cmp	r2, #48	@ 0x30
 8011016:	f040 80b5 	bne.w	8011184 <_strtod_l+0x1ac>
 801101a:	786a      	ldrb	r2, [r5, #1]
 801101c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011020:	2a58      	cmp	r2, #88	@ 0x58
 8011022:	d170      	bne.n	8011106 <_strtod_l+0x12e>
 8011024:	9302      	str	r3, [sp, #8]
 8011026:	9b08      	ldr	r3, [sp, #32]
 8011028:	9301      	str	r3, [sp, #4]
 801102a:	ab12      	add	r3, sp, #72	@ 0x48
 801102c:	9300      	str	r3, [sp, #0]
 801102e:	4a8b      	ldr	r2, [pc, #556]	@ (801125c <_strtod_l+0x284>)
 8011030:	9805      	ldr	r0, [sp, #20]
 8011032:	ab13      	add	r3, sp, #76	@ 0x4c
 8011034:	a911      	add	r1, sp, #68	@ 0x44
 8011036:	f001 fa91 	bl	801255c <__gethex>
 801103a:	f010 060f 	ands.w	r6, r0, #15
 801103e:	4604      	mov	r4, r0
 8011040:	d005      	beq.n	801104e <_strtod_l+0x76>
 8011042:	2e06      	cmp	r6, #6
 8011044:	d12a      	bne.n	801109c <_strtod_l+0xc4>
 8011046:	3501      	adds	r5, #1
 8011048:	2300      	movs	r3, #0
 801104a:	9511      	str	r5, [sp, #68]	@ 0x44
 801104c:	9308      	str	r3, [sp, #32]
 801104e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011050:	2b00      	cmp	r3, #0
 8011052:	f040 852f 	bne.w	8011ab4 <_strtod_l+0xadc>
 8011056:	9b08      	ldr	r3, [sp, #32]
 8011058:	ec4b ab10 	vmov	d0, sl, fp
 801105c:	b1cb      	cbz	r3, 8011092 <_strtod_l+0xba>
 801105e:	eeb1 0b40 	vneg.f64	d0, d0
 8011062:	b017      	add	sp, #92	@ 0x5c
 8011064:	ecbd 8b0a 	vpop	{d8-d12}
 8011068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106c:	2920      	cmp	r1, #32
 801106e:	d1cd      	bne.n	801100c <_strtod_l+0x34>
 8011070:	3201      	adds	r2, #1
 8011072:	e7c0      	b.n	8010ff6 <_strtod_l+0x1e>
 8011074:	292d      	cmp	r1, #45	@ 0x2d
 8011076:	d1c9      	bne.n	801100c <_strtod_l+0x34>
 8011078:	2101      	movs	r1, #1
 801107a:	9108      	str	r1, [sp, #32]
 801107c:	1c51      	adds	r1, r2, #1
 801107e:	9111      	str	r1, [sp, #68]	@ 0x44
 8011080:	7852      	ldrb	r2, [r2, #1]
 8011082:	2a00      	cmp	r2, #0
 8011084:	d1c4      	bne.n	8011010 <_strtod_l+0x38>
 8011086:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011088:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801108c:	2b00      	cmp	r3, #0
 801108e:	f040 850f 	bne.w	8011ab0 <_strtod_l+0xad8>
 8011092:	ec4b ab10 	vmov	d0, sl, fp
 8011096:	e7e4      	b.n	8011062 <_strtod_l+0x8a>
 8011098:	2100      	movs	r1, #0
 801109a:	e7ee      	b.n	801107a <_strtod_l+0xa2>
 801109c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801109e:	b13a      	cbz	r2, 80110b0 <_strtod_l+0xd8>
 80110a0:	2135      	movs	r1, #53	@ 0x35
 80110a2:	a814      	add	r0, sp, #80	@ 0x50
 80110a4:	f7ff ff39 	bl	8010f1a <__copybits>
 80110a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80110aa:	9805      	ldr	r0, [sp, #20]
 80110ac:	f7ff fb0a 	bl	80106c4 <_Bfree>
 80110b0:	1e73      	subs	r3, r6, #1
 80110b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80110b4:	2b04      	cmp	r3, #4
 80110b6:	d806      	bhi.n	80110c6 <_strtod_l+0xee>
 80110b8:	e8df f003 	tbb	[pc, r3]
 80110bc:	201d0314 	.word	0x201d0314
 80110c0:	14          	.byte	0x14
 80110c1:	00          	.byte	0x00
 80110c2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80110c6:	05e3      	lsls	r3, r4, #23
 80110c8:	bf48      	it	mi
 80110ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80110ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80110d2:	0d1b      	lsrs	r3, r3, #20
 80110d4:	051b      	lsls	r3, r3, #20
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d1b9      	bne.n	801104e <_strtod_l+0x76>
 80110da:	f7fe fb93 	bl	800f804 <__errno>
 80110de:	2322      	movs	r3, #34	@ 0x22
 80110e0:	6003      	str	r3, [r0, #0]
 80110e2:	e7b4      	b.n	801104e <_strtod_l+0x76>
 80110e4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80110e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80110ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80110f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80110f4:	e7e7      	b.n	80110c6 <_strtod_l+0xee>
 80110f6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8011264 <_strtod_l+0x28c>
 80110fa:	e7e4      	b.n	80110c6 <_strtod_l+0xee>
 80110fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011100:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8011104:	e7df      	b.n	80110c6 <_strtod_l+0xee>
 8011106:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011108:	1c5a      	adds	r2, r3, #1
 801110a:	9211      	str	r2, [sp, #68]	@ 0x44
 801110c:	785b      	ldrb	r3, [r3, #1]
 801110e:	2b30      	cmp	r3, #48	@ 0x30
 8011110:	d0f9      	beq.n	8011106 <_strtod_l+0x12e>
 8011112:	2b00      	cmp	r3, #0
 8011114:	d09b      	beq.n	801104e <_strtod_l+0x76>
 8011116:	2301      	movs	r3, #1
 8011118:	2600      	movs	r6, #0
 801111a:	9307      	str	r3, [sp, #28]
 801111c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801111e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011120:	46b1      	mov	r9, r6
 8011122:	4635      	mov	r5, r6
 8011124:	220a      	movs	r2, #10
 8011126:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8011128:	7804      	ldrb	r4, [r0, #0]
 801112a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801112e:	b2d9      	uxtb	r1, r3
 8011130:	2909      	cmp	r1, #9
 8011132:	d929      	bls.n	8011188 <_strtod_l+0x1b0>
 8011134:	494a      	ldr	r1, [pc, #296]	@ (8011260 <_strtod_l+0x288>)
 8011136:	2201      	movs	r2, #1
 8011138:	f001 f928 	bl	801238c <strncmp>
 801113c:	b378      	cbz	r0, 801119e <_strtod_l+0x1c6>
 801113e:	2000      	movs	r0, #0
 8011140:	4622      	mov	r2, r4
 8011142:	462b      	mov	r3, r5
 8011144:	4607      	mov	r7, r0
 8011146:	9006      	str	r0, [sp, #24]
 8011148:	2a65      	cmp	r2, #101	@ 0x65
 801114a:	d001      	beq.n	8011150 <_strtod_l+0x178>
 801114c:	2a45      	cmp	r2, #69	@ 0x45
 801114e:	d117      	bne.n	8011180 <_strtod_l+0x1a8>
 8011150:	b91b      	cbnz	r3, 801115a <_strtod_l+0x182>
 8011152:	9b07      	ldr	r3, [sp, #28]
 8011154:	4303      	orrs	r3, r0
 8011156:	d096      	beq.n	8011086 <_strtod_l+0xae>
 8011158:	2300      	movs	r3, #0
 801115a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801115e:	f108 0201 	add.w	r2, r8, #1
 8011162:	9211      	str	r2, [sp, #68]	@ 0x44
 8011164:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011168:	2a2b      	cmp	r2, #43	@ 0x2b
 801116a:	d06b      	beq.n	8011244 <_strtod_l+0x26c>
 801116c:	2a2d      	cmp	r2, #45	@ 0x2d
 801116e:	d071      	beq.n	8011254 <_strtod_l+0x27c>
 8011170:	f04f 0e00 	mov.w	lr, #0
 8011174:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8011178:	2c09      	cmp	r4, #9
 801117a:	d979      	bls.n	8011270 <_strtod_l+0x298>
 801117c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8011180:	2400      	movs	r4, #0
 8011182:	e094      	b.n	80112ae <_strtod_l+0x2d6>
 8011184:	2300      	movs	r3, #0
 8011186:	e7c7      	b.n	8011118 <_strtod_l+0x140>
 8011188:	2d08      	cmp	r5, #8
 801118a:	f100 0001 	add.w	r0, r0, #1
 801118e:	bfd4      	ite	le
 8011190:	fb02 3909 	mlale	r9, r2, r9, r3
 8011194:	fb02 3606 	mlagt	r6, r2, r6, r3
 8011198:	3501      	adds	r5, #1
 801119a:	9011      	str	r0, [sp, #68]	@ 0x44
 801119c:	e7c3      	b.n	8011126 <_strtod_l+0x14e>
 801119e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80111a0:	1c5a      	adds	r2, r3, #1
 80111a2:	9211      	str	r2, [sp, #68]	@ 0x44
 80111a4:	785a      	ldrb	r2, [r3, #1]
 80111a6:	b375      	cbz	r5, 8011206 <_strtod_l+0x22e>
 80111a8:	4607      	mov	r7, r0
 80111aa:	462b      	mov	r3, r5
 80111ac:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80111b0:	2909      	cmp	r1, #9
 80111b2:	d913      	bls.n	80111dc <_strtod_l+0x204>
 80111b4:	2101      	movs	r1, #1
 80111b6:	9106      	str	r1, [sp, #24]
 80111b8:	e7c6      	b.n	8011148 <_strtod_l+0x170>
 80111ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80111bc:	1c5a      	adds	r2, r3, #1
 80111be:	9211      	str	r2, [sp, #68]	@ 0x44
 80111c0:	785a      	ldrb	r2, [r3, #1]
 80111c2:	3001      	adds	r0, #1
 80111c4:	2a30      	cmp	r2, #48	@ 0x30
 80111c6:	d0f8      	beq.n	80111ba <_strtod_l+0x1e2>
 80111c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80111cc:	2b08      	cmp	r3, #8
 80111ce:	f200 8476 	bhi.w	8011abe <_strtod_l+0xae6>
 80111d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80111d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80111d6:	4607      	mov	r7, r0
 80111d8:	2000      	movs	r0, #0
 80111da:	4603      	mov	r3, r0
 80111dc:	3a30      	subs	r2, #48	@ 0x30
 80111de:	f100 0101 	add.w	r1, r0, #1
 80111e2:	d023      	beq.n	801122c <_strtod_l+0x254>
 80111e4:	440f      	add	r7, r1
 80111e6:	eb00 0c03 	add.w	ip, r0, r3
 80111ea:	4619      	mov	r1, r3
 80111ec:	240a      	movs	r4, #10
 80111ee:	4561      	cmp	r1, ip
 80111f0:	d10b      	bne.n	801120a <_strtod_l+0x232>
 80111f2:	1c5c      	adds	r4, r3, #1
 80111f4:	4403      	add	r3, r0
 80111f6:	2b08      	cmp	r3, #8
 80111f8:	4404      	add	r4, r0
 80111fa:	dc11      	bgt.n	8011220 <_strtod_l+0x248>
 80111fc:	230a      	movs	r3, #10
 80111fe:	fb03 2909 	mla	r9, r3, r9, r2
 8011202:	2100      	movs	r1, #0
 8011204:	e013      	b.n	801122e <_strtod_l+0x256>
 8011206:	4628      	mov	r0, r5
 8011208:	e7dc      	b.n	80111c4 <_strtod_l+0x1ec>
 801120a:	2908      	cmp	r1, #8
 801120c:	f101 0101 	add.w	r1, r1, #1
 8011210:	dc02      	bgt.n	8011218 <_strtod_l+0x240>
 8011212:	fb04 f909 	mul.w	r9, r4, r9
 8011216:	e7ea      	b.n	80111ee <_strtod_l+0x216>
 8011218:	2910      	cmp	r1, #16
 801121a:	bfd8      	it	le
 801121c:	4366      	mulle	r6, r4
 801121e:	e7e6      	b.n	80111ee <_strtod_l+0x216>
 8011220:	2b0f      	cmp	r3, #15
 8011222:	dcee      	bgt.n	8011202 <_strtod_l+0x22a>
 8011224:	230a      	movs	r3, #10
 8011226:	fb03 2606 	mla	r6, r3, r6, r2
 801122a:	e7ea      	b.n	8011202 <_strtod_l+0x22a>
 801122c:	461c      	mov	r4, r3
 801122e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	9211      	str	r2, [sp, #68]	@ 0x44
 8011234:	785a      	ldrb	r2, [r3, #1]
 8011236:	4608      	mov	r0, r1
 8011238:	4623      	mov	r3, r4
 801123a:	e7b7      	b.n	80111ac <_strtod_l+0x1d4>
 801123c:	2301      	movs	r3, #1
 801123e:	2700      	movs	r7, #0
 8011240:	9306      	str	r3, [sp, #24]
 8011242:	e786      	b.n	8011152 <_strtod_l+0x17a>
 8011244:	f04f 0e00 	mov.w	lr, #0
 8011248:	f108 0202 	add.w	r2, r8, #2
 801124c:	9211      	str	r2, [sp, #68]	@ 0x44
 801124e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011252:	e78f      	b.n	8011174 <_strtod_l+0x19c>
 8011254:	f04f 0e01 	mov.w	lr, #1
 8011258:	e7f6      	b.n	8011248 <_strtod_l+0x270>
 801125a:	bf00      	nop
 801125c:	08014318 	.word	0x08014318
 8011260:	08014300 	.word	0x08014300
 8011264:	7ff00000 	.word	0x7ff00000
 8011268:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801126a:	1c54      	adds	r4, r2, #1
 801126c:	9411      	str	r4, [sp, #68]	@ 0x44
 801126e:	7852      	ldrb	r2, [r2, #1]
 8011270:	2a30      	cmp	r2, #48	@ 0x30
 8011272:	d0f9      	beq.n	8011268 <_strtod_l+0x290>
 8011274:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8011278:	2c08      	cmp	r4, #8
 801127a:	d881      	bhi.n	8011180 <_strtod_l+0x1a8>
 801127c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8011280:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011282:	9209      	str	r2, [sp, #36]	@ 0x24
 8011284:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011286:	1c51      	adds	r1, r2, #1
 8011288:	9111      	str	r1, [sp, #68]	@ 0x44
 801128a:	7852      	ldrb	r2, [r2, #1]
 801128c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8011290:	2c09      	cmp	r4, #9
 8011292:	d938      	bls.n	8011306 <_strtod_l+0x32e>
 8011294:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8011296:	1b0c      	subs	r4, r1, r4
 8011298:	2c08      	cmp	r4, #8
 801129a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801129e:	dc02      	bgt.n	80112a6 <_strtod_l+0x2ce>
 80112a0:	4564      	cmp	r4, ip
 80112a2:	bfa8      	it	ge
 80112a4:	4664      	movge	r4, ip
 80112a6:	f1be 0f00 	cmp.w	lr, #0
 80112aa:	d000      	beq.n	80112ae <_strtod_l+0x2d6>
 80112ac:	4264      	negs	r4, r4
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d14e      	bne.n	8011350 <_strtod_l+0x378>
 80112b2:	9b07      	ldr	r3, [sp, #28]
 80112b4:	4318      	orrs	r0, r3
 80112b6:	f47f aeca 	bne.w	801104e <_strtod_l+0x76>
 80112ba:	9b06      	ldr	r3, [sp, #24]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f47f aee2 	bne.w	8011086 <_strtod_l+0xae>
 80112c2:	2a69      	cmp	r2, #105	@ 0x69
 80112c4:	d027      	beq.n	8011316 <_strtod_l+0x33e>
 80112c6:	dc24      	bgt.n	8011312 <_strtod_l+0x33a>
 80112c8:	2a49      	cmp	r2, #73	@ 0x49
 80112ca:	d024      	beq.n	8011316 <_strtod_l+0x33e>
 80112cc:	2a4e      	cmp	r2, #78	@ 0x4e
 80112ce:	f47f aeda 	bne.w	8011086 <_strtod_l+0xae>
 80112d2:	4997      	ldr	r1, [pc, #604]	@ (8011530 <_strtod_l+0x558>)
 80112d4:	a811      	add	r0, sp, #68	@ 0x44
 80112d6:	f001 fb63 	bl	80129a0 <__match>
 80112da:	2800      	cmp	r0, #0
 80112dc:	f43f aed3 	beq.w	8011086 <_strtod_l+0xae>
 80112e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	2b28      	cmp	r3, #40	@ 0x28
 80112e6:	d12d      	bne.n	8011344 <_strtod_l+0x36c>
 80112e8:	4992      	ldr	r1, [pc, #584]	@ (8011534 <_strtod_l+0x55c>)
 80112ea:	aa14      	add	r2, sp, #80	@ 0x50
 80112ec:	a811      	add	r0, sp, #68	@ 0x44
 80112ee:	f001 fb6b 	bl	80129c8 <__hexnan>
 80112f2:	2805      	cmp	r0, #5
 80112f4:	d126      	bne.n	8011344 <_strtod_l+0x36c>
 80112f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80112f8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80112fc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011300:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011304:	e6a3      	b.n	801104e <_strtod_l+0x76>
 8011306:	240a      	movs	r4, #10
 8011308:	fb04 2c0c 	mla	ip, r4, ip, r2
 801130c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8011310:	e7b8      	b.n	8011284 <_strtod_l+0x2ac>
 8011312:	2a6e      	cmp	r2, #110	@ 0x6e
 8011314:	e7db      	b.n	80112ce <_strtod_l+0x2f6>
 8011316:	4988      	ldr	r1, [pc, #544]	@ (8011538 <_strtod_l+0x560>)
 8011318:	a811      	add	r0, sp, #68	@ 0x44
 801131a:	f001 fb41 	bl	80129a0 <__match>
 801131e:	2800      	cmp	r0, #0
 8011320:	f43f aeb1 	beq.w	8011086 <_strtod_l+0xae>
 8011324:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011326:	4985      	ldr	r1, [pc, #532]	@ (801153c <_strtod_l+0x564>)
 8011328:	3b01      	subs	r3, #1
 801132a:	a811      	add	r0, sp, #68	@ 0x44
 801132c:	9311      	str	r3, [sp, #68]	@ 0x44
 801132e:	f001 fb37 	bl	80129a0 <__match>
 8011332:	b910      	cbnz	r0, 801133a <_strtod_l+0x362>
 8011334:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011336:	3301      	adds	r3, #1
 8011338:	9311      	str	r3, [sp, #68]	@ 0x44
 801133a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8011550 <_strtod_l+0x578>
 801133e:	f04f 0a00 	mov.w	sl, #0
 8011342:	e684      	b.n	801104e <_strtod_l+0x76>
 8011344:	487e      	ldr	r0, [pc, #504]	@ (8011540 <_strtod_l+0x568>)
 8011346:	f001 f867 	bl	8012418 <nan>
 801134a:	ec5b ab10 	vmov	sl, fp, d0
 801134e:	e67e      	b.n	801104e <_strtod_l+0x76>
 8011350:	ee07 9a90 	vmov	s15, r9
 8011354:	1be2      	subs	r2, r4, r7
 8011356:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801135a:	2d00      	cmp	r5, #0
 801135c:	bf08      	it	eq
 801135e:	461d      	moveq	r5, r3
 8011360:	2b10      	cmp	r3, #16
 8011362:	9209      	str	r2, [sp, #36]	@ 0x24
 8011364:	461a      	mov	r2, r3
 8011366:	bfa8      	it	ge
 8011368:	2210      	movge	r2, #16
 801136a:	2b09      	cmp	r3, #9
 801136c:	ec5b ab17 	vmov	sl, fp, d7
 8011370:	dc15      	bgt.n	801139e <_strtod_l+0x3c6>
 8011372:	1be1      	subs	r1, r4, r7
 8011374:	2900      	cmp	r1, #0
 8011376:	f43f ae6a 	beq.w	801104e <_strtod_l+0x76>
 801137a:	eba4 0107 	sub.w	r1, r4, r7
 801137e:	dd72      	ble.n	8011466 <_strtod_l+0x48e>
 8011380:	2916      	cmp	r1, #22
 8011382:	dc59      	bgt.n	8011438 <_strtod_l+0x460>
 8011384:	4b6f      	ldr	r3, [pc, #444]	@ (8011544 <_strtod_l+0x56c>)
 8011386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801138c:	ed93 7b00 	vldr	d7, [r3]
 8011390:	ec4b ab16 	vmov	d6, sl, fp
 8011394:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011398:	ec5b ab17 	vmov	sl, fp, d7
 801139c:	e657      	b.n	801104e <_strtod_l+0x76>
 801139e:	4969      	ldr	r1, [pc, #420]	@ (8011544 <_strtod_l+0x56c>)
 80113a0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80113a4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80113a8:	ee06 6a90 	vmov	s13, r6
 80113ac:	2b0f      	cmp	r3, #15
 80113ae:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80113b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80113b6:	ec5b ab16 	vmov	sl, fp, d6
 80113ba:	ddda      	ble.n	8011372 <_strtod_l+0x39a>
 80113bc:	1a9a      	subs	r2, r3, r2
 80113be:	1be1      	subs	r1, r4, r7
 80113c0:	440a      	add	r2, r1
 80113c2:	2a00      	cmp	r2, #0
 80113c4:	f340 8094 	ble.w	80114f0 <_strtod_l+0x518>
 80113c8:	f012 000f 	ands.w	r0, r2, #15
 80113cc:	d00a      	beq.n	80113e4 <_strtod_l+0x40c>
 80113ce:	495d      	ldr	r1, [pc, #372]	@ (8011544 <_strtod_l+0x56c>)
 80113d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80113d4:	ed91 7b00 	vldr	d7, [r1]
 80113d8:	ec4b ab16 	vmov	d6, sl, fp
 80113dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113e0:	ec5b ab17 	vmov	sl, fp, d7
 80113e4:	f032 020f 	bics.w	r2, r2, #15
 80113e8:	d073      	beq.n	80114d2 <_strtod_l+0x4fa>
 80113ea:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80113ee:	dd47      	ble.n	8011480 <_strtod_l+0x4a8>
 80113f0:	2400      	movs	r4, #0
 80113f2:	4625      	mov	r5, r4
 80113f4:	9407      	str	r4, [sp, #28]
 80113f6:	4626      	mov	r6, r4
 80113f8:	9a05      	ldr	r2, [sp, #20]
 80113fa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011550 <_strtod_l+0x578>
 80113fe:	2322      	movs	r3, #34	@ 0x22
 8011400:	6013      	str	r3, [r2, #0]
 8011402:	f04f 0a00 	mov.w	sl, #0
 8011406:	9b07      	ldr	r3, [sp, #28]
 8011408:	2b00      	cmp	r3, #0
 801140a:	f43f ae20 	beq.w	801104e <_strtod_l+0x76>
 801140e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011410:	9805      	ldr	r0, [sp, #20]
 8011412:	f7ff f957 	bl	80106c4 <_Bfree>
 8011416:	9805      	ldr	r0, [sp, #20]
 8011418:	4631      	mov	r1, r6
 801141a:	f7ff f953 	bl	80106c4 <_Bfree>
 801141e:	9805      	ldr	r0, [sp, #20]
 8011420:	4629      	mov	r1, r5
 8011422:	f7ff f94f 	bl	80106c4 <_Bfree>
 8011426:	9907      	ldr	r1, [sp, #28]
 8011428:	9805      	ldr	r0, [sp, #20]
 801142a:	f7ff f94b 	bl	80106c4 <_Bfree>
 801142e:	9805      	ldr	r0, [sp, #20]
 8011430:	4621      	mov	r1, r4
 8011432:	f7ff f947 	bl	80106c4 <_Bfree>
 8011436:	e60a      	b.n	801104e <_strtod_l+0x76>
 8011438:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801143c:	1be0      	subs	r0, r4, r7
 801143e:	4281      	cmp	r1, r0
 8011440:	dbbc      	blt.n	80113bc <_strtod_l+0x3e4>
 8011442:	4a40      	ldr	r2, [pc, #256]	@ (8011544 <_strtod_l+0x56c>)
 8011444:	f1c3 030f 	rsb	r3, r3, #15
 8011448:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801144c:	ed91 7b00 	vldr	d7, [r1]
 8011450:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011452:	ec4b ab16 	vmov	d6, sl, fp
 8011456:	1acb      	subs	r3, r1, r3
 8011458:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801145c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011460:	ed92 6b00 	vldr	d6, [r2]
 8011464:	e796      	b.n	8011394 <_strtod_l+0x3bc>
 8011466:	3116      	adds	r1, #22
 8011468:	dba8      	blt.n	80113bc <_strtod_l+0x3e4>
 801146a:	4b36      	ldr	r3, [pc, #216]	@ (8011544 <_strtod_l+0x56c>)
 801146c:	1b3c      	subs	r4, r7, r4
 801146e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011472:	ed94 7b00 	vldr	d7, [r4]
 8011476:	ec4b ab16 	vmov	d6, sl, fp
 801147a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801147e:	e78b      	b.n	8011398 <_strtod_l+0x3c0>
 8011480:	2000      	movs	r0, #0
 8011482:	ec4b ab17 	vmov	d7, sl, fp
 8011486:	4e30      	ldr	r6, [pc, #192]	@ (8011548 <_strtod_l+0x570>)
 8011488:	1112      	asrs	r2, r2, #4
 801148a:	4601      	mov	r1, r0
 801148c:	2a01      	cmp	r2, #1
 801148e:	dc23      	bgt.n	80114d8 <_strtod_l+0x500>
 8011490:	b108      	cbz	r0, 8011496 <_strtod_l+0x4be>
 8011492:	ec5b ab17 	vmov	sl, fp, d7
 8011496:	4a2c      	ldr	r2, [pc, #176]	@ (8011548 <_strtod_l+0x570>)
 8011498:	482c      	ldr	r0, [pc, #176]	@ (801154c <_strtod_l+0x574>)
 801149a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801149e:	ed92 7b00 	vldr	d7, [r2]
 80114a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80114a6:	ec4b ab16 	vmov	d6, sl, fp
 80114aa:	4a29      	ldr	r2, [pc, #164]	@ (8011550 <_strtod_l+0x578>)
 80114ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114b0:	ee17 1a90 	vmov	r1, s15
 80114b4:	400a      	ands	r2, r1
 80114b6:	4282      	cmp	r2, r0
 80114b8:	ec5b ab17 	vmov	sl, fp, d7
 80114bc:	d898      	bhi.n	80113f0 <_strtod_l+0x418>
 80114be:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80114c2:	4282      	cmp	r2, r0
 80114c4:	bf86      	itte	hi
 80114c6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8011554 <_strtod_l+0x57c>
 80114ca:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80114ce:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80114d2:	2200      	movs	r2, #0
 80114d4:	9206      	str	r2, [sp, #24]
 80114d6:	e076      	b.n	80115c6 <_strtod_l+0x5ee>
 80114d8:	f012 0f01 	tst.w	r2, #1
 80114dc:	d004      	beq.n	80114e8 <_strtod_l+0x510>
 80114de:	ed96 6b00 	vldr	d6, [r6]
 80114e2:	2001      	movs	r0, #1
 80114e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114e8:	3101      	adds	r1, #1
 80114ea:	1052      	asrs	r2, r2, #1
 80114ec:	3608      	adds	r6, #8
 80114ee:	e7cd      	b.n	801148c <_strtod_l+0x4b4>
 80114f0:	d0ef      	beq.n	80114d2 <_strtod_l+0x4fa>
 80114f2:	4252      	negs	r2, r2
 80114f4:	f012 000f 	ands.w	r0, r2, #15
 80114f8:	d00a      	beq.n	8011510 <_strtod_l+0x538>
 80114fa:	4912      	ldr	r1, [pc, #72]	@ (8011544 <_strtod_l+0x56c>)
 80114fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011500:	ed91 7b00 	vldr	d7, [r1]
 8011504:	ec4b ab16 	vmov	d6, sl, fp
 8011508:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801150c:	ec5b ab17 	vmov	sl, fp, d7
 8011510:	1112      	asrs	r2, r2, #4
 8011512:	d0de      	beq.n	80114d2 <_strtod_l+0x4fa>
 8011514:	2a1f      	cmp	r2, #31
 8011516:	dd1f      	ble.n	8011558 <_strtod_l+0x580>
 8011518:	2400      	movs	r4, #0
 801151a:	4625      	mov	r5, r4
 801151c:	9407      	str	r4, [sp, #28]
 801151e:	4626      	mov	r6, r4
 8011520:	9a05      	ldr	r2, [sp, #20]
 8011522:	2322      	movs	r3, #34	@ 0x22
 8011524:	f04f 0a00 	mov.w	sl, #0
 8011528:	f04f 0b00 	mov.w	fp, #0
 801152c:	6013      	str	r3, [r2, #0]
 801152e:	e76a      	b.n	8011406 <_strtod_l+0x42e>
 8011530:	080140ed 	.word	0x080140ed
 8011534:	08014304 	.word	0x08014304
 8011538:	080140e5 	.word	0x080140e5
 801153c:	0801411c 	.word	0x0801411c
 8011540:	080144ad 	.word	0x080144ad
 8011544:	08014238 	.word	0x08014238
 8011548:	08014210 	.word	0x08014210
 801154c:	7ca00000 	.word	0x7ca00000
 8011550:	7ff00000 	.word	0x7ff00000
 8011554:	7fefffff 	.word	0x7fefffff
 8011558:	f012 0110 	ands.w	r1, r2, #16
 801155c:	bf18      	it	ne
 801155e:	216a      	movne	r1, #106	@ 0x6a
 8011560:	9106      	str	r1, [sp, #24]
 8011562:	ec4b ab17 	vmov	d7, sl, fp
 8011566:	49b0      	ldr	r1, [pc, #704]	@ (8011828 <_strtod_l+0x850>)
 8011568:	2000      	movs	r0, #0
 801156a:	07d6      	lsls	r6, r2, #31
 801156c:	d504      	bpl.n	8011578 <_strtod_l+0x5a0>
 801156e:	ed91 6b00 	vldr	d6, [r1]
 8011572:	2001      	movs	r0, #1
 8011574:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011578:	1052      	asrs	r2, r2, #1
 801157a:	f101 0108 	add.w	r1, r1, #8
 801157e:	d1f4      	bne.n	801156a <_strtod_l+0x592>
 8011580:	b108      	cbz	r0, 8011586 <_strtod_l+0x5ae>
 8011582:	ec5b ab17 	vmov	sl, fp, d7
 8011586:	9a06      	ldr	r2, [sp, #24]
 8011588:	b1b2      	cbz	r2, 80115b8 <_strtod_l+0x5e0>
 801158a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801158e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8011592:	2a00      	cmp	r2, #0
 8011594:	4658      	mov	r0, fp
 8011596:	dd0f      	ble.n	80115b8 <_strtod_l+0x5e0>
 8011598:	2a1f      	cmp	r2, #31
 801159a:	dd55      	ble.n	8011648 <_strtod_l+0x670>
 801159c:	2a34      	cmp	r2, #52	@ 0x34
 801159e:	bfde      	ittt	le
 80115a0:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 80115a4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80115a8:	408a      	lslle	r2, r1
 80115aa:	f04f 0a00 	mov.w	sl, #0
 80115ae:	bfcc      	ite	gt
 80115b0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80115b4:	ea02 0b00 	andle.w	fp, r2, r0
 80115b8:	ec4b ab17 	vmov	d7, sl, fp
 80115bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c4:	d0a8      	beq.n	8011518 <_strtod_l+0x540>
 80115c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80115c8:	9805      	ldr	r0, [sp, #20]
 80115ca:	f8cd 9000 	str.w	r9, [sp]
 80115ce:	462a      	mov	r2, r5
 80115d0:	f7ff f8e0 	bl	8010794 <__s2b>
 80115d4:	9007      	str	r0, [sp, #28]
 80115d6:	2800      	cmp	r0, #0
 80115d8:	f43f af0a 	beq.w	80113f0 <_strtod_l+0x418>
 80115dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115de:	1b3f      	subs	r7, r7, r4
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	bfb4      	ite	lt
 80115e4:	463b      	movlt	r3, r7
 80115e6:	2300      	movge	r3, #0
 80115e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80115ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115ec:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8011818 <_strtod_l+0x840>
 80115f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80115f4:	2400      	movs	r4, #0
 80115f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80115f8:	4625      	mov	r5, r4
 80115fa:	9b07      	ldr	r3, [sp, #28]
 80115fc:	9805      	ldr	r0, [sp, #20]
 80115fe:	6859      	ldr	r1, [r3, #4]
 8011600:	f7ff f820 	bl	8010644 <_Balloc>
 8011604:	4606      	mov	r6, r0
 8011606:	2800      	cmp	r0, #0
 8011608:	f43f aef6 	beq.w	80113f8 <_strtod_l+0x420>
 801160c:	9b07      	ldr	r3, [sp, #28]
 801160e:	691a      	ldr	r2, [r3, #16]
 8011610:	ec4b ab19 	vmov	d9, sl, fp
 8011614:	3202      	adds	r2, #2
 8011616:	f103 010c 	add.w	r1, r3, #12
 801161a:	0092      	lsls	r2, r2, #2
 801161c:	300c      	adds	r0, #12
 801161e:	f7fe f91e 	bl	800f85e <memcpy>
 8011622:	eeb0 0b49 	vmov.f64	d0, d9
 8011626:	9805      	ldr	r0, [sp, #20]
 8011628:	aa14      	add	r2, sp, #80	@ 0x50
 801162a:	a913      	add	r1, sp, #76	@ 0x4c
 801162c:	f7ff fbee 	bl	8010e0c <__d2b>
 8011630:	9012      	str	r0, [sp, #72]	@ 0x48
 8011632:	2800      	cmp	r0, #0
 8011634:	f43f aee0 	beq.w	80113f8 <_strtod_l+0x420>
 8011638:	9805      	ldr	r0, [sp, #20]
 801163a:	2101      	movs	r1, #1
 801163c:	f7ff f940 	bl	80108c0 <__i2b>
 8011640:	4605      	mov	r5, r0
 8011642:	b940      	cbnz	r0, 8011656 <_strtod_l+0x67e>
 8011644:	2500      	movs	r5, #0
 8011646:	e6d7      	b.n	80113f8 <_strtod_l+0x420>
 8011648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801164c:	fa01 f202 	lsl.w	r2, r1, r2
 8011650:	ea02 0a0a 	and.w	sl, r2, sl
 8011654:	e7b0      	b.n	80115b8 <_strtod_l+0x5e0>
 8011656:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8011658:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801165a:	2f00      	cmp	r7, #0
 801165c:	bfab      	itete	ge
 801165e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8011660:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8011662:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8011666:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801166a:	bfac      	ite	ge
 801166c:	eb07 0903 	addge.w	r9, r7, r3
 8011670:	eba3 0807 	sublt.w	r8, r3, r7
 8011674:	9b06      	ldr	r3, [sp, #24]
 8011676:	1aff      	subs	r7, r7, r3
 8011678:	4417      	add	r7, r2
 801167a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801167e:	4a6b      	ldr	r2, [pc, #428]	@ (801182c <_strtod_l+0x854>)
 8011680:	3f01      	subs	r7, #1
 8011682:	4297      	cmp	r7, r2
 8011684:	da51      	bge.n	801172a <_strtod_l+0x752>
 8011686:	1bd1      	subs	r1, r2, r7
 8011688:	291f      	cmp	r1, #31
 801168a:	eba3 0301 	sub.w	r3, r3, r1
 801168e:	f04f 0201 	mov.w	r2, #1
 8011692:	dc3e      	bgt.n	8011712 <_strtod_l+0x73a>
 8011694:	408a      	lsls	r2, r1
 8011696:	920c      	str	r2, [sp, #48]	@ 0x30
 8011698:	2200      	movs	r2, #0
 801169a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801169c:	eb09 0703 	add.w	r7, r9, r3
 80116a0:	4498      	add	r8, r3
 80116a2:	9b06      	ldr	r3, [sp, #24]
 80116a4:	45b9      	cmp	r9, r7
 80116a6:	4498      	add	r8, r3
 80116a8:	464b      	mov	r3, r9
 80116aa:	bfa8      	it	ge
 80116ac:	463b      	movge	r3, r7
 80116ae:	4543      	cmp	r3, r8
 80116b0:	bfa8      	it	ge
 80116b2:	4643      	movge	r3, r8
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	bfc2      	ittt	gt
 80116b8:	1aff      	subgt	r7, r7, r3
 80116ba:	eba8 0803 	subgt.w	r8, r8, r3
 80116be:	eba9 0903 	subgt.w	r9, r9, r3
 80116c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	dd16      	ble.n	80116f6 <_strtod_l+0x71e>
 80116c8:	4629      	mov	r1, r5
 80116ca:	9805      	ldr	r0, [sp, #20]
 80116cc:	461a      	mov	r2, r3
 80116ce:	f7ff f9b7 	bl	8010a40 <__pow5mult>
 80116d2:	4605      	mov	r5, r0
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d0b5      	beq.n	8011644 <_strtod_l+0x66c>
 80116d8:	4601      	mov	r1, r0
 80116da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80116dc:	9805      	ldr	r0, [sp, #20]
 80116de:	f7ff f905 	bl	80108ec <__multiply>
 80116e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80116e4:	2800      	cmp	r0, #0
 80116e6:	f43f ae87 	beq.w	80113f8 <_strtod_l+0x420>
 80116ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80116ec:	9805      	ldr	r0, [sp, #20]
 80116ee:	f7fe ffe9 	bl	80106c4 <_Bfree>
 80116f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80116f6:	2f00      	cmp	r7, #0
 80116f8:	dc1b      	bgt.n	8011732 <_strtod_l+0x75a>
 80116fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	dd21      	ble.n	8011744 <_strtod_l+0x76c>
 8011700:	4631      	mov	r1, r6
 8011702:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011704:	9805      	ldr	r0, [sp, #20]
 8011706:	f7ff f99b 	bl	8010a40 <__pow5mult>
 801170a:	4606      	mov	r6, r0
 801170c:	b9d0      	cbnz	r0, 8011744 <_strtod_l+0x76c>
 801170e:	2600      	movs	r6, #0
 8011710:	e672      	b.n	80113f8 <_strtod_l+0x420>
 8011712:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8011716:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801171a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801171e:	37e2      	adds	r7, #226	@ 0xe2
 8011720:	fa02 f107 	lsl.w	r1, r2, r7
 8011724:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011726:	920c      	str	r2, [sp, #48]	@ 0x30
 8011728:	e7b8      	b.n	801169c <_strtod_l+0x6c4>
 801172a:	2200      	movs	r2, #0
 801172c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801172e:	2201      	movs	r2, #1
 8011730:	e7f9      	b.n	8011726 <_strtod_l+0x74e>
 8011732:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011734:	9805      	ldr	r0, [sp, #20]
 8011736:	463a      	mov	r2, r7
 8011738:	f7ff f9dc 	bl	8010af4 <__lshift>
 801173c:	9012      	str	r0, [sp, #72]	@ 0x48
 801173e:	2800      	cmp	r0, #0
 8011740:	d1db      	bne.n	80116fa <_strtod_l+0x722>
 8011742:	e659      	b.n	80113f8 <_strtod_l+0x420>
 8011744:	f1b8 0f00 	cmp.w	r8, #0
 8011748:	dd07      	ble.n	801175a <_strtod_l+0x782>
 801174a:	4631      	mov	r1, r6
 801174c:	9805      	ldr	r0, [sp, #20]
 801174e:	4642      	mov	r2, r8
 8011750:	f7ff f9d0 	bl	8010af4 <__lshift>
 8011754:	4606      	mov	r6, r0
 8011756:	2800      	cmp	r0, #0
 8011758:	d0d9      	beq.n	801170e <_strtod_l+0x736>
 801175a:	f1b9 0f00 	cmp.w	r9, #0
 801175e:	dd08      	ble.n	8011772 <_strtod_l+0x79a>
 8011760:	4629      	mov	r1, r5
 8011762:	9805      	ldr	r0, [sp, #20]
 8011764:	464a      	mov	r2, r9
 8011766:	f7ff f9c5 	bl	8010af4 <__lshift>
 801176a:	4605      	mov	r5, r0
 801176c:	2800      	cmp	r0, #0
 801176e:	f43f ae43 	beq.w	80113f8 <_strtod_l+0x420>
 8011772:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011774:	9805      	ldr	r0, [sp, #20]
 8011776:	4632      	mov	r2, r6
 8011778:	f7ff fa44 	bl	8010c04 <__mdiff>
 801177c:	4604      	mov	r4, r0
 801177e:	2800      	cmp	r0, #0
 8011780:	f43f ae3a 	beq.w	80113f8 <_strtod_l+0x420>
 8011784:	2300      	movs	r3, #0
 8011786:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801178a:	60c3      	str	r3, [r0, #12]
 801178c:	4629      	mov	r1, r5
 801178e:	f7ff fa1d 	bl	8010bcc <__mcmp>
 8011792:	2800      	cmp	r0, #0
 8011794:	da4e      	bge.n	8011834 <_strtod_l+0x85c>
 8011796:	ea58 080a 	orrs.w	r8, r8, sl
 801179a:	d174      	bne.n	8011886 <_strtod_l+0x8ae>
 801179c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d170      	bne.n	8011886 <_strtod_l+0x8ae>
 80117a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80117a8:	0d1b      	lsrs	r3, r3, #20
 80117aa:	051b      	lsls	r3, r3, #20
 80117ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80117b0:	d969      	bls.n	8011886 <_strtod_l+0x8ae>
 80117b2:	6963      	ldr	r3, [r4, #20]
 80117b4:	b913      	cbnz	r3, 80117bc <_strtod_l+0x7e4>
 80117b6:	6923      	ldr	r3, [r4, #16]
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	dd64      	ble.n	8011886 <_strtod_l+0x8ae>
 80117bc:	4621      	mov	r1, r4
 80117be:	2201      	movs	r2, #1
 80117c0:	9805      	ldr	r0, [sp, #20]
 80117c2:	f7ff f997 	bl	8010af4 <__lshift>
 80117c6:	4629      	mov	r1, r5
 80117c8:	4604      	mov	r4, r0
 80117ca:	f7ff f9ff 	bl	8010bcc <__mcmp>
 80117ce:	2800      	cmp	r0, #0
 80117d0:	dd59      	ble.n	8011886 <_strtod_l+0x8ae>
 80117d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80117d6:	9a06      	ldr	r2, [sp, #24]
 80117d8:	0d1b      	lsrs	r3, r3, #20
 80117da:	051b      	lsls	r3, r3, #20
 80117dc:	2a00      	cmp	r2, #0
 80117de:	d070      	beq.n	80118c2 <_strtod_l+0x8ea>
 80117e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80117e4:	d86d      	bhi.n	80118c2 <_strtod_l+0x8ea>
 80117e6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80117ea:	f67f ae99 	bls.w	8011520 <_strtod_l+0x548>
 80117ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8011820 <_strtod_l+0x848>
 80117f2:	ec4b ab16 	vmov	d6, sl, fp
 80117f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011830 <_strtod_l+0x858>)
 80117f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80117fc:	ee17 2a90 	vmov	r2, s15
 8011800:	4013      	ands	r3, r2
 8011802:	ec5b ab17 	vmov	sl, fp, d7
 8011806:	2b00      	cmp	r3, #0
 8011808:	f47f ae01 	bne.w	801140e <_strtod_l+0x436>
 801180c:	9a05      	ldr	r2, [sp, #20]
 801180e:	2322      	movs	r3, #34	@ 0x22
 8011810:	6013      	str	r3, [r2, #0]
 8011812:	e5fc      	b.n	801140e <_strtod_l+0x436>
 8011814:	f3af 8000 	nop.w
 8011818:	ffc00000 	.word	0xffc00000
 801181c:	41dfffff 	.word	0x41dfffff
 8011820:	00000000 	.word	0x00000000
 8011824:	39500000 	.word	0x39500000
 8011828:	08014330 	.word	0x08014330
 801182c:	fffffc02 	.word	0xfffffc02
 8011830:	7ff00000 	.word	0x7ff00000
 8011834:	46d9      	mov	r9, fp
 8011836:	d15d      	bne.n	80118f4 <_strtod_l+0x91c>
 8011838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801183c:	f1b8 0f00 	cmp.w	r8, #0
 8011840:	d02a      	beq.n	8011898 <_strtod_l+0x8c0>
 8011842:	4aab      	ldr	r2, [pc, #684]	@ (8011af0 <_strtod_l+0xb18>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d12a      	bne.n	801189e <_strtod_l+0x8c6>
 8011848:	9b06      	ldr	r3, [sp, #24]
 801184a:	4652      	mov	r2, sl
 801184c:	b1fb      	cbz	r3, 801188e <_strtod_l+0x8b6>
 801184e:	4ba9      	ldr	r3, [pc, #676]	@ (8011af4 <_strtod_l+0xb1c>)
 8011850:	ea0b 0303 	and.w	r3, fp, r3
 8011854:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011858:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801185c:	d81a      	bhi.n	8011894 <_strtod_l+0x8bc>
 801185e:	0d1b      	lsrs	r3, r3, #20
 8011860:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011864:	fa01 f303 	lsl.w	r3, r1, r3
 8011868:	429a      	cmp	r2, r3
 801186a:	d118      	bne.n	801189e <_strtod_l+0x8c6>
 801186c:	4ba2      	ldr	r3, [pc, #648]	@ (8011af8 <_strtod_l+0xb20>)
 801186e:	4599      	cmp	r9, r3
 8011870:	d102      	bne.n	8011878 <_strtod_l+0x8a0>
 8011872:	3201      	adds	r2, #1
 8011874:	f43f adc0 	beq.w	80113f8 <_strtod_l+0x420>
 8011878:	4b9e      	ldr	r3, [pc, #632]	@ (8011af4 <_strtod_l+0xb1c>)
 801187a:	ea09 0303 	and.w	r3, r9, r3
 801187e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8011882:	f04f 0a00 	mov.w	sl, #0
 8011886:	9b06      	ldr	r3, [sp, #24]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d1b0      	bne.n	80117ee <_strtod_l+0x816>
 801188c:	e5bf      	b.n	801140e <_strtod_l+0x436>
 801188e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011892:	e7e9      	b.n	8011868 <_strtod_l+0x890>
 8011894:	460b      	mov	r3, r1
 8011896:	e7e7      	b.n	8011868 <_strtod_l+0x890>
 8011898:	ea53 030a 	orrs.w	r3, r3, sl
 801189c:	d099      	beq.n	80117d2 <_strtod_l+0x7fa>
 801189e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118a0:	b1c3      	cbz	r3, 80118d4 <_strtod_l+0x8fc>
 80118a2:	ea13 0f09 	tst.w	r3, r9
 80118a6:	d0ee      	beq.n	8011886 <_strtod_l+0x8ae>
 80118a8:	9a06      	ldr	r2, [sp, #24]
 80118aa:	4650      	mov	r0, sl
 80118ac:	4659      	mov	r1, fp
 80118ae:	f1b8 0f00 	cmp.w	r8, #0
 80118b2:	d013      	beq.n	80118dc <_strtod_l+0x904>
 80118b4:	f7ff fb75 	bl	8010fa2 <sulp>
 80118b8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80118bc:	ec5b ab17 	vmov	sl, fp, d7
 80118c0:	e7e1      	b.n	8011886 <_strtod_l+0x8ae>
 80118c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80118c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80118ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80118ce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80118d2:	e7d8      	b.n	8011886 <_strtod_l+0x8ae>
 80118d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118d6:	ea13 0f0a 	tst.w	r3, sl
 80118da:	e7e4      	b.n	80118a6 <_strtod_l+0x8ce>
 80118dc:	f7ff fb61 	bl	8010fa2 <sulp>
 80118e0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80118e4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80118e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ec:	ec5b ab10 	vmov	sl, fp, d0
 80118f0:	d1c9      	bne.n	8011886 <_strtod_l+0x8ae>
 80118f2:	e615      	b.n	8011520 <_strtod_l+0x548>
 80118f4:	4629      	mov	r1, r5
 80118f6:	4620      	mov	r0, r4
 80118f8:	f7ff fae0 	bl	8010ebc <__ratio>
 80118fc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8011900:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011908:	d85d      	bhi.n	80119c6 <_strtod_l+0x9ee>
 801190a:	f1b8 0f00 	cmp.w	r8, #0
 801190e:	d164      	bne.n	80119da <_strtod_l+0xa02>
 8011910:	f1ba 0f00 	cmp.w	sl, #0
 8011914:	d14b      	bne.n	80119ae <_strtod_l+0x9d6>
 8011916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801191a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d160      	bne.n	80119e4 <_strtod_l+0xa0c>
 8011922:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8011926:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192e:	d401      	bmi.n	8011934 <_strtod_l+0x95c>
 8011930:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011934:	eeb1 ab48 	vneg.f64	d10, d8
 8011938:	486e      	ldr	r0, [pc, #440]	@ (8011af4 <_strtod_l+0xb1c>)
 801193a:	4970      	ldr	r1, [pc, #448]	@ (8011afc <_strtod_l+0xb24>)
 801193c:	ea09 0700 	and.w	r7, r9, r0
 8011940:	428f      	cmp	r7, r1
 8011942:	ec53 2b1a 	vmov	r2, r3, d10
 8011946:	d17d      	bne.n	8011a44 <_strtod_l+0xa6c>
 8011948:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801194c:	ec4b ab1c 	vmov	d12, sl, fp
 8011950:	eeb0 0b4c 	vmov.f64	d0, d12
 8011954:	f7ff f9ea 	bl	8010d2c <__ulp>
 8011958:	4866      	ldr	r0, [pc, #408]	@ (8011af4 <_strtod_l+0xb1c>)
 801195a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801195e:	ee1c 3a90 	vmov	r3, s25
 8011962:	4a67      	ldr	r2, [pc, #412]	@ (8011b00 <_strtod_l+0xb28>)
 8011964:	ea03 0100 	and.w	r1, r3, r0
 8011968:	4291      	cmp	r1, r2
 801196a:	ec5b ab1c 	vmov	sl, fp, d12
 801196e:	d93c      	bls.n	80119ea <_strtod_l+0xa12>
 8011970:	ee19 2a90 	vmov	r2, s19
 8011974:	4b60      	ldr	r3, [pc, #384]	@ (8011af8 <_strtod_l+0xb20>)
 8011976:	429a      	cmp	r2, r3
 8011978:	d104      	bne.n	8011984 <_strtod_l+0x9ac>
 801197a:	ee19 3a10 	vmov	r3, s18
 801197e:	3301      	adds	r3, #1
 8011980:	f43f ad3a 	beq.w	80113f8 <_strtod_l+0x420>
 8011984:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8011af8 <_strtod_l+0xb20>
 8011988:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801198c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801198e:	9805      	ldr	r0, [sp, #20]
 8011990:	f7fe fe98 	bl	80106c4 <_Bfree>
 8011994:	9805      	ldr	r0, [sp, #20]
 8011996:	4631      	mov	r1, r6
 8011998:	f7fe fe94 	bl	80106c4 <_Bfree>
 801199c:	9805      	ldr	r0, [sp, #20]
 801199e:	4629      	mov	r1, r5
 80119a0:	f7fe fe90 	bl	80106c4 <_Bfree>
 80119a4:	9805      	ldr	r0, [sp, #20]
 80119a6:	4621      	mov	r1, r4
 80119a8:	f7fe fe8c 	bl	80106c4 <_Bfree>
 80119ac:	e625      	b.n	80115fa <_strtod_l+0x622>
 80119ae:	f1ba 0f01 	cmp.w	sl, #1
 80119b2:	d103      	bne.n	80119bc <_strtod_l+0x9e4>
 80119b4:	f1bb 0f00 	cmp.w	fp, #0
 80119b8:	f43f adb2 	beq.w	8011520 <_strtod_l+0x548>
 80119bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80119c0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80119c4:	e7b8      	b.n	8011938 <_strtod_l+0x960>
 80119c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80119ca:	ee20 8b08 	vmul.f64	d8, d0, d8
 80119ce:	f1b8 0f00 	cmp.w	r8, #0
 80119d2:	d0af      	beq.n	8011934 <_strtod_l+0x95c>
 80119d4:	eeb0 ab48 	vmov.f64	d10, d8
 80119d8:	e7ae      	b.n	8011938 <_strtod_l+0x960>
 80119da:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80119de:	eeb0 8b4a 	vmov.f64	d8, d10
 80119e2:	e7a9      	b.n	8011938 <_strtod_l+0x960>
 80119e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80119e8:	e7a6      	b.n	8011938 <_strtod_l+0x960>
 80119ea:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80119ee:	9b06      	ldr	r3, [sp, #24]
 80119f0:	46d9      	mov	r9, fp
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1ca      	bne.n	801198c <_strtod_l+0x9b4>
 80119f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119fa:	0d1b      	lsrs	r3, r3, #20
 80119fc:	051b      	lsls	r3, r3, #20
 80119fe:	429f      	cmp	r7, r3
 8011a00:	d1c4      	bne.n	801198c <_strtod_l+0x9b4>
 8011a02:	ec51 0b18 	vmov	r0, r1, d8
 8011a06:	f7ee fe97 	bl	8000738 <__aeabi_d2lz>
 8011a0a:	f7ee fe4f 	bl	80006ac <__aeabi_l2d>
 8011a0e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8011a12:	ec41 0b17 	vmov	d7, r0, r1
 8011a16:	ea49 090a 	orr.w	r9, r9, sl
 8011a1a:	ea59 0908 	orrs.w	r9, r9, r8
 8011a1e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8011a22:	d03c      	beq.n	8011a9e <_strtod_l+0xac6>
 8011a24:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011ad8 <_strtod_l+0xb00>
 8011a28:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a30:	f53f aced 	bmi.w	801140e <_strtod_l+0x436>
 8011a34:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011ae0 <_strtod_l+0xb08>
 8011a38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a40:	dda4      	ble.n	801198c <_strtod_l+0x9b4>
 8011a42:	e4e4      	b.n	801140e <_strtod_l+0x436>
 8011a44:	9906      	ldr	r1, [sp, #24]
 8011a46:	b1e1      	cbz	r1, 8011a82 <_strtod_l+0xaaa>
 8011a48:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8011a4c:	d819      	bhi.n	8011a82 <_strtod_l+0xaaa>
 8011a4e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a56:	d811      	bhi.n	8011a7c <_strtod_l+0xaa4>
 8011a58:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8011a5c:	ee18 3a10 	vmov	r3, s16
 8011a60:	2b01      	cmp	r3, #1
 8011a62:	bf38      	it	cc
 8011a64:	2301      	movcc	r3, #1
 8011a66:	ee08 3a10 	vmov	s16, r3
 8011a6a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8011a6e:	f1b8 0f00 	cmp.w	r8, #0
 8011a72:	d111      	bne.n	8011a98 <_strtod_l+0xac0>
 8011a74:	eeb1 7b48 	vneg.f64	d7, d8
 8011a78:	ec53 2b17 	vmov	r2, r3, d7
 8011a7c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8011a80:	1bcb      	subs	r3, r1, r7
 8011a82:	eeb0 0b49 	vmov.f64	d0, d9
 8011a86:	ec43 2b1a 	vmov	d10, r2, r3
 8011a8a:	f7ff f94f 	bl	8010d2c <__ulp>
 8011a8e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8011a92:	ec5b ab19 	vmov	sl, fp, d9
 8011a96:	e7aa      	b.n	80119ee <_strtod_l+0xa16>
 8011a98:	eeb0 7b48 	vmov.f64	d7, d8
 8011a9c:	e7ec      	b.n	8011a78 <_strtod_l+0xaa0>
 8011a9e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8011ae8 <_strtod_l+0xb10>
 8011aa2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aaa:	f57f af6f 	bpl.w	801198c <_strtod_l+0x9b4>
 8011aae:	e4ae      	b.n	801140e <_strtod_l+0x436>
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	9308      	str	r3, [sp, #32]
 8011ab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ab6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011ab8:	6013      	str	r3, [r2, #0]
 8011aba:	f7ff bacc 	b.w	8011056 <_strtod_l+0x7e>
 8011abe:	2a65      	cmp	r2, #101	@ 0x65
 8011ac0:	f43f abbc 	beq.w	801123c <_strtod_l+0x264>
 8011ac4:	2a45      	cmp	r2, #69	@ 0x45
 8011ac6:	f43f abb9 	beq.w	801123c <_strtod_l+0x264>
 8011aca:	2301      	movs	r3, #1
 8011acc:	9306      	str	r3, [sp, #24]
 8011ace:	f7ff bbf0 	b.w	80112b2 <_strtod_l+0x2da>
 8011ad2:	bf00      	nop
 8011ad4:	f3af 8000 	nop.w
 8011ad8:	94a03595 	.word	0x94a03595
 8011adc:	3fdfffff 	.word	0x3fdfffff
 8011ae0:	35afe535 	.word	0x35afe535
 8011ae4:	3fe00000 	.word	0x3fe00000
 8011ae8:	94a03595 	.word	0x94a03595
 8011aec:	3fcfffff 	.word	0x3fcfffff
 8011af0:	000fffff 	.word	0x000fffff
 8011af4:	7ff00000 	.word	0x7ff00000
 8011af8:	7fefffff 	.word	0x7fefffff
 8011afc:	7fe00000 	.word	0x7fe00000
 8011b00:	7c9fffff 	.word	0x7c9fffff

08011b04 <_strtod_r>:
 8011b04:	4b01      	ldr	r3, [pc, #4]	@ (8011b0c <_strtod_r+0x8>)
 8011b06:	f7ff ba67 	b.w	8010fd8 <_strtod_l>
 8011b0a:	bf00      	nop
 8011b0c:	24000078 	.word	0x24000078

08011b10 <_strtol_l.constprop.0>:
 8011b10:	2b24      	cmp	r3, #36	@ 0x24
 8011b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b16:	4686      	mov	lr, r0
 8011b18:	4690      	mov	r8, r2
 8011b1a:	d801      	bhi.n	8011b20 <_strtol_l.constprop.0+0x10>
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d106      	bne.n	8011b2e <_strtol_l.constprop.0+0x1e>
 8011b20:	f7fd fe70 	bl	800f804 <__errno>
 8011b24:	2316      	movs	r3, #22
 8011b26:	6003      	str	r3, [r0, #0]
 8011b28:	2000      	movs	r0, #0
 8011b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b2e:	4834      	ldr	r0, [pc, #208]	@ (8011c00 <_strtol_l.constprop.0+0xf0>)
 8011b30:	460d      	mov	r5, r1
 8011b32:	462a      	mov	r2, r5
 8011b34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b38:	5d06      	ldrb	r6, [r0, r4]
 8011b3a:	f016 0608 	ands.w	r6, r6, #8
 8011b3e:	d1f8      	bne.n	8011b32 <_strtol_l.constprop.0+0x22>
 8011b40:	2c2d      	cmp	r4, #45	@ 0x2d
 8011b42:	d12d      	bne.n	8011ba0 <_strtol_l.constprop.0+0x90>
 8011b44:	782c      	ldrb	r4, [r5, #0]
 8011b46:	2601      	movs	r6, #1
 8011b48:	1c95      	adds	r5, r2, #2
 8011b4a:	f033 0210 	bics.w	r2, r3, #16
 8011b4e:	d109      	bne.n	8011b64 <_strtol_l.constprop.0+0x54>
 8011b50:	2c30      	cmp	r4, #48	@ 0x30
 8011b52:	d12a      	bne.n	8011baa <_strtol_l.constprop.0+0x9a>
 8011b54:	782a      	ldrb	r2, [r5, #0]
 8011b56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011b5a:	2a58      	cmp	r2, #88	@ 0x58
 8011b5c:	d125      	bne.n	8011baa <_strtol_l.constprop.0+0x9a>
 8011b5e:	786c      	ldrb	r4, [r5, #1]
 8011b60:	2310      	movs	r3, #16
 8011b62:	3502      	adds	r5, #2
 8011b64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011b68:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	fbbc f9f3 	udiv	r9, ip, r3
 8011b72:	4610      	mov	r0, r2
 8011b74:	fb03 ca19 	mls	sl, r3, r9, ip
 8011b78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011b7c:	2f09      	cmp	r7, #9
 8011b7e:	d81b      	bhi.n	8011bb8 <_strtol_l.constprop.0+0xa8>
 8011b80:	463c      	mov	r4, r7
 8011b82:	42a3      	cmp	r3, r4
 8011b84:	dd27      	ble.n	8011bd6 <_strtol_l.constprop.0+0xc6>
 8011b86:	1c57      	adds	r7, r2, #1
 8011b88:	d007      	beq.n	8011b9a <_strtol_l.constprop.0+0x8a>
 8011b8a:	4581      	cmp	r9, r0
 8011b8c:	d320      	bcc.n	8011bd0 <_strtol_l.constprop.0+0xc0>
 8011b8e:	d101      	bne.n	8011b94 <_strtol_l.constprop.0+0x84>
 8011b90:	45a2      	cmp	sl, r4
 8011b92:	db1d      	blt.n	8011bd0 <_strtol_l.constprop.0+0xc0>
 8011b94:	fb00 4003 	mla	r0, r0, r3, r4
 8011b98:	2201      	movs	r2, #1
 8011b9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b9e:	e7eb      	b.n	8011b78 <_strtol_l.constprop.0+0x68>
 8011ba0:	2c2b      	cmp	r4, #43	@ 0x2b
 8011ba2:	bf04      	itt	eq
 8011ba4:	782c      	ldrbeq	r4, [r5, #0]
 8011ba6:	1c95      	addeq	r5, r2, #2
 8011ba8:	e7cf      	b.n	8011b4a <_strtol_l.constprop.0+0x3a>
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d1da      	bne.n	8011b64 <_strtol_l.constprop.0+0x54>
 8011bae:	2c30      	cmp	r4, #48	@ 0x30
 8011bb0:	bf0c      	ite	eq
 8011bb2:	2308      	moveq	r3, #8
 8011bb4:	230a      	movne	r3, #10
 8011bb6:	e7d5      	b.n	8011b64 <_strtol_l.constprop.0+0x54>
 8011bb8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011bbc:	2f19      	cmp	r7, #25
 8011bbe:	d801      	bhi.n	8011bc4 <_strtol_l.constprop.0+0xb4>
 8011bc0:	3c37      	subs	r4, #55	@ 0x37
 8011bc2:	e7de      	b.n	8011b82 <_strtol_l.constprop.0+0x72>
 8011bc4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011bc8:	2f19      	cmp	r7, #25
 8011bca:	d804      	bhi.n	8011bd6 <_strtol_l.constprop.0+0xc6>
 8011bcc:	3c57      	subs	r4, #87	@ 0x57
 8011bce:	e7d8      	b.n	8011b82 <_strtol_l.constprop.0+0x72>
 8011bd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011bd4:	e7e1      	b.n	8011b9a <_strtol_l.constprop.0+0x8a>
 8011bd6:	1c53      	adds	r3, r2, #1
 8011bd8:	d108      	bne.n	8011bec <_strtol_l.constprop.0+0xdc>
 8011bda:	2322      	movs	r3, #34	@ 0x22
 8011bdc:	f8ce 3000 	str.w	r3, [lr]
 8011be0:	4660      	mov	r0, ip
 8011be2:	f1b8 0f00 	cmp.w	r8, #0
 8011be6:	d0a0      	beq.n	8011b2a <_strtol_l.constprop.0+0x1a>
 8011be8:	1e69      	subs	r1, r5, #1
 8011bea:	e006      	b.n	8011bfa <_strtol_l.constprop.0+0xea>
 8011bec:	b106      	cbz	r6, 8011bf0 <_strtol_l.constprop.0+0xe0>
 8011bee:	4240      	negs	r0, r0
 8011bf0:	f1b8 0f00 	cmp.w	r8, #0
 8011bf4:	d099      	beq.n	8011b2a <_strtol_l.constprop.0+0x1a>
 8011bf6:	2a00      	cmp	r2, #0
 8011bf8:	d1f6      	bne.n	8011be8 <_strtol_l.constprop.0+0xd8>
 8011bfa:	f8c8 1000 	str.w	r1, [r8]
 8011bfe:	e794      	b.n	8011b2a <_strtol_l.constprop.0+0x1a>
 8011c00:	08014359 	.word	0x08014359

08011c04 <_strtol_r>:
 8011c04:	f7ff bf84 	b.w	8011b10 <_strtol_l.constprop.0>

08011c08 <__ssputs_r>:
 8011c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c0c:	688e      	ldr	r6, [r1, #8]
 8011c0e:	461f      	mov	r7, r3
 8011c10:	42be      	cmp	r6, r7
 8011c12:	680b      	ldr	r3, [r1, #0]
 8011c14:	4682      	mov	sl, r0
 8011c16:	460c      	mov	r4, r1
 8011c18:	4690      	mov	r8, r2
 8011c1a:	d82d      	bhi.n	8011c78 <__ssputs_r+0x70>
 8011c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c24:	d026      	beq.n	8011c74 <__ssputs_r+0x6c>
 8011c26:	6965      	ldr	r5, [r4, #20]
 8011c28:	6909      	ldr	r1, [r1, #16]
 8011c2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c2e:	eba3 0901 	sub.w	r9, r3, r1
 8011c32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c36:	1c7b      	adds	r3, r7, #1
 8011c38:	444b      	add	r3, r9
 8011c3a:	106d      	asrs	r5, r5, #1
 8011c3c:	429d      	cmp	r5, r3
 8011c3e:	bf38      	it	cc
 8011c40:	461d      	movcc	r5, r3
 8011c42:	0553      	lsls	r3, r2, #21
 8011c44:	d527      	bpl.n	8011c96 <__ssputs_r+0x8e>
 8011c46:	4629      	mov	r1, r5
 8011c48:	f7fe fc70 	bl	801052c <_malloc_r>
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	b360      	cbz	r0, 8011caa <__ssputs_r+0xa2>
 8011c50:	6921      	ldr	r1, [r4, #16]
 8011c52:	464a      	mov	r2, r9
 8011c54:	f7fd fe03 	bl	800f85e <memcpy>
 8011c58:	89a3      	ldrh	r3, [r4, #12]
 8011c5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c62:	81a3      	strh	r3, [r4, #12]
 8011c64:	6126      	str	r6, [r4, #16]
 8011c66:	6165      	str	r5, [r4, #20]
 8011c68:	444e      	add	r6, r9
 8011c6a:	eba5 0509 	sub.w	r5, r5, r9
 8011c6e:	6026      	str	r6, [r4, #0]
 8011c70:	60a5      	str	r5, [r4, #8]
 8011c72:	463e      	mov	r6, r7
 8011c74:	42be      	cmp	r6, r7
 8011c76:	d900      	bls.n	8011c7a <__ssputs_r+0x72>
 8011c78:	463e      	mov	r6, r7
 8011c7a:	6820      	ldr	r0, [r4, #0]
 8011c7c:	4632      	mov	r2, r6
 8011c7e:	4641      	mov	r1, r8
 8011c80:	f000 fb6a 	bl	8012358 <memmove>
 8011c84:	68a3      	ldr	r3, [r4, #8]
 8011c86:	1b9b      	subs	r3, r3, r6
 8011c88:	60a3      	str	r3, [r4, #8]
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	4433      	add	r3, r6
 8011c8e:	6023      	str	r3, [r4, #0]
 8011c90:	2000      	movs	r0, #0
 8011c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c96:	462a      	mov	r2, r5
 8011c98:	f000 ff43 	bl	8012b22 <_realloc_r>
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d1e0      	bne.n	8011c64 <__ssputs_r+0x5c>
 8011ca2:	6921      	ldr	r1, [r4, #16]
 8011ca4:	4650      	mov	r0, sl
 8011ca6:	f7fe fbcd 	bl	8010444 <_free_r>
 8011caa:	230c      	movs	r3, #12
 8011cac:	f8ca 3000 	str.w	r3, [sl]
 8011cb0:	89a3      	ldrh	r3, [r4, #12]
 8011cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cb6:	81a3      	strh	r3, [r4, #12]
 8011cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011cbc:	e7e9      	b.n	8011c92 <__ssputs_r+0x8a>
	...

08011cc0 <_svfiprintf_r>:
 8011cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc4:	4698      	mov	r8, r3
 8011cc6:	898b      	ldrh	r3, [r1, #12]
 8011cc8:	061b      	lsls	r3, r3, #24
 8011cca:	b09d      	sub	sp, #116	@ 0x74
 8011ccc:	4607      	mov	r7, r0
 8011cce:	460d      	mov	r5, r1
 8011cd0:	4614      	mov	r4, r2
 8011cd2:	d510      	bpl.n	8011cf6 <_svfiprintf_r+0x36>
 8011cd4:	690b      	ldr	r3, [r1, #16]
 8011cd6:	b973      	cbnz	r3, 8011cf6 <_svfiprintf_r+0x36>
 8011cd8:	2140      	movs	r1, #64	@ 0x40
 8011cda:	f7fe fc27 	bl	801052c <_malloc_r>
 8011cde:	6028      	str	r0, [r5, #0]
 8011ce0:	6128      	str	r0, [r5, #16]
 8011ce2:	b930      	cbnz	r0, 8011cf2 <_svfiprintf_r+0x32>
 8011ce4:	230c      	movs	r3, #12
 8011ce6:	603b      	str	r3, [r7, #0]
 8011ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011cec:	b01d      	add	sp, #116	@ 0x74
 8011cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf2:	2340      	movs	r3, #64	@ 0x40
 8011cf4:	616b      	str	r3, [r5, #20]
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cfa:	2320      	movs	r3, #32
 8011cfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d04:	2330      	movs	r3, #48	@ 0x30
 8011d06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011ea4 <_svfiprintf_r+0x1e4>
 8011d0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d0e:	f04f 0901 	mov.w	r9, #1
 8011d12:	4623      	mov	r3, r4
 8011d14:	469a      	mov	sl, r3
 8011d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d1a:	b10a      	cbz	r2, 8011d20 <_svfiprintf_r+0x60>
 8011d1c:	2a25      	cmp	r2, #37	@ 0x25
 8011d1e:	d1f9      	bne.n	8011d14 <_svfiprintf_r+0x54>
 8011d20:	ebba 0b04 	subs.w	fp, sl, r4
 8011d24:	d00b      	beq.n	8011d3e <_svfiprintf_r+0x7e>
 8011d26:	465b      	mov	r3, fp
 8011d28:	4622      	mov	r2, r4
 8011d2a:	4629      	mov	r1, r5
 8011d2c:	4638      	mov	r0, r7
 8011d2e:	f7ff ff6b 	bl	8011c08 <__ssputs_r>
 8011d32:	3001      	adds	r0, #1
 8011d34:	f000 80a7 	beq.w	8011e86 <_svfiprintf_r+0x1c6>
 8011d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d3a:	445a      	add	r2, fp
 8011d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	f000 809f 	beq.w	8011e86 <_svfiprintf_r+0x1c6>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d52:	f10a 0a01 	add.w	sl, sl, #1
 8011d56:	9304      	str	r3, [sp, #16]
 8011d58:	9307      	str	r3, [sp, #28]
 8011d5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d60:	4654      	mov	r4, sl
 8011d62:	2205      	movs	r2, #5
 8011d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d68:	484e      	ldr	r0, [pc, #312]	@ (8011ea4 <_svfiprintf_r+0x1e4>)
 8011d6a:	f7ee fab9 	bl	80002e0 <memchr>
 8011d6e:	9a04      	ldr	r2, [sp, #16]
 8011d70:	b9d8      	cbnz	r0, 8011daa <_svfiprintf_r+0xea>
 8011d72:	06d0      	lsls	r0, r2, #27
 8011d74:	bf44      	itt	mi
 8011d76:	2320      	movmi	r3, #32
 8011d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d7c:	0711      	lsls	r1, r2, #28
 8011d7e:	bf44      	itt	mi
 8011d80:	232b      	movmi	r3, #43	@ 0x2b
 8011d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d86:	f89a 3000 	ldrb.w	r3, [sl]
 8011d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d8c:	d015      	beq.n	8011dba <_svfiprintf_r+0xfa>
 8011d8e:	9a07      	ldr	r2, [sp, #28]
 8011d90:	4654      	mov	r4, sl
 8011d92:	2000      	movs	r0, #0
 8011d94:	f04f 0c0a 	mov.w	ip, #10
 8011d98:	4621      	mov	r1, r4
 8011d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d9e:	3b30      	subs	r3, #48	@ 0x30
 8011da0:	2b09      	cmp	r3, #9
 8011da2:	d94b      	bls.n	8011e3c <_svfiprintf_r+0x17c>
 8011da4:	b1b0      	cbz	r0, 8011dd4 <_svfiprintf_r+0x114>
 8011da6:	9207      	str	r2, [sp, #28]
 8011da8:	e014      	b.n	8011dd4 <_svfiprintf_r+0x114>
 8011daa:	eba0 0308 	sub.w	r3, r0, r8
 8011dae:	fa09 f303 	lsl.w	r3, r9, r3
 8011db2:	4313      	orrs	r3, r2
 8011db4:	9304      	str	r3, [sp, #16]
 8011db6:	46a2      	mov	sl, r4
 8011db8:	e7d2      	b.n	8011d60 <_svfiprintf_r+0xa0>
 8011dba:	9b03      	ldr	r3, [sp, #12]
 8011dbc:	1d19      	adds	r1, r3, #4
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	9103      	str	r1, [sp, #12]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bfbb      	ittet	lt
 8011dc6:	425b      	neglt	r3, r3
 8011dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8011dcc:	9307      	strge	r3, [sp, #28]
 8011dce:	9307      	strlt	r3, [sp, #28]
 8011dd0:	bfb8      	it	lt
 8011dd2:	9204      	strlt	r2, [sp, #16]
 8011dd4:	7823      	ldrb	r3, [r4, #0]
 8011dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dd8:	d10a      	bne.n	8011df0 <_svfiprintf_r+0x130>
 8011dda:	7863      	ldrb	r3, [r4, #1]
 8011ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dde:	d132      	bne.n	8011e46 <_svfiprintf_r+0x186>
 8011de0:	9b03      	ldr	r3, [sp, #12]
 8011de2:	1d1a      	adds	r2, r3, #4
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	9203      	str	r2, [sp, #12]
 8011de8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011dec:	3402      	adds	r4, #2
 8011dee:	9305      	str	r3, [sp, #20]
 8011df0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011eb4 <_svfiprintf_r+0x1f4>
 8011df4:	7821      	ldrb	r1, [r4, #0]
 8011df6:	2203      	movs	r2, #3
 8011df8:	4650      	mov	r0, sl
 8011dfa:	f7ee fa71 	bl	80002e0 <memchr>
 8011dfe:	b138      	cbz	r0, 8011e10 <_svfiprintf_r+0x150>
 8011e00:	9b04      	ldr	r3, [sp, #16]
 8011e02:	eba0 000a 	sub.w	r0, r0, sl
 8011e06:	2240      	movs	r2, #64	@ 0x40
 8011e08:	4082      	lsls	r2, r0
 8011e0a:	4313      	orrs	r3, r2
 8011e0c:	3401      	adds	r4, #1
 8011e0e:	9304      	str	r3, [sp, #16]
 8011e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e14:	4824      	ldr	r0, [pc, #144]	@ (8011ea8 <_svfiprintf_r+0x1e8>)
 8011e16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e1a:	2206      	movs	r2, #6
 8011e1c:	f7ee fa60 	bl	80002e0 <memchr>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d036      	beq.n	8011e92 <_svfiprintf_r+0x1d2>
 8011e24:	4b21      	ldr	r3, [pc, #132]	@ (8011eac <_svfiprintf_r+0x1ec>)
 8011e26:	bb1b      	cbnz	r3, 8011e70 <_svfiprintf_r+0x1b0>
 8011e28:	9b03      	ldr	r3, [sp, #12]
 8011e2a:	3307      	adds	r3, #7
 8011e2c:	f023 0307 	bic.w	r3, r3, #7
 8011e30:	3308      	adds	r3, #8
 8011e32:	9303      	str	r3, [sp, #12]
 8011e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e36:	4433      	add	r3, r6
 8011e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e3a:	e76a      	b.n	8011d12 <_svfiprintf_r+0x52>
 8011e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e40:	460c      	mov	r4, r1
 8011e42:	2001      	movs	r0, #1
 8011e44:	e7a8      	b.n	8011d98 <_svfiprintf_r+0xd8>
 8011e46:	2300      	movs	r3, #0
 8011e48:	3401      	adds	r4, #1
 8011e4a:	9305      	str	r3, [sp, #20]
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	f04f 0c0a 	mov.w	ip, #10
 8011e52:	4620      	mov	r0, r4
 8011e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e58:	3a30      	subs	r2, #48	@ 0x30
 8011e5a:	2a09      	cmp	r2, #9
 8011e5c:	d903      	bls.n	8011e66 <_svfiprintf_r+0x1a6>
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d0c6      	beq.n	8011df0 <_svfiprintf_r+0x130>
 8011e62:	9105      	str	r1, [sp, #20]
 8011e64:	e7c4      	b.n	8011df0 <_svfiprintf_r+0x130>
 8011e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e7f0      	b.n	8011e52 <_svfiprintf_r+0x192>
 8011e70:	ab03      	add	r3, sp, #12
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	462a      	mov	r2, r5
 8011e76:	4b0e      	ldr	r3, [pc, #56]	@ (8011eb0 <_svfiprintf_r+0x1f0>)
 8011e78:	a904      	add	r1, sp, #16
 8011e7a:	4638      	mov	r0, r7
 8011e7c:	f7fc fc3c 	bl	800e6f8 <_printf_float>
 8011e80:	1c42      	adds	r2, r0, #1
 8011e82:	4606      	mov	r6, r0
 8011e84:	d1d6      	bne.n	8011e34 <_svfiprintf_r+0x174>
 8011e86:	89ab      	ldrh	r3, [r5, #12]
 8011e88:	065b      	lsls	r3, r3, #25
 8011e8a:	f53f af2d 	bmi.w	8011ce8 <_svfiprintf_r+0x28>
 8011e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e90:	e72c      	b.n	8011cec <_svfiprintf_r+0x2c>
 8011e92:	ab03      	add	r3, sp, #12
 8011e94:	9300      	str	r3, [sp, #0]
 8011e96:	462a      	mov	r2, r5
 8011e98:	4b05      	ldr	r3, [pc, #20]	@ (8011eb0 <_svfiprintf_r+0x1f0>)
 8011e9a:	a904      	add	r1, sp, #16
 8011e9c:	4638      	mov	r0, r7
 8011e9e:	f7fc feb3 	bl	800ec08 <_printf_i>
 8011ea2:	e7ed      	b.n	8011e80 <_svfiprintf_r+0x1c0>
 8011ea4:	08014459 	.word	0x08014459
 8011ea8:	08014463 	.word	0x08014463
 8011eac:	0800e6f9 	.word	0x0800e6f9
 8011eb0:	08011c09 	.word	0x08011c09
 8011eb4:	0801445f 	.word	0x0801445f

08011eb8 <__sfputc_r>:
 8011eb8:	6893      	ldr	r3, [r2, #8]
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	b410      	push	{r4}
 8011ec0:	6093      	str	r3, [r2, #8]
 8011ec2:	da08      	bge.n	8011ed6 <__sfputc_r+0x1e>
 8011ec4:	6994      	ldr	r4, [r2, #24]
 8011ec6:	42a3      	cmp	r3, r4
 8011ec8:	db01      	blt.n	8011ece <__sfputc_r+0x16>
 8011eca:	290a      	cmp	r1, #10
 8011ecc:	d103      	bne.n	8011ed6 <__sfputc_r+0x1e>
 8011ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ed2:	f7fd bb5a 	b.w	800f58a <__swbuf_r>
 8011ed6:	6813      	ldr	r3, [r2, #0]
 8011ed8:	1c58      	adds	r0, r3, #1
 8011eda:	6010      	str	r0, [r2, #0]
 8011edc:	7019      	strb	r1, [r3, #0]
 8011ede:	4608      	mov	r0, r1
 8011ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <__sfputs_r>:
 8011ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee8:	4606      	mov	r6, r0
 8011eea:	460f      	mov	r7, r1
 8011eec:	4614      	mov	r4, r2
 8011eee:	18d5      	adds	r5, r2, r3
 8011ef0:	42ac      	cmp	r4, r5
 8011ef2:	d101      	bne.n	8011ef8 <__sfputs_r+0x12>
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	e007      	b.n	8011f08 <__sfputs_r+0x22>
 8011ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011efc:	463a      	mov	r2, r7
 8011efe:	4630      	mov	r0, r6
 8011f00:	f7ff ffda 	bl	8011eb8 <__sfputc_r>
 8011f04:	1c43      	adds	r3, r0, #1
 8011f06:	d1f3      	bne.n	8011ef0 <__sfputs_r+0xa>
 8011f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f0c <_vfiprintf_r>:
 8011f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f10:	460d      	mov	r5, r1
 8011f12:	b09d      	sub	sp, #116	@ 0x74
 8011f14:	4614      	mov	r4, r2
 8011f16:	4698      	mov	r8, r3
 8011f18:	4606      	mov	r6, r0
 8011f1a:	b118      	cbz	r0, 8011f24 <_vfiprintf_r+0x18>
 8011f1c:	6a03      	ldr	r3, [r0, #32]
 8011f1e:	b90b      	cbnz	r3, 8011f24 <_vfiprintf_r+0x18>
 8011f20:	f7fd fa2a 	bl	800f378 <__sinit>
 8011f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f26:	07d9      	lsls	r1, r3, #31
 8011f28:	d405      	bmi.n	8011f36 <_vfiprintf_r+0x2a>
 8011f2a:	89ab      	ldrh	r3, [r5, #12]
 8011f2c:	059a      	lsls	r2, r3, #22
 8011f2e:	d402      	bmi.n	8011f36 <_vfiprintf_r+0x2a>
 8011f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f32:	f7fd fc92 	bl	800f85a <__retarget_lock_acquire_recursive>
 8011f36:	89ab      	ldrh	r3, [r5, #12]
 8011f38:	071b      	lsls	r3, r3, #28
 8011f3a:	d501      	bpl.n	8011f40 <_vfiprintf_r+0x34>
 8011f3c:	692b      	ldr	r3, [r5, #16]
 8011f3e:	b99b      	cbnz	r3, 8011f68 <_vfiprintf_r+0x5c>
 8011f40:	4629      	mov	r1, r5
 8011f42:	4630      	mov	r0, r6
 8011f44:	f7fd fb60 	bl	800f608 <__swsetup_r>
 8011f48:	b170      	cbz	r0, 8011f68 <_vfiprintf_r+0x5c>
 8011f4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f4c:	07dc      	lsls	r4, r3, #31
 8011f4e:	d504      	bpl.n	8011f5a <_vfiprintf_r+0x4e>
 8011f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f54:	b01d      	add	sp, #116	@ 0x74
 8011f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5a:	89ab      	ldrh	r3, [r5, #12]
 8011f5c:	0598      	lsls	r0, r3, #22
 8011f5e:	d4f7      	bmi.n	8011f50 <_vfiprintf_r+0x44>
 8011f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f62:	f7fd fc7b 	bl	800f85c <__retarget_lock_release_recursive>
 8011f66:	e7f3      	b.n	8011f50 <_vfiprintf_r+0x44>
 8011f68:	2300      	movs	r3, #0
 8011f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f6c:	2320      	movs	r3, #32
 8011f6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f76:	2330      	movs	r3, #48	@ 0x30
 8011f78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012128 <_vfiprintf_r+0x21c>
 8011f7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f80:	f04f 0901 	mov.w	r9, #1
 8011f84:	4623      	mov	r3, r4
 8011f86:	469a      	mov	sl, r3
 8011f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f8c:	b10a      	cbz	r2, 8011f92 <_vfiprintf_r+0x86>
 8011f8e:	2a25      	cmp	r2, #37	@ 0x25
 8011f90:	d1f9      	bne.n	8011f86 <_vfiprintf_r+0x7a>
 8011f92:	ebba 0b04 	subs.w	fp, sl, r4
 8011f96:	d00b      	beq.n	8011fb0 <_vfiprintf_r+0xa4>
 8011f98:	465b      	mov	r3, fp
 8011f9a:	4622      	mov	r2, r4
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f7ff ffa1 	bl	8011ee6 <__sfputs_r>
 8011fa4:	3001      	adds	r0, #1
 8011fa6:	f000 80a7 	beq.w	80120f8 <_vfiprintf_r+0x1ec>
 8011faa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fac:	445a      	add	r2, fp
 8011fae:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 809f 	beq.w	80120f8 <_vfiprintf_r+0x1ec>
 8011fba:	2300      	movs	r3, #0
 8011fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fc4:	f10a 0a01 	add.w	sl, sl, #1
 8011fc8:	9304      	str	r3, [sp, #16]
 8011fca:	9307      	str	r3, [sp, #28]
 8011fcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011fd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011fd2:	4654      	mov	r4, sl
 8011fd4:	2205      	movs	r2, #5
 8011fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fda:	4853      	ldr	r0, [pc, #332]	@ (8012128 <_vfiprintf_r+0x21c>)
 8011fdc:	f7ee f980 	bl	80002e0 <memchr>
 8011fe0:	9a04      	ldr	r2, [sp, #16]
 8011fe2:	b9d8      	cbnz	r0, 801201c <_vfiprintf_r+0x110>
 8011fe4:	06d1      	lsls	r1, r2, #27
 8011fe6:	bf44      	itt	mi
 8011fe8:	2320      	movmi	r3, #32
 8011fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011fee:	0713      	lsls	r3, r2, #28
 8011ff0:	bf44      	itt	mi
 8011ff2:	232b      	movmi	r3, #43	@ 0x2b
 8011ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8011ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ffe:	d015      	beq.n	801202c <_vfiprintf_r+0x120>
 8012000:	9a07      	ldr	r2, [sp, #28]
 8012002:	4654      	mov	r4, sl
 8012004:	2000      	movs	r0, #0
 8012006:	f04f 0c0a 	mov.w	ip, #10
 801200a:	4621      	mov	r1, r4
 801200c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012010:	3b30      	subs	r3, #48	@ 0x30
 8012012:	2b09      	cmp	r3, #9
 8012014:	d94b      	bls.n	80120ae <_vfiprintf_r+0x1a2>
 8012016:	b1b0      	cbz	r0, 8012046 <_vfiprintf_r+0x13a>
 8012018:	9207      	str	r2, [sp, #28]
 801201a:	e014      	b.n	8012046 <_vfiprintf_r+0x13a>
 801201c:	eba0 0308 	sub.w	r3, r0, r8
 8012020:	fa09 f303 	lsl.w	r3, r9, r3
 8012024:	4313      	orrs	r3, r2
 8012026:	9304      	str	r3, [sp, #16]
 8012028:	46a2      	mov	sl, r4
 801202a:	e7d2      	b.n	8011fd2 <_vfiprintf_r+0xc6>
 801202c:	9b03      	ldr	r3, [sp, #12]
 801202e:	1d19      	adds	r1, r3, #4
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	9103      	str	r1, [sp, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	bfbb      	ittet	lt
 8012038:	425b      	neglt	r3, r3
 801203a:	f042 0202 	orrlt.w	r2, r2, #2
 801203e:	9307      	strge	r3, [sp, #28]
 8012040:	9307      	strlt	r3, [sp, #28]
 8012042:	bfb8      	it	lt
 8012044:	9204      	strlt	r2, [sp, #16]
 8012046:	7823      	ldrb	r3, [r4, #0]
 8012048:	2b2e      	cmp	r3, #46	@ 0x2e
 801204a:	d10a      	bne.n	8012062 <_vfiprintf_r+0x156>
 801204c:	7863      	ldrb	r3, [r4, #1]
 801204e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012050:	d132      	bne.n	80120b8 <_vfiprintf_r+0x1ac>
 8012052:	9b03      	ldr	r3, [sp, #12]
 8012054:	1d1a      	adds	r2, r3, #4
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	9203      	str	r2, [sp, #12]
 801205a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801205e:	3402      	adds	r4, #2
 8012060:	9305      	str	r3, [sp, #20]
 8012062:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012138 <_vfiprintf_r+0x22c>
 8012066:	7821      	ldrb	r1, [r4, #0]
 8012068:	2203      	movs	r2, #3
 801206a:	4650      	mov	r0, sl
 801206c:	f7ee f938 	bl	80002e0 <memchr>
 8012070:	b138      	cbz	r0, 8012082 <_vfiprintf_r+0x176>
 8012072:	9b04      	ldr	r3, [sp, #16]
 8012074:	eba0 000a 	sub.w	r0, r0, sl
 8012078:	2240      	movs	r2, #64	@ 0x40
 801207a:	4082      	lsls	r2, r0
 801207c:	4313      	orrs	r3, r2
 801207e:	3401      	adds	r4, #1
 8012080:	9304      	str	r3, [sp, #16]
 8012082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012086:	4829      	ldr	r0, [pc, #164]	@ (801212c <_vfiprintf_r+0x220>)
 8012088:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801208c:	2206      	movs	r2, #6
 801208e:	f7ee f927 	bl	80002e0 <memchr>
 8012092:	2800      	cmp	r0, #0
 8012094:	d03f      	beq.n	8012116 <_vfiprintf_r+0x20a>
 8012096:	4b26      	ldr	r3, [pc, #152]	@ (8012130 <_vfiprintf_r+0x224>)
 8012098:	bb1b      	cbnz	r3, 80120e2 <_vfiprintf_r+0x1d6>
 801209a:	9b03      	ldr	r3, [sp, #12]
 801209c:	3307      	adds	r3, #7
 801209e:	f023 0307 	bic.w	r3, r3, #7
 80120a2:	3308      	adds	r3, #8
 80120a4:	9303      	str	r3, [sp, #12]
 80120a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120a8:	443b      	add	r3, r7
 80120aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80120ac:	e76a      	b.n	8011f84 <_vfiprintf_r+0x78>
 80120ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80120b2:	460c      	mov	r4, r1
 80120b4:	2001      	movs	r0, #1
 80120b6:	e7a8      	b.n	801200a <_vfiprintf_r+0xfe>
 80120b8:	2300      	movs	r3, #0
 80120ba:	3401      	adds	r4, #1
 80120bc:	9305      	str	r3, [sp, #20]
 80120be:	4619      	mov	r1, r3
 80120c0:	f04f 0c0a 	mov.w	ip, #10
 80120c4:	4620      	mov	r0, r4
 80120c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ca:	3a30      	subs	r2, #48	@ 0x30
 80120cc:	2a09      	cmp	r2, #9
 80120ce:	d903      	bls.n	80120d8 <_vfiprintf_r+0x1cc>
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d0c6      	beq.n	8012062 <_vfiprintf_r+0x156>
 80120d4:	9105      	str	r1, [sp, #20]
 80120d6:	e7c4      	b.n	8012062 <_vfiprintf_r+0x156>
 80120d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80120dc:	4604      	mov	r4, r0
 80120de:	2301      	movs	r3, #1
 80120e0:	e7f0      	b.n	80120c4 <_vfiprintf_r+0x1b8>
 80120e2:	ab03      	add	r3, sp, #12
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	462a      	mov	r2, r5
 80120e8:	4b12      	ldr	r3, [pc, #72]	@ (8012134 <_vfiprintf_r+0x228>)
 80120ea:	a904      	add	r1, sp, #16
 80120ec:	4630      	mov	r0, r6
 80120ee:	f7fc fb03 	bl	800e6f8 <_printf_float>
 80120f2:	4607      	mov	r7, r0
 80120f4:	1c78      	adds	r0, r7, #1
 80120f6:	d1d6      	bne.n	80120a6 <_vfiprintf_r+0x19a>
 80120f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120fa:	07d9      	lsls	r1, r3, #31
 80120fc:	d405      	bmi.n	801210a <_vfiprintf_r+0x1fe>
 80120fe:	89ab      	ldrh	r3, [r5, #12]
 8012100:	059a      	lsls	r2, r3, #22
 8012102:	d402      	bmi.n	801210a <_vfiprintf_r+0x1fe>
 8012104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012106:	f7fd fba9 	bl	800f85c <__retarget_lock_release_recursive>
 801210a:	89ab      	ldrh	r3, [r5, #12]
 801210c:	065b      	lsls	r3, r3, #25
 801210e:	f53f af1f 	bmi.w	8011f50 <_vfiprintf_r+0x44>
 8012112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012114:	e71e      	b.n	8011f54 <_vfiprintf_r+0x48>
 8012116:	ab03      	add	r3, sp, #12
 8012118:	9300      	str	r3, [sp, #0]
 801211a:	462a      	mov	r2, r5
 801211c:	4b05      	ldr	r3, [pc, #20]	@ (8012134 <_vfiprintf_r+0x228>)
 801211e:	a904      	add	r1, sp, #16
 8012120:	4630      	mov	r0, r6
 8012122:	f7fc fd71 	bl	800ec08 <_printf_i>
 8012126:	e7e4      	b.n	80120f2 <_vfiprintf_r+0x1e6>
 8012128:	08014459 	.word	0x08014459
 801212c:	08014463 	.word	0x08014463
 8012130:	0800e6f9 	.word	0x0800e6f9
 8012134:	08011ee7 	.word	0x08011ee7
 8012138:	0801445f 	.word	0x0801445f

0801213c <__sflush_r>:
 801213c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012144:	0716      	lsls	r6, r2, #28
 8012146:	4605      	mov	r5, r0
 8012148:	460c      	mov	r4, r1
 801214a:	d454      	bmi.n	80121f6 <__sflush_r+0xba>
 801214c:	684b      	ldr	r3, [r1, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	dc02      	bgt.n	8012158 <__sflush_r+0x1c>
 8012152:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012154:	2b00      	cmp	r3, #0
 8012156:	dd48      	ble.n	80121ea <__sflush_r+0xae>
 8012158:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801215a:	2e00      	cmp	r6, #0
 801215c:	d045      	beq.n	80121ea <__sflush_r+0xae>
 801215e:	2300      	movs	r3, #0
 8012160:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012164:	682f      	ldr	r7, [r5, #0]
 8012166:	6a21      	ldr	r1, [r4, #32]
 8012168:	602b      	str	r3, [r5, #0]
 801216a:	d030      	beq.n	80121ce <__sflush_r+0x92>
 801216c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	0759      	lsls	r1, r3, #29
 8012172:	d505      	bpl.n	8012180 <__sflush_r+0x44>
 8012174:	6863      	ldr	r3, [r4, #4]
 8012176:	1ad2      	subs	r2, r2, r3
 8012178:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801217a:	b10b      	cbz	r3, 8012180 <__sflush_r+0x44>
 801217c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801217e:	1ad2      	subs	r2, r2, r3
 8012180:	2300      	movs	r3, #0
 8012182:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012184:	6a21      	ldr	r1, [r4, #32]
 8012186:	4628      	mov	r0, r5
 8012188:	47b0      	blx	r6
 801218a:	1c43      	adds	r3, r0, #1
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	d106      	bne.n	801219e <__sflush_r+0x62>
 8012190:	6829      	ldr	r1, [r5, #0]
 8012192:	291d      	cmp	r1, #29
 8012194:	d82b      	bhi.n	80121ee <__sflush_r+0xb2>
 8012196:	4a2a      	ldr	r2, [pc, #168]	@ (8012240 <__sflush_r+0x104>)
 8012198:	410a      	asrs	r2, r1
 801219a:	07d6      	lsls	r6, r2, #31
 801219c:	d427      	bmi.n	80121ee <__sflush_r+0xb2>
 801219e:	2200      	movs	r2, #0
 80121a0:	6062      	str	r2, [r4, #4]
 80121a2:	04d9      	lsls	r1, r3, #19
 80121a4:	6922      	ldr	r2, [r4, #16]
 80121a6:	6022      	str	r2, [r4, #0]
 80121a8:	d504      	bpl.n	80121b4 <__sflush_r+0x78>
 80121aa:	1c42      	adds	r2, r0, #1
 80121ac:	d101      	bne.n	80121b2 <__sflush_r+0x76>
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	b903      	cbnz	r3, 80121b4 <__sflush_r+0x78>
 80121b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80121b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121b6:	602f      	str	r7, [r5, #0]
 80121b8:	b1b9      	cbz	r1, 80121ea <__sflush_r+0xae>
 80121ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80121be:	4299      	cmp	r1, r3
 80121c0:	d002      	beq.n	80121c8 <__sflush_r+0x8c>
 80121c2:	4628      	mov	r0, r5
 80121c4:	f7fe f93e 	bl	8010444 <_free_r>
 80121c8:	2300      	movs	r3, #0
 80121ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80121cc:	e00d      	b.n	80121ea <__sflush_r+0xae>
 80121ce:	2301      	movs	r3, #1
 80121d0:	4628      	mov	r0, r5
 80121d2:	47b0      	blx	r6
 80121d4:	4602      	mov	r2, r0
 80121d6:	1c50      	adds	r0, r2, #1
 80121d8:	d1c9      	bne.n	801216e <__sflush_r+0x32>
 80121da:	682b      	ldr	r3, [r5, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d0c6      	beq.n	801216e <__sflush_r+0x32>
 80121e0:	2b1d      	cmp	r3, #29
 80121e2:	d001      	beq.n	80121e8 <__sflush_r+0xac>
 80121e4:	2b16      	cmp	r3, #22
 80121e6:	d11e      	bne.n	8012226 <__sflush_r+0xea>
 80121e8:	602f      	str	r7, [r5, #0]
 80121ea:	2000      	movs	r0, #0
 80121ec:	e022      	b.n	8012234 <__sflush_r+0xf8>
 80121ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121f2:	b21b      	sxth	r3, r3
 80121f4:	e01b      	b.n	801222e <__sflush_r+0xf2>
 80121f6:	690f      	ldr	r7, [r1, #16]
 80121f8:	2f00      	cmp	r7, #0
 80121fa:	d0f6      	beq.n	80121ea <__sflush_r+0xae>
 80121fc:	0793      	lsls	r3, r2, #30
 80121fe:	680e      	ldr	r6, [r1, #0]
 8012200:	bf08      	it	eq
 8012202:	694b      	ldreq	r3, [r1, #20]
 8012204:	600f      	str	r7, [r1, #0]
 8012206:	bf18      	it	ne
 8012208:	2300      	movne	r3, #0
 801220a:	eba6 0807 	sub.w	r8, r6, r7
 801220e:	608b      	str	r3, [r1, #8]
 8012210:	f1b8 0f00 	cmp.w	r8, #0
 8012214:	dde9      	ble.n	80121ea <__sflush_r+0xae>
 8012216:	6a21      	ldr	r1, [r4, #32]
 8012218:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801221a:	4643      	mov	r3, r8
 801221c:	463a      	mov	r2, r7
 801221e:	4628      	mov	r0, r5
 8012220:	47b0      	blx	r6
 8012222:	2800      	cmp	r0, #0
 8012224:	dc08      	bgt.n	8012238 <__sflush_r+0xfc>
 8012226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801222a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801222e:	81a3      	strh	r3, [r4, #12]
 8012230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012238:	4407      	add	r7, r0
 801223a:	eba8 0800 	sub.w	r8, r8, r0
 801223e:	e7e7      	b.n	8012210 <__sflush_r+0xd4>
 8012240:	dfbffffe 	.word	0xdfbffffe

08012244 <_fflush_r>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	690b      	ldr	r3, [r1, #16]
 8012248:	4605      	mov	r5, r0
 801224a:	460c      	mov	r4, r1
 801224c:	b913      	cbnz	r3, 8012254 <_fflush_r+0x10>
 801224e:	2500      	movs	r5, #0
 8012250:	4628      	mov	r0, r5
 8012252:	bd38      	pop	{r3, r4, r5, pc}
 8012254:	b118      	cbz	r0, 801225e <_fflush_r+0x1a>
 8012256:	6a03      	ldr	r3, [r0, #32]
 8012258:	b90b      	cbnz	r3, 801225e <_fflush_r+0x1a>
 801225a:	f7fd f88d 	bl	800f378 <__sinit>
 801225e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d0f3      	beq.n	801224e <_fflush_r+0xa>
 8012266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012268:	07d0      	lsls	r0, r2, #31
 801226a:	d404      	bmi.n	8012276 <_fflush_r+0x32>
 801226c:	0599      	lsls	r1, r3, #22
 801226e:	d402      	bmi.n	8012276 <_fflush_r+0x32>
 8012270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012272:	f7fd faf2 	bl	800f85a <__retarget_lock_acquire_recursive>
 8012276:	4628      	mov	r0, r5
 8012278:	4621      	mov	r1, r4
 801227a:	f7ff ff5f 	bl	801213c <__sflush_r>
 801227e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012280:	07da      	lsls	r2, r3, #31
 8012282:	4605      	mov	r5, r0
 8012284:	d4e4      	bmi.n	8012250 <_fflush_r+0xc>
 8012286:	89a3      	ldrh	r3, [r4, #12]
 8012288:	059b      	lsls	r3, r3, #22
 801228a:	d4e1      	bmi.n	8012250 <_fflush_r+0xc>
 801228c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801228e:	f7fd fae5 	bl	800f85c <__retarget_lock_release_recursive>
 8012292:	e7dd      	b.n	8012250 <_fflush_r+0xc>

08012294 <__swhatbuf_r>:
 8012294:	b570      	push	{r4, r5, r6, lr}
 8012296:	460c      	mov	r4, r1
 8012298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801229c:	2900      	cmp	r1, #0
 801229e:	b096      	sub	sp, #88	@ 0x58
 80122a0:	4615      	mov	r5, r2
 80122a2:	461e      	mov	r6, r3
 80122a4:	da0d      	bge.n	80122c2 <__swhatbuf_r+0x2e>
 80122a6:	89a3      	ldrh	r3, [r4, #12]
 80122a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80122ac:	f04f 0100 	mov.w	r1, #0
 80122b0:	bf14      	ite	ne
 80122b2:	2340      	movne	r3, #64	@ 0x40
 80122b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80122b8:	2000      	movs	r0, #0
 80122ba:	6031      	str	r1, [r6, #0]
 80122bc:	602b      	str	r3, [r5, #0]
 80122be:	b016      	add	sp, #88	@ 0x58
 80122c0:	bd70      	pop	{r4, r5, r6, pc}
 80122c2:	466a      	mov	r2, sp
 80122c4:	f000 f874 	bl	80123b0 <_fstat_r>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	dbec      	blt.n	80122a6 <__swhatbuf_r+0x12>
 80122cc:	9901      	ldr	r1, [sp, #4]
 80122ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80122d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80122d6:	4259      	negs	r1, r3
 80122d8:	4159      	adcs	r1, r3
 80122da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80122de:	e7eb      	b.n	80122b8 <__swhatbuf_r+0x24>

080122e0 <__smakebuf_r>:
 80122e0:	898b      	ldrh	r3, [r1, #12]
 80122e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122e4:	079d      	lsls	r5, r3, #30
 80122e6:	4606      	mov	r6, r0
 80122e8:	460c      	mov	r4, r1
 80122ea:	d507      	bpl.n	80122fc <__smakebuf_r+0x1c>
 80122ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80122f0:	6023      	str	r3, [r4, #0]
 80122f2:	6123      	str	r3, [r4, #16]
 80122f4:	2301      	movs	r3, #1
 80122f6:	6163      	str	r3, [r4, #20]
 80122f8:	b003      	add	sp, #12
 80122fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122fc:	ab01      	add	r3, sp, #4
 80122fe:	466a      	mov	r2, sp
 8012300:	f7ff ffc8 	bl	8012294 <__swhatbuf_r>
 8012304:	9f00      	ldr	r7, [sp, #0]
 8012306:	4605      	mov	r5, r0
 8012308:	4639      	mov	r1, r7
 801230a:	4630      	mov	r0, r6
 801230c:	f7fe f90e 	bl	801052c <_malloc_r>
 8012310:	b948      	cbnz	r0, 8012326 <__smakebuf_r+0x46>
 8012312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012316:	059a      	lsls	r2, r3, #22
 8012318:	d4ee      	bmi.n	80122f8 <__smakebuf_r+0x18>
 801231a:	f023 0303 	bic.w	r3, r3, #3
 801231e:	f043 0302 	orr.w	r3, r3, #2
 8012322:	81a3      	strh	r3, [r4, #12]
 8012324:	e7e2      	b.n	80122ec <__smakebuf_r+0xc>
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	6020      	str	r0, [r4, #0]
 801232a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801232e:	81a3      	strh	r3, [r4, #12]
 8012330:	9b01      	ldr	r3, [sp, #4]
 8012332:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012336:	b15b      	cbz	r3, 8012350 <__smakebuf_r+0x70>
 8012338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801233c:	4630      	mov	r0, r6
 801233e:	f000 f849 	bl	80123d4 <_isatty_r>
 8012342:	b128      	cbz	r0, 8012350 <__smakebuf_r+0x70>
 8012344:	89a3      	ldrh	r3, [r4, #12]
 8012346:	f023 0303 	bic.w	r3, r3, #3
 801234a:	f043 0301 	orr.w	r3, r3, #1
 801234e:	81a3      	strh	r3, [r4, #12]
 8012350:	89a3      	ldrh	r3, [r4, #12]
 8012352:	431d      	orrs	r5, r3
 8012354:	81a5      	strh	r5, [r4, #12]
 8012356:	e7cf      	b.n	80122f8 <__smakebuf_r+0x18>

08012358 <memmove>:
 8012358:	4288      	cmp	r0, r1
 801235a:	b510      	push	{r4, lr}
 801235c:	eb01 0402 	add.w	r4, r1, r2
 8012360:	d902      	bls.n	8012368 <memmove+0x10>
 8012362:	4284      	cmp	r4, r0
 8012364:	4623      	mov	r3, r4
 8012366:	d807      	bhi.n	8012378 <memmove+0x20>
 8012368:	1e43      	subs	r3, r0, #1
 801236a:	42a1      	cmp	r1, r4
 801236c:	d008      	beq.n	8012380 <memmove+0x28>
 801236e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012376:	e7f8      	b.n	801236a <memmove+0x12>
 8012378:	4402      	add	r2, r0
 801237a:	4601      	mov	r1, r0
 801237c:	428a      	cmp	r2, r1
 801237e:	d100      	bne.n	8012382 <memmove+0x2a>
 8012380:	bd10      	pop	{r4, pc}
 8012382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801238a:	e7f7      	b.n	801237c <memmove+0x24>

0801238c <strncmp>:
 801238c:	b510      	push	{r4, lr}
 801238e:	b16a      	cbz	r2, 80123ac <strncmp+0x20>
 8012390:	3901      	subs	r1, #1
 8012392:	1884      	adds	r4, r0, r2
 8012394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012398:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801239c:	429a      	cmp	r2, r3
 801239e:	d103      	bne.n	80123a8 <strncmp+0x1c>
 80123a0:	42a0      	cmp	r0, r4
 80123a2:	d001      	beq.n	80123a8 <strncmp+0x1c>
 80123a4:	2a00      	cmp	r2, #0
 80123a6:	d1f5      	bne.n	8012394 <strncmp+0x8>
 80123a8:	1ad0      	subs	r0, r2, r3
 80123aa:	bd10      	pop	{r4, pc}
 80123ac:	4610      	mov	r0, r2
 80123ae:	e7fc      	b.n	80123aa <strncmp+0x1e>

080123b0 <_fstat_r>:
 80123b0:	b538      	push	{r3, r4, r5, lr}
 80123b2:	4d07      	ldr	r5, [pc, #28]	@ (80123d0 <_fstat_r+0x20>)
 80123b4:	2300      	movs	r3, #0
 80123b6:	4604      	mov	r4, r0
 80123b8:	4608      	mov	r0, r1
 80123ba:	4611      	mov	r1, r2
 80123bc:	602b      	str	r3, [r5, #0]
 80123be:	f7f0 fbc3 	bl	8002b48 <_fstat>
 80123c2:	1c43      	adds	r3, r0, #1
 80123c4:	d102      	bne.n	80123cc <_fstat_r+0x1c>
 80123c6:	682b      	ldr	r3, [r5, #0]
 80123c8:	b103      	cbz	r3, 80123cc <_fstat_r+0x1c>
 80123ca:	6023      	str	r3, [r4, #0]
 80123cc:	bd38      	pop	{r3, r4, r5, pc}
 80123ce:	bf00      	nop
 80123d0:	24005818 	.word	0x24005818

080123d4 <_isatty_r>:
 80123d4:	b538      	push	{r3, r4, r5, lr}
 80123d6:	4d06      	ldr	r5, [pc, #24]	@ (80123f0 <_isatty_r+0x1c>)
 80123d8:	2300      	movs	r3, #0
 80123da:	4604      	mov	r4, r0
 80123dc:	4608      	mov	r0, r1
 80123de:	602b      	str	r3, [r5, #0]
 80123e0:	f7f0 fbc2 	bl	8002b68 <_isatty>
 80123e4:	1c43      	adds	r3, r0, #1
 80123e6:	d102      	bne.n	80123ee <_isatty_r+0x1a>
 80123e8:	682b      	ldr	r3, [r5, #0]
 80123ea:	b103      	cbz	r3, 80123ee <_isatty_r+0x1a>
 80123ec:	6023      	str	r3, [r4, #0]
 80123ee:	bd38      	pop	{r3, r4, r5, pc}
 80123f0:	24005818 	.word	0x24005818

080123f4 <_sbrk_r>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	4d06      	ldr	r5, [pc, #24]	@ (8012410 <_sbrk_r+0x1c>)
 80123f8:	2300      	movs	r3, #0
 80123fa:	4604      	mov	r4, r0
 80123fc:	4608      	mov	r0, r1
 80123fe:	602b      	str	r3, [r5, #0]
 8012400:	f7f0 fbca 	bl	8002b98 <_sbrk>
 8012404:	1c43      	adds	r3, r0, #1
 8012406:	d102      	bne.n	801240e <_sbrk_r+0x1a>
 8012408:	682b      	ldr	r3, [r5, #0]
 801240a:	b103      	cbz	r3, 801240e <_sbrk_r+0x1a>
 801240c:	6023      	str	r3, [r4, #0]
 801240e:	bd38      	pop	{r3, r4, r5, pc}
 8012410:	24005818 	.word	0x24005818
 8012414:	00000000 	.word	0x00000000

08012418 <nan>:
 8012418:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012420 <nan+0x8>
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	00000000 	.word	0x00000000
 8012424:	7ff80000 	.word	0x7ff80000

08012428 <__assert_func>:
 8012428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801242a:	4614      	mov	r4, r2
 801242c:	461a      	mov	r2, r3
 801242e:	4b09      	ldr	r3, [pc, #36]	@ (8012454 <__assert_func+0x2c>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	4605      	mov	r5, r0
 8012434:	68d8      	ldr	r0, [r3, #12]
 8012436:	b954      	cbnz	r4, 801244e <__assert_func+0x26>
 8012438:	4b07      	ldr	r3, [pc, #28]	@ (8012458 <__assert_func+0x30>)
 801243a:	461c      	mov	r4, r3
 801243c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012440:	9100      	str	r1, [sp, #0]
 8012442:	462b      	mov	r3, r5
 8012444:	4905      	ldr	r1, [pc, #20]	@ (801245c <__assert_func+0x34>)
 8012446:	f000 fba7 	bl	8012b98 <fiprintf>
 801244a:	f000 fbb7 	bl	8012bbc <abort>
 801244e:	4b04      	ldr	r3, [pc, #16]	@ (8012460 <__assert_func+0x38>)
 8012450:	e7f4      	b.n	801243c <__assert_func+0x14>
 8012452:	bf00      	nop
 8012454:	24000028 	.word	0x24000028
 8012458:	080144ad 	.word	0x080144ad
 801245c:	0801447f 	.word	0x0801447f
 8012460:	08014472 	.word	0x08014472

08012464 <_calloc_r>:
 8012464:	b570      	push	{r4, r5, r6, lr}
 8012466:	fba1 5402 	umull	r5, r4, r1, r2
 801246a:	b93c      	cbnz	r4, 801247c <_calloc_r+0x18>
 801246c:	4629      	mov	r1, r5
 801246e:	f7fe f85d 	bl	801052c <_malloc_r>
 8012472:	4606      	mov	r6, r0
 8012474:	b928      	cbnz	r0, 8012482 <_calloc_r+0x1e>
 8012476:	2600      	movs	r6, #0
 8012478:	4630      	mov	r0, r6
 801247a:	bd70      	pop	{r4, r5, r6, pc}
 801247c:	220c      	movs	r2, #12
 801247e:	6002      	str	r2, [r0, #0]
 8012480:	e7f9      	b.n	8012476 <_calloc_r+0x12>
 8012482:	462a      	mov	r2, r5
 8012484:	4621      	mov	r1, r4
 8012486:	f7fd f915 	bl	800f6b4 <memset>
 801248a:	e7f5      	b.n	8012478 <_calloc_r+0x14>

0801248c <rshift>:
 801248c:	6903      	ldr	r3, [r0, #16]
 801248e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012496:	ea4f 1261 	mov.w	r2, r1, asr #5
 801249a:	f100 0414 	add.w	r4, r0, #20
 801249e:	dd45      	ble.n	801252c <rshift+0xa0>
 80124a0:	f011 011f 	ands.w	r1, r1, #31
 80124a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80124a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80124ac:	d10c      	bne.n	80124c8 <rshift+0x3c>
 80124ae:	f100 0710 	add.w	r7, r0, #16
 80124b2:	4629      	mov	r1, r5
 80124b4:	42b1      	cmp	r1, r6
 80124b6:	d334      	bcc.n	8012522 <rshift+0x96>
 80124b8:	1a9b      	subs	r3, r3, r2
 80124ba:	009b      	lsls	r3, r3, #2
 80124bc:	1eea      	subs	r2, r5, #3
 80124be:	4296      	cmp	r6, r2
 80124c0:	bf38      	it	cc
 80124c2:	2300      	movcc	r3, #0
 80124c4:	4423      	add	r3, r4
 80124c6:	e015      	b.n	80124f4 <rshift+0x68>
 80124c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80124cc:	f1c1 0820 	rsb	r8, r1, #32
 80124d0:	40cf      	lsrs	r7, r1
 80124d2:	f105 0e04 	add.w	lr, r5, #4
 80124d6:	46a1      	mov	r9, r4
 80124d8:	4576      	cmp	r6, lr
 80124da:	46f4      	mov	ip, lr
 80124dc:	d815      	bhi.n	801250a <rshift+0x7e>
 80124de:	1a9a      	subs	r2, r3, r2
 80124e0:	0092      	lsls	r2, r2, #2
 80124e2:	3a04      	subs	r2, #4
 80124e4:	3501      	adds	r5, #1
 80124e6:	42ae      	cmp	r6, r5
 80124e8:	bf38      	it	cc
 80124ea:	2200      	movcc	r2, #0
 80124ec:	18a3      	adds	r3, r4, r2
 80124ee:	50a7      	str	r7, [r4, r2]
 80124f0:	b107      	cbz	r7, 80124f4 <rshift+0x68>
 80124f2:	3304      	adds	r3, #4
 80124f4:	1b1a      	subs	r2, r3, r4
 80124f6:	42a3      	cmp	r3, r4
 80124f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80124fc:	bf08      	it	eq
 80124fe:	2300      	moveq	r3, #0
 8012500:	6102      	str	r2, [r0, #16]
 8012502:	bf08      	it	eq
 8012504:	6143      	streq	r3, [r0, #20]
 8012506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801250a:	f8dc c000 	ldr.w	ip, [ip]
 801250e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012512:	ea4c 0707 	orr.w	r7, ip, r7
 8012516:	f849 7b04 	str.w	r7, [r9], #4
 801251a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801251e:	40cf      	lsrs	r7, r1
 8012520:	e7da      	b.n	80124d8 <rshift+0x4c>
 8012522:	f851 cb04 	ldr.w	ip, [r1], #4
 8012526:	f847 cf04 	str.w	ip, [r7, #4]!
 801252a:	e7c3      	b.n	80124b4 <rshift+0x28>
 801252c:	4623      	mov	r3, r4
 801252e:	e7e1      	b.n	80124f4 <rshift+0x68>

08012530 <__hexdig_fun>:
 8012530:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012534:	2b09      	cmp	r3, #9
 8012536:	d802      	bhi.n	801253e <__hexdig_fun+0xe>
 8012538:	3820      	subs	r0, #32
 801253a:	b2c0      	uxtb	r0, r0
 801253c:	4770      	bx	lr
 801253e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012542:	2b05      	cmp	r3, #5
 8012544:	d801      	bhi.n	801254a <__hexdig_fun+0x1a>
 8012546:	3847      	subs	r0, #71	@ 0x47
 8012548:	e7f7      	b.n	801253a <__hexdig_fun+0xa>
 801254a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801254e:	2b05      	cmp	r3, #5
 8012550:	d801      	bhi.n	8012556 <__hexdig_fun+0x26>
 8012552:	3827      	subs	r0, #39	@ 0x27
 8012554:	e7f1      	b.n	801253a <__hexdig_fun+0xa>
 8012556:	2000      	movs	r0, #0
 8012558:	4770      	bx	lr
	...

0801255c <__gethex>:
 801255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012560:	b085      	sub	sp, #20
 8012562:	468a      	mov	sl, r1
 8012564:	9302      	str	r3, [sp, #8]
 8012566:	680b      	ldr	r3, [r1, #0]
 8012568:	9001      	str	r0, [sp, #4]
 801256a:	4690      	mov	r8, r2
 801256c:	1c9c      	adds	r4, r3, #2
 801256e:	46a1      	mov	r9, r4
 8012570:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012574:	2830      	cmp	r0, #48	@ 0x30
 8012576:	d0fa      	beq.n	801256e <__gethex+0x12>
 8012578:	eba9 0303 	sub.w	r3, r9, r3
 801257c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012580:	f7ff ffd6 	bl	8012530 <__hexdig_fun>
 8012584:	4605      	mov	r5, r0
 8012586:	2800      	cmp	r0, #0
 8012588:	d168      	bne.n	801265c <__gethex+0x100>
 801258a:	49a0      	ldr	r1, [pc, #640]	@ (801280c <__gethex+0x2b0>)
 801258c:	2201      	movs	r2, #1
 801258e:	4648      	mov	r0, r9
 8012590:	f7ff fefc 	bl	801238c <strncmp>
 8012594:	4607      	mov	r7, r0
 8012596:	2800      	cmp	r0, #0
 8012598:	d167      	bne.n	801266a <__gethex+0x10e>
 801259a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801259e:	4626      	mov	r6, r4
 80125a0:	f7ff ffc6 	bl	8012530 <__hexdig_fun>
 80125a4:	2800      	cmp	r0, #0
 80125a6:	d062      	beq.n	801266e <__gethex+0x112>
 80125a8:	4623      	mov	r3, r4
 80125aa:	7818      	ldrb	r0, [r3, #0]
 80125ac:	2830      	cmp	r0, #48	@ 0x30
 80125ae:	4699      	mov	r9, r3
 80125b0:	f103 0301 	add.w	r3, r3, #1
 80125b4:	d0f9      	beq.n	80125aa <__gethex+0x4e>
 80125b6:	f7ff ffbb 	bl	8012530 <__hexdig_fun>
 80125ba:	fab0 f580 	clz	r5, r0
 80125be:	096d      	lsrs	r5, r5, #5
 80125c0:	f04f 0b01 	mov.w	fp, #1
 80125c4:	464a      	mov	r2, r9
 80125c6:	4616      	mov	r6, r2
 80125c8:	3201      	adds	r2, #1
 80125ca:	7830      	ldrb	r0, [r6, #0]
 80125cc:	f7ff ffb0 	bl	8012530 <__hexdig_fun>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	d1f8      	bne.n	80125c6 <__gethex+0x6a>
 80125d4:	498d      	ldr	r1, [pc, #564]	@ (801280c <__gethex+0x2b0>)
 80125d6:	2201      	movs	r2, #1
 80125d8:	4630      	mov	r0, r6
 80125da:	f7ff fed7 	bl	801238c <strncmp>
 80125de:	2800      	cmp	r0, #0
 80125e0:	d13f      	bne.n	8012662 <__gethex+0x106>
 80125e2:	b944      	cbnz	r4, 80125f6 <__gethex+0x9a>
 80125e4:	1c74      	adds	r4, r6, #1
 80125e6:	4622      	mov	r2, r4
 80125e8:	4616      	mov	r6, r2
 80125ea:	3201      	adds	r2, #1
 80125ec:	7830      	ldrb	r0, [r6, #0]
 80125ee:	f7ff ff9f 	bl	8012530 <__hexdig_fun>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d1f8      	bne.n	80125e8 <__gethex+0x8c>
 80125f6:	1ba4      	subs	r4, r4, r6
 80125f8:	00a7      	lsls	r7, r4, #2
 80125fa:	7833      	ldrb	r3, [r6, #0]
 80125fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012600:	2b50      	cmp	r3, #80	@ 0x50
 8012602:	d13e      	bne.n	8012682 <__gethex+0x126>
 8012604:	7873      	ldrb	r3, [r6, #1]
 8012606:	2b2b      	cmp	r3, #43	@ 0x2b
 8012608:	d033      	beq.n	8012672 <__gethex+0x116>
 801260a:	2b2d      	cmp	r3, #45	@ 0x2d
 801260c:	d034      	beq.n	8012678 <__gethex+0x11c>
 801260e:	1c71      	adds	r1, r6, #1
 8012610:	2400      	movs	r4, #0
 8012612:	7808      	ldrb	r0, [r1, #0]
 8012614:	f7ff ff8c 	bl	8012530 <__hexdig_fun>
 8012618:	1e43      	subs	r3, r0, #1
 801261a:	b2db      	uxtb	r3, r3
 801261c:	2b18      	cmp	r3, #24
 801261e:	d830      	bhi.n	8012682 <__gethex+0x126>
 8012620:	f1a0 0210 	sub.w	r2, r0, #16
 8012624:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012628:	f7ff ff82 	bl	8012530 <__hexdig_fun>
 801262c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8012630:	fa5f fc8c 	uxtb.w	ip, ip
 8012634:	f1bc 0f18 	cmp.w	ip, #24
 8012638:	f04f 030a 	mov.w	r3, #10
 801263c:	d91e      	bls.n	801267c <__gethex+0x120>
 801263e:	b104      	cbz	r4, 8012642 <__gethex+0xe6>
 8012640:	4252      	negs	r2, r2
 8012642:	4417      	add	r7, r2
 8012644:	f8ca 1000 	str.w	r1, [sl]
 8012648:	b1ed      	cbz	r5, 8012686 <__gethex+0x12a>
 801264a:	f1bb 0f00 	cmp.w	fp, #0
 801264e:	bf0c      	ite	eq
 8012650:	2506      	moveq	r5, #6
 8012652:	2500      	movne	r5, #0
 8012654:	4628      	mov	r0, r5
 8012656:	b005      	add	sp, #20
 8012658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801265c:	2500      	movs	r5, #0
 801265e:	462c      	mov	r4, r5
 8012660:	e7b0      	b.n	80125c4 <__gethex+0x68>
 8012662:	2c00      	cmp	r4, #0
 8012664:	d1c7      	bne.n	80125f6 <__gethex+0x9a>
 8012666:	4627      	mov	r7, r4
 8012668:	e7c7      	b.n	80125fa <__gethex+0x9e>
 801266a:	464e      	mov	r6, r9
 801266c:	462f      	mov	r7, r5
 801266e:	2501      	movs	r5, #1
 8012670:	e7c3      	b.n	80125fa <__gethex+0x9e>
 8012672:	2400      	movs	r4, #0
 8012674:	1cb1      	adds	r1, r6, #2
 8012676:	e7cc      	b.n	8012612 <__gethex+0xb6>
 8012678:	2401      	movs	r4, #1
 801267a:	e7fb      	b.n	8012674 <__gethex+0x118>
 801267c:	fb03 0002 	mla	r0, r3, r2, r0
 8012680:	e7ce      	b.n	8012620 <__gethex+0xc4>
 8012682:	4631      	mov	r1, r6
 8012684:	e7de      	b.n	8012644 <__gethex+0xe8>
 8012686:	eba6 0309 	sub.w	r3, r6, r9
 801268a:	3b01      	subs	r3, #1
 801268c:	4629      	mov	r1, r5
 801268e:	2b07      	cmp	r3, #7
 8012690:	dc0a      	bgt.n	80126a8 <__gethex+0x14c>
 8012692:	9801      	ldr	r0, [sp, #4]
 8012694:	f7fd ffd6 	bl	8010644 <_Balloc>
 8012698:	4604      	mov	r4, r0
 801269a:	b940      	cbnz	r0, 80126ae <__gethex+0x152>
 801269c:	4b5c      	ldr	r3, [pc, #368]	@ (8012810 <__gethex+0x2b4>)
 801269e:	4602      	mov	r2, r0
 80126a0:	21e4      	movs	r1, #228	@ 0xe4
 80126a2:	485c      	ldr	r0, [pc, #368]	@ (8012814 <__gethex+0x2b8>)
 80126a4:	f7ff fec0 	bl	8012428 <__assert_func>
 80126a8:	3101      	adds	r1, #1
 80126aa:	105b      	asrs	r3, r3, #1
 80126ac:	e7ef      	b.n	801268e <__gethex+0x132>
 80126ae:	f100 0a14 	add.w	sl, r0, #20
 80126b2:	2300      	movs	r3, #0
 80126b4:	4655      	mov	r5, sl
 80126b6:	469b      	mov	fp, r3
 80126b8:	45b1      	cmp	r9, r6
 80126ba:	d337      	bcc.n	801272c <__gethex+0x1d0>
 80126bc:	f845 bb04 	str.w	fp, [r5], #4
 80126c0:	eba5 050a 	sub.w	r5, r5, sl
 80126c4:	10ad      	asrs	r5, r5, #2
 80126c6:	6125      	str	r5, [r4, #16]
 80126c8:	4658      	mov	r0, fp
 80126ca:	f7fe f8ad 	bl	8010828 <__hi0bits>
 80126ce:	016d      	lsls	r5, r5, #5
 80126d0:	f8d8 6000 	ldr.w	r6, [r8]
 80126d4:	1a2d      	subs	r5, r5, r0
 80126d6:	42b5      	cmp	r5, r6
 80126d8:	dd54      	ble.n	8012784 <__gethex+0x228>
 80126da:	1bad      	subs	r5, r5, r6
 80126dc:	4629      	mov	r1, r5
 80126de:	4620      	mov	r0, r4
 80126e0:	f7fe fc3e 	bl	8010f60 <__any_on>
 80126e4:	4681      	mov	r9, r0
 80126e6:	b178      	cbz	r0, 8012708 <__gethex+0x1ac>
 80126e8:	1e6b      	subs	r3, r5, #1
 80126ea:	1159      	asrs	r1, r3, #5
 80126ec:	f003 021f 	and.w	r2, r3, #31
 80126f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80126f4:	f04f 0901 	mov.w	r9, #1
 80126f8:	fa09 f202 	lsl.w	r2, r9, r2
 80126fc:	420a      	tst	r2, r1
 80126fe:	d003      	beq.n	8012708 <__gethex+0x1ac>
 8012700:	454b      	cmp	r3, r9
 8012702:	dc36      	bgt.n	8012772 <__gethex+0x216>
 8012704:	f04f 0902 	mov.w	r9, #2
 8012708:	4629      	mov	r1, r5
 801270a:	4620      	mov	r0, r4
 801270c:	f7ff febe 	bl	801248c <rshift>
 8012710:	442f      	add	r7, r5
 8012712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012716:	42bb      	cmp	r3, r7
 8012718:	da42      	bge.n	80127a0 <__gethex+0x244>
 801271a:	9801      	ldr	r0, [sp, #4]
 801271c:	4621      	mov	r1, r4
 801271e:	f7fd ffd1 	bl	80106c4 <_Bfree>
 8012722:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012724:	2300      	movs	r3, #0
 8012726:	6013      	str	r3, [r2, #0]
 8012728:	25a3      	movs	r5, #163	@ 0xa3
 801272a:	e793      	b.n	8012654 <__gethex+0xf8>
 801272c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012730:	2a2e      	cmp	r2, #46	@ 0x2e
 8012732:	d012      	beq.n	801275a <__gethex+0x1fe>
 8012734:	2b20      	cmp	r3, #32
 8012736:	d104      	bne.n	8012742 <__gethex+0x1e6>
 8012738:	f845 bb04 	str.w	fp, [r5], #4
 801273c:	f04f 0b00 	mov.w	fp, #0
 8012740:	465b      	mov	r3, fp
 8012742:	7830      	ldrb	r0, [r6, #0]
 8012744:	9303      	str	r3, [sp, #12]
 8012746:	f7ff fef3 	bl	8012530 <__hexdig_fun>
 801274a:	9b03      	ldr	r3, [sp, #12]
 801274c:	f000 000f 	and.w	r0, r0, #15
 8012750:	4098      	lsls	r0, r3
 8012752:	ea4b 0b00 	orr.w	fp, fp, r0
 8012756:	3304      	adds	r3, #4
 8012758:	e7ae      	b.n	80126b8 <__gethex+0x15c>
 801275a:	45b1      	cmp	r9, r6
 801275c:	d8ea      	bhi.n	8012734 <__gethex+0x1d8>
 801275e:	492b      	ldr	r1, [pc, #172]	@ (801280c <__gethex+0x2b0>)
 8012760:	9303      	str	r3, [sp, #12]
 8012762:	2201      	movs	r2, #1
 8012764:	4630      	mov	r0, r6
 8012766:	f7ff fe11 	bl	801238c <strncmp>
 801276a:	9b03      	ldr	r3, [sp, #12]
 801276c:	2800      	cmp	r0, #0
 801276e:	d1e1      	bne.n	8012734 <__gethex+0x1d8>
 8012770:	e7a2      	b.n	80126b8 <__gethex+0x15c>
 8012772:	1ea9      	subs	r1, r5, #2
 8012774:	4620      	mov	r0, r4
 8012776:	f7fe fbf3 	bl	8010f60 <__any_on>
 801277a:	2800      	cmp	r0, #0
 801277c:	d0c2      	beq.n	8012704 <__gethex+0x1a8>
 801277e:	f04f 0903 	mov.w	r9, #3
 8012782:	e7c1      	b.n	8012708 <__gethex+0x1ac>
 8012784:	da09      	bge.n	801279a <__gethex+0x23e>
 8012786:	1b75      	subs	r5, r6, r5
 8012788:	4621      	mov	r1, r4
 801278a:	9801      	ldr	r0, [sp, #4]
 801278c:	462a      	mov	r2, r5
 801278e:	f7fe f9b1 	bl	8010af4 <__lshift>
 8012792:	1b7f      	subs	r7, r7, r5
 8012794:	4604      	mov	r4, r0
 8012796:	f100 0a14 	add.w	sl, r0, #20
 801279a:	f04f 0900 	mov.w	r9, #0
 801279e:	e7b8      	b.n	8012712 <__gethex+0x1b6>
 80127a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80127a4:	42bd      	cmp	r5, r7
 80127a6:	dd6f      	ble.n	8012888 <__gethex+0x32c>
 80127a8:	1bed      	subs	r5, r5, r7
 80127aa:	42ae      	cmp	r6, r5
 80127ac:	dc34      	bgt.n	8012818 <__gethex+0x2bc>
 80127ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80127b2:	2b02      	cmp	r3, #2
 80127b4:	d022      	beq.n	80127fc <__gethex+0x2a0>
 80127b6:	2b03      	cmp	r3, #3
 80127b8:	d024      	beq.n	8012804 <__gethex+0x2a8>
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d115      	bne.n	80127ea <__gethex+0x28e>
 80127be:	42ae      	cmp	r6, r5
 80127c0:	d113      	bne.n	80127ea <__gethex+0x28e>
 80127c2:	2e01      	cmp	r6, #1
 80127c4:	d10b      	bne.n	80127de <__gethex+0x282>
 80127c6:	9a02      	ldr	r2, [sp, #8]
 80127c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80127cc:	6013      	str	r3, [r2, #0]
 80127ce:	2301      	movs	r3, #1
 80127d0:	6123      	str	r3, [r4, #16]
 80127d2:	f8ca 3000 	str.w	r3, [sl]
 80127d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127d8:	2562      	movs	r5, #98	@ 0x62
 80127da:	601c      	str	r4, [r3, #0]
 80127dc:	e73a      	b.n	8012654 <__gethex+0xf8>
 80127de:	1e71      	subs	r1, r6, #1
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7fe fbbd 	bl	8010f60 <__any_on>
 80127e6:	2800      	cmp	r0, #0
 80127e8:	d1ed      	bne.n	80127c6 <__gethex+0x26a>
 80127ea:	9801      	ldr	r0, [sp, #4]
 80127ec:	4621      	mov	r1, r4
 80127ee:	f7fd ff69 	bl	80106c4 <_Bfree>
 80127f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127f4:	2300      	movs	r3, #0
 80127f6:	6013      	str	r3, [r2, #0]
 80127f8:	2550      	movs	r5, #80	@ 0x50
 80127fa:	e72b      	b.n	8012654 <__gethex+0xf8>
 80127fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d1f3      	bne.n	80127ea <__gethex+0x28e>
 8012802:	e7e0      	b.n	80127c6 <__gethex+0x26a>
 8012804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012806:	2b00      	cmp	r3, #0
 8012808:	d1dd      	bne.n	80127c6 <__gethex+0x26a>
 801280a:	e7ee      	b.n	80127ea <__gethex+0x28e>
 801280c:	08014300 	.word	0x08014300
 8012810:	08014195 	.word	0x08014195
 8012814:	080144ae 	.word	0x080144ae
 8012818:	1e6f      	subs	r7, r5, #1
 801281a:	f1b9 0f00 	cmp.w	r9, #0
 801281e:	d130      	bne.n	8012882 <__gethex+0x326>
 8012820:	b127      	cbz	r7, 801282c <__gethex+0x2d0>
 8012822:	4639      	mov	r1, r7
 8012824:	4620      	mov	r0, r4
 8012826:	f7fe fb9b 	bl	8010f60 <__any_on>
 801282a:	4681      	mov	r9, r0
 801282c:	117a      	asrs	r2, r7, #5
 801282e:	2301      	movs	r3, #1
 8012830:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012834:	f007 071f 	and.w	r7, r7, #31
 8012838:	40bb      	lsls	r3, r7
 801283a:	4213      	tst	r3, r2
 801283c:	4629      	mov	r1, r5
 801283e:	4620      	mov	r0, r4
 8012840:	bf18      	it	ne
 8012842:	f049 0902 	orrne.w	r9, r9, #2
 8012846:	f7ff fe21 	bl	801248c <rshift>
 801284a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801284e:	1b76      	subs	r6, r6, r5
 8012850:	2502      	movs	r5, #2
 8012852:	f1b9 0f00 	cmp.w	r9, #0
 8012856:	d047      	beq.n	80128e8 <__gethex+0x38c>
 8012858:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801285c:	2b02      	cmp	r3, #2
 801285e:	d015      	beq.n	801288c <__gethex+0x330>
 8012860:	2b03      	cmp	r3, #3
 8012862:	d017      	beq.n	8012894 <__gethex+0x338>
 8012864:	2b01      	cmp	r3, #1
 8012866:	d109      	bne.n	801287c <__gethex+0x320>
 8012868:	f019 0f02 	tst.w	r9, #2
 801286c:	d006      	beq.n	801287c <__gethex+0x320>
 801286e:	f8da 3000 	ldr.w	r3, [sl]
 8012872:	ea49 0903 	orr.w	r9, r9, r3
 8012876:	f019 0f01 	tst.w	r9, #1
 801287a:	d10e      	bne.n	801289a <__gethex+0x33e>
 801287c:	f045 0510 	orr.w	r5, r5, #16
 8012880:	e032      	b.n	80128e8 <__gethex+0x38c>
 8012882:	f04f 0901 	mov.w	r9, #1
 8012886:	e7d1      	b.n	801282c <__gethex+0x2d0>
 8012888:	2501      	movs	r5, #1
 801288a:	e7e2      	b.n	8012852 <__gethex+0x2f6>
 801288c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801288e:	f1c3 0301 	rsb	r3, r3, #1
 8012892:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012896:	2b00      	cmp	r3, #0
 8012898:	d0f0      	beq.n	801287c <__gethex+0x320>
 801289a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801289e:	f104 0314 	add.w	r3, r4, #20
 80128a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80128a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80128aa:	f04f 0c00 	mov.w	ip, #0
 80128ae:	4618      	mov	r0, r3
 80128b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80128b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80128b8:	d01b      	beq.n	80128f2 <__gethex+0x396>
 80128ba:	3201      	adds	r2, #1
 80128bc:	6002      	str	r2, [r0, #0]
 80128be:	2d02      	cmp	r5, #2
 80128c0:	f104 0314 	add.w	r3, r4, #20
 80128c4:	d13c      	bne.n	8012940 <__gethex+0x3e4>
 80128c6:	f8d8 2000 	ldr.w	r2, [r8]
 80128ca:	3a01      	subs	r2, #1
 80128cc:	42b2      	cmp	r2, r6
 80128ce:	d109      	bne.n	80128e4 <__gethex+0x388>
 80128d0:	1171      	asrs	r1, r6, #5
 80128d2:	2201      	movs	r2, #1
 80128d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128d8:	f006 061f 	and.w	r6, r6, #31
 80128dc:	fa02 f606 	lsl.w	r6, r2, r6
 80128e0:	421e      	tst	r6, r3
 80128e2:	d13a      	bne.n	801295a <__gethex+0x3fe>
 80128e4:	f045 0520 	orr.w	r5, r5, #32
 80128e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128ea:	601c      	str	r4, [r3, #0]
 80128ec:	9b02      	ldr	r3, [sp, #8]
 80128ee:	601f      	str	r7, [r3, #0]
 80128f0:	e6b0      	b.n	8012654 <__gethex+0xf8>
 80128f2:	4299      	cmp	r1, r3
 80128f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80128f8:	d8d9      	bhi.n	80128ae <__gethex+0x352>
 80128fa:	68a3      	ldr	r3, [r4, #8]
 80128fc:	459b      	cmp	fp, r3
 80128fe:	db17      	blt.n	8012930 <__gethex+0x3d4>
 8012900:	6861      	ldr	r1, [r4, #4]
 8012902:	9801      	ldr	r0, [sp, #4]
 8012904:	3101      	adds	r1, #1
 8012906:	f7fd fe9d 	bl	8010644 <_Balloc>
 801290a:	4681      	mov	r9, r0
 801290c:	b918      	cbnz	r0, 8012916 <__gethex+0x3ba>
 801290e:	4b1a      	ldr	r3, [pc, #104]	@ (8012978 <__gethex+0x41c>)
 8012910:	4602      	mov	r2, r0
 8012912:	2184      	movs	r1, #132	@ 0x84
 8012914:	e6c5      	b.n	80126a2 <__gethex+0x146>
 8012916:	6922      	ldr	r2, [r4, #16]
 8012918:	3202      	adds	r2, #2
 801291a:	f104 010c 	add.w	r1, r4, #12
 801291e:	0092      	lsls	r2, r2, #2
 8012920:	300c      	adds	r0, #12
 8012922:	f7fc ff9c 	bl	800f85e <memcpy>
 8012926:	4621      	mov	r1, r4
 8012928:	9801      	ldr	r0, [sp, #4]
 801292a:	f7fd fecb 	bl	80106c4 <_Bfree>
 801292e:	464c      	mov	r4, r9
 8012930:	6923      	ldr	r3, [r4, #16]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012938:	6122      	str	r2, [r4, #16]
 801293a:	2201      	movs	r2, #1
 801293c:	615a      	str	r2, [r3, #20]
 801293e:	e7be      	b.n	80128be <__gethex+0x362>
 8012940:	6922      	ldr	r2, [r4, #16]
 8012942:	455a      	cmp	r2, fp
 8012944:	dd0b      	ble.n	801295e <__gethex+0x402>
 8012946:	2101      	movs	r1, #1
 8012948:	4620      	mov	r0, r4
 801294a:	f7ff fd9f 	bl	801248c <rshift>
 801294e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012952:	3701      	adds	r7, #1
 8012954:	42bb      	cmp	r3, r7
 8012956:	f6ff aee0 	blt.w	801271a <__gethex+0x1be>
 801295a:	2501      	movs	r5, #1
 801295c:	e7c2      	b.n	80128e4 <__gethex+0x388>
 801295e:	f016 061f 	ands.w	r6, r6, #31
 8012962:	d0fa      	beq.n	801295a <__gethex+0x3fe>
 8012964:	4453      	add	r3, sl
 8012966:	f1c6 0620 	rsb	r6, r6, #32
 801296a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801296e:	f7fd ff5b 	bl	8010828 <__hi0bits>
 8012972:	42b0      	cmp	r0, r6
 8012974:	dbe7      	blt.n	8012946 <__gethex+0x3ea>
 8012976:	e7f0      	b.n	801295a <__gethex+0x3fe>
 8012978:	08014195 	.word	0x08014195

0801297c <L_shift>:
 801297c:	f1c2 0208 	rsb	r2, r2, #8
 8012980:	0092      	lsls	r2, r2, #2
 8012982:	b570      	push	{r4, r5, r6, lr}
 8012984:	f1c2 0620 	rsb	r6, r2, #32
 8012988:	6843      	ldr	r3, [r0, #4]
 801298a:	6804      	ldr	r4, [r0, #0]
 801298c:	fa03 f506 	lsl.w	r5, r3, r6
 8012990:	432c      	orrs	r4, r5
 8012992:	40d3      	lsrs	r3, r2
 8012994:	6004      	str	r4, [r0, #0]
 8012996:	f840 3f04 	str.w	r3, [r0, #4]!
 801299a:	4288      	cmp	r0, r1
 801299c:	d3f4      	bcc.n	8012988 <L_shift+0xc>
 801299e:	bd70      	pop	{r4, r5, r6, pc}

080129a0 <__match>:
 80129a0:	b530      	push	{r4, r5, lr}
 80129a2:	6803      	ldr	r3, [r0, #0]
 80129a4:	3301      	adds	r3, #1
 80129a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129aa:	b914      	cbnz	r4, 80129b2 <__match+0x12>
 80129ac:	6003      	str	r3, [r0, #0]
 80129ae:	2001      	movs	r0, #1
 80129b0:	bd30      	pop	{r4, r5, pc}
 80129b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80129ba:	2d19      	cmp	r5, #25
 80129bc:	bf98      	it	ls
 80129be:	3220      	addls	r2, #32
 80129c0:	42a2      	cmp	r2, r4
 80129c2:	d0f0      	beq.n	80129a6 <__match+0x6>
 80129c4:	2000      	movs	r0, #0
 80129c6:	e7f3      	b.n	80129b0 <__match+0x10>

080129c8 <__hexnan>:
 80129c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129cc:	680b      	ldr	r3, [r1, #0]
 80129ce:	6801      	ldr	r1, [r0, #0]
 80129d0:	115e      	asrs	r6, r3, #5
 80129d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80129d6:	f013 031f 	ands.w	r3, r3, #31
 80129da:	b087      	sub	sp, #28
 80129dc:	bf18      	it	ne
 80129de:	3604      	addne	r6, #4
 80129e0:	2500      	movs	r5, #0
 80129e2:	1f37      	subs	r7, r6, #4
 80129e4:	4682      	mov	sl, r0
 80129e6:	4690      	mov	r8, r2
 80129e8:	9301      	str	r3, [sp, #4]
 80129ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80129ee:	46b9      	mov	r9, r7
 80129f0:	463c      	mov	r4, r7
 80129f2:	9502      	str	r5, [sp, #8]
 80129f4:	46ab      	mov	fp, r5
 80129f6:	784a      	ldrb	r2, [r1, #1]
 80129f8:	1c4b      	adds	r3, r1, #1
 80129fa:	9303      	str	r3, [sp, #12]
 80129fc:	b342      	cbz	r2, 8012a50 <__hexnan+0x88>
 80129fe:	4610      	mov	r0, r2
 8012a00:	9105      	str	r1, [sp, #20]
 8012a02:	9204      	str	r2, [sp, #16]
 8012a04:	f7ff fd94 	bl	8012530 <__hexdig_fun>
 8012a08:	2800      	cmp	r0, #0
 8012a0a:	d151      	bne.n	8012ab0 <__hexnan+0xe8>
 8012a0c:	9a04      	ldr	r2, [sp, #16]
 8012a0e:	9905      	ldr	r1, [sp, #20]
 8012a10:	2a20      	cmp	r2, #32
 8012a12:	d818      	bhi.n	8012a46 <__hexnan+0x7e>
 8012a14:	9b02      	ldr	r3, [sp, #8]
 8012a16:	459b      	cmp	fp, r3
 8012a18:	dd13      	ble.n	8012a42 <__hexnan+0x7a>
 8012a1a:	454c      	cmp	r4, r9
 8012a1c:	d206      	bcs.n	8012a2c <__hexnan+0x64>
 8012a1e:	2d07      	cmp	r5, #7
 8012a20:	dc04      	bgt.n	8012a2c <__hexnan+0x64>
 8012a22:	462a      	mov	r2, r5
 8012a24:	4649      	mov	r1, r9
 8012a26:	4620      	mov	r0, r4
 8012a28:	f7ff ffa8 	bl	801297c <L_shift>
 8012a2c:	4544      	cmp	r4, r8
 8012a2e:	d952      	bls.n	8012ad6 <__hexnan+0x10e>
 8012a30:	2300      	movs	r3, #0
 8012a32:	f1a4 0904 	sub.w	r9, r4, #4
 8012a36:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a3a:	f8cd b008 	str.w	fp, [sp, #8]
 8012a3e:	464c      	mov	r4, r9
 8012a40:	461d      	mov	r5, r3
 8012a42:	9903      	ldr	r1, [sp, #12]
 8012a44:	e7d7      	b.n	80129f6 <__hexnan+0x2e>
 8012a46:	2a29      	cmp	r2, #41	@ 0x29
 8012a48:	d157      	bne.n	8012afa <__hexnan+0x132>
 8012a4a:	3102      	adds	r1, #2
 8012a4c:	f8ca 1000 	str.w	r1, [sl]
 8012a50:	f1bb 0f00 	cmp.w	fp, #0
 8012a54:	d051      	beq.n	8012afa <__hexnan+0x132>
 8012a56:	454c      	cmp	r4, r9
 8012a58:	d206      	bcs.n	8012a68 <__hexnan+0xa0>
 8012a5a:	2d07      	cmp	r5, #7
 8012a5c:	dc04      	bgt.n	8012a68 <__hexnan+0xa0>
 8012a5e:	462a      	mov	r2, r5
 8012a60:	4649      	mov	r1, r9
 8012a62:	4620      	mov	r0, r4
 8012a64:	f7ff ff8a 	bl	801297c <L_shift>
 8012a68:	4544      	cmp	r4, r8
 8012a6a:	d936      	bls.n	8012ada <__hexnan+0x112>
 8012a6c:	f1a8 0204 	sub.w	r2, r8, #4
 8012a70:	4623      	mov	r3, r4
 8012a72:	f853 1b04 	ldr.w	r1, [r3], #4
 8012a76:	f842 1f04 	str.w	r1, [r2, #4]!
 8012a7a:	429f      	cmp	r7, r3
 8012a7c:	d2f9      	bcs.n	8012a72 <__hexnan+0xaa>
 8012a7e:	1b3b      	subs	r3, r7, r4
 8012a80:	f023 0303 	bic.w	r3, r3, #3
 8012a84:	3304      	adds	r3, #4
 8012a86:	3401      	adds	r4, #1
 8012a88:	3e03      	subs	r6, #3
 8012a8a:	42b4      	cmp	r4, r6
 8012a8c:	bf88      	it	hi
 8012a8e:	2304      	movhi	r3, #4
 8012a90:	4443      	add	r3, r8
 8012a92:	2200      	movs	r2, #0
 8012a94:	f843 2b04 	str.w	r2, [r3], #4
 8012a98:	429f      	cmp	r7, r3
 8012a9a:	d2fb      	bcs.n	8012a94 <__hexnan+0xcc>
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	b91b      	cbnz	r3, 8012aa8 <__hexnan+0xe0>
 8012aa0:	4547      	cmp	r7, r8
 8012aa2:	d128      	bne.n	8012af6 <__hexnan+0x12e>
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	603b      	str	r3, [r7, #0]
 8012aa8:	2005      	movs	r0, #5
 8012aaa:	b007      	add	sp, #28
 8012aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab0:	3501      	adds	r5, #1
 8012ab2:	2d08      	cmp	r5, #8
 8012ab4:	f10b 0b01 	add.w	fp, fp, #1
 8012ab8:	dd06      	ble.n	8012ac8 <__hexnan+0x100>
 8012aba:	4544      	cmp	r4, r8
 8012abc:	d9c1      	bls.n	8012a42 <__hexnan+0x7a>
 8012abe:	2300      	movs	r3, #0
 8012ac0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ac4:	2501      	movs	r5, #1
 8012ac6:	3c04      	subs	r4, #4
 8012ac8:	6822      	ldr	r2, [r4, #0]
 8012aca:	f000 000f 	and.w	r0, r0, #15
 8012ace:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012ad2:	6020      	str	r0, [r4, #0]
 8012ad4:	e7b5      	b.n	8012a42 <__hexnan+0x7a>
 8012ad6:	2508      	movs	r5, #8
 8012ad8:	e7b3      	b.n	8012a42 <__hexnan+0x7a>
 8012ada:	9b01      	ldr	r3, [sp, #4]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d0dd      	beq.n	8012a9c <__hexnan+0xd4>
 8012ae0:	f1c3 0320 	rsb	r3, r3, #32
 8012ae4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012ae8:	40da      	lsrs	r2, r3
 8012aea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012aee:	4013      	ands	r3, r2
 8012af0:	f846 3c04 	str.w	r3, [r6, #-4]
 8012af4:	e7d2      	b.n	8012a9c <__hexnan+0xd4>
 8012af6:	3f04      	subs	r7, #4
 8012af8:	e7d0      	b.n	8012a9c <__hexnan+0xd4>
 8012afa:	2004      	movs	r0, #4
 8012afc:	e7d5      	b.n	8012aaa <__hexnan+0xe2>

08012afe <__ascii_mbtowc>:
 8012afe:	b082      	sub	sp, #8
 8012b00:	b901      	cbnz	r1, 8012b04 <__ascii_mbtowc+0x6>
 8012b02:	a901      	add	r1, sp, #4
 8012b04:	b142      	cbz	r2, 8012b18 <__ascii_mbtowc+0x1a>
 8012b06:	b14b      	cbz	r3, 8012b1c <__ascii_mbtowc+0x1e>
 8012b08:	7813      	ldrb	r3, [r2, #0]
 8012b0a:	600b      	str	r3, [r1, #0]
 8012b0c:	7812      	ldrb	r2, [r2, #0]
 8012b0e:	1e10      	subs	r0, r2, #0
 8012b10:	bf18      	it	ne
 8012b12:	2001      	movne	r0, #1
 8012b14:	b002      	add	sp, #8
 8012b16:	4770      	bx	lr
 8012b18:	4610      	mov	r0, r2
 8012b1a:	e7fb      	b.n	8012b14 <__ascii_mbtowc+0x16>
 8012b1c:	f06f 0001 	mvn.w	r0, #1
 8012b20:	e7f8      	b.n	8012b14 <__ascii_mbtowc+0x16>

08012b22 <_realloc_r>:
 8012b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b26:	4680      	mov	r8, r0
 8012b28:	4615      	mov	r5, r2
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	b921      	cbnz	r1, 8012b38 <_realloc_r+0x16>
 8012b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b32:	4611      	mov	r1, r2
 8012b34:	f7fd bcfa 	b.w	801052c <_malloc_r>
 8012b38:	b92a      	cbnz	r2, 8012b46 <_realloc_r+0x24>
 8012b3a:	f7fd fc83 	bl	8010444 <_free_r>
 8012b3e:	2400      	movs	r4, #0
 8012b40:	4620      	mov	r0, r4
 8012b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b46:	f000 f840 	bl	8012bca <_malloc_usable_size_r>
 8012b4a:	4285      	cmp	r5, r0
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	d802      	bhi.n	8012b56 <_realloc_r+0x34>
 8012b50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b54:	d8f4      	bhi.n	8012b40 <_realloc_r+0x1e>
 8012b56:	4629      	mov	r1, r5
 8012b58:	4640      	mov	r0, r8
 8012b5a:	f7fd fce7 	bl	801052c <_malloc_r>
 8012b5e:	4607      	mov	r7, r0
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d0ec      	beq.n	8012b3e <_realloc_r+0x1c>
 8012b64:	42b5      	cmp	r5, r6
 8012b66:	462a      	mov	r2, r5
 8012b68:	4621      	mov	r1, r4
 8012b6a:	bf28      	it	cs
 8012b6c:	4632      	movcs	r2, r6
 8012b6e:	f7fc fe76 	bl	800f85e <memcpy>
 8012b72:	4621      	mov	r1, r4
 8012b74:	4640      	mov	r0, r8
 8012b76:	f7fd fc65 	bl	8010444 <_free_r>
 8012b7a:	463c      	mov	r4, r7
 8012b7c:	e7e0      	b.n	8012b40 <_realloc_r+0x1e>

08012b7e <__ascii_wctomb>:
 8012b7e:	4603      	mov	r3, r0
 8012b80:	4608      	mov	r0, r1
 8012b82:	b141      	cbz	r1, 8012b96 <__ascii_wctomb+0x18>
 8012b84:	2aff      	cmp	r2, #255	@ 0xff
 8012b86:	d904      	bls.n	8012b92 <__ascii_wctomb+0x14>
 8012b88:	228a      	movs	r2, #138	@ 0x8a
 8012b8a:	601a      	str	r2, [r3, #0]
 8012b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b90:	4770      	bx	lr
 8012b92:	700a      	strb	r2, [r1, #0]
 8012b94:	2001      	movs	r0, #1
 8012b96:	4770      	bx	lr

08012b98 <fiprintf>:
 8012b98:	b40e      	push	{r1, r2, r3}
 8012b9a:	b503      	push	{r0, r1, lr}
 8012b9c:	4601      	mov	r1, r0
 8012b9e:	ab03      	add	r3, sp, #12
 8012ba0:	4805      	ldr	r0, [pc, #20]	@ (8012bb8 <fiprintf+0x20>)
 8012ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ba6:	6800      	ldr	r0, [r0, #0]
 8012ba8:	9301      	str	r3, [sp, #4]
 8012baa:	f7ff f9af 	bl	8011f0c <_vfiprintf_r>
 8012bae:	b002      	add	sp, #8
 8012bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb4:	b003      	add	sp, #12
 8012bb6:	4770      	bx	lr
 8012bb8:	24000028 	.word	0x24000028

08012bbc <abort>:
 8012bbc:	b508      	push	{r3, lr}
 8012bbe:	2006      	movs	r0, #6
 8012bc0:	f000 f834 	bl	8012c2c <raise>
 8012bc4:	2001      	movs	r0, #1
 8012bc6:	f7ef ff6f 	bl	8002aa8 <_exit>

08012bca <_malloc_usable_size_r>:
 8012bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bce:	1f18      	subs	r0, r3, #4
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	bfbc      	itt	lt
 8012bd4:	580b      	ldrlt	r3, [r1, r0]
 8012bd6:	18c0      	addlt	r0, r0, r3
 8012bd8:	4770      	bx	lr

08012bda <_raise_r>:
 8012bda:	291f      	cmp	r1, #31
 8012bdc:	b538      	push	{r3, r4, r5, lr}
 8012bde:	4605      	mov	r5, r0
 8012be0:	460c      	mov	r4, r1
 8012be2:	d904      	bls.n	8012bee <_raise_r+0x14>
 8012be4:	2316      	movs	r3, #22
 8012be6:	6003      	str	r3, [r0, #0]
 8012be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012bec:	bd38      	pop	{r3, r4, r5, pc}
 8012bee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012bf0:	b112      	cbz	r2, 8012bf8 <_raise_r+0x1e>
 8012bf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bf6:	b94b      	cbnz	r3, 8012c0c <_raise_r+0x32>
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	f000 f831 	bl	8012c60 <_getpid_r>
 8012bfe:	4622      	mov	r2, r4
 8012c00:	4601      	mov	r1, r0
 8012c02:	4628      	mov	r0, r5
 8012c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c08:	f000 b818 	b.w	8012c3c <_kill_r>
 8012c0c:	2b01      	cmp	r3, #1
 8012c0e:	d00a      	beq.n	8012c26 <_raise_r+0x4c>
 8012c10:	1c59      	adds	r1, r3, #1
 8012c12:	d103      	bne.n	8012c1c <_raise_r+0x42>
 8012c14:	2316      	movs	r3, #22
 8012c16:	6003      	str	r3, [r0, #0]
 8012c18:	2001      	movs	r0, #1
 8012c1a:	e7e7      	b.n	8012bec <_raise_r+0x12>
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012c22:	4620      	mov	r0, r4
 8012c24:	4798      	blx	r3
 8012c26:	2000      	movs	r0, #0
 8012c28:	e7e0      	b.n	8012bec <_raise_r+0x12>
	...

08012c2c <raise>:
 8012c2c:	4b02      	ldr	r3, [pc, #8]	@ (8012c38 <raise+0xc>)
 8012c2e:	4601      	mov	r1, r0
 8012c30:	6818      	ldr	r0, [r3, #0]
 8012c32:	f7ff bfd2 	b.w	8012bda <_raise_r>
 8012c36:	bf00      	nop
 8012c38:	24000028 	.word	0x24000028

08012c3c <_kill_r>:
 8012c3c:	b538      	push	{r3, r4, r5, lr}
 8012c3e:	4d07      	ldr	r5, [pc, #28]	@ (8012c5c <_kill_r+0x20>)
 8012c40:	2300      	movs	r3, #0
 8012c42:	4604      	mov	r4, r0
 8012c44:	4608      	mov	r0, r1
 8012c46:	4611      	mov	r1, r2
 8012c48:	602b      	str	r3, [r5, #0]
 8012c4a:	f7ef ff1d 	bl	8002a88 <_kill>
 8012c4e:	1c43      	adds	r3, r0, #1
 8012c50:	d102      	bne.n	8012c58 <_kill_r+0x1c>
 8012c52:	682b      	ldr	r3, [r5, #0]
 8012c54:	b103      	cbz	r3, 8012c58 <_kill_r+0x1c>
 8012c56:	6023      	str	r3, [r4, #0]
 8012c58:	bd38      	pop	{r3, r4, r5, pc}
 8012c5a:	bf00      	nop
 8012c5c:	24005818 	.word	0x24005818

08012c60 <_getpid_r>:
 8012c60:	f7ef bf0a 	b.w	8002a78 <_getpid>

08012c64 <atan2>:
 8012c64:	f000 ba18 	b.w	8013098 <__ieee754_atan2>

08012c68 <fmod>:
 8012c68:	b508      	push	{r3, lr}
 8012c6a:	ed2d 8b04 	vpush	{d8-d9}
 8012c6e:	eeb0 9b40 	vmov.f64	d9, d0
 8012c72:	eeb0 8b41 	vmov.f64	d8, d1
 8012c76:	f000 fad1 	bl	801321c <__ieee754_fmod>
 8012c7a:	eeb4 9b48 	vcmp.f64	d9, d8
 8012c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c82:	d60c      	bvs.n	8012c9e <fmod+0x36>
 8012c84:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8012ca8 <fmod+0x40>
 8012c88:	eeb4 8b49 	vcmp.f64	d8, d9
 8012c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c90:	d105      	bne.n	8012c9e <fmod+0x36>
 8012c92:	f7fc fdb7 	bl	800f804 <__errno>
 8012c96:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012c9a:	2321      	movs	r3, #33	@ 0x21
 8012c9c:	6003      	str	r3, [r0, #0]
 8012c9e:	ecbd 8b04 	vpop	{d8-d9}
 8012ca2:	bd08      	pop	{r3, pc}
 8012ca4:	f3af 8000 	nop.w
	...

08012cb0 <sqrt>:
 8012cb0:	b508      	push	{r3, lr}
 8012cb2:	ed2d 8b04 	vpush	{d8-d9}
 8012cb6:	eeb0 8b40 	vmov.f64	d8, d0
 8012cba:	f000 f8b1 	bl	8012e20 <__ieee754_sqrt>
 8012cbe:	eeb4 8b48 	vcmp.f64	d8, d8
 8012cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc6:	d60c      	bvs.n	8012ce2 <sqrt+0x32>
 8012cc8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8012ce8 <sqrt+0x38>
 8012ccc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd4:	d505      	bpl.n	8012ce2 <sqrt+0x32>
 8012cd6:	f7fc fd95 	bl	800f804 <__errno>
 8012cda:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012cde:	2321      	movs	r3, #33	@ 0x21
 8012ce0:	6003      	str	r3, [r0, #0]
 8012ce2:	ecbd 8b04 	vpop	{d8-d9}
 8012ce6:	bd08      	pop	{r3, pc}
	...

08012cf0 <cos>:
 8012cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cf2:	eeb0 7b40 	vmov.f64	d7, d0
 8012cf6:	ee17 3a90 	vmov	r3, s15
 8012cfa:	4a21      	ldr	r2, [pc, #132]	@ (8012d80 <cos+0x90>)
 8012cfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d00:	4293      	cmp	r3, r2
 8012d02:	d806      	bhi.n	8012d12 <cos+0x22>
 8012d04:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8012d78 <cos+0x88>
 8012d08:	b005      	add	sp, #20
 8012d0a:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d0e:	f000 b903 	b.w	8012f18 <__kernel_cos>
 8012d12:	4a1c      	ldr	r2, [pc, #112]	@ (8012d84 <cos+0x94>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d904      	bls.n	8012d22 <cos+0x32>
 8012d18:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012d1c:	b005      	add	sp, #20
 8012d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d22:	4668      	mov	r0, sp
 8012d24:	f000 fb88 	bl	8013438 <__ieee754_rem_pio2>
 8012d28:	f000 0003 	and.w	r0, r0, #3
 8012d2c:	2801      	cmp	r0, #1
 8012d2e:	d009      	beq.n	8012d44 <cos+0x54>
 8012d30:	2802      	cmp	r0, #2
 8012d32:	d010      	beq.n	8012d56 <cos+0x66>
 8012d34:	b9b0      	cbnz	r0, 8012d64 <cos+0x74>
 8012d36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d3a:	ed9d 0b00 	vldr	d0, [sp]
 8012d3e:	f000 f8eb 	bl	8012f18 <__kernel_cos>
 8012d42:	e7eb      	b.n	8012d1c <cos+0x2c>
 8012d44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d48:	ed9d 0b00 	vldr	d0, [sp]
 8012d4c:	f000 f94c 	bl	8012fe8 <__kernel_sin>
 8012d50:	eeb1 0b40 	vneg.f64	d0, d0
 8012d54:	e7e2      	b.n	8012d1c <cos+0x2c>
 8012d56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d5a:	ed9d 0b00 	vldr	d0, [sp]
 8012d5e:	f000 f8db 	bl	8012f18 <__kernel_cos>
 8012d62:	e7f5      	b.n	8012d50 <cos+0x60>
 8012d64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d68:	ed9d 0b00 	vldr	d0, [sp]
 8012d6c:	2001      	movs	r0, #1
 8012d6e:	f000 f93b 	bl	8012fe8 <__kernel_sin>
 8012d72:	e7d3      	b.n	8012d1c <cos+0x2c>
 8012d74:	f3af 8000 	nop.w
	...
 8012d80:	3fe921fb 	.word	0x3fe921fb
 8012d84:	7fefffff 	.word	0x7fefffff

08012d88 <sin>:
 8012d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d8a:	eeb0 7b40 	vmov.f64	d7, d0
 8012d8e:	ee17 3a90 	vmov	r3, s15
 8012d92:	4a21      	ldr	r2, [pc, #132]	@ (8012e18 <sin+0x90>)
 8012d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	d807      	bhi.n	8012dac <sin+0x24>
 8012d9c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8012e10 <sin+0x88>
 8012da0:	2000      	movs	r0, #0
 8012da2:	b005      	add	sp, #20
 8012da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012da8:	f000 b91e 	b.w	8012fe8 <__kernel_sin>
 8012dac:	4a1b      	ldr	r2, [pc, #108]	@ (8012e1c <sin+0x94>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d904      	bls.n	8012dbc <sin+0x34>
 8012db2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012db6:	b005      	add	sp, #20
 8012db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012dbc:	4668      	mov	r0, sp
 8012dbe:	f000 fb3b 	bl	8013438 <__ieee754_rem_pio2>
 8012dc2:	f000 0003 	and.w	r0, r0, #3
 8012dc6:	2801      	cmp	r0, #1
 8012dc8:	d00a      	beq.n	8012de0 <sin+0x58>
 8012dca:	2802      	cmp	r0, #2
 8012dcc:	d00f      	beq.n	8012dee <sin+0x66>
 8012dce:	b9c0      	cbnz	r0, 8012e02 <sin+0x7a>
 8012dd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dd4:	ed9d 0b00 	vldr	d0, [sp]
 8012dd8:	2001      	movs	r0, #1
 8012dda:	f000 f905 	bl	8012fe8 <__kernel_sin>
 8012dde:	e7ea      	b.n	8012db6 <sin+0x2e>
 8012de0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012de4:	ed9d 0b00 	vldr	d0, [sp]
 8012de8:	f000 f896 	bl	8012f18 <__kernel_cos>
 8012dec:	e7e3      	b.n	8012db6 <sin+0x2e>
 8012dee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012df2:	ed9d 0b00 	vldr	d0, [sp]
 8012df6:	2001      	movs	r0, #1
 8012df8:	f000 f8f6 	bl	8012fe8 <__kernel_sin>
 8012dfc:	eeb1 0b40 	vneg.f64	d0, d0
 8012e00:	e7d9      	b.n	8012db6 <sin+0x2e>
 8012e02:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e06:	ed9d 0b00 	vldr	d0, [sp]
 8012e0a:	f000 f885 	bl	8012f18 <__kernel_cos>
 8012e0e:	e7f5      	b.n	8012dfc <sin+0x74>
	...
 8012e18:	3fe921fb 	.word	0x3fe921fb
 8012e1c:	7fefffff 	.word	0x7fefffff

08012e20 <__ieee754_sqrt>:
 8012e20:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012e24:	4770      	bx	lr
	...

08012e28 <floor>:
 8012e28:	ee10 3a90 	vmov	r3, s1
 8012e2c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8012e30:	ee10 2a10 	vmov	r2, s0
 8012e34:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8012e38:	2913      	cmp	r1, #19
 8012e3a:	b530      	push	{r4, r5, lr}
 8012e3c:	4615      	mov	r5, r2
 8012e3e:	dc33      	bgt.n	8012ea8 <floor+0x80>
 8012e40:	2900      	cmp	r1, #0
 8012e42:	da18      	bge.n	8012e76 <floor+0x4e>
 8012e44:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8012f08 <floor+0xe0>
 8012e48:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012e4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e54:	dd0a      	ble.n	8012e6c <floor+0x44>
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	da50      	bge.n	8012efc <floor+0xd4>
 8012e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	2200      	movs	r2, #0
 8012e62:	4293      	cmp	r3, r2
 8012e64:	4b2a      	ldr	r3, [pc, #168]	@ (8012f10 <floor+0xe8>)
 8012e66:	bf08      	it	eq
 8012e68:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	4610      	mov	r0, r2
 8012e70:	ec41 0b10 	vmov	d0, r0, r1
 8012e74:	e01f      	b.n	8012eb6 <floor+0x8e>
 8012e76:	4827      	ldr	r0, [pc, #156]	@ (8012f14 <floor+0xec>)
 8012e78:	4108      	asrs	r0, r1
 8012e7a:	ea03 0400 	and.w	r4, r3, r0
 8012e7e:	4314      	orrs	r4, r2
 8012e80:	d019      	beq.n	8012eb6 <floor+0x8e>
 8012e82:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012f08 <floor+0xe0>
 8012e86:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012e8a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e92:	ddeb      	ble.n	8012e6c <floor+0x44>
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	bfbe      	ittt	lt
 8012e98:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8012e9c:	410a      	asrlt	r2, r1
 8012e9e:	189b      	addlt	r3, r3, r2
 8012ea0:	ea23 0300 	bic.w	r3, r3, r0
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	e7e1      	b.n	8012e6c <floor+0x44>
 8012ea8:	2933      	cmp	r1, #51	@ 0x33
 8012eaa:	dd05      	ble.n	8012eb8 <floor+0x90>
 8012eac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012eb0:	d101      	bne.n	8012eb6 <floor+0x8e>
 8012eb2:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012eb6:	bd30      	pop	{r4, r5, pc}
 8012eb8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8012ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ec0:	40e0      	lsrs	r0, r4
 8012ec2:	4210      	tst	r0, r2
 8012ec4:	d0f7      	beq.n	8012eb6 <floor+0x8e>
 8012ec6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012f08 <floor+0xe0>
 8012eca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012ece:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ed6:	ddc9      	ble.n	8012e6c <floor+0x44>
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	da02      	bge.n	8012ee2 <floor+0xba>
 8012edc:	2914      	cmp	r1, #20
 8012ede:	d103      	bne.n	8012ee8 <floor+0xc0>
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	ea22 0200 	bic.w	r2, r2, r0
 8012ee6:	e7c1      	b.n	8012e6c <floor+0x44>
 8012ee8:	2401      	movs	r4, #1
 8012eea:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8012eee:	fa04 f101 	lsl.w	r1, r4, r1
 8012ef2:	440a      	add	r2, r1
 8012ef4:	42aa      	cmp	r2, r5
 8012ef6:	bf38      	it	cc
 8012ef8:	191b      	addcc	r3, r3, r4
 8012efa:	e7f2      	b.n	8012ee2 <floor+0xba>
 8012efc:	2200      	movs	r2, #0
 8012efe:	4613      	mov	r3, r2
 8012f00:	e7b4      	b.n	8012e6c <floor+0x44>
 8012f02:	bf00      	nop
 8012f04:	f3af 8000 	nop.w
 8012f08:	8800759c 	.word	0x8800759c
 8012f0c:	7e37e43c 	.word	0x7e37e43c
 8012f10:	bff00000 	.word	0xbff00000
 8012f14:	000fffff 	.word	0x000fffff

08012f18 <__kernel_cos>:
 8012f18:	eeb0 5b40 	vmov.f64	d5, d0
 8012f1c:	ee15 1a90 	vmov	r1, s11
 8012f20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012f24:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012f28:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8012f2c:	d204      	bcs.n	8012f38 <__kernel_cos+0x20>
 8012f2e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8012f32:	ee17 3a90 	vmov	r3, s15
 8012f36:	b343      	cbz	r3, 8012f8a <__kernel_cos+0x72>
 8012f38:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012f3c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8012f40:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8012fb0 <__kernel_cos+0x98>
 8012f44:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012fb8 <__kernel_cos+0xa0>
 8012f48:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012f4c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8012fc0 <__kernel_cos+0xa8>
 8012f50:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012f54:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012fc8 <__kernel_cos+0xb0>
 8012f58:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012f5c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8012fd0 <__kernel_cos+0xb8>
 8012f60:	4b1f      	ldr	r3, [pc, #124]	@ (8012fe0 <__kernel_cos+0xc8>)
 8012f62:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012f66:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012fd8 <__kernel_cos+0xc0>
 8012f6a:	4299      	cmp	r1, r3
 8012f6c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012f70:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012f74:	ee24 4b06 	vmul.f64	d4, d4, d6
 8012f78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012f7c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8012f80:	d804      	bhi.n	8012f8c <__kernel_cos+0x74>
 8012f82:	ee37 7b41 	vsub.f64	d7, d7, d1
 8012f86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012f8a:	4770      	bx	lr
 8012f8c:	4b15      	ldr	r3, [pc, #84]	@ (8012fe4 <__kernel_cos+0xcc>)
 8012f8e:	4299      	cmp	r1, r3
 8012f90:	d809      	bhi.n	8012fa6 <__kernel_cos+0x8e>
 8012f92:	2200      	movs	r2, #0
 8012f94:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8012f98:	ec43 2b16 	vmov	d6, r2, r3
 8012f9c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012fa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012fa4:	e7ed      	b.n	8012f82 <__kernel_cos+0x6a>
 8012fa6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8012faa:	e7f7      	b.n	8012f9c <__kernel_cos+0x84>
 8012fac:	f3af 8000 	nop.w
 8012fb0:	be8838d4 	.word	0xbe8838d4
 8012fb4:	bda8fae9 	.word	0xbda8fae9
 8012fb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8012fbc:	3e21ee9e 	.word	0x3e21ee9e
 8012fc0:	809c52ad 	.word	0x809c52ad
 8012fc4:	be927e4f 	.word	0xbe927e4f
 8012fc8:	19cb1590 	.word	0x19cb1590
 8012fcc:	3efa01a0 	.word	0x3efa01a0
 8012fd0:	16c15177 	.word	0x16c15177
 8012fd4:	bf56c16c 	.word	0xbf56c16c
 8012fd8:	5555554c 	.word	0x5555554c
 8012fdc:	3fa55555 	.word	0x3fa55555
 8012fe0:	3fd33332 	.word	0x3fd33332
 8012fe4:	3fe90000 	.word	0x3fe90000

08012fe8 <__kernel_sin>:
 8012fe8:	ee10 3a90 	vmov	r3, s1
 8012fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012ff0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012ff4:	d204      	bcs.n	8013000 <__kernel_sin+0x18>
 8012ff6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012ffa:	ee17 3a90 	vmov	r3, s15
 8012ffe:	b35b      	cbz	r3, 8013058 <__kernel_sin+0x70>
 8013000:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013004:	ee20 5b06 	vmul.f64	d5, d0, d6
 8013008:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8013060 <__kernel_sin+0x78>
 801300c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8013068 <__kernel_sin+0x80>
 8013010:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013014:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013070 <__kernel_sin+0x88>
 8013018:	eea4 7b06 	vfma.f64	d7, d4, d6
 801301c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8013078 <__kernel_sin+0x90>
 8013020:	eea7 4b06 	vfma.f64	d4, d7, d6
 8013024:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013080 <__kernel_sin+0x98>
 8013028:	eea4 7b06 	vfma.f64	d7, d4, d6
 801302c:	b930      	cbnz	r0, 801303c <__kernel_sin+0x54>
 801302e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8013088 <__kernel_sin+0xa0>
 8013032:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013036:	eea4 0b05 	vfma.f64	d0, d4, d5
 801303a:	4770      	bx	lr
 801303c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8013040:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8013044:	eea1 7b04 	vfma.f64	d7, d1, d4
 8013048:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801304c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013090 <__kernel_sin+0xa8>
 8013050:	eea5 1b07 	vfma.f64	d1, d5, d7
 8013054:	ee30 0b41 	vsub.f64	d0, d0, d1
 8013058:	4770      	bx	lr
 801305a:	bf00      	nop
 801305c:	f3af 8000 	nop.w
 8013060:	5acfd57c 	.word	0x5acfd57c
 8013064:	3de5d93a 	.word	0x3de5d93a
 8013068:	8a2b9ceb 	.word	0x8a2b9ceb
 801306c:	be5ae5e6 	.word	0xbe5ae5e6
 8013070:	57b1fe7d 	.word	0x57b1fe7d
 8013074:	3ec71de3 	.word	0x3ec71de3
 8013078:	19c161d5 	.word	0x19c161d5
 801307c:	bf2a01a0 	.word	0xbf2a01a0
 8013080:	1110f8a6 	.word	0x1110f8a6
 8013084:	3f811111 	.word	0x3f811111
 8013088:	55555549 	.word	0x55555549
 801308c:	bfc55555 	.word	0xbfc55555
 8013090:	55555549 	.word	0x55555549
 8013094:	3fc55555 	.word	0x3fc55555

08013098 <__ieee754_atan2>:
 8013098:	ee11 1a10 	vmov	r1, s2
 801309c:	eeb0 7b40 	vmov.f64	d7, d0
 80130a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130a2:	ee11 5a90 	vmov	r5, s3
 80130a6:	424b      	negs	r3, r1
 80130a8:	4f59      	ldr	r7, [pc, #356]	@ (8013210 <__ieee754_atan2+0x178>)
 80130aa:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80130ae:	430b      	orrs	r3, r1
 80130b0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80130b4:	42bb      	cmp	r3, r7
 80130b6:	d80d      	bhi.n	80130d4 <__ieee754_atan2+0x3c>
 80130b8:	ee10 ca10 	vmov	ip, s0
 80130bc:	ee17 6a90 	vmov	r6, s15
 80130c0:	f1cc 0000 	rsb	r0, ip, #0
 80130c4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80130c8:	ea40 000c 	orr.w	r0, r0, ip
 80130cc:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 80130d0:	42b8      	cmp	r0, r7
 80130d2:	d904      	bls.n	80130de <__ieee754_atan2+0x46>
 80130d4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80130d8:	eeb0 0b47 	vmov.f64	d0, d7
 80130dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130de:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 80130e2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80130e6:	4308      	orrs	r0, r1
 80130e8:	d103      	bne.n	80130f2 <__ieee754_atan2+0x5a>
 80130ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80130ee:	f000 bae7 	b.w	80136c0 <atan>
 80130f2:	17ac      	asrs	r4, r5, #30
 80130f4:	f004 0402 	and.w	r4, r4, #2
 80130f8:	ea53 0c0c 	orrs.w	ip, r3, ip
 80130fc:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8013100:	d107      	bne.n	8013112 <__ieee754_atan2+0x7a>
 8013102:	2c02      	cmp	r4, #2
 8013104:	d05c      	beq.n	80131c0 <__ieee754_atan2+0x128>
 8013106:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 80131d8 <__ieee754_atan2+0x140>
 801310a:	2c03      	cmp	r4, #3
 801310c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8013110:	e7e2      	b.n	80130d8 <__ieee754_atan2+0x40>
 8013112:	4311      	orrs	r1, r2
 8013114:	d107      	bne.n	8013126 <__ieee754_atan2+0x8e>
 8013116:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 80131e0 <__ieee754_atan2+0x148>
 801311a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 80131e8 <__ieee754_atan2+0x150>
 801311e:	2e00      	cmp	r6, #0
 8013120:	fe27 7b06 	vselge.f64	d7, d7, d6
 8013124:	e7d8      	b.n	80130d8 <__ieee754_atan2+0x40>
 8013126:	42ba      	cmp	r2, r7
 8013128:	d10f      	bne.n	801314a <__ieee754_atan2+0xb2>
 801312a:	4293      	cmp	r3, r2
 801312c:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8013130:	d107      	bne.n	8013142 <__ieee754_atan2+0xaa>
 8013132:	2c02      	cmp	r4, #2
 8013134:	d847      	bhi.n	80131c6 <__ieee754_atan2+0x12e>
 8013136:	4b37      	ldr	r3, [pc, #220]	@ (8013214 <__ieee754_atan2+0x17c>)
 8013138:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801313c:	ed93 7b00 	vldr	d7, [r3]
 8013140:	e7ca      	b.n	80130d8 <__ieee754_atan2+0x40>
 8013142:	2c02      	cmp	r4, #2
 8013144:	d842      	bhi.n	80131cc <__ieee754_atan2+0x134>
 8013146:	4b34      	ldr	r3, [pc, #208]	@ (8013218 <__ieee754_atan2+0x180>)
 8013148:	e7f6      	b.n	8013138 <__ieee754_atan2+0xa0>
 801314a:	42bb      	cmp	r3, r7
 801314c:	d0e3      	beq.n	8013116 <__ieee754_atan2+0x7e>
 801314e:	1a9b      	subs	r3, r3, r2
 8013150:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013154:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013158:	da1a      	bge.n	8013190 <__ieee754_atan2+0xf8>
 801315a:	2d00      	cmp	r5, #0
 801315c:	da01      	bge.n	8013162 <__ieee754_atan2+0xca>
 801315e:	323c      	adds	r2, #60	@ 0x3c
 8013160:	db19      	blt.n	8013196 <__ieee754_atan2+0xfe>
 8013162:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8013166:	f000 fba5 	bl	80138b4 <fabs>
 801316a:	f000 faa9 	bl	80136c0 <atan>
 801316e:	eeb0 7b40 	vmov.f64	d7, d0
 8013172:	2c01      	cmp	r4, #1
 8013174:	d012      	beq.n	801319c <__ieee754_atan2+0x104>
 8013176:	2c02      	cmp	r4, #2
 8013178:	d019      	beq.n	80131ae <__ieee754_atan2+0x116>
 801317a:	2c00      	cmp	r4, #0
 801317c:	d0ac      	beq.n	80130d8 <__ieee754_atan2+0x40>
 801317e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 80131f0 <__ieee754_atan2+0x158>
 8013182:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013186:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 80131f8 <__ieee754_atan2+0x160>
 801318a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801318e:	e7a3      	b.n	80130d8 <__ieee754_atan2+0x40>
 8013190:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 80131e0 <__ieee754_atan2+0x148>
 8013194:	e7ed      	b.n	8013172 <__ieee754_atan2+0xda>
 8013196:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8013200 <__ieee754_atan2+0x168>
 801319a:	e7ea      	b.n	8013172 <__ieee754_atan2+0xda>
 801319c:	ee17 1a90 	vmov	r1, s15
 80131a0:	ec53 2b17 	vmov	r2, r3, d7
 80131a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80131a8:	ec43 2b17 	vmov	d7, r2, r3
 80131ac:	e794      	b.n	80130d8 <__ieee754_atan2+0x40>
 80131ae:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80131f0 <__ieee754_atan2+0x158>
 80131b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80131b6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80131f8 <__ieee754_atan2+0x160>
 80131ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80131be:	e78b      	b.n	80130d8 <__ieee754_atan2+0x40>
 80131c0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80131f8 <__ieee754_atan2+0x160>
 80131c4:	e788      	b.n	80130d8 <__ieee754_atan2+0x40>
 80131c6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013208 <__ieee754_atan2+0x170>
 80131ca:	e785      	b.n	80130d8 <__ieee754_atan2+0x40>
 80131cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8013200 <__ieee754_atan2+0x168>
 80131d0:	e782      	b.n	80130d8 <__ieee754_atan2+0x40>
 80131d2:	bf00      	nop
 80131d4:	f3af 8000 	nop.w
 80131d8:	54442d18 	.word	0x54442d18
 80131dc:	c00921fb 	.word	0xc00921fb
 80131e0:	54442d18 	.word	0x54442d18
 80131e4:	3ff921fb 	.word	0x3ff921fb
 80131e8:	54442d18 	.word	0x54442d18
 80131ec:	bff921fb 	.word	0xbff921fb
 80131f0:	33145c07 	.word	0x33145c07
 80131f4:	3ca1a626 	.word	0x3ca1a626
 80131f8:	54442d18 	.word	0x54442d18
 80131fc:	400921fb 	.word	0x400921fb
	...
 8013208:	54442d18 	.word	0x54442d18
 801320c:	3fe921fb 	.word	0x3fe921fb
 8013210:	7ff00000 	.word	0x7ff00000
 8013214:	08014528 	.word	0x08014528
 8013218:	08014510 	.word	0x08014510

0801321c <__ieee754_fmod>:
 801321c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013220:	ed8d 1b00 	vstr	d1, [sp]
 8013224:	e9dd 6500 	ldrd	r6, r5, [sp]
 8013228:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801322c:	ea56 0307 	orrs.w	r3, r6, r7
 8013230:	46b6      	mov	lr, r6
 8013232:	d00d      	beq.n	8013250 <__ieee754_fmod+0x34>
 8013234:	ee10 ca90 	vmov	ip, s1
 8013238:	4b78      	ldr	r3, [pc, #480]	@ (801341c <__ieee754_fmod+0x200>)
 801323a:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 801323e:	4598      	cmp	r8, r3
 8013240:	d806      	bhi.n	8013250 <__ieee754_fmod+0x34>
 8013242:	4273      	negs	r3, r6
 8013244:	4a76      	ldr	r2, [pc, #472]	@ (8013420 <__ieee754_fmod+0x204>)
 8013246:	4333      	orrs	r3, r6
 8013248:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 801324c:	4293      	cmp	r3, r2
 801324e:	d908      	bls.n	8013262 <__ieee754_fmod+0x46>
 8013250:	ed9d 7b00 	vldr	d7, [sp]
 8013254:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013258:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801325c:	b003      	add	sp, #12
 801325e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013262:	ee10 9a10 	vmov	r9, s0
 8013266:	45b8      	cmp	r8, r7
 8013268:	4649      	mov	r1, r9
 801326a:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 801326e:	dc09      	bgt.n	8013284 <__ieee754_fmod+0x68>
 8013270:	dbf4      	blt.n	801325c <__ieee754_fmod+0x40>
 8013272:	454e      	cmp	r6, r9
 8013274:	d8f2      	bhi.n	801325c <__ieee754_fmod+0x40>
 8013276:	d105      	bne.n	8013284 <__ieee754_fmod+0x68>
 8013278:	4b6a      	ldr	r3, [pc, #424]	@ (8013424 <__ieee754_fmod+0x208>)
 801327a:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 801327e:	ed93 0b00 	vldr	d0, [r3]
 8013282:	e7eb      	b.n	801325c <__ieee754_fmod+0x40>
 8013284:	4a66      	ldr	r2, [pc, #408]	@ (8013420 <__ieee754_fmod+0x204>)
 8013286:	ea1c 0f02 	tst.w	ip, r2
 801328a:	d14a      	bne.n	8013322 <__ieee754_fmod+0x106>
 801328c:	f1b8 0f00 	cmp.w	r8, #0
 8013290:	d13f      	bne.n	8013312 <__ieee754_fmod+0xf6>
 8013292:	4865      	ldr	r0, [pc, #404]	@ (8013428 <__ieee754_fmod+0x20c>)
 8013294:	464b      	mov	r3, r9
 8013296:	2b00      	cmp	r3, #0
 8013298:	dc38      	bgt.n	801330c <__ieee754_fmod+0xf0>
 801329a:	4215      	tst	r5, r2
 801329c:	d150      	bne.n	8013340 <__ieee754_fmod+0x124>
 801329e:	2f00      	cmp	r7, #0
 80132a0:	d147      	bne.n	8013332 <__ieee754_fmod+0x116>
 80132a2:	4a61      	ldr	r2, [pc, #388]	@ (8013428 <__ieee754_fmod+0x20c>)
 80132a4:	4633      	mov	r3, r6
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	dc40      	bgt.n	801332c <__ieee754_fmod+0x110>
 80132aa:	4b60      	ldr	r3, [pc, #384]	@ (801342c <__ieee754_fmod+0x210>)
 80132ac:	4298      	cmp	r0, r3
 80132ae:	db4b      	blt.n	8013348 <__ieee754_fmod+0x12c>
 80132b0:	f3cc 0313 	ubfx	r3, ip, #0, #20
 80132b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80132b8:	f8df c170 	ldr.w	ip, [pc, #368]	@ 801342c <__ieee754_fmod+0x210>
 80132bc:	4562      	cmp	r2, ip
 80132be:	db58      	blt.n	8013372 <__ieee754_fmod+0x156>
 80132c0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80132c4:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 80132c8:	1a80      	subs	r0, r0, r2
 80132ca:	1b5e      	subs	r6, r3, r5
 80132cc:	eba1 070e 	sub.w	r7, r1, lr
 80132d0:	2800      	cmp	r0, #0
 80132d2:	d164      	bne.n	801339e <__ieee754_fmod+0x182>
 80132d4:	4571      	cmp	r1, lr
 80132d6:	bf38      	it	cc
 80132d8:	f106 36ff 	addcc.w	r6, r6, #4294967295	@ 0xffffffff
 80132dc:	2e00      	cmp	r6, #0
 80132de:	bfa4      	itt	ge
 80132e0:	4639      	movge	r1, r7
 80132e2:	4633      	movge	r3, r6
 80132e4:	ea53 0001 	orrs.w	r0, r3, r1
 80132e8:	d0c6      	beq.n	8013278 <__ieee754_fmod+0x5c>
 80132ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80132ee:	db6b      	blt.n	80133c8 <__ieee754_fmod+0x1ac>
 80132f0:	484e      	ldr	r0, [pc, #312]	@ (801342c <__ieee754_fmod+0x210>)
 80132f2:	4282      	cmp	r2, r0
 80132f4:	db6e      	blt.n	80133d4 <__ieee754_fmod+0x1b8>
 80132f6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80132fa:	4323      	orrs	r3, r4
 80132fc:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8013300:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013304:	460c      	mov	r4, r1
 8013306:	ec45 4b10 	vmov	d0, r4, r5
 801330a:	e7a7      	b.n	801325c <__ieee754_fmod+0x40>
 801330c:	3801      	subs	r0, #1
 801330e:	005b      	lsls	r3, r3, #1
 8013310:	e7c1      	b.n	8013296 <__ieee754_fmod+0x7a>
 8013312:	4846      	ldr	r0, [pc, #280]	@ (801342c <__ieee754_fmod+0x210>)
 8013314:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8013318:	2b00      	cmp	r3, #0
 801331a:	ddbe      	ble.n	801329a <__ieee754_fmod+0x7e>
 801331c:	3801      	subs	r0, #1
 801331e:	005b      	lsls	r3, r3, #1
 8013320:	e7fa      	b.n	8013318 <__ieee754_fmod+0xfc>
 8013322:	ea4f 5028 	mov.w	r0, r8, asr #20
 8013326:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 801332a:	e7b6      	b.n	801329a <__ieee754_fmod+0x7e>
 801332c:	3a01      	subs	r2, #1
 801332e:	005b      	lsls	r3, r3, #1
 8013330:	e7b9      	b.n	80132a6 <__ieee754_fmod+0x8a>
 8013332:	4a3e      	ldr	r2, [pc, #248]	@ (801342c <__ieee754_fmod+0x210>)
 8013334:	02fb      	lsls	r3, r7, #11
 8013336:	2b00      	cmp	r3, #0
 8013338:	ddb7      	ble.n	80132aa <__ieee754_fmod+0x8e>
 801333a:	3a01      	subs	r2, #1
 801333c:	005b      	lsls	r3, r3, #1
 801333e:	e7fa      	b.n	8013336 <__ieee754_fmod+0x11a>
 8013340:	153a      	asrs	r2, r7, #20
 8013342:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013346:	e7b0      	b.n	80132aa <__ieee754_fmod+0x8e>
 8013348:	eba3 0c00 	sub.w	ip, r3, r0
 801334c:	f1bc 0f1f 	cmp.w	ip, #31
 8013350:	dc09      	bgt.n	8013366 <__ieee754_fmod+0x14a>
 8013352:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8013356:	fa08 f10c 	lsl.w	r1, r8, ip
 801335a:	fa29 f303 	lsr.w	r3, r9, r3
 801335e:	430b      	orrs	r3, r1
 8013360:	fa09 f10c 	lsl.w	r1, r9, ip
 8013364:	e7a8      	b.n	80132b8 <__ieee754_fmod+0x9c>
 8013366:	4b32      	ldr	r3, [pc, #200]	@ (8013430 <__ieee754_fmod+0x214>)
 8013368:	1a1b      	subs	r3, r3, r0
 801336a:	fa09 f303 	lsl.w	r3, r9, r3
 801336e:	2100      	movs	r1, #0
 8013370:	e7a2      	b.n	80132b8 <__ieee754_fmod+0x9c>
 8013372:	ebac 0c02 	sub.w	ip, ip, r2
 8013376:	f1bc 0f1f 	cmp.w	ip, #31
 801337a:	dc09      	bgt.n	8013390 <__ieee754_fmod+0x174>
 801337c:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8013380:	fa07 f70c 	lsl.w	r7, r7, ip
 8013384:	fa26 f505 	lsr.w	r5, r6, r5
 8013388:	433d      	orrs	r5, r7
 801338a:	fa06 fe0c 	lsl.w	lr, r6, ip
 801338e:	e79b      	b.n	80132c8 <__ieee754_fmod+0xac>
 8013390:	4d27      	ldr	r5, [pc, #156]	@ (8013430 <__ieee754_fmod+0x214>)
 8013392:	1aad      	subs	r5, r5, r2
 8013394:	fa06 f505 	lsl.w	r5, r6, r5
 8013398:	f04f 0e00 	mov.w	lr, #0
 801339c:	e794      	b.n	80132c8 <__ieee754_fmod+0xac>
 801339e:	4571      	cmp	r1, lr
 80133a0:	bf38      	it	cc
 80133a2:	f106 36ff 	addcc.w	r6, r6, #4294967295	@ 0xffffffff
 80133a6:	2e00      	cmp	r6, #0
 80133a8:	da05      	bge.n	80133b6 <__ieee754_fmod+0x19a>
 80133aa:	0fce      	lsrs	r6, r1, #31
 80133ac:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80133b0:	0049      	lsls	r1, r1, #1
 80133b2:	3801      	subs	r0, #1
 80133b4:	e789      	b.n	80132ca <__ieee754_fmod+0xae>
 80133b6:	ea56 0307 	orrs.w	r3, r6, r7
 80133ba:	f43f af5d 	beq.w	8013278 <__ieee754_fmod+0x5c>
 80133be:	0ffb      	lsrs	r3, r7, #31
 80133c0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80133c4:	0079      	lsls	r1, r7, #1
 80133c6:	e7f4      	b.n	80133b2 <__ieee754_fmod+0x196>
 80133c8:	0fc8      	lsrs	r0, r1, #31
 80133ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80133ce:	0049      	lsls	r1, r1, #1
 80133d0:	3a01      	subs	r2, #1
 80133d2:	e78a      	b.n	80132ea <__ieee754_fmod+0xce>
 80133d4:	1a80      	subs	r0, r0, r2
 80133d6:	2814      	cmp	r0, #20
 80133d8:	dc0c      	bgt.n	80133f4 <__ieee754_fmod+0x1d8>
 80133da:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80133de:	fa03 f202 	lsl.w	r2, r3, r2
 80133e2:	40c1      	lsrs	r1, r0
 80133e4:	430a      	orrs	r2, r1
 80133e6:	4103      	asrs	r3, r0
 80133e8:	ea43 0104 	orr.w	r1, r3, r4
 80133ec:	4610      	mov	r0, r2
 80133ee:	ec41 0b10 	vmov	d0, r0, r1
 80133f2:	e733      	b.n	801325c <__ieee754_fmod+0x40>
 80133f4:	281f      	cmp	r0, #31
 80133f6:	dc07      	bgt.n	8013408 <__ieee754_fmod+0x1ec>
 80133f8:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80133fc:	40c1      	lsrs	r1, r0
 80133fe:	fa03 f202 	lsl.w	r2, r3, r2
 8013402:	430a      	orrs	r2, r1
 8013404:	4623      	mov	r3, r4
 8013406:	e7ef      	b.n	80133e8 <__ieee754_fmod+0x1cc>
 8013408:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 801340c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013410:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8013414:	32e2      	adds	r2, #226	@ 0xe2
 8013416:	fa43 f202 	asr.w	r2, r3, r2
 801341a:	e7f3      	b.n	8013404 <__ieee754_fmod+0x1e8>
 801341c:	7fefffff 	.word	0x7fefffff
 8013420:	7ff00000 	.word	0x7ff00000
 8013424:	08014540 	.word	0x08014540
 8013428:	fffffbed 	.word	0xfffffbed
 801342c:	fffffc02 	.word	0xfffffc02
 8013430:	fffffbe2 	.word	0xfffffbe2
 8013434:	00000000 	.word	0x00000000

08013438 <__ieee754_rem_pio2>:
 8013438:	b570      	push	{r4, r5, r6, lr}
 801343a:	eeb0 7b40 	vmov.f64	d7, d0
 801343e:	ee17 5a90 	vmov	r5, s15
 8013442:	4b99      	ldr	r3, [pc, #612]	@ (80136a8 <__ieee754_rem_pio2+0x270>)
 8013444:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013448:	429e      	cmp	r6, r3
 801344a:	b088      	sub	sp, #32
 801344c:	4604      	mov	r4, r0
 801344e:	d807      	bhi.n	8013460 <__ieee754_rem_pio2+0x28>
 8013450:	2200      	movs	r2, #0
 8013452:	2300      	movs	r3, #0
 8013454:	ed84 0b00 	vstr	d0, [r4]
 8013458:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801345c:	2000      	movs	r0, #0
 801345e:	e01b      	b.n	8013498 <__ieee754_rem_pio2+0x60>
 8013460:	4b92      	ldr	r3, [pc, #584]	@ (80136ac <__ieee754_rem_pio2+0x274>)
 8013462:	429e      	cmp	r6, r3
 8013464:	d83b      	bhi.n	80134de <__ieee754_rem_pio2+0xa6>
 8013466:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801346a:	2d00      	cmp	r5, #0
 801346c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8013668 <__ieee754_rem_pio2+0x230>
 8013470:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8013474:	dd19      	ble.n	80134aa <__ieee754_rem_pio2+0x72>
 8013476:	ee30 7b46 	vsub.f64	d7, d0, d6
 801347a:	429e      	cmp	r6, r3
 801347c:	d00e      	beq.n	801349c <__ieee754_rem_pio2+0x64>
 801347e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8013670 <__ieee754_rem_pio2+0x238>
 8013482:	ee37 6b45 	vsub.f64	d6, d7, d5
 8013486:	ee37 7b46 	vsub.f64	d7, d7, d6
 801348a:	ed84 6b00 	vstr	d6, [r4]
 801348e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013492:	ed84 7b02 	vstr	d7, [r4, #8]
 8013496:	2001      	movs	r0, #1
 8013498:	b008      	add	sp, #32
 801349a:	bd70      	pop	{r4, r5, r6, pc}
 801349c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8013678 <__ieee754_rem_pio2+0x240>
 80134a0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8013680 <__ieee754_rem_pio2+0x248>
 80134a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80134a8:	e7eb      	b.n	8013482 <__ieee754_rem_pio2+0x4a>
 80134aa:	429e      	cmp	r6, r3
 80134ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 80134b0:	d00e      	beq.n	80134d0 <__ieee754_rem_pio2+0x98>
 80134b2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8013670 <__ieee754_rem_pio2+0x238>
 80134b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80134ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80134be:	ed84 6b00 	vstr	d6, [r4]
 80134c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80134c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80134ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80134ce:	e7e3      	b.n	8013498 <__ieee754_rem_pio2+0x60>
 80134d0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8013678 <__ieee754_rem_pio2+0x240>
 80134d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8013680 <__ieee754_rem_pio2+0x248>
 80134d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80134dc:	e7eb      	b.n	80134b6 <__ieee754_rem_pio2+0x7e>
 80134de:	4b74      	ldr	r3, [pc, #464]	@ (80136b0 <__ieee754_rem_pio2+0x278>)
 80134e0:	429e      	cmp	r6, r3
 80134e2:	d870      	bhi.n	80135c6 <__ieee754_rem_pio2+0x18e>
 80134e4:	f000 f9e6 	bl	80138b4 <fabs>
 80134e8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80134ec:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013688 <__ieee754_rem_pio2+0x250>
 80134f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80134f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80134f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80134fc:	ee17 0a90 	vmov	r0, s15
 8013500:	eeb1 4b45 	vneg.f64	d4, d5
 8013504:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013668 <__ieee754_rem_pio2+0x230>
 8013508:	eea5 0b47 	vfms.f64	d0, d5, d7
 801350c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013670 <__ieee754_rem_pio2+0x238>
 8013510:	281f      	cmp	r0, #31
 8013512:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013516:	ee30 6b47 	vsub.f64	d6, d0, d7
 801351a:	dc05      	bgt.n	8013528 <__ieee754_rem_pio2+0xf0>
 801351c:	4b65      	ldr	r3, [pc, #404]	@ (80136b4 <__ieee754_rem_pio2+0x27c>)
 801351e:	1e42      	subs	r2, r0, #1
 8013520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013524:	42b3      	cmp	r3, r6
 8013526:	d109      	bne.n	801353c <__ieee754_rem_pio2+0x104>
 8013528:	ee16 3a90 	vmov	r3, s13
 801352c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013530:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8013534:	2b10      	cmp	r3, #16
 8013536:	ea4f 5226 	mov.w	r2, r6, asr #20
 801353a:	dc02      	bgt.n	8013542 <__ieee754_rem_pio2+0x10a>
 801353c:	ed84 6b00 	vstr	d6, [r4]
 8013540:	e01a      	b.n	8013578 <__ieee754_rem_pio2+0x140>
 8013542:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8013678 <__ieee754_rem_pio2+0x240>
 8013546:	eeb0 6b40 	vmov.f64	d6, d0
 801354a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801354e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013552:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013556:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8013680 <__ieee754_rem_pio2+0x248>
 801355a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801355e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013562:	ee13 3a90 	vmov	r3, s7
 8013566:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801356a:	1ad3      	subs	r3, r2, r3
 801356c:	2b31      	cmp	r3, #49	@ 0x31
 801356e:	dc17      	bgt.n	80135a0 <__ieee754_rem_pio2+0x168>
 8013570:	eeb0 0b46 	vmov.f64	d0, d6
 8013574:	ed84 3b00 	vstr	d3, [r4]
 8013578:	ed94 6b00 	vldr	d6, [r4]
 801357c:	2d00      	cmp	r5, #0
 801357e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013582:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013586:	ed84 0b02 	vstr	d0, [r4, #8]
 801358a:	da85      	bge.n	8013498 <__ieee754_rem_pio2+0x60>
 801358c:	eeb1 6b46 	vneg.f64	d6, d6
 8013590:	eeb1 0b40 	vneg.f64	d0, d0
 8013594:	ed84 6b00 	vstr	d6, [r4]
 8013598:	ed84 0b02 	vstr	d0, [r4, #8]
 801359c:	4240      	negs	r0, r0
 801359e:	e77b      	b.n	8013498 <__ieee754_rem_pio2+0x60>
 80135a0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8013690 <__ieee754_rem_pio2+0x258>
 80135a4:	eeb0 0b46 	vmov.f64	d0, d6
 80135a8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80135ac:	ee36 6b40 	vsub.f64	d6, d6, d0
 80135b0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80135b4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8013698 <__ieee754_rem_pio2+0x260>
 80135b8:	eeb0 7b46 	vmov.f64	d7, d6
 80135bc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80135c0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80135c4:	e7ba      	b.n	801353c <__ieee754_rem_pio2+0x104>
 80135c6:	4b3c      	ldr	r3, [pc, #240]	@ (80136b8 <__ieee754_rem_pio2+0x280>)
 80135c8:	429e      	cmp	r6, r3
 80135ca:	d906      	bls.n	80135da <__ieee754_rem_pio2+0x1a2>
 80135cc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80135d0:	ed80 7b02 	vstr	d7, [r0, #8]
 80135d4:	ed80 7b00 	vstr	d7, [r0]
 80135d8:	e740      	b.n	801345c <__ieee754_rem_pio2+0x24>
 80135da:	ee10 3a10 	vmov	r3, s0
 80135de:	1532      	asrs	r2, r6, #20
 80135e0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80135e4:	4618      	mov	r0, r3
 80135e6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80135ea:	ec41 0b17 	vmov	d7, r0, r1
 80135ee:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80135f2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80136a0 <__ieee754_rem_pio2+0x268>
 80135f6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80135fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80135fe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013602:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013606:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801360a:	a808      	add	r0, sp, #32
 801360c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013610:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013614:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013618:	ee27 7b05 	vmul.f64	d7, d7, d5
 801361c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013620:	2103      	movs	r1, #3
 8013622:	ed30 7b02 	vldmdb	r0!, {d7}
 8013626:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362e:	460b      	mov	r3, r1
 8013630:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8013634:	d0f5      	beq.n	8013622 <__ieee754_rem_pio2+0x1ea>
 8013636:	4921      	ldr	r1, [pc, #132]	@ (80136bc <__ieee754_rem_pio2+0x284>)
 8013638:	9101      	str	r1, [sp, #4]
 801363a:	2102      	movs	r1, #2
 801363c:	9100      	str	r1, [sp, #0]
 801363e:	a802      	add	r0, sp, #8
 8013640:	4621      	mov	r1, r4
 8013642:	f000 f941 	bl	80138c8 <__kernel_rem_pio2>
 8013646:	2d00      	cmp	r5, #0
 8013648:	f6bf af26 	bge.w	8013498 <__ieee754_rem_pio2+0x60>
 801364c:	ed94 7b00 	vldr	d7, [r4]
 8013650:	eeb1 7b47 	vneg.f64	d7, d7
 8013654:	ed84 7b00 	vstr	d7, [r4]
 8013658:	ed94 7b02 	vldr	d7, [r4, #8]
 801365c:	eeb1 7b47 	vneg.f64	d7, d7
 8013660:	ed84 7b02 	vstr	d7, [r4, #8]
 8013664:	e79a      	b.n	801359c <__ieee754_rem_pio2+0x164>
 8013666:	bf00      	nop
 8013668:	54400000 	.word	0x54400000
 801366c:	3ff921fb 	.word	0x3ff921fb
 8013670:	1a626331 	.word	0x1a626331
 8013674:	3dd0b461 	.word	0x3dd0b461
 8013678:	1a600000 	.word	0x1a600000
 801367c:	3dd0b461 	.word	0x3dd0b461
 8013680:	2e037073 	.word	0x2e037073
 8013684:	3ba3198a 	.word	0x3ba3198a
 8013688:	6dc9c883 	.word	0x6dc9c883
 801368c:	3fe45f30 	.word	0x3fe45f30
 8013690:	2e000000 	.word	0x2e000000
 8013694:	3ba3198a 	.word	0x3ba3198a
 8013698:	252049c1 	.word	0x252049c1
 801369c:	397b839a 	.word	0x397b839a
 80136a0:	00000000 	.word	0x00000000
 80136a4:	41700000 	.word	0x41700000
 80136a8:	3fe921fb 	.word	0x3fe921fb
 80136ac:	4002d97b 	.word	0x4002d97b
 80136b0:	413921fb 	.word	0x413921fb
 80136b4:	08014550 	.word	0x08014550
 80136b8:	7fefffff 	.word	0x7fefffff
 80136bc:	080145d0 	.word	0x080145d0

080136c0 <atan>:
 80136c0:	b538      	push	{r3, r4, r5, lr}
 80136c2:	eeb0 7b40 	vmov.f64	d7, d0
 80136c6:	ee17 5a90 	vmov	r5, s15
 80136ca:	4b73      	ldr	r3, [pc, #460]	@ (8013898 <atan+0x1d8>)
 80136cc:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80136d0:	429c      	cmp	r4, r3
 80136d2:	d913      	bls.n	80136fc <atan+0x3c>
 80136d4:	4b71      	ldr	r3, [pc, #452]	@ (801389c <atan+0x1dc>)
 80136d6:	429c      	cmp	r4, r3
 80136d8:	d803      	bhi.n	80136e2 <atan+0x22>
 80136da:	d107      	bne.n	80136ec <atan+0x2c>
 80136dc:	ee10 3a10 	vmov	r3, s0
 80136e0:	b123      	cbz	r3, 80136ec <atan+0x2c>
 80136e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80136e6:	eeb0 0b47 	vmov.f64	d0, d7
 80136ea:	bd38      	pop	{r3, r4, r5, pc}
 80136ec:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 8013828 <atan+0x168>
 80136f0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 8013830 <atan+0x170>
 80136f4:	2d00      	cmp	r5, #0
 80136f6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80136fa:	e7f4      	b.n	80136e6 <atan+0x26>
 80136fc:	4b68      	ldr	r3, [pc, #416]	@ (80138a0 <atan+0x1e0>)
 80136fe:	429c      	cmp	r4, r3
 8013700:	d811      	bhi.n	8013726 <atan+0x66>
 8013702:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013706:	429c      	cmp	r4, r3
 8013708:	d80a      	bhi.n	8013720 <atan+0x60>
 801370a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801370e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8013838 <atan+0x178>
 8013712:	ee30 6b06 	vadd.f64	d6, d0, d6
 8013716:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801371e:	dce2      	bgt.n	80136e6 <atan+0x26>
 8013720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013724:	e013      	b.n	801374e <atan+0x8e>
 8013726:	f000 f8c5 	bl	80138b4 <fabs>
 801372a:	4b5e      	ldr	r3, [pc, #376]	@ (80138a4 <atan+0x1e4>)
 801372c:	429c      	cmp	r4, r3
 801372e:	d84f      	bhi.n	80137d0 <atan+0x110>
 8013730:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013734:	429c      	cmp	r4, r3
 8013736:	d841      	bhi.n	80137bc <atan+0xfc>
 8013738:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801373c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8013740:	2300      	movs	r3, #0
 8013742:	eea0 5b07 	vfma.f64	d5, d0, d7
 8013746:	ee30 0b07 	vadd.f64	d0, d0, d7
 801374a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801374e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8013840 <atan+0x180>
 8013752:	ee27 4b07 	vmul.f64	d4, d7, d7
 8013756:	ee24 5b04 	vmul.f64	d5, d4, d4
 801375a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 8013848 <atan+0x188>
 801375e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8013762:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8013850 <atan+0x190>
 8013766:	eea3 6b05 	vfma.f64	d6, d3, d5
 801376a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 8013858 <atan+0x198>
 801376e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8013772:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8013860 <atan+0x1a0>
 8013776:	eea3 6b05 	vfma.f64	d6, d3, d5
 801377a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 8013868 <atan+0x1a8>
 801377e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 8013870 <atan+0x1b0>
 8013782:	eea6 3b05 	vfma.f64	d3, d6, d5
 8013786:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8013878 <atan+0x1b8>
 801378a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801378e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8013880 <atan+0x1c0>
 8013792:	eea2 6b05 	vfma.f64	d6, d2, d5
 8013796:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 8013888 <atan+0x1c8>
 801379a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801379e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8013890 <atan+0x1d0>
 80137a2:	1c5a      	adds	r2, r3, #1
 80137a4:	eea2 6b05 	vfma.f64	d6, d2, d5
 80137a8:	ee26 6b05 	vmul.f64	d6, d6, d5
 80137ac:	eea3 6b04 	vfma.f64	d6, d3, d4
 80137b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80137b4:	d121      	bne.n	80137fa <atan+0x13a>
 80137b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80137ba:	e794      	b.n	80136e6 <atan+0x26>
 80137bc:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80137c0:	2301      	movs	r3, #1
 80137c2:	ee30 5b47 	vsub.f64	d5, d0, d7
 80137c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80137ca:	ee85 7b00 	vdiv.f64	d7, d5, d0
 80137ce:	e7be      	b.n	801374e <atan+0x8e>
 80137d0:	4b35      	ldr	r3, [pc, #212]	@ (80138a8 <atan+0x1e8>)
 80137d2:	429c      	cmp	r4, r3
 80137d4:	d20b      	bcs.n	80137ee <atan+0x12e>
 80137d6:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 80137da:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80137de:	ee30 5b47 	vsub.f64	d5, d0, d7
 80137e2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80137e6:	2302      	movs	r3, #2
 80137e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80137ec:	e7af      	b.n	801374e <atan+0x8e>
 80137ee:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80137f2:	2303      	movs	r3, #3
 80137f4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80137f8:	e7a9      	b.n	801374e <atan+0x8e>
 80137fa:	4a2c      	ldr	r2, [pc, #176]	@ (80138ac <atan+0x1ec>)
 80137fc:	492c      	ldr	r1, [pc, #176]	@ (80138b0 <atan+0x1f0>)
 80137fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013802:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8013806:	ed93 5b00 	vldr	d5, [r3]
 801380a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801380e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013812:	ed92 7b00 	vldr	d7, [r2]
 8013816:	2d00      	cmp	r5, #0
 8013818:	ee37 7b46 	vsub.f64	d7, d7, d6
 801381c:	bfb8      	it	lt
 801381e:	eeb1 7b47 	vneglt.f64	d7, d7
 8013822:	e760      	b.n	80136e6 <atan+0x26>
 8013824:	f3af 8000 	nop.w
 8013828:	54442d18 	.word	0x54442d18
 801382c:	bff921fb 	.word	0xbff921fb
 8013830:	54442d18 	.word	0x54442d18
 8013834:	3ff921fb 	.word	0x3ff921fb
 8013838:	8800759c 	.word	0x8800759c
 801383c:	7e37e43c 	.word	0x7e37e43c
 8013840:	e322da11 	.word	0xe322da11
 8013844:	3f90ad3a 	.word	0x3f90ad3a
 8013848:	24760deb 	.word	0x24760deb
 801384c:	3fa97b4b 	.word	0x3fa97b4b
 8013850:	a0d03d51 	.word	0xa0d03d51
 8013854:	3fb10d66 	.word	0x3fb10d66
 8013858:	c54c206e 	.word	0xc54c206e
 801385c:	3fb745cd 	.word	0x3fb745cd
 8013860:	920083ff 	.word	0x920083ff
 8013864:	3fc24924 	.word	0x3fc24924
 8013868:	5555550d 	.word	0x5555550d
 801386c:	3fd55555 	.word	0x3fd55555
 8013870:	52defd9a 	.word	0x52defd9a
 8013874:	bfadde2d 	.word	0xbfadde2d
 8013878:	2c6a6c2f 	.word	0x2c6a6c2f
 801387c:	bfa2b444 	.word	0xbfa2b444
 8013880:	af749a6d 	.word	0xaf749a6d
 8013884:	bfb3b0f2 	.word	0xbfb3b0f2
 8013888:	fe231671 	.word	0xfe231671
 801388c:	bfbc71c6 	.word	0xbfbc71c6
 8013890:	9998ebc4 	.word	0x9998ebc4
 8013894:	bfc99999 	.word	0xbfc99999
 8013898:	440fffff 	.word	0x440fffff
 801389c:	7ff00000 	.word	0x7ff00000
 80138a0:	3fdbffff 	.word	0x3fdbffff
 80138a4:	3ff2ffff 	.word	0x3ff2ffff
 80138a8:	40038000 	.word	0x40038000
 80138ac:	080146f8 	.word	0x080146f8
 80138b0:	080146d8 	.word	0x080146d8

080138b4 <fabs>:
 80138b4:	ec51 0b10 	vmov	r0, r1, d0
 80138b8:	4602      	mov	r2, r0
 80138ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80138be:	ec43 2b10 	vmov	d0, r2, r3
 80138c2:	4770      	bx	lr
 80138c4:	0000      	movs	r0, r0
	...

080138c8 <__kernel_rem_pio2>:
 80138c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138cc:	ed2d 8b06 	vpush	{d8-d10}
 80138d0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80138d4:	469b      	mov	fp, r3
 80138d6:	9001      	str	r0, [sp, #4]
 80138d8:	4bbb      	ldr	r3, [pc, #748]	@ (8013bc8 <__kernel_rem_pio2+0x300>)
 80138da:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80138dc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80138e0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80138e4:	f112 0f14 	cmn.w	r2, #20
 80138e8:	bfa8      	it	ge
 80138ea:	1ed3      	subge	r3, r2, #3
 80138ec:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 80138f0:	bfb8      	it	lt
 80138f2:	2300      	movlt	r3, #0
 80138f4:	f06f 0517 	mvn.w	r5, #23
 80138f8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8013bb0 <__kernel_rem_pio2+0x2e8>
 80138fc:	bfa4      	itt	ge
 80138fe:	2018      	movge	r0, #24
 8013900:	fb93 f3f0 	sdivge	r3, r3, r0
 8013904:	fb03 5505 	mla	r5, r3, r5, r5
 8013908:	eba3 040a 	sub.w	r4, r3, sl
 801390c:	4415      	add	r5, r2
 801390e:	460f      	mov	r7, r1
 8013910:	eb09 060a 	add.w	r6, r9, sl
 8013914:	a81a      	add	r0, sp, #104	@ 0x68
 8013916:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801391a:	2200      	movs	r2, #0
 801391c:	42b2      	cmp	r2, r6
 801391e:	dd0e      	ble.n	801393e <__kernel_rem_pio2+0x76>
 8013920:	aa1a      	add	r2, sp, #104	@ 0x68
 8013922:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8013926:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801392a:	2600      	movs	r6, #0
 801392c:	454e      	cmp	r6, r9
 801392e:	dc25      	bgt.n	801397c <__kernel_rem_pio2+0xb4>
 8013930:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8013bb0 <__kernel_rem_pio2+0x2e8>
 8013934:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013938:	4614      	mov	r4, r2
 801393a:	2000      	movs	r0, #0
 801393c:	e015      	b.n	801396a <__kernel_rem_pio2+0xa2>
 801393e:	42d4      	cmn	r4, r2
 8013940:	d409      	bmi.n	8013956 <__kernel_rem_pio2+0x8e>
 8013942:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8013946:	ee07 1a90 	vmov	s15, r1
 801394a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801394e:	eca0 7b02 	vstmia	r0!, {d7}
 8013952:	3201      	adds	r2, #1
 8013954:	e7e2      	b.n	801391c <__kernel_rem_pio2+0x54>
 8013956:	eeb0 7b46 	vmov.f64	d7, d6
 801395a:	e7f8      	b.n	801394e <__kernel_rem_pio2+0x86>
 801395c:	ecbc 5b02 	vldmia	ip!, {d5}
 8013960:	ed94 6b00 	vldr	d6, [r4]
 8013964:	3001      	adds	r0, #1
 8013966:	eea5 7b06 	vfma.f64	d7, d5, d6
 801396a:	4550      	cmp	r0, sl
 801396c:	f1a4 0408 	sub.w	r4, r4, #8
 8013970:	ddf4      	ble.n	801395c <__kernel_rem_pio2+0x94>
 8013972:	ecae 7b02 	vstmia	lr!, {d7}
 8013976:	3601      	adds	r6, #1
 8013978:	3208      	adds	r2, #8
 801397a:	e7d7      	b.n	801392c <__kernel_rem_pio2+0x64>
 801397c:	aa06      	add	r2, sp, #24
 801397e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8013bb8 <__kernel_rem_pio2+0x2f0>
 8013982:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8013bc0 <__kernel_rem_pio2+0x2f8>
 8013986:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801398a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801398e:	9203      	str	r2, [sp, #12]
 8013990:	9302      	str	r3, [sp, #8]
 8013992:	464c      	mov	r4, r9
 8013994:	00e3      	lsls	r3, r4, #3
 8013996:	9304      	str	r3, [sp, #16]
 8013998:	ab92      	add	r3, sp, #584	@ 0x248
 801399a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801399e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80139a2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80139a4:	ab06      	add	r3, sp, #24
 80139a6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80139aa:	461e      	mov	r6, r3
 80139ac:	4620      	mov	r0, r4
 80139ae:	2800      	cmp	r0, #0
 80139b0:	f1a2 0208 	sub.w	r2, r2, #8
 80139b4:	dc4a      	bgt.n	8013a4c <__kernel_rem_pio2+0x184>
 80139b6:	4628      	mov	r0, r5
 80139b8:	9305      	str	r3, [sp, #20]
 80139ba:	f000 fa01 	bl	8013dc0 <scalbn>
 80139be:	eeb0 8b40 	vmov.f64	d8, d0
 80139c2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80139c6:	ee28 0b00 	vmul.f64	d0, d8, d0
 80139ca:	f7ff fa2d 	bl	8012e28 <floor>
 80139ce:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80139d2:	eea0 8b47 	vfms.f64	d8, d0, d7
 80139d6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80139da:	2d00      	cmp	r5, #0
 80139dc:	ee17 8a90 	vmov	r8, s15
 80139e0:	9b05      	ldr	r3, [sp, #20]
 80139e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80139e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80139ea:	dd41      	ble.n	8013a70 <__kernel_rem_pio2+0x1a8>
 80139ec:	1e60      	subs	r0, r4, #1
 80139ee:	aa06      	add	r2, sp, #24
 80139f0:	f1c5 0c18 	rsb	ip, r5, #24
 80139f4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80139f8:	fa46 f20c 	asr.w	r2, r6, ip
 80139fc:	4490      	add	r8, r2
 80139fe:	fa02 f20c 	lsl.w	r2, r2, ip
 8013a02:	1ab6      	subs	r6, r6, r2
 8013a04:	aa06      	add	r2, sp, #24
 8013a06:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8013a0a:	f1c5 0217 	rsb	r2, r5, #23
 8013a0e:	4116      	asrs	r6, r2
 8013a10:	2e00      	cmp	r6, #0
 8013a12:	dd3c      	ble.n	8013a8e <__kernel_rem_pio2+0x1c6>
 8013a14:	f04f 0c00 	mov.w	ip, #0
 8013a18:	f108 0801 	add.w	r8, r8, #1
 8013a1c:	4660      	mov	r0, ip
 8013a1e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8013a22:	4564      	cmp	r4, ip
 8013a24:	dc66      	bgt.n	8013af4 <__kernel_rem_pio2+0x22c>
 8013a26:	2d00      	cmp	r5, #0
 8013a28:	dd03      	ble.n	8013a32 <__kernel_rem_pio2+0x16a>
 8013a2a:	2d01      	cmp	r5, #1
 8013a2c:	d072      	beq.n	8013b14 <__kernel_rem_pio2+0x24c>
 8013a2e:	2d02      	cmp	r5, #2
 8013a30:	d07a      	beq.n	8013b28 <__kernel_rem_pio2+0x260>
 8013a32:	2e02      	cmp	r6, #2
 8013a34:	d12b      	bne.n	8013a8e <__kernel_rem_pio2+0x1c6>
 8013a36:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013a3a:	ee30 8b48 	vsub.f64	d8, d0, d8
 8013a3e:	b330      	cbz	r0, 8013a8e <__kernel_rem_pio2+0x1c6>
 8013a40:	4628      	mov	r0, r5
 8013a42:	f000 f9bd 	bl	8013dc0 <scalbn>
 8013a46:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013a4a:	e020      	b.n	8013a8e <__kernel_rem_pio2+0x1c6>
 8013a4c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8013a50:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013a54:	3801      	subs	r0, #1
 8013a56:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8013a5a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8013a5e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013a62:	eca6 0a01 	vstmia	r6!, {s0}
 8013a66:	ed92 0b00 	vldr	d0, [r2]
 8013a6a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8013a6e:	e79e      	b.n	80139ae <__kernel_rem_pio2+0xe6>
 8013a70:	d105      	bne.n	8013a7e <__kernel_rem_pio2+0x1b6>
 8013a72:	1e62      	subs	r2, r4, #1
 8013a74:	a906      	add	r1, sp, #24
 8013a76:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8013a7a:	15f6      	asrs	r6, r6, #23
 8013a7c:	e7c8      	b.n	8013a10 <__kernel_rem_pio2+0x148>
 8013a7e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8013a82:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8a:	da31      	bge.n	8013af0 <__kernel_rem_pio2+0x228>
 8013a8c:	2600      	movs	r6, #0
 8013a8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a96:	f040 809b 	bne.w	8013bd0 <__kernel_rem_pio2+0x308>
 8013a9a:	1e62      	subs	r2, r4, #1
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	454a      	cmp	r2, r9
 8013aa0:	da49      	bge.n	8013b36 <__kernel_rem_pio2+0x26e>
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d062      	beq.n	8013b6c <__kernel_rem_pio2+0x2a4>
 8013aa6:	3c01      	subs	r4, #1
 8013aa8:	ab06      	add	r3, sp, #24
 8013aaa:	3d18      	subs	r5, #24
 8013aac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d0f8      	beq.n	8013aa6 <__kernel_rem_pio2+0x1de>
 8013ab4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f000 f981 	bl	8013dc0 <scalbn>
 8013abe:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8013bb8 <__kernel_rem_pio2+0x2f0>
 8013ac2:	1c62      	adds	r2, r4, #1
 8013ac4:	a96a      	add	r1, sp, #424	@ 0x1a8
 8013ac6:	00d3      	lsls	r3, r2, #3
 8013ac8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013acc:	4622      	mov	r2, r4
 8013ace:	2a00      	cmp	r2, #0
 8013ad0:	f280 80a8 	bge.w	8013c24 <__kernel_rem_pio2+0x35c>
 8013ad4:	4622      	mov	r2, r4
 8013ad6:	2a00      	cmp	r2, #0
 8013ad8:	f2c0 80c6 	blt.w	8013c68 <__kernel_rem_pio2+0x3a0>
 8013adc:	a96a      	add	r1, sp, #424	@ 0x1a8
 8013ade:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013ae2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8013bb0 <__kernel_rem_pio2+0x2e8>
 8013ae6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8013bcc <__kernel_rem_pio2+0x304>
 8013aea:	2000      	movs	r0, #0
 8013aec:	1aa1      	subs	r1, r4, r2
 8013aee:	e0b0      	b.n	8013c52 <__kernel_rem_pio2+0x38a>
 8013af0:	2602      	movs	r6, #2
 8013af2:	e78f      	b.n	8013a14 <__kernel_rem_pio2+0x14c>
 8013af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013af8:	b948      	cbnz	r0, 8013b0e <__kernel_rem_pio2+0x246>
 8013afa:	b122      	cbz	r2, 8013b06 <__kernel_rem_pio2+0x23e>
 8013afc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8013b00:	f843 2c04 	str.w	r2, [r3, #-4]
 8013b04:	2201      	movs	r2, #1
 8013b06:	f10c 0c01 	add.w	ip, ip, #1
 8013b0a:	4610      	mov	r0, r2
 8013b0c:	e789      	b.n	8013a22 <__kernel_rem_pio2+0x15a>
 8013b0e:	ebae 0202 	sub.w	r2, lr, r2
 8013b12:	e7f5      	b.n	8013b00 <__kernel_rem_pio2+0x238>
 8013b14:	1e62      	subs	r2, r4, #1
 8013b16:	ab06      	add	r3, sp, #24
 8013b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013b20:	a906      	add	r1, sp, #24
 8013b22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013b26:	e784      	b.n	8013a32 <__kernel_rem_pio2+0x16a>
 8013b28:	1e62      	subs	r2, r4, #1
 8013b2a:	ab06      	add	r3, sp, #24
 8013b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013b34:	e7f4      	b.n	8013b20 <__kernel_rem_pio2+0x258>
 8013b36:	ab06      	add	r3, sp, #24
 8013b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b3c:	3a01      	subs	r2, #1
 8013b3e:	4318      	orrs	r0, r3
 8013b40:	e7ad      	b.n	8013a9e <__kernel_rem_pio2+0x1d6>
 8013b42:	3301      	adds	r3, #1
 8013b44:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d0fa      	beq.n	8013b42 <__kernel_rem_pio2+0x27a>
 8013b4c:	9a04      	ldr	r2, [sp, #16]
 8013b4e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8013b52:	446a      	add	r2, sp
 8013b54:	eb04 000b 	add.w	r0, r4, fp
 8013b58:	a91a      	add	r1, sp, #104	@ 0x68
 8013b5a:	1c66      	adds	r6, r4, #1
 8013b5c:	3a98      	subs	r2, #152	@ 0x98
 8013b5e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8013b62:	4423      	add	r3, r4
 8013b64:	42b3      	cmp	r3, r6
 8013b66:	da04      	bge.n	8013b72 <__kernel_rem_pio2+0x2aa>
 8013b68:	461c      	mov	r4, r3
 8013b6a:	e713      	b.n	8013994 <__kernel_rem_pio2+0xcc>
 8013b6c:	9a03      	ldr	r2, [sp, #12]
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e7e8      	b.n	8013b44 <__kernel_rem_pio2+0x27c>
 8013b72:	9902      	ldr	r1, [sp, #8]
 8013b74:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013b78:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8013b7c:	9104      	str	r1, [sp, #16]
 8013b7e:	ee07 1a90 	vmov	s15, r1
 8013b82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013b86:	2400      	movs	r4, #0
 8013b88:	eca0 7b02 	vstmia	r0!, {d7}
 8013b8c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013bb0 <__kernel_rem_pio2+0x2e8>
 8013b90:	4686      	mov	lr, r0
 8013b92:	4554      	cmp	r4, sl
 8013b94:	dd03      	ble.n	8013b9e <__kernel_rem_pio2+0x2d6>
 8013b96:	eca2 7b02 	vstmia	r2!, {d7}
 8013b9a:	3601      	adds	r6, #1
 8013b9c:	e7e2      	b.n	8013b64 <__kernel_rem_pio2+0x29c>
 8013b9e:	ecbc 5b02 	vldmia	ip!, {d5}
 8013ba2:	ed3e 6b02 	vldmdb	lr!, {d6}
 8013ba6:	3401      	adds	r4, #1
 8013ba8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013bac:	e7f1      	b.n	8013b92 <__kernel_rem_pio2+0x2ca>
 8013bae:	bf00      	nop
	...
 8013bbc:	3e700000 	.word	0x3e700000
 8013bc0:	00000000 	.word	0x00000000
 8013bc4:	41700000 	.word	0x41700000
 8013bc8:	08014758 	.word	0x08014758
 8013bcc:	08014718 	.word	0x08014718
 8013bd0:	4268      	negs	r0, r5
 8013bd2:	eeb0 0b48 	vmov.f64	d0, d8
 8013bd6:	f000 f8f3 	bl	8013dc0 <scalbn>
 8013bda:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8013da8 <__kernel_rem_pio2+0x4e0>
 8013bde:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8013be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be6:	db17      	blt.n	8013c18 <__kernel_rem_pio2+0x350>
 8013be8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8013db0 <__kernel_rem_pio2+0x4e8>
 8013bec:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013bf0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013bf4:	aa06      	add	r2, sp, #24
 8013bf6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8013bfa:	eea5 0b46 	vfms.f64	d0, d5, d6
 8013bfe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013c02:	3518      	adds	r5, #24
 8013c04:	ee10 3a10 	vmov	r3, s0
 8013c08:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013c0c:	ee17 3a10 	vmov	r3, s14
 8013c10:	3401      	adds	r4, #1
 8013c12:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013c16:	e74d      	b.n	8013ab4 <__kernel_rem_pio2+0x1ec>
 8013c18:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013c1c:	aa06      	add	r2, sp, #24
 8013c1e:	ee10 3a10 	vmov	r3, s0
 8013c22:	e7f6      	b.n	8013c12 <__kernel_rem_pio2+0x34a>
 8013c24:	a806      	add	r0, sp, #24
 8013c26:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013c2a:	9001      	str	r0, [sp, #4]
 8013c2c:	ee07 0a90 	vmov	s15, r0
 8013c30:	3a01      	subs	r2, #1
 8013c32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013c36:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013c3a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8013c3e:	ed21 7b02 	vstmdb	r1!, {d7}
 8013c42:	e744      	b.n	8013ace <__kernel_rem_pio2+0x206>
 8013c44:	ecbc 5b02 	vldmia	ip!, {d5}
 8013c48:	ecb5 6b02 	vldmia	r5!, {d6}
 8013c4c:	3001      	adds	r0, #1
 8013c4e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013c52:	4548      	cmp	r0, r9
 8013c54:	dc01      	bgt.n	8013c5a <__kernel_rem_pio2+0x392>
 8013c56:	4281      	cmp	r1, r0
 8013c58:	daf4      	bge.n	8013c44 <__kernel_rem_pio2+0x37c>
 8013c5a:	a842      	add	r0, sp, #264	@ 0x108
 8013c5c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013c60:	ed81 7b00 	vstr	d7, [r1]
 8013c64:	3a01      	subs	r2, #1
 8013c66:	e736      	b.n	8013ad6 <__kernel_rem_pio2+0x20e>
 8013c68:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8013c6a:	2a02      	cmp	r2, #2
 8013c6c:	dc0a      	bgt.n	8013c84 <__kernel_rem_pio2+0x3bc>
 8013c6e:	2a00      	cmp	r2, #0
 8013c70:	dc2d      	bgt.n	8013cce <__kernel_rem_pio2+0x406>
 8013c72:	d046      	beq.n	8013d02 <__kernel_rem_pio2+0x43a>
 8013c74:	f008 0007 	and.w	r0, r8, #7
 8013c78:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8013c7c:	ecbd 8b06 	vpop	{d8-d10}
 8013c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c84:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8013c86:	2a03      	cmp	r2, #3
 8013c88:	d1f4      	bne.n	8013c74 <__kernel_rem_pio2+0x3ac>
 8013c8a:	a942      	add	r1, sp, #264	@ 0x108
 8013c8c:	f1a3 0208 	sub.w	r2, r3, #8
 8013c90:	440a      	add	r2, r1
 8013c92:	4611      	mov	r1, r2
 8013c94:	4620      	mov	r0, r4
 8013c96:	2800      	cmp	r0, #0
 8013c98:	f1a1 0108 	sub.w	r1, r1, #8
 8013c9c:	dc52      	bgt.n	8013d44 <__kernel_rem_pio2+0x47c>
 8013c9e:	4621      	mov	r1, r4
 8013ca0:	2901      	cmp	r1, #1
 8013ca2:	f1a2 0208 	sub.w	r2, r2, #8
 8013ca6:	dc5d      	bgt.n	8013d64 <__kernel_rem_pio2+0x49c>
 8013ca8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8013db8 <__kernel_rem_pio2+0x4f0>
 8013cac:	aa42      	add	r2, sp, #264	@ 0x108
 8013cae:	4413      	add	r3, r2
 8013cb0:	2c01      	cmp	r4, #1
 8013cb2:	dc67      	bgt.n	8013d84 <__kernel_rem_pio2+0x4bc>
 8013cb4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8013cb8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8013cbc:	2e00      	cmp	r6, #0
 8013cbe:	d167      	bne.n	8013d90 <__kernel_rem_pio2+0x4c8>
 8013cc0:	ed87 5b00 	vstr	d5, [r7]
 8013cc4:	ed87 6b02 	vstr	d6, [r7, #8]
 8013cc8:	ed87 7b04 	vstr	d7, [r7, #16]
 8013ccc:	e7d2      	b.n	8013c74 <__kernel_rem_pio2+0x3ac>
 8013cce:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8013db8 <__kernel_rem_pio2+0x4f0>
 8013cd2:	aa42      	add	r2, sp, #264	@ 0x108
 8013cd4:	4413      	add	r3, r2
 8013cd6:	4622      	mov	r2, r4
 8013cd8:	2a00      	cmp	r2, #0
 8013cda:	da24      	bge.n	8013d26 <__kernel_rem_pio2+0x45e>
 8013cdc:	b34e      	cbz	r6, 8013d32 <__kernel_rem_pio2+0x46a>
 8013cde:	eeb1 7b46 	vneg.f64	d7, d6
 8013ce2:	ed87 7b00 	vstr	d7, [r7]
 8013ce6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8013cea:	aa44      	add	r2, sp, #272	@ 0x110
 8013cec:	2301      	movs	r3, #1
 8013cee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013cf2:	429c      	cmp	r4, r3
 8013cf4:	da20      	bge.n	8013d38 <__kernel_rem_pio2+0x470>
 8013cf6:	b10e      	cbz	r6, 8013cfc <__kernel_rem_pio2+0x434>
 8013cf8:	eeb1 7b47 	vneg.f64	d7, d7
 8013cfc:	ed87 7b02 	vstr	d7, [r7, #8]
 8013d00:	e7b8      	b.n	8013c74 <__kernel_rem_pio2+0x3ac>
 8013d02:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8013db8 <__kernel_rem_pio2+0x4f0>
 8013d06:	aa42      	add	r2, sp, #264	@ 0x108
 8013d08:	4413      	add	r3, r2
 8013d0a:	2c00      	cmp	r4, #0
 8013d0c:	da05      	bge.n	8013d1a <__kernel_rem_pio2+0x452>
 8013d0e:	b10e      	cbz	r6, 8013d14 <__kernel_rem_pio2+0x44c>
 8013d10:	eeb1 7b47 	vneg.f64	d7, d7
 8013d14:	ed87 7b00 	vstr	d7, [r7]
 8013d18:	e7ac      	b.n	8013c74 <__kernel_rem_pio2+0x3ac>
 8013d1a:	ed33 6b02 	vldmdb	r3!, {d6}
 8013d1e:	3c01      	subs	r4, #1
 8013d20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013d24:	e7f1      	b.n	8013d0a <__kernel_rem_pio2+0x442>
 8013d26:	ed33 7b02 	vldmdb	r3!, {d7}
 8013d2a:	3a01      	subs	r2, #1
 8013d2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8013d30:	e7d2      	b.n	8013cd8 <__kernel_rem_pio2+0x410>
 8013d32:	eeb0 7b46 	vmov.f64	d7, d6
 8013d36:	e7d4      	b.n	8013ce2 <__kernel_rem_pio2+0x41a>
 8013d38:	ecb2 6b02 	vldmia	r2!, {d6}
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013d42:	e7d6      	b.n	8013cf2 <__kernel_rem_pio2+0x42a>
 8013d44:	ed91 7b00 	vldr	d7, [r1]
 8013d48:	ed91 5b02 	vldr	d5, [r1, #8]
 8013d4c:	3801      	subs	r0, #1
 8013d4e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013d56:	ed81 6b00 	vstr	d6, [r1]
 8013d5a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013d5e:	ed81 7b02 	vstr	d7, [r1, #8]
 8013d62:	e798      	b.n	8013c96 <__kernel_rem_pio2+0x3ce>
 8013d64:	ed92 7b00 	vldr	d7, [r2]
 8013d68:	ed92 5b02 	vldr	d5, [r2, #8]
 8013d6c:	3901      	subs	r1, #1
 8013d6e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013d72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013d76:	ed82 6b00 	vstr	d6, [r2]
 8013d7a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013d7e:	ed82 7b02 	vstr	d7, [r2, #8]
 8013d82:	e78d      	b.n	8013ca0 <__kernel_rem_pio2+0x3d8>
 8013d84:	ed33 6b02 	vldmdb	r3!, {d6}
 8013d88:	3c01      	subs	r4, #1
 8013d8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013d8e:	e78f      	b.n	8013cb0 <__kernel_rem_pio2+0x3e8>
 8013d90:	eeb1 5b45 	vneg.f64	d5, d5
 8013d94:	eeb1 6b46 	vneg.f64	d6, d6
 8013d98:	ed87 5b00 	vstr	d5, [r7]
 8013d9c:	eeb1 7b47 	vneg.f64	d7, d7
 8013da0:	ed87 6b02 	vstr	d6, [r7, #8]
 8013da4:	e790      	b.n	8013cc8 <__kernel_rem_pio2+0x400>
 8013da6:	bf00      	nop
 8013da8:	00000000 	.word	0x00000000
 8013dac:	41700000 	.word	0x41700000
 8013db0:	00000000 	.word	0x00000000
 8013db4:	3e700000 	.word	0x3e700000
	...

08013dc0 <scalbn>:
 8013dc0:	ee10 1a90 	vmov	r1, s1
 8013dc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013dc8:	b98b      	cbnz	r3, 8013dee <scalbn+0x2e>
 8013dca:	ee10 3a10 	vmov	r3, s0
 8013dce:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8013dd2:	4319      	orrs	r1, r3
 8013dd4:	d00a      	beq.n	8013dec <scalbn+0x2c>
 8013dd6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013e88 <scalbn+0xc8>
 8013dda:	4b37      	ldr	r3, [pc, #220]	@ (8013eb8 <scalbn+0xf8>)
 8013ddc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013de0:	4298      	cmp	r0, r3
 8013de2:	da0b      	bge.n	8013dfc <scalbn+0x3c>
 8013de4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013e90 <scalbn+0xd0>
 8013de8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013dec:	4770      	bx	lr
 8013dee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d107      	bne.n	8013e06 <scalbn+0x46>
 8013df6:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013dfa:	4770      	bx	lr
 8013dfc:	ee10 1a90 	vmov	r1, s1
 8013e00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013e04:	3b36      	subs	r3, #54	@ 0x36
 8013e06:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013e0a:	4290      	cmp	r0, r2
 8013e0c:	dd0d      	ble.n	8013e2a <scalbn+0x6a>
 8013e0e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013e98 <scalbn+0xd8>
 8013e12:	ee10 3a90 	vmov	r3, s1
 8013e16:	eeb0 6b47 	vmov.f64	d6, d7
 8013e1a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8013ea0 <scalbn+0xe0>
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	fe27 7b05 	vselge.f64	d7, d7, d5
 8013e24:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013e28:	4770      	bx	lr
 8013e2a:	4418      	add	r0, r3
 8013e2c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8013e30:	4298      	cmp	r0, r3
 8013e32:	dcec      	bgt.n	8013e0e <scalbn+0x4e>
 8013e34:	2800      	cmp	r0, #0
 8013e36:	dd0a      	ble.n	8013e4e <scalbn+0x8e>
 8013e38:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8013e3c:	ec53 2b10 	vmov	r2, r3, d0
 8013e40:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8013e44:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013e48:	ec43 2b10 	vmov	d0, r2, r3
 8013e4c:	4770      	bx	lr
 8013e4e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8013e52:	da09      	bge.n	8013e68 <scalbn+0xa8>
 8013e54:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8013e90 <scalbn+0xd0>
 8013e58:	ee10 3a90 	vmov	r3, s1
 8013e5c:	eeb0 6b47 	vmov.f64	d6, d7
 8013e60:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8013ea8 <scalbn+0xe8>
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	e7db      	b.n	8013e20 <scalbn+0x60>
 8013e68:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8013e6c:	ec53 2b10 	vmov	r2, r3, d0
 8013e70:	3036      	adds	r0, #54	@ 0x36
 8013e72:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8013e76:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013e7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013eb0 <scalbn+0xf0>
 8013e7e:	ec43 2b10 	vmov	d0, r2, r3
 8013e82:	e7b1      	b.n	8013de8 <scalbn+0x28>
 8013e84:	f3af 8000 	nop.w
 8013e88:	00000000 	.word	0x00000000
 8013e8c:	43500000 	.word	0x43500000
 8013e90:	c2f8f359 	.word	0xc2f8f359
 8013e94:	01a56e1f 	.word	0x01a56e1f
 8013e98:	8800759c 	.word	0x8800759c
 8013e9c:	7e37e43c 	.word	0x7e37e43c
 8013ea0:	8800759c 	.word	0x8800759c
 8013ea4:	fe37e43c 	.word	0xfe37e43c
 8013ea8:	c2f8f359 	.word	0xc2f8f359
 8013eac:	81a56e1f 	.word	0x81a56e1f
 8013eb0:	00000000 	.word	0x00000000
 8013eb4:	3c900000 	.word	0x3c900000
 8013eb8:	ffff3cb0 	.word	0xffff3cb0

08013ebc <_init>:
 8013ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ebe:	bf00      	nop
 8013ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ec2:	bc08      	pop	{r3}
 8013ec4:	469e      	mov	lr, r3
 8013ec6:	4770      	bx	lr

08013ec8 <_fini>:
 8013ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eca:	bf00      	nop
 8013ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ece:	bc08      	pop	{r3}
 8013ed0:	469e      	mov	lr, r3
 8013ed2:	4770      	bx	lr
