
JohnDeereTractorWaypoints_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a36c  0800a36c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a36c  0800a36c  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a374  0800a374  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  0800a37c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400007c  0800a3f8  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000dc  0800a458  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000910  24000140  0800a4b8  00020140  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000a50  0800a4b8  00020a50  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020e5a  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003383  00000000  00000000  00040fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001800  00000000  00000000  00044348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000016c8  00000000  00000000  00045b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d5af  00000000  00000000  00047210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d8ed  00000000  00000000  000847bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00192219  00000000  00000000  000a20ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002342c5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ca4  00000000  00000000  00234318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009d34 	.word	0x08009d34

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	08009d34 	.word	0x08009d34

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <SetMotorSpeed>:

#include <main.h>
#include <ESC.h>

void SetMotorSpeed(float speed)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	ed87 0a01 	vstr	s0, [r7, #4]

    // Ensure speed is within the valid range

	if (speed < -1.0f || speed > 1.0f)
 80007ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80007d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007da:	d453      	bmi.n	8000884 <SetMotorSpeed+0xc4>
 80007dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80007e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ec:	dc4a      	bgt.n	8000884 <SetMotorSpeed+0xc4>

	// Calculate the pulse width based on the input speed

	float pulseWidth;

    if (speed > 0.0f)		// Forward
 80007ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80007f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	dd0c      	ble.n	8000816 <SetMotorSpeed+0x56>
    {
        pulseWidth = 1.5f + (speed * 0.5f); // Map speed to range (1.5ms to 2ms)
 80007fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000800:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000808:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800080c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000810:	edc7 7a05 	vstr	s15, [r7, #20]
 8000814:	e016      	b.n	8000844 <SetMotorSpeed+0x84>
    }
    else if (speed < 0.0f)	// Reverse
 8000816:	edd7 7a01 	vldr	s15, [r7, #4]
 800081a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800081e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000822:	d50c      	bpl.n	800083e <SetMotorSpeed+0x7e>
    {
        pulseWidth = 1.5f + (speed * 0.5f); // Map speed to range (1ms to 1.5ms)
 8000824:	edd7 7a01 	vldr	s15, [r7, #4]
 8000828:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800082c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000830:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000838:	edc7 7a05 	vstr	s15, [r7, #20]
 800083c:	e002      	b.n	8000844 <SetMotorSpeed+0x84>
    }
    else					// Neutral
    {
        pulseWidth = 1.5f;
 800083e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000842:	617b      	str	r3, [r7, #20]
    }

    // Get the current value of the auto-reload register for the timer

    uint32_t autoreload_register_value = __HAL_TIM_GET_AUTORELOAD(&htim14);
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <SetMotorSpeed+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	613b      	str	r3, [r7, #16]

    // Calculate the compare value based on the pulse width and timer settings

    uint32_t value = (uint32_t)((pulseWidth / 20.0f) * (autoreload_register_value + 1));
 800084c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000850:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8000854:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	3301      	adds	r3, #1
 800085c:	ee07 3a90 	vmov	s15, r3
 8000860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086c:	ee17 3a90 	vmov	r3, s15
 8000870:	60fb      	str	r3, [r7, #12]

    // Set the PWM duty cycle for TIM_CHANNEL_1 of the timer

    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, value);
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <SetMotorSpeed+0xcc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	635a      	str	r2, [r3, #52]	; 0x34

    // Start the PWM signal generation on TIM_CHANNEL_1

    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <SetMotorSpeed+0xcc>)
 800087e:	f006 fbf1 	bl	8007064 <HAL_TIM_PWM_Start>
 8000882:	e000      	b.n	8000886 <SetMotorSpeed+0xc6>
        return;
 8000884:	bf00      	nop
}
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	24000448 	.word	0x24000448

08000890 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <NRF24_DelayMicroSeconds+0x3c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <NRF24_DelayMicroSeconds+0x40>)
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	0c9a      	lsrs	r2, r3, #18
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	fb02 f303 	mul.w	r3, r2, r3
 80008ae:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80008b0:	bf00      	nop
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	60fa      	str	r2, [r7, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1fa      	bne.n	80008b2 <NRF24_DelayMicroSeconds+0x22>
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	24000000 	.word	0x24000000
 80008d0:	165e9f81 	.word	0x165e9f81

080008d4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <NRF24_csn+0x20>
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <NRF24_csn+0x38>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <NRF24_csn+0x3c>)
 80008e8:	8811      	ldrh	r1, [r2, #0]
 80008ea:	2201      	movs	r2, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fe3f 	bl	8003570 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80008f2:	e007      	b.n	8000904 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <NRF24_csn+0x38>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a05      	ldr	r2, [pc, #20]	; (8000910 <NRF24_csn+0x3c>)
 80008fa:	8811      	ldrh	r1, [r2, #0]
 80008fc:	2200      	movs	r2, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fe36 	bl	8003570 <HAL_GPIO_WritePin>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2400016c 	.word	0x2400016c
 8000910:	24000170 	.word	0x24000170

08000914 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d008      	beq.n	8000934 <NRF24_ce+0x20>
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <NRF24_ce+0x38>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <NRF24_ce+0x3c>)
 8000928:	8811      	ldrh	r1, [r2, #0]
 800092a:	2201      	movs	r2, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f002 fe1f 	bl	8003570 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000932:	e007      	b.n	8000944 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <NRF24_ce+0x38>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a05      	ldr	r2, [pc, #20]	; (8000950 <NRF24_ce+0x3c>)
 800093a:	8811      	ldrh	r1, [r2, #0]
 800093c:	2200      	movs	r2, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fe16 	bl	8003570 <HAL_GPIO_WritePin>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2400016c 	.word	0x2400016c
 8000950:	24000172 	.word	0x24000172

08000954 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffb8 	bl	80008d4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 031f 	and.w	r3, r3, #31
 800096a:	b2db      	uxtb	r3, r3
 800096c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800096e:	f107 010c 	add.w	r1, r7, #12
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	2201      	movs	r2, #1
 8000976:	480a      	ldr	r0, [pc, #40]	; (80009a0 <NRF24_read_register+0x4c>)
 8000978:	f005 fc1c 	bl	80061b4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	1c59      	adds	r1, r3, #1
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	2201      	movs	r2, #1
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <NRF24_read_register+0x4c>)
 8000988:	f005 fe06 	bl	8006598 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800098c:	7b7b      	ldrb	r3, [r7, #13]
 800098e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff ff9f 	bl	80008d4 <NRF24_csn>
	return retData;
 8000996:	7bfb      	ldrb	r3, [r7, #15]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000174 	.word	0x24000174

080009a4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	4613      	mov	r3, r2
 80009b2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff ff8d 	bl	80008d4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 031f 	and.w	r3, r3, #31
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80009c4:	f107 010c 	add.w	r1, r7, #12
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	2201      	movs	r2, #1
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <NRF24_read_registerN+0x4c>)
 80009ce:	f005 fbf1 	bl	80061b4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	6839      	ldr	r1, [r7, #0]
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <NRF24_read_registerN+0x4c>)
 80009dc:	f005 fddc 	bl	8006598 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff ff77 	bl	80008d4 <NRF24_csn>
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000174 	.word	0x24000174

080009f4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ff65 	bl	80008d4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f043 0320 	orr.w	r3, r3, #32
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000a18:	f107 010c 	add.w	r1, r7, #12
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <NRF24_write_register+0x40>)
 8000a22:	f005 fbc7 	bl	80061b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff ff54 	bl	80008d4 <NRF24_csn>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000174 	.word	0x24000174

08000a38 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff43 	bl	80008d4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a58:	f107 010c 	add.w	r1, r7, #12
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <NRF24_write_registerN+0x4c>)
 8000a62:	f005 fba7 	bl	80061b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	6839      	ldr	r1, [r7, #0]
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <NRF24_write_registerN+0x4c>)
 8000a70:	f005 fba0 	bl	80061b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff ff2d 	bl	80008d4 <NRF24_csn>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	24000174 	.word	0x24000174

08000a88 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a8c:	21ff      	movs	r1, #255	; 0xff
 8000a8e:	20e1      	movs	r0, #225	; 0xe1
 8000a90:	f7ff ffb0 	bl	80009f4 <NRF24_write_register>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a9c:	21ff      	movs	r1, #255	; 0xff
 8000a9e:	20e2      	movs	r0, #226	; 0xe2
 8000aa0:	f7ff ffa8 	bl	80009f4 <NRF24_write_register>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000abc:	4b66      	ldr	r3, [pc, #408]	; (8000c58 <NRF24_begin+0x1b0>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2288      	movs	r2, #136	; 0x88
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f008 fcbe 	bl	8009448 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000acc:	4a63      	ldr	r2, [pc, #396]	; (8000c5c <NRF24_begin+0x1b4>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000ad2:	4a63      	ldr	r2, [pc, #396]	; (8000c60 <NRF24_begin+0x1b8>)
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000ad8:	4a62      	ldr	r2, [pc, #392]	; (8000c64 <NRF24_begin+0x1bc>)
 8000ada:	883b      	ldrh	r3, [r7, #0]
 8000adc:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fef8 	bl	80008d4 <NRF24_csn>
	NRF24_ce(0);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff ff15 	bl	8000914 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000aea:	2005      	movs	r0, #5
 8000aec:	f001 fe44 	bl	8002778 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000af0:	2108      	movs	r1, #8
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff7e 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000af8:	213f      	movs	r1, #63	; 0x3f
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff ff7a 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000b00:	2103      	movs	r1, #3
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff ff76 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000b08:	2103      	movs	r1, #3
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f7ff ff72 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000b10:	2103      	movs	r1, #3
 8000b12:	2004      	movs	r0, #4
 8000b14:	f7ff ff6e 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000b18:	2102      	movs	r1, #2
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f7ff ff6a 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000b20:	210f      	movs	r1, #15
 8000b22:	2006      	movs	r0, #6
 8000b24:	f7ff ff66 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000b28:	210e      	movs	r1, #14
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f7ff ff62 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2008      	movs	r0, #8
 8000b34:	f7ff ff5e 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2009      	movs	r0, #9
 8000b3c:	f7ff ff5a 	bl	80009f4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000b40:	23e7      	movs	r3, #231	; 0xe7
 8000b42:	733b      	strb	r3, [r7, #12]
 8000b44:	23e7      	movs	r3, #231	; 0xe7
 8000b46:	72fb      	strb	r3, [r7, #11]
 8000b48:	23e7      	movs	r3, #231	; 0xe7
 8000b4a:	72bb      	strb	r3, [r7, #10]
 8000b4c:	23e7      	movs	r3, #231	; 0xe7
 8000b4e:	727b      	strb	r3, [r7, #9]
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2205      	movs	r2, #5
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f7ff ff6b 	bl	8000a38 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000b62:	23c2      	movs	r3, #194	; 0xc2
 8000b64:	733b      	strb	r3, [r7, #12]
 8000b66:	23c2      	movs	r3, #194	; 0xc2
 8000b68:	72fb      	strb	r3, [r7, #11]
 8000b6a:	23c2      	movs	r3, #194	; 0xc2
 8000b6c:	72bb      	strb	r3, [r7, #10]
 8000b6e:	23c2      	movs	r3, #194	; 0xc2
 8000b70:	727b      	strb	r3, [r7, #9]
 8000b72:	23c2      	movs	r3, #194	; 0xc2
 8000b74:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	200b      	movs	r0, #11
 8000b80:	f7ff ff5a 	bl	8000a38 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b84:	21c3      	movs	r1, #195	; 0xc3
 8000b86:	200c      	movs	r0, #12
 8000b88:	f7ff ff34 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b8c:	21c4      	movs	r1, #196	; 0xc4
 8000b8e:	200d      	movs	r0, #13
 8000b90:	f7ff ff30 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b94:	21c5      	movs	r1, #197	; 0xc5
 8000b96:	200e      	movs	r0, #14
 8000b98:	f7ff ff2c 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b9c:	21c6      	movs	r1, #198	; 0xc6
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f7ff ff28 	bl	80009f4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ba4:	23e7      	movs	r3, #231	; 0xe7
 8000ba6:	733b      	strb	r3, [r7, #12]
 8000ba8:	23e7      	movs	r3, #231	; 0xe7
 8000baa:	72fb      	strb	r3, [r7, #11]
 8000bac:	23e7      	movs	r3, #231	; 0xe7
 8000bae:	72bb      	strb	r3, [r7, #10]
 8000bb0:	23e7      	movs	r3, #231	; 0xe7
 8000bb2:	727b      	strb	r3, [r7, #9]
 8000bb4:	23e7      	movs	r3, #231	; 0xe7
 8000bb6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f7ff ff39 	bl	8000a38 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2011      	movs	r0, #17
 8000bca:	f7ff ff13 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2012      	movs	r0, #18
 8000bd2:	f7ff ff0f 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2013      	movs	r0, #19
 8000bda:	f7ff ff0b 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2014      	movs	r0, #20
 8000be2:	f7ff ff07 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2015      	movs	r0, #21
 8000bea:	f7ff ff03 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2016      	movs	r0, #22
 8000bf2:	f7ff feff 	bl	80009f4 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000bf6:	f000 f9df 	bl	8000fb8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	201c      	movs	r0, #28
 8000bfe:	f7ff fef9 	bl	80009f4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	201d      	movs	r0, #29
 8000c06:	f7ff fef5 	bl	80009f4 <NRF24_write_register>
	printRadioSettings();
 8000c0a:	f000 f9ef 	bl	8000fec <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000c0e:	210f      	movs	r1, #15
 8000c10:	200f      	movs	r0, #15
 8000c12:	f000 f89d 	bl	8000d50 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f90f 	bl	8000e3a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 f945 	bl	8000eac <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000c22:	2002      	movs	r0, #2
 8000c24:	f000 f988 	bl	8000f38 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000c28:	f000 f8da 	bl	8000de0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000c2c:	2020      	movs	r0, #32
 8000c2e:	f000 f8bf 	bl	8000db0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000c32:	f000 f9b8 	bl	8000fa6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000c36:	204c      	movs	r0, #76	; 0x4c
 8000c38:	f000 f8a5 	bl	8000d86 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000c3c:	f7ff ff24 	bl	8000a88 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c40:	f7ff ff2a 	bl	8000a98 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000c44:	f000 f9a0 	bl	8000f88 <NRF24_powerDown>

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c52:	b002      	add	sp, #8
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	24000174 	.word	0x24000174
 8000c5c:	2400016c 	.word	0x2400016c
 8000c60:	24000170 	.word	0x24000170
 8000c64:	24000172 	.word	0x24000172

08000c68 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fe71 	bl	8000954 <NRF24_read_register>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f043 0303 	orr.w	r3, r3, #3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff feb9 	bl	80009f4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <NRF24_startListening+0x48>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	d004      	beq.n	8000c96 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c8c:	2205      	movs	r2, #5
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <NRF24_startListening+0x48>)
 8000c90:	200a      	movs	r0, #10
 8000c92:	f7ff fed1 	bl	8000a38 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000c96:	f7ff fef7 	bl	8000a88 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c9a:	f7ff fefd 	bl	8000a98 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fe38 	bl	8000914 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000ca4:	2096      	movs	r0, #150	; 0x96
 8000ca6:	f7ff fdf3 	bl	8000890 <NRF24_DelayMicroSeconds>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000160 	.word	0x24000160

08000cb4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4601      	mov	r1, r0
 8000cbc:	e9c7 2300 	strd	r2, r3, [r7]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d104      	bne.n	8000cd4 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cce:	491c      	ldr	r1, [pc, #112]	; (8000d40 <NRF24_openReadingPipe+0x8c>)
 8000cd0:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d82d      	bhi.n	8000d36 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d808      	bhi.n	8000cf2 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <NRF24_openReadingPipe+0x90>)
 8000ce4:	5cd3      	ldrb	r3, [r2, r3]
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	2205      	movs	r2, #5
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fea4 	bl	8000a38 <NRF24_write_registerN>
 8000cf0:	e007      	b.n	8000d02 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <NRF24_openReadingPipe+0x90>)
 8000cf6:	5cd3      	ldrb	r3, [r2, r3]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fe9b 	bl	8000a38 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x94>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <NRF24_openReadingPipe+0x98>)
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fe70 	bl	80009f4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff fe1d 	bl	8000954 <NRF24_read_register>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	2101      	movs	r1, #1
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	2002      	movs	r0, #2
 8000d32:	f7ff fe5f 	bl	80009f4 <NRF24_write_register>
	}
	
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24000160 	.word	0x24000160
 8000d44:	0800a2a0 	.word	0x0800a2a0
 8000d48:	0800a2a8 	.word	0x0800a2a8
 8000d4c:	24000168 	.word	0x24000168

08000d50 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f7ff fe3b 	bl	80009f4 <NRF24_write_register>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d90:	237f      	movs	r3, #127	; 0x7f
 8000d92:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	bf28      	it	cs
 8000d9c:	4613      	movcs	r3, r2
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4619      	mov	r1, r3
 8000da2:	2005      	movs	r0, #5
 8000da4:	f7ff fe26 	bl	80009f4 <NRF24_write_register>
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	bf28      	it	cs
 8000dc6:	4613      	movcs	r3, r2
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <NRF24_setPayloadSize+0x2c>)
 8000dcc:	701a      	strb	r2, [r3, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	24000168 	.word	0x24000168

08000de0 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000de4:	201d      	movs	r0, #29
 8000de6:	f7ff fdb5 	bl	8000954 <NRF24_read_register>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	201d      	movs	r0, #29
 8000df6:	f7ff fdfd 	bl	80009f4 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	201c      	movs	r0, #28
 8000dfe:	f7ff fdf9 	bl	80009f4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e02:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <NRF24_disableDynamicPayloads+0x2c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000169 	.word	0x24000169

08000e10 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d004      	beq.n	8000e2a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e20:	213f      	movs	r1, #63	; 0x3f
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff fde6 	bl	80009f4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e28:	e003      	b.n	8000e32 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff fde1 	bl	80009f4 <NRF24_write_register>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e44:	2006      	movs	r0, #6
 8000e46:	f7ff fd85 	bl	8000954 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f023 0306 	bic.w	r3, r3, #6
 8000e54:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d104      	bne.n	8000e66 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	f043 0306 	orr.w	r3, r3, #6
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e019      	b.n	8000e9a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d104      	bne.n	8000e76 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e011      	b.n	8000e9a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d104      	bne.n	8000e86 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e009      	b.n	8000e9a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d103      	bne.n	8000e9a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f043 0306 	orr.w	r3, r3, #6
 8000e98:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2006      	movs	r0, #6
 8000ea0:	f7ff fda8 	bl	80009f4 <NRF24_write_register>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000eba:	2006      	movs	r0, #6
 8000ebc:	f7ff fd4a 	bl	8000954 <NRF24_read_register>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <NRF24_setDataRate+0x88>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000ed0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d107      	bne.n	8000ee8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <NRF24_setDataRate+0x88>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	e00d      	b.n	8000f04 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d107      	bne.n	8000efe <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <NRF24_setDataRate+0x88>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	73bb      	strb	r3, [r7, #14]
 8000efc:	e002      	b.n	8000f04 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <NRF24_setDataRate+0x88>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	4619      	mov	r1, r3
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f7ff fd73 	bl	80009f4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f0e:	2006      	movs	r0, #6
 8000f10:	f7ff fd20 	bl	8000954 <NRF24_read_register>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d102      	bne.n	8000f24 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e002      	b.n	8000f2a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <NRF24_setDataRate+0x88>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2400016a 	.word	0x2400016a

08000f38 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fd06 	bl	8000954 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f023 030c 	bic.w	r3, r3, #12
 8000f4e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00f      	beq.n	8000f76 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d104      	bne.n	8000f66 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e007      	b.n	8000f76 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fd3a 	bl	80009f4 <NRF24_write_register>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fce1 	bl	8000954 <NRF24_read_register>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f023 0302 	bic.w	r3, r3, #2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fd29 	bl	80009f4 <NRF24_write_register>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000faa:	2170      	movs	r1, #112	; 0x70
 8000fac:	2007      	movs	r0, #7
 8000fae:	f7ff fd21 	bl	80009f4 <NRF24_write_register>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fc88 	bl	80008d4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000fc4:	2350      	movs	r3, #80	; 0x50
 8000fc6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000fc8:	2373      	movs	r3, #115	; 0x73
 8000fca:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000fcc:	1d39      	adds	r1, r7, #4
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <NRF24_ACTIVATE_cmd+0x30>)
 8000fd4:	f005 f8ee 	bl	80061b4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff fc7b 	bl	80008d4 <NRF24_csn>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	24000174 	.word	0x24000174

08000fec <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b0a1      	sub	sp, #132	; 0x84
 8000ff0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	49c3      	ldr	r1, [pc, #780]	; (8001304 <printRadioSettings+0x318>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f008 fb2b 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f96c 	bl	80002e0 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f107 0108 	add.w	r1, r7, #8
 8001010:	230a      	movs	r3, #10
 8001012:	48bd      	ldr	r0, [pc, #756]	; (8001308 <printRadioSettings+0x31c>)
 8001014:	f006 fe2d 	bl	8007c72 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fc9b 	bl	8000954 <NRF24_read_register>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001024:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001030:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <printRadioSettings+0x5e>
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	49b2      	ldr	r1, [pc, #712]	; (800130c <printRadioSettings+0x320>)
 8001042:	4618      	mov	r0, r3
 8001044:	f008 fb06 	bl	8009654 <siprintf>
 8001048:	e00c      	b.n	8001064 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	49b0      	ldr	r1, [pc, #704]	; (8001310 <printRadioSettings+0x324>)
 8001050:	4618      	mov	r0, r3
 8001052:	f008 faff 	bl	8009654 <siprintf>
 8001056:	e005      	b.n	8001064 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	49ad      	ldr	r1, [pc, #692]	; (8001314 <printRadioSettings+0x328>)
 800105e:	4618      	mov	r0, r3
 8001060:	f008 faf8 	bl	8009654 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f939 	bl	80002e0 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	f107 0108 	add.w	r1, r7, #8
 8001076:	230a      	movs	r3, #10
 8001078:	48a3      	ldr	r0, [pc, #652]	; (8001308 <printRadioSettings+0x31c>)
 800107a:	f006 fdfa 	bl	8007c72 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fc68 	bl	8000954 <NRF24_read_register>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800108a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800108e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001092:	2b00      	cmp	r3, #0
 8001094:	bfcc      	ite	gt
 8001096:	2301      	movgt	r3, #1
 8001098:	2300      	movle	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800109e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010a2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bfcc      	ite	gt
 80010aa:	2301      	movgt	r3, #1
 80010ac:	2300      	movle	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010b6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfcc      	ite	gt
 80010be:	2301      	movgt	r3, #1
 80010c0:	2300      	movle	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ca:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bfcc      	ite	gt
 80010d2:	2301      	movgt	r3, #1
 80010d4:	2300      	movle	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010de:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bfcc      	ite	gt
 80010e6:	2301      	movgt	r3, #1
 80010e8:	2300      	movle	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010f2:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bfcc      	ite	gt
 80010fa:	2301      	movgt	r3, #1
 80010fc:	2300      	movle	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f107 0008 	add.w	r0, r7, #8
 8001104:	9303      	str	r3, [sp, #12]
 8001106:	9402      	str	r4, [sp, #8]
 8001108:	9101      	str	r1, [sp, #4]
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	4633      	mov	r3, r6
 800110e:	462a      	mov	r2, r5
 8001110:	4981      	ldr	r1, [pc, #516]	; (8001318 <printRadioSettings+0x32c>)
 8001112:	f008 fa9f 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f8e0 	bl	80002e0 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	4877      	ldr	r0, [pc, #476]	; (8001308 <printRadioSettings+0x31c>)
 800112c:	f006 fda1 	bl	8007c72 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff fc0f 	bl	8000954 <NRF24_read_register>
 8001136:	4603      	mov	r3, r0
 8001138:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800113c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001140:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001144:	2b00      	cmp	r3, #0
 8001146:	bfcc      	ite	gt
 8001148:	2301      	movgt	r3, #1
 800114a:	2300      	movle	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001150:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001154:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001158:	2b00      	cmp	r3, #0
 800115a:	bfcc      	ite	gt
 800115c:	2301      	movgt	r3, #1
 800115e:	2300      	movle	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001164:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001168:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfcc      	ite	gt
 8001170:	2301      	movgt	r3, #1
 8001172:	2300      	movle	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001178:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800117c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001180:	2b00      	cmp	r3, #0
 8001182:	bfcc      	ite	gt
 8001184:	2301      	movgt	r3, #1
 8001186:	2300      	movle	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800118c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001190:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001194:	2b00      	cmp	r3, #0
 8001196:	bfcc      	ite	gt
 8001198:	2301      	movgt	r3, #1
 800119a:	2300      	movle	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bfcc      	ite	gt
 80011ac:	2301      	movgt	r3, #1
 80011ae:	2300      	movle	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f107 0008 	add.w	r0, r7, #8
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	9402      	str	r4, [sp, #8]
 80011ba:	9101      	str	r1, [sp, #4]
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	4633      	mov	r3, r6
 80011c0:	462a      	mov	r2, r5
 80011c2:	4956      	ldr	r1, [pc, #344]	; (800131c <printRadioSettings+0x330>)
 80011c4:	f008 fa46 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f887 	bl	80002e0 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f107 0108 	add.w	r1, r7, #8
 80011da:	230a      	movs	r3, #10
 80011dc:	484a      	ldr	r0, [pc, #296]	; (8001308 <printRadioSettings+0x31c>)
 80011de:	f006 fd48 	bl	8007c72 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80011e2:	2003      	movs	r0, #3
 80011e4:	f7ff fbb6 	bl	8000954 <NRF24_read_register>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80011f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f6:	3302      	adds	r3, #2
 80011f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80011fc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4946      	ldr	r1, [pc, #280]	; (8001320 <printRadioSettings+0x334>)
 8001206:	4618      	mov	r0, r3
 8001208:	f008 fa24 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f865 	bl	80002e0 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	b29a      	uxth	r2, r3
 800121a:	f107 0108 	add.w	r1, r7, #8
 800121e:	230a      	movs	r3, #10
 8001220:	4839      	ldr	r0, [pc, #228]	; (8001308 <printRadioSettings+0x31c>)
 8001222:	f006 fd26 	bl	8007c72 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001226:	2005      	movs	r0, #5
 8001228:	f7ff fb94 	bl	8000954 <NRF24_read_register>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001232:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4939      	ldr	r1, [pc, #228]	; (8001324 <printRadioSettings+0x338>)
 8001240:	4618      	mov	r0, r3
 8001242:	f008 fa07 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f848 	bl	80002e0 <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	f107 0108 	add.w	r1, r7, #8
 8001258:	230a      	movs	r3, #10
 800125a:	482b      	ldr	r0, [pc, #172]	; (8001308 <printRadioSettings+0x31c>)
 800125c:	f006 fd09 	bl	8007c72 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001260:	2006      	movs	r0, #6
 8001262:	f7ff fb77 	bl	8000954 <NRF24_read_register>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <printRadioSettings+0x29a>
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	492a      	ldr	r1, [pc, #168]	; (8001328 <printRadioSettings+0x33c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f008 f9e8 	bl	8009654 <siprintf>
 8001284:	e005      	b.n	8001292 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4928      	ldr	r1, [pc, #160]	; (800132c <printRadioSettings+0x340>)
 800128c:	4618      	mov	r0, r3
 800128e:	f008 f9e1 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f822 	bl	80002e0 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f107 0108 	add.w	r1, r7, #8
 80012a4:	230a      	movs	r3, #10
 80012a6:	4818      	ldr	r0, [pc, #96]	; (8001308 <printRadioSettings+0x31c>)
 80012a8:	f006 fce3 	bl	8007c72 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80012ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b0:	f003 0306 	and.w	r3, r3, #6
 80012b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80012b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012bc:	085b      	lsrs	r3, r3, #1
 80012be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80012c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <printRadioSettings+0x2ec>
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <printRadioSettings+0x344>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 f9bf 	bl	8009654 <siprintf>
 80012d6:	e03b      	b.n	8001350 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80012d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <printRadioSettings+0x302>
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4913      	ldr	r1, [pc, #76]	; (8001334 <printRadioSettings+0x348>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f008 f9b4 	bl	8009654 <siprintf>
 80012ec:	e030      	b.n	8001350 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80012ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d122      	bne.n	800133c <printRadioSettings+0x350>
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	490f      	ldr	r1, [pc, #60]	; (8001338 <printRadioSettings+0x34c>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f008 f9a9 	bl	8009654 <siprintf>
 8001302:	e025      	b.n	8001350 <printRadioSettings+0x364>
 8001304:	08009d4c 	.word	0x08009d4c
 8001308:	240001fc 	.word	0x240001fc
 800130c:	08009d80 	.word	0x08009d80
 8001310:	08009d9c 	.word	0x08009d9c
 8001314:	08009db8 	.word	0x08009db8
 8001318:	08009dcc 	.word	0x08009dcc
 800131c:	08009e10 	.word	0x08009e10
 8001320:	08009e5c 	.word	0x08009e5c
 8001324:	08009e78 	.word	0x08009e78
 8001328:	08009e8c 	.word	0x08009e8c
 800132c:	08009ea4 	.word	0x08009ea4
 8001330:	08009ebc 	.word	0x08009ebc
 8001334:	08009ed0 	.word	0x08009ed0
 8001338:	08009ee4 	.word	0x08009ee4
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800133c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001340:	2b03      	cmp	r3, #3
 8001342:	d105      	bne.n	8001350 <printRadioSettings+0x364>
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	49d7      	ldr	r1, [pc, #860]	; (80016a8 <printRadioSettings+0x6bc>)
 800134a:	4618      	mov	r0, r3
 800134c:	f008 f982 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ffc3 	bl	80002e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f107 0108 	add.w	r1, r7, #8
 8001362:	230a      	movs	r3, #10
 8001364:	48d1      	ldr	r0, [pc, #836]	; (80016ac <printRadioSettings+0x6c0>)
 8001366:	f006 fc84 	bl	8007c72 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800136a:	463b      	mov	r3, r7
 800136c:	2205      	movs	r2, #5
 800136e:	4619      	mov	r1, r3
 8001370:	200a      	movs	r0, #10
 8001372:	f7ff fb17 	bl	80009a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001376:	793b      	ldrb	r3, [r7, #4]
 8001378:	461c      	mov	r4, r3
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	461d      	mov	r5, r3
 800137e:	78bb      	ldrb	r3, [r7, #2]
 8001380:	787a      	ldrb	r2, [r7, #1]
 8001382:	7839      	ldrb	r1, [r7, #0]
 8001384:	f107 0008 	add.w	r0, r7, #8
 8001388:	9102      	str	r1, [sp, #8]
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	462b      	mov	r3, r5
 8001390:	4622      	mov	r2, r4
 8001392:	49c7      	ldr	r1, [pc, #796]	; (80016b0 <printRadioSettings+0x6c4>)
 8001394:	f008 f95e 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f7fe ff9f 	bl	80002e0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f107 0108 	add.w	r1, r7, #8
 80013aa:	230a      	movs	r3, #10
 80013ac:	48bf      	ldr	r0, [pc, #764]	; (80016ac <printRadioSettings+0x6c0>)
 80013ae:	f006 fc60 	bl	8007c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80013b2:	463b      	mov	r3, r7
 80013b4:	2205      	movs	r2, #5
 80013b6:	4619      	mov	r1, r3
 80013b8:	200b      	movs	r0, #11
 80013ba:	f7ff faf3 	bl	80009a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	461c      	mov	r4, r3
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	461d      	mov	r5, r3
 80013c6:	78bb      	ldrb	r3, [r7, #2]
 80013c8:	787a      	ldrb	r2, [r7, #1]
 80013ca:	7839      	ldrb	r1, [r7, #0]
 80013cc:	f107 0008 	add.w	r0, r7, #8
 80013d0:	9102      	str	r1, [sp, #8]
 80013d2:	9201      	str	r2, [sp, #4]
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	462b      	mov	r3, r5
 80013d8:	4622      	mov	r2, r4
 80013da:	49b6      	ldr	r1, [pc, #728]	; (80016b4 <printRadioSettings+0x6c8>)
 80013dc:	f008 f93a 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe ff7b 	bl	80002e0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f107 0108 	add.w	r1, r7, #8
 80013f2:	230a      	movs	r3, #10
 80013f4:	48ad      	ldr	r0, [pc, #692]	; (80016ac <printRadioSettings+0x6c0>)
 80013f6:	f006 fc3c 	bl	8007c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80013fa:	463b      	mov	r3, r7
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	200c      	movs	r0, #12
 8001402:	f7ff facf 	bl	80009a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001406:	783b      	ldrb	r3, [r7, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	49aa      	ldr	r1, [pc, #680]	; (80016b8 <printRadioSettings+0x6cc>)
 8001410:	4618      	mov	r0, r3
 8001412:	f008 f91f 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe ff60 	bl	80002e0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	f107 0108 	add.w	r1, r7, #8
 8001428:	230a      	movs	r3, #10
 800142a:	48a0      	ldr	r0, [pc, #640]	; (80016ac <printRadioSettings+0x6c0>)
 800142c:	f006 fc21 	bl	8007c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001430:	463b      	mov	r3, r7
 8001432:	2201      	movs	r2, #1
 8001434:	4619      	mov	r1, r3
 8001436:	200d      	movs	r0, #13
 8001438:	f7ff fab4 	bl	80009a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800143c:	783b      	ldrb	r3, [r7, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	499d      	ldr	r1, [pc, #628]	; (80016bc <printRadioSettings+0x6d0>)
 8001446:	4618      	mov	r0, r3
 8001448:	f008 f904 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff45 	bl	80002e0 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	f107 0108 	add.w	r1, r7, #8
 800145e:	230a      	movs	r3, #10
 8001460:	4892      	ldr	r0, [pc, #584]	; (80016ac <printRadioSettings+0x6c0>)
 8001462:	f006 fc06 	bl	8007c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001466:	463b      	mov	r3, r7
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	200e      	movs	r0, #14
 800146e:	f7ff fa99 	bl	80009a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001472:	783b      	ldrb	r3, [r7, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4991      	ldr	r1, [pc, #580]	; (80016c0 <printRadioSettings+0x6d4>)
 800147c:	4618      	mov	r0, r3
 800147e:	f008 f8e9 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ff2a 	bl	80002e0 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 0108 	add.w	r1, r7, #8
 8001494:	230a      	movs	r3, #10
 8001496:	4885      	ldr	r0, [pc, #532]	; (80016ac <printRadioSettings+0x6c0>)
 8001498:	f006 fbeb 	bl	8007c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800149c:	463b      	mov	r3, r7
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	200f      	movs	r0, #15
 80014a4:	f7ff fa7e 	bl	80009a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014a8:	783b      	ldrb	r3, [r7, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4984      	ldr	r1, [pc, #528]	; (80016c4 <printRadioSettings+0x6d8>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f008 f8ce 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ff0f 	bl	80002e0 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f107 0108 	add.w	r1, r7, #8
 80014ca:	230a      	movs	r3, #10
 80014cc:	4877      	ldr	r0, [pc, #476]	; (80016ac <printRadioSettings+0x6c0>)
 80014ce:	f006 fbd0 	bl	8007c72 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80014d2:	463b      	mov	r3, r7
 80014d4:	2205      	movs	r2, #5
 80014d6:	4619      	mov	r1, r3
 80014d8:	2010      	movs	r0, #16
 80014da:	f7ff fa63 	bl	80009a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014de:	793b      	ldrb	r3, [r7, #4]
 80014e0:	461c      	mov	r4, r3
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	461d      	mov	r5, r3
 80014e6:	78bb      	ldrb	r3, [r7, #2]
 80014e8:	787a      	ldrb	r2, [r7, #1]
 80014ea:	7839      	ldrb	r1, [r7, #0]
 80014ec:	f107 0008 	add.w	r0, r7, #8
 80014f0:	9102      	str	r1, [sp, #8]
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	462b      	mov	r3, r5
 80014f8:	4622      	mov	r2, r4
 80014fa:	4973      	ldr	r1, [pc, #460]	; (80016c8 <printRadioSettings+0x6dc>)
 80014fc:	f008 f8aa 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe feeb 	bl	80002e0 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	f107 0108 	add.w	r1, r7, #8
 8001512:	230a      	movs	r3, #10
 8001514:	4865      	ldr	r0, [pc, #404]	; (80016ac <printRadioSettings+0x6c0>)
 8001516:	f006 fbac 	bl	8007c72 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800151a:	2011      	movs	r0, #17
 800151c:	f7ff fa1a 	bl	8000954 <NRF24_read_register>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001526:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800152a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4966      	ldr	r1, [pc, #408]	; (80016cc <printRadioSettings+0x6e0>)
 8001534:	4618      	mov	r0, r3
 8001536:	f008 f88d 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe fece 	bl	80002e0 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	f107 0108 	add.w	r1, r7, #8
 800154c:	230a      	movs	r3, #10
 800154e:	4857      	ldr	r0, [pc, #348]	; (80016ac <printRadioSettings+0x6c0>)
 8001550:	f006 fb8f 	bl	8007c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001554:	2012      	movs	r0, #18
 8001556:	f7ff f9fd 	bl	8000954 <NRF24_read_register>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001560:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001564:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	4958      	ldr	r1, [pc, #352]	; (80016d0 <printRadioSettings+0x6e4>)
 800156e:	4618      	mov	r0, r3
 8001570:	f008 f870 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe feb1 	bl	80002e0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 0108 	add.w	r1, r7, #8
 8001586:	230a      	movs	r3, #10
 8001588:	4848      	ldr	r0, [pc, #288]	; (80016ac <printRadioSettings+0x6c0>)
 800158a:	f006 fb72 	bl	8007c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800158e:	2013      	movs	r0, #19
 8001590:	f7ff f9e0 	bl	8000954 <NRF24_read_register>
 8001594:	4603      	mov	r3, r0
 8001596:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800159a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800159e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	494b      	ldr	r1, [pc, #300]	; (80016d4 <printRadioSettings+0x6e8>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 f853 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fe94 	bl	80002e0 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	230a      	movs	r3, #10
 80015c2:	483a      	ldr	r0, [pc, #232]	; (80016ac <printRadioSettings+0x6c0>)
 80015c4:	f006 fb55 	bl	8007c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80015c8:	2014      	movs	r0, #20
 80015ca:	f7ff f9c3 	bl	8000954 <NRF24_read_register>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	493d      	ldr	r1, [pc, #244]	; (80016d8 <printRadioSettings+0x6ec>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f008 f836 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	482b      	ldr	r0, [pc, #172]	; (80016ac <printRadioSettings+0x6c0>)
 80015fe:	f006 fb38 	bl	8007c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001602:	2015      	movs	r0, #21
 8001604:	f7ff f9a6 	bl	8000954 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4930      	ldr	r1, [pc, #192]	; (80016dc <printRadioSettings+0x6f0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f008 f819 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	481d      	ldr	r0, [pc, #116]	; (80016ac <printRadioSettings+0x6c0>)
 8001638:	f006 fb1b 	bl	8007c72 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800163c:	2016      	movs	r0, #22
 800163e:	f7ff f989 	bl	8000954 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4922      	ldr	r1, [pc, #136]	; (80016e0 <printRadioSettings+0x6f4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f007 fffc 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	480e      	ldr	r0, [pc, #56]	; (80016ac <printRadioSettings+0x6c0>)
 8001672:	f006 fafe 	bl	8007c72 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001676:	201c      	movs	r0, #28
 8001678:	f7ff f96c 	bl	8000954 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800168a:	2b00      	cmp	r3, #0
 800168c:	bfcc      	ite	gt
 800168e:	2301      	movgt	r3, #1
 8001690:	2300      	movle	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001696:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800169a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bfcc      	ite	gt
 80016a2:	2301      	movgt	r3, #1
 80016a4:	2300      	movle	r3, #0
 80016a6:	e01d      	b.n	80016e4 <printRadioSettings+0x6f8>
 80016a8:	08009ef8 	.word	0x08009ef8
 80016ac:	240001fc 	.word	0x240001fc
 80016b0:	08009f0c 	.word	0x08009f0c
 80016b4:	08009f3c 	.word	0x08009f3c
 80016b8:	08009f6c 	.word	0x08009f6c
 80016bc:	08009f94 	.word	0x08009f94
 80016c0:	08009fbc 	.word	0x08009fbc
 80016c4:	08009fe4 	.word	0x08009fe4
 80016c8:	0800a00c 	.word	0x0800a00c
 80016cc:	0800a038 	.word	0x0800a038
 80016d0:	0800a054 	.word	0x0800a054
 80016d4:	0800a070 	.word	0x0800a070
 80016d8:	0800a08c 	.word	0x0800a08c
 80016dc:	0800a0a8 	.word	0x0800a0a8
 80016e0:	0800a0c4 	.word	0x0800a0c4
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ec:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bfcc      	ite	gt
 80016f4:	2301      	movgt	r3, #1
 80016f6:	2300      	movle	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001700:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001704:	2b00      	cmp	r3, #0
 8001706:	bfcc      	ite	gt
 8001708:	2301      	movgt	r3, #1
 800170a:	2300      	movle	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001710:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001714:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001718:	2b00      	cmp	r3, #0
 800171a:	bfcc      	ite	gt
 800171c:	2301      	movgt	r3, #1
 800171e:	2300      	movle	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001724:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001728:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800172c:	2b00      	cmp	r3, #0
 800172e:	bfcc      	ite	gt
 8001730:	2301      	movgt	r3, #1
 8001732:	2300      	movle	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f107 0008 	add.w	r0, r7, #8
 800173a:	9303      	str	r3, [sp, #12]
 800173c:	9402      	str	r4, [sp, #8]
 800173e:	9101      	str	r1, [sp, #4]
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	4633      	mov	r3, r6
 8001744:	462a      	mov	r2, r5
 8001746:	4936      	ldr	r1, [pc, #216]	; (8001820 <printRadioSettings+0x834>)
 8001748:	f007 ff84 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fdc5 	bl	80002e0 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	f107 0108 	add.w	r1, r7, #8
 800175e:	230a      	movs	r3, #10
 8001760:	4830      	ldr	r0, [pc, #192]	; (8001824 <printRadioSettings+0x838>)
 8001762:	f006 fa86 	bl	8007c72 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001766:	201d      	movs	r0, #29
 8001768:	f7ff f8f4 	bl	8000954 <NRF24_read_register>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001772:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <printRadioSettings+0x7a0>
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	4929      	ldr	r1, [pc, #164]	; (8001828 <printRadioSettings+0x83c>)
 8001784:	4618      	mov	r0, r3
 8001786:	f007 ff65 	bl	8009654 <siprintf>
 800178a:	e005      	b.n	8001798 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4926      	ldr	r1, [pc, #152]	; (800182c <printRadioSettings+0x840>)
 8001792:	4618      	mov	r0, r3
 8001794:	f007 ff5e 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd9f 	bl	80002e0 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f107 0108 	add.w	r1, r7, #8
 80017aa:	230a      	movs	r3, #10
 80017ac:	481d      	ldr	r0, [pc, #116]	; (8001824 <printRadioSettings+0x838>)
 80017ae:	f006 fa60 	bl	8007c72 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <printRadioSettings+0x7e0>
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <printRadioSettings+0x844>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f007 ff45 	bl	8009654 <siprintf>
 80017ca:	e005      	b.n	80017d8 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	4918      	ldr	r1, [pc, #96]	; (8001834 <printRadioSettings+0x848>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f007 ff3e 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fd7f 	bl	80002e0 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f107 0108 	add.w	r1, r7, #8
 80017ea:	230a      	movs	r3, #10
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <printRadioSettings+0x838>)
 80017ee:	f006 fa40 	bl	8007c72 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4910      	ldr	r1, [pc, #64]	; (8001838 <printRadioSettings+0x84c>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f007 ff2b 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fd6c 	bl	80002e0 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	f107 0108 	add.w	r1, r7, #8
 8001810:	230a      	movs	r3, #10
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <printRadioSettings+0x838>)
 8001814:	f006 fa2d 	bl	8007c72 <HAL_UART_Transmit>
}
 8001818:	bf00      	nop
 800181a:	3774      	adds	r7, #116	; 0x74
 800181c:	46bd      	mov	sp, r7
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001820:	0800a0e0 	.word	0x0800a0e0
 8001824:	240001fc 	.word	0x240001fc
 8001828:	0800a12c 	.word	0x0800a12c
 800182c:	0800a144 	.word	0x0800a144
 8001830:	0800a15c 	.word	0x0800a15c
 8001834:	0800a178 	.word	0x0800a178
 8001838:	08009d4c 	.word	0x08009d4c

0800183c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b0a7      	sub	sp, #156	; 0x9c
 8001840:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001848:	bf00      	nop
 800184a:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <main+0x184>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <main+0x24>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	60fa      	str	r2, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	dcf4      	bgt.n	800184a <main+0xe>
  if ( timeout < 0 )
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	da01      	bge.n	800186a <main+0x2e>
  {
  Error_Handler();
 8001866:	f000 fb8b 	bl	8001f80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f000 fef3 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 f8b3 	bl	80019d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001872:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <main+0x184>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <main+0x184>)
 800187a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001882:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <main+0x184>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001890:	2000      	movs	r0, #0
 8001892:	f001 fe87 	bl	80035a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001896:	2100      	movs	r1, #0
 8001898:	2000      	movs	r0, #0
 800189a:	f001 fe9d 	bl	80035d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800189e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a2:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80018a4:	bf00      	nop
 80018a6:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <main+0x184>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <main+0x80>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dcf4      	bgt.n	80018a6 <main+0x6a>
if ( timeout < 0 )
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da01      	bge.n	80018c6 <main+0x8a>
{
Error_Handler();
 80018c2:	f000 fb5d 	bl	8001f80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c6:	f000 facb 	bl	8001e60 <MX_GPIO_Init>
  MX_ETH_Init();
 80018ca:	f000 f90d 	bl	8001ae8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80018ce:	f000 fa49 	bl	8001d64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80018d2:	f000 fa93 	bl	8001dfc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 80018d6:	f000 f953 	bl	8001b80 <MX_SPI5_Init>
  MX_TIM13_Init();
 80018da:	f000 f9a7 	bl	8001c2c <MX_TIM13_Init>
  MX_TIM14_Init();
 80018de:	f000 f9f3 	bl	8001cc8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(GPIOC, NRF_CSN_Pin, NRF_CE_Pin, hspi5);
 80018e2:	4c38      	ldr	r4, [pc, #224]	; (80019c4 <main+0x188>)
 80018e4:	4668      	mov	r0, sp
 80018e6:	1d23      	adds	r3, r4, #4
 80018e8:	2284      	movs	r2, #132	; 0x84
 80018ea:	4619      	mov	r1, r3
 80018ec:	f007 fdac 	bl	8009448 <memcpy>
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	4834      	ldr	r0, [pc, #208]	; (80019c8 <main+0x18c>)
 80018f8:	f7ff f8d6 	bl	8000aa8 <NRF24_begin>

  NRF24_openReadingPipe(1, address);
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <main+0x190>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff f9d6 	bl	8000cb4 <NRF24_openReadingPipe>
  NRF24_setPALevel(RF24_PA_0dB);
 8001908:	2003      	movs	r0, #3
 800190a:	f7ff fa96 	bl	8000e3a <NRF24_setPALevel>
  NRF24_setChannel(52);
 800190e:	2034      	movs	r0, #52	; 0x34
 8001910:	f7ff fa39 	bl	8000d86 <NRF24_setChannel>
  NRF24_setAutoAck(false);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff fa7b 	bl	8000e10 <NRF24_setAutoAck>
  NRF24_setDataRate(RF24_2MBPS);
 800191a:	2001      	movs	r0, #1
 800191c:	f7ff fac6 	bl	8000eac <NRF24_setDataRate>

  NRF24_startListening();
 8001920:	f7ff f9a2 	bl	8000c68 <NRF24_startListening>

  HAL_Delay(500);
 8001924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001928:	f000 ff26 	bl	8002778 <HAL_Delay>

	HAL_Delay(100);

	*/

	for (float setpoint = 0.0f; setpoint <= 1.0f; setpoint += 0.01f)
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	e00e      	b.n	8001952 <main+0x116>
	{
		SetMotorSpeed(setpoint);
 8001934:	ed97 0a02 	vldr	s0, [r7, #8]
 8001938:	f7fe ff42 	bl	80007c0 <SetMotorSpeed>
		HAL_Delay(100);
 800193c:	2064      	movs	r0, #100	; 0x64
 800193e:	f000 ff1b 	bl	8002778 <HAL_Delay>
	for (float setpoint = 0.0f; setpoint <= 1.0f; setpoint += 0.01f)
 8001942:	edd7 7a02 	vldr	s15, [r7, #8]
 8001946:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80019d0 <main+0x194>
 800194a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194e:	edc7 7a02 	vstr	s15, [r7, #8]
 8001952:	edd7 7a02 	vldr	s15, [r7, #8]
 8001956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	d9e7      	bls.n	8001934 <main+0xf8>
	}

	SetMotorSpeed(0.0f);
 8001964:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80019d4 <main+0x198>
 8001968:	f7fe ff2a 	bl	80007c0 <SetMotorSpeed>
	HAL_Delay(2000);
 800196c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001970:	f000 ff02 	bl	8002778 <HAL_Delay>

	for (float setpoint = 0.0f; setpoint >= -1.0f; setpoint -= 0.01f)
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	e00e      	b.n	800199a <main+0x15e>
	{
		SetMotorSpeed(setpoint);
 800197c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001980:	f7fe ff1e 	bl	80007c0 <SetMotorSpeed>
		HAL_Delay(100);
 8001984:	2064      	movs	r0, #100	; 0x64
 8001986:	f000 fef7 	bl	8002778 <HAL_Delay>
	for (float setpoint = 0.0f; setpoint >= -1.0f; setpoint -= 0.01f)
 800198a:	edd7 7a01 	vldr	s15, [r7, #4]
 800198e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80019d0 <main+0x194>
 8001992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001996:	edc7 7a01 	vstr	s15, [r7, #4]
 800199a:	edd7 7a01 	vldr	s15, [r7, #4]
 800199e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dae7      	bge.n	800197c <main+0x140>
	}

	SetMotorSpeed(0.0f);
 80019ac:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80019d4 <main+0x198>
 80019b0:	f7fe ff06 	bl	80007c0 <SetMotorSpeed>
	HAL_Delay(2000);
 80019b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019b8:	f000 fede 	bl	8002778 <HAL_Delay>
	for (float setpoint = 0.0f; setpoint <= 1.0f; setpoint += 0.01f)
 80019bc:	e7b6      	b.n	800192c <main+0xf0>
 80019be:	bf00      	nop
 80019c0:	58024400 	.word	0x58024400
 80019c4:	24000374 	.word	0x24000374
 80019c8:	58020800 	.word	0x58020800
 80019cc:	24000008 	.word	0x24000008
 80019d0:	3c23d70a 	.word	0x3c23d70a
 80019d4:	00000000 	.word	0x00000000

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09c      	sub	sp, #112	; 0x70
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	224c      	movs	r2, #76	; 0x4c
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 fd3c 	bl	8009464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2220      	movs	r2, #32
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fd36 	bl	8009464 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80019f8:	2004      	movs	r0, #4
 80019fa:	f001 ff49 	bl	8003890 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <SystemClock_Config+0x104>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a35      	ldr	r2, [pc, #212]	; (8001adc <SystemClock_Config+0x104>)
 8001a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b33      	ldr	r3, [pc, #204]	; (8001adc <SystemClock_Config+0x104>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <SystemClock_Config+0x108>)
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <SystemClock_Config+0x108>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a24:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <SystemClock_Config+0x108>)
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a30:	bf00      	nop
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <SystemClock_Config+0x104>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a3e:	d1f8      	bne.n	8001a32 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <SystemClock_Config+0x10c>)
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f023 0303 	bic.w	r3, r3, #3
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <SystemClock_Config+0x10c>)
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001a50:	2303      	movs	r3, #3
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5e:	2340      	movs	r3, #64	; 0x40
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a66:	2302      	movs	r3, #2
 8001a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001a6e:	23f0      	movs	r3, #240	; 0xf0
 8001a70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001a7e:	2308      	movs	r3, #8
 8001a80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 ff68 	bl	8003964 <HAL_RCC_OscConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a9a:	f000 fa71 	bl	8001f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9e:	233f      	movs	r3, #63	; 0x3f
 8001aa0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001abc:	2340      	movs	r3, #64	; 0x40
 8001abe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fb7b 	bl	80041c0 <HAL_RCC_ClockConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001ad0:	f000 fa56 	bl	8001f80 <Error_Handler>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3770      	adds	r7, #112	; 0x70
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	58024800 	.word	0x58024800
 8001ae0:	58000400 	.word	0x58000400
 8001ae4:	58024400 	.word	0x58024400

08001ae8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MX_ETH_Init+0x80>)
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <MX_ETH_Init+0x84>)
 8001af0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_ETH_Init+0x88>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_ETH_Init+0x88>)
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_ETH_Init+0x88>)
 8001b00:	22e1      	movs	r2, #225	; 0xe1
 8001b02:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_ETH_Init+0x88>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_ETH_Init+0x88>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_ETH_Init+0x88>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_ETH_Init+0x80>)
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <MX_ETH_Init+0x88>)
 8001b1a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_ETH_Init+0x80>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_ETH_Init+0x80>)
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <MX_ETH_Init+0x8c>)
 8001b26:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_ETH_Init+0x80>)
 8001b2a:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <MX_ETH_Init+0x90>)
 8001b2c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_ETH_Init+0x80>)
 8001b30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b34:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b36:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_ETH_Init+0x80>)
 8001b38:	f000 ff46 	bl	80029c8 <HAL_ETH_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001b42:	f000 fa1d 	bl	8001f80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b46:	2238      	movs	r2, #56	; 0x38
 8001b48:	2100      	movs	r1, #0
 8001b4a:	480c      	ldr	r0, [pc, #48]	; (8001b7c <MX_ETH_Init+0x94>)
 8001b4c:	f007 fc8a 	bl	8009464 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_ETH_Init+0x94>)
 8001b52:	2221      	movs	r2, #33	; 0x21
 8001b54:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_ETH_Init+0x94>)
 8001b58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b5c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_ETH_Init+0x94>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	240002c4 	.word	0x240002c4
 8001b6c:	40028000 	.word	0x40028000
 8001b70:	24000a30 	.word	0x24000a30
 8001b74:	240000dc 	.word	0x240000dc
 8001b78:	2400007c 	.word	0x2400007c
 8001b7c:	2400028c 	.word	0x2400028c

08001b80 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001b86:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <MX_SPI5_Init+0xa8>)
 8001b88:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001b8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b90:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bb0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bb4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bb8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_SPI5_Init+0xa4>)
 8001c12:	f004 f9c9 	bl	8005fa8 <HAL_SPI_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8001c1c:	f000 f9b0 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	24000374 	.word	0x24000374
 8001c28:	40015000 	.word	0x40015000

08001c2c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <MX_TIM13_Init+0x98>)
 8001c48:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 75;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c4c:	224b      	movs	r2, #75	; 0x4b
 8001c4e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 63999;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c58:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001c5c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001c6a:	4815      	ldr	r0, [pc, #84]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c6c:	f005 f941 	bl	8006ef2 <HAL_TIM_Base_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001c76:	f000 f983 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001c7a:	4811      	ldr	r0, [pc, #68]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001c7c:	f005 f990 	bl	8006fa0 <HAL_TIM_PWM_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001c86:	f000 f97b 	bl	8001f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001ca2:	f005 faed 	bl	8007280 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001cac:	f000 f968 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM13_Init+0x94>)
 8001cb2:	f000 faf3 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	240003fc 	.word	0x240003fc
 8001cc4:	40001c00 	.word	0x40001c00

08001cc8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <MX_TIM14_Init+0x98>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 75;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001ce8:	224b      	movs	r2, #75	; 0x4b
 8001cea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 63999;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001cf4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001cf8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d06:	4815      	ldr	r0, [pc, #84]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001d08:	f005 f8f3 	bl	8006ef2 <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001d12:	f000 f935 	bl	8001f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001d16:	4811      	ldr	r0, [pc, #68]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001d18:	f005 f942 	bl	8006fa0 <HAL_TIM_PWM_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001d22:	f000 f92d 	bl	8001f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d26:	2360      	movs	r3, #96	; 0x60
 8001d28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001d3e:	f005 fa9f 	bl	8007280 <HAL_TIM_PWM_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001d48:	f000 f91a 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <MX_TIM14_Init+0x94>)
 8001d4e:	f000 faa5 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	24000448 	.word	0x24000448
 8001d60:	40002000 	.word	0x40002000

08001d64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <MX_USART3_UART_Init+0x94>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dae:	f005 ff10 	bl	8007bd2 <HAL_UART_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001db8:	f000 f8e2 	bl	8001f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dc0:	f006 ff44 	bl	8008c4c <HAL_UARTEx_SetTxFifoThreshold>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001dca:	f000 f8d9 	bl	8001f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4808      	ldr	r0, [pc, #32]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dd2:	f006 ff79 	bl	8008cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ddc:	f000 f8d0 	bl	8001f80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001de2:	f006 fefa 	bl	8008bda <HAL_UARTEx_DisableFifoMode>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dec:	f000 f8c8 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	24000494 	.word	0x24000494
 8001df8:	40004800 	.word	0x40004800

08001dfc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001e04:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e08:	2209      	movs	r2, #9
 8001e0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e44:	f001 fbdc 	bl	8003600 <HAL_PCD_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001e4e:	f000 f897 	bl	8001f80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	24000524 	.word	0x24000524
 8001e5c:	40080000 	.word	0x40080000

08001e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e94:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a37      	ldr	r2, [pc, #220]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_GPIO_Init+0x118>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	21c0      	movs	r1, #192	; 0xc0
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <MX_GPIO_Init+0x11c>)
 8001f4e:	f001 fb0f 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8001f52:	23c0      	movs	r3, #192	; 0xc0
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4804      	ldr	r0, [pc, #16]	; (8001f7c <MX_GPIO_Init+0x11c>)
 8001f6a:	f001 f951 	bl	8003210 <HAL_GPIO_Init>

}
 8001f6e:	bf00      	nop
 8001f70:	3730      	adds	r7, #48	; 0x30
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58020800 	.word	0x58020800

08001f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f84:	b672      	cpsid	i
}
 8001f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <Error_Handler+0x8>
	...

08001f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_MspInit+0x30>)
 8001f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f98:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_MspInit+0x30>)
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_MspInit+0x30>)
 8001fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	58024400 	.word	0x58024400

08001fc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a59      	ldr	r2, [pc, #356]	; (8002144 <HAL_ETH_MspInit+0x184>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	f040 80ab 	bne.w	800213a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8001fe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fea:	4a57      	ldr	r2, [pc, #348]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8001fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ff4:	4b54      	ldr	r3, [pc, #336]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8001ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002002:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002008:	4a4f      	ldr	r2, [pc, #316]	; (8002148 <HAL_ETH_MspInit+0x188>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002012:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002020:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002026:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	4b42      	ldr	r3, [pc, #264]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204e:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_ETH_MspInit+0x188>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	4a39      	ldr	r2, [pc, #228]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_ETH_MspInit+0x188>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_ETH_MspInit+0x188>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002080:	4a31      	ldr	r2, [pc, #196]	; (8002148 <HAL_ETH_MspInit+0x188>)
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_ETH_MspInit+0x188>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002098:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <HAL_ETH_MspInit+0x188>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209e:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <HAL_ETH_MspInit+0x188>)
 80020a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_ETH_MspInit+0x188>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80020b6:	2332      	movs	r3, #50	; 0x32
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c6:	230b      	movs	r3, #11
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	481e      	ldr	r0, [pc, #120]	; (800214c <HAL_ETH_MspInit+0x18c>)
 80020d2:	f001 f89d 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80020d6:	2386      	movs	r3, #134	; 0x86
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e6:	230b      	movs	r3, #11
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4817      	ldr	r0, [pc, #92]	; (8002150 <HAL_ETH_MspInit+0x190>)
 80020f2:	f001 f88d 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002108:	230b      	movs	r3, #11
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4810      	ldr	r0, [pc, #64]	; (8002154 <HAL_ETH_MspInit+0x194>)
 8002114:	f001 f87c 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002118:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800212a:	230b      	movs	r3, #11
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800212e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002132:	4619      	mov	r1, r3
 8002134:	4808      	ldr	r0, [pc, #32]	; (8002158 <HAL_ETH_MspInit+0x198>)
 8002136:	f001 f86b 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3738      	adds	r7, #56	; 0x38
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40028000 	.word	0x40028000
 8002148:	58024400 	.word	0x58024400
 800214c:	58020800 	.word	0x58020800
 8002150:	58020000 	.word	0x58020000
 8002154:	58020400 	.word	0x58020400
 8002158:	58021800 	.word	0x58021800

0800215c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0b8      	sub	sp, #224	; 0xe0
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	22bc      	movs	r2, #188	; 0xbc
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f007 f971 	bl	8009464 <memset>
  if(hspi->Instance==SPI5)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a25      	ldr	r2, [pc, #148]	; (800221c <HAL_SPI_MspInit+0xc0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d143      	bne.n	8002214 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800218c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002190:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8002192:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002196:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fb9b 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80021a8:	f7ff feea 	bl	8001f80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_SPI_MspInit+0xc4>)
 80021ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_SPI_MspInit+0xc4>)
 80021b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_SPI_MspInit+0xc4>)
 80021be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_SPI_MspInit+0xc4>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	4a13      	ldr	r2, [pc, #76]	; (8002220 <HAL_SPI_MspInit+0xc4>)
 80021d2:	f043 0320 	orr.w	r3, r3, #32
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_SPI_MspInit+0xc4>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 80021e8:	f44f 6318 	mov.w	r3, #2432	; 0x980
 80021ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002202:	2305      	movs	r3, #5
 8002204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002208:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800220c:	4619      	mov	r1, r3
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_SPI_MspInit+0xc8>)
 8002210:	f000 fffe 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	37e0      	adds	r7, #224	; 0xe0
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40015000 	.word	0x40015000
 8002220:	58024400 	.word	0x58024400
 8002224:	58021400 	.word	0x58021400

08002228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_TIM_Base_MspInit+0x68>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10f      	bne.n	800225a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_TIM_Base_MspInit+0x6c>)
 800223c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_TIM_Base_MspInit+0x6c>)
 8002242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_TIM_Base_MspInit+0x6c>)
 800224c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002258:	e013      	b.n	8002282 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_TIM_Base_MspInit+0x70>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10e      	bne.n	8002282 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_TIM_Base_MspInit+0x6c>)
 8002266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_TIM_Base_MspInit+0x6c>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <HAL_TIM_Base_MspInit+0x6c>)
 8002276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40001c00 	.word	0x40001c00
 8002294:	58024400 	.word	0x58024400
 8002298:	40002000 	.word	0x40002000

0800229c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a25      	ldr	r2, [pc, #148]	; (8002350 <HAL_TIM_MspPostInit+0xb4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d11f      	bne.n	80022fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c4:	4a23      	ldr	r2, [pc, #140]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022dc:	2340      	movs	r3, #64	; 0x40
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80022ec:	2309      	movs	r3, #9
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4818      	ldr	r0, [pc, #96]	; (8002358 <HAL_TIM_MspPostInit+0xbc>)
 80022f8:	f000 ff8a 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80022fc:	e024      	b.n	8002348 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM14)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_TIM_MspPostInit+0xc0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d11f      	bne.n	8002348 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230e:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 8002310:	f043 0320 	orr.w	r3, r3, #32
 8002314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002338:	2309      	movs	r3, #9
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <HAL_TIM_MspPostInit+0xc4>)
 8002344:	f000 ff64 	bl	8003210 <HAL_GPIO_Init>
}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40001c00 	.word	0x40001c00
 8002354:	58024400 	.word	0x58024400
 8002358:	58020000 	.word	0x58020000
 800235c:	40002000 	.word	0x40002000
 8002360:	58021400 	.word	0x58021400

08002364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0b8      	sub	sp, #224	; 0xe0
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	22bc      	movs	r2, #188	; 0xbc
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f007 f86d 	bl	8009464 <memset>
  if(huart->Instance==USART3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a25      	ldr	r2, [pc, #148]	; (8002424 <HAL_UART_MspInit+0xc0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d142      	bne.n	800241a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002394:	2302      	movs	r3, #2
 8002396:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fa98 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023ae:	f7ff fde7 	bl	8001f80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_UART_MspInit+0xc4>)
 80023b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_UART_MspInit+0xc4>)
 80023ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_UART_MspInit+0xc4>)
 80023c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_UART_MspInit+0xc4>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_UART_MspInit+0xc4>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_UART_MspInit+0xc4>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002408:	2307      	movs	r3, #7
 800240a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	; (800242c <HAL_UART_MspInit+0xc8>)
 8002416:	f000 fefb 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	37e0      	adds	r7, #224	; 0xe0
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40004800 	.word	0x40004800
 8002428:	58024400 	.word	0x58024400
 800242c:	58020c00 	.word	0x58020c00

08002430 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0b8      	sub	sp, #224	; 0xe0
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	22bc      	movs	r2, #188	; 0xbc
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f007 f807 	bl	8009464 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a36      	ldr	r2, [pc, #216]	; (8002534 <HAL_PCD_MspInit+0x104>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d165      	bne.n	800252c <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002460:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002464:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800246a:	2318      	movs	r3, #24
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800246e:	2302      	movs	r3, #2
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002472:	2304      	movs	r3, #4
 8002474:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002476:	2302      	movs	r3, #2
 8002478:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800247a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800247e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fa21 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800249c:	f7ff fd70 	bl	8001f80 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80024a0:	f001 fa50 	bl	8003944 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_PCD_MspInit+0x108>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024aa:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_PCD_MspInit+0x108>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b4:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_PCD_MspInit+0x108>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80024c2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80024c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80024dc:	230a      	movs	r3, #10
 80024de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024e6:	4619      	mov	r1, r3
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <HAL_PCD_MspInit+0x10c>)
 80024ea:	f000 fe91 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <HAL_PCD_MspInit+0x10c>)
 800250a:	f000 fe81 	bl	8003210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_PCD_MspInit+0x108>)
 8002510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002514:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_PCD_MspInit+0x108>)
 8002516:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800251a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_PCD_MspInit+0x108>)
 8002520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800252c:	bf00      	nop
 800252e:	37e0      	adds	r7, #224	; 0xe0
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40080000 	.word	0x40080000
 8002538:	58024400 	.word	0x58024400
 800253c:	58020000 	.word	0x58020000

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <NMI_Handler+0x4>

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 f8d4 	bl	8002738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f006 ff16 	bl	80093f4 <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	24080000 	.word	0x24080000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	24000a38 	.word	0x24000a38
 80025fc:	24000a50 	.word	0x24000a50

08002600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002604:	f7fe f846 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800260a:	490d      	ldr	r1, [pc, #52]	; (8002640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002620:	4c0a      	ldr	r4, [pc, #40]	; (800264c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262e:	f006 fee7 	bl	8009400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002632:	f7ff f903 	bl	800183c <main>
  bx  lr
 8002636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002638:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800263c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002640:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002644:	0800a37c 	.word	0x0800a37c
  ldr r2, =_sbss
 8002648:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 800264c:	24000a50 	.word	0x24000a50

08002650 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC3_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265a:	2003      	movs	r0, #3
 800265c:	f000 f982 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002660:	f001 ff64 	bl	800452c <HAL_RCC_GetSysClockFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_Init+0x68>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	4913      	ldr	r1, [pc, #76]	; (80026c0 <HAL_Init+0x6c>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_Init+0x68>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_Init+0x6c>)
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <HAL_Init+0x70>)
 8002696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_Init+0x74>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f814 	bl	80026cc <HAL_InitTick>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e002      	b.n	80026b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026ae:	f7ff fc6d 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	58024400 	.word	0x58024400
 80026c0:	0800a290 	.word	0x0800a290
 80026c4:	24000004 	.word	0x24000004
 80026c8:	24000000 	.word	0x24000000

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_InitTick+0x60>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e021      	b.n	8002724 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_InitTick+0x64>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_InitTick+0x60>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f959 	bl	80029ae <HAL_SYSTICK_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e00e      	b.n	8002724 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d80a      	bhi.n	8002722 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f000 f931 	bl	800297a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002718:	4a06      	ldr	r2, [pc, #24]	; (8002734 <HAL_InitTick+0x68>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	24000014 	.word	0x24000014
 8002730:	24000000 	.word	0x24000000
 8002734:	24000010 	.word	0x24000010

08002738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_IncTick+0x20>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_IncTick+0x24>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_IncTick+0x24>)
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	24000014 	.word	0x24000014
 800275c:	24000a3c 	.word	0x24000a3c

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_GetTick+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	24000a3c 	.word	0x24000a3c

08002778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff ffee 	bl	8002760 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d005      	beq.n	800279e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_Delay+0x44>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800279e:	bf00      	nop
 80027a0:	f7ff ffde 	bl	8002760 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d8f7      	bhi.n	80027a0 <HAL_Delay+0x28>
  {
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	24000014 	.word	0x24000014

080027c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_GetREVID+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0c1b      	lsrs	r3, r3, #16
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	5c001000 	.word	0x5c001000

080027d8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80027e8:	4904      	ldr	r1, [pc, #16]	; (80027fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	58000400 	.word	0x58000400

08002800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <__NVIC_SetPriorityGrouping+0x40>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	4313      	orrs	r3, r2
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x40>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00
 8002844:	05fa0000 	.word	0x05fa0000

08002848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff8e 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff47 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff5e 	bl	8002848 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff90 	bl	80028b8 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff5f 	bl	8002864 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffb2 	bl	8002920 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0cf      	b.n	8002b7a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2223      	movs	r2, #35	; 0x23
 80029e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fae7 	bl	8001fc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_ETH_Init+0x1bc>)
 80029f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029f8:	4a62      	ldr	r2, [pc, #392]	; (8002b84 <HAL_ETH_Init+0x1bc>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_ETH_Init+0x1bc>)
 8002a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7a1b      	ldrb	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff fedd 	bl	80027d8 <HAL_SYSCFG_ETHInterfaceSelect>
 8002a1e:	e003      	b.n	8002a28 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a20:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a24:	f7ff fed8 	bl	80027d8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a28:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <HAL_ETH_Init+0x1c0>)
 8002a2a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a44:	f7ff fe8c 	bl	8002760 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a4a:	e011      	b.n	8002a70 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a4c:	f7ff fe88 	bl	8002760 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a5a:	d909      	bls.n	8002a70 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	22e0      	movs	r2, #224	; 0xe0
 8002a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e084      	b.n	8002b7a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e4      	bne.n	8002a4c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f886 	bl	8002b94 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002a88:	f001 feca 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a3f      	ldr	r2, [pc, #252]	; (8002b8c <HAL_ETH_Init+0x1c4>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9a      	lsrs	r2, r3, #18
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa71 	bl	8002f88 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002ab2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	22e0      	movs	r2, #224	; 0xe0
 8002ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e049      	b.n	8002b7a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_ETH_Init+0x1c8>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6952      	ldr	r2, [r2, #20]
 8002afa:	0051      	lsls	r1, r2, #1
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b06:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fad9 	bl	80030c2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fb1f 	bl	8003154 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	3305      	adds	r3, #5
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	021a      	lsls	r2, r3, #8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	3304      	adds	r3, #4
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	3303      	adds	r3, #3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	061a      	lsls	r2, r3, #24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	3302      	adds	r3, #2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b54:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b62:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2210      	movs	r2, #16
 8002b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58000400 	.word	0x58000400
 8002b8c:	431bde83 	.word	0x431bde83
 8002b90:	ffff8001 	.word	0xffff8001

08002b94 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bae:	f001 fe37 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8002bb2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d908      	bls.n	8002bce <HAL_ETH_SetMDIOClockRange+0x3a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d804      	bhi.n	8002bce <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e027      	b.n	8002c1e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d908      	bls.n	8002be8 <HAL_ETH_SetMDIOClockRange+0x54>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d204      	bcs.n	8002be8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e01a      	b.n	8002c1e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d303      	bcc.n	8002bf8 <HAL_ETH_SetMDIOClockRange+0x64>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d911      	bls.n	8002c1c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d908      	bls.n	8002c12 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d804      	bhi.n	8002c12 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e005      	b.n	8002c1e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e000      	b.n	8002c1e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c1c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	01312cff 	.word	0x01312cff
 8002c34:	02160ebf 	.word	0x02160ebf
 8002c38:	03938700 	.word	0x03938700
 8002c3c:	05f5e0ff 	.word	0x05f5e0ff
 8002c40:	08f0d17f 	.word	0x08f0d17f

08002c44 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002c56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002c5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	7b1b      	ldrb	r3, [r3, #12]
 8002c64:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	7b5b      	ldrb	r3, [r3, #13]
 8002c6c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	7b9b      	ldrb	r3, [r3, #14]
 8002c74:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	7bdb      	ldrb	r3, [r3, #15]
 8002c7c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	7c12      	ldrb	r2, [r2, #16]
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d102      	bne.n	8002c8e <ETH_SetMACConfig+0x4a>
 8002c88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c8c:	e000      	b.n	8002c90 <ETH_SetMACConfig+0x4c>
 8002c8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	7c52      	ldrb	r2, [r2, #17]
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	d102      	bne.n	8002ca0 <ETH_SetMACConfig+0x5c>
 8002c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c9e:	e000      	b.n	8002ca2 <ETH_SetMACConfig+0x5e>
 8002ca0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	7c9b      	ldrb	r3, [r3, #18]
 8002ca8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002caa:	431a      	orrs	r2, r3
               macconf->Speed |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cb0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002cb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7f1b      	ldrb	r3, [r3, #28]
 8002cbc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7f5b      	ldrb	r3, [r3, #29]
 8002cc4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	7f92      	ldrb	r2, [r2, #30]
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d102      	bne.n	8002cd6 <ETH_SetMACConfig+0x92>
 8002cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd4:	e000      	b.n	8002cd8 <ETH_SetMACConfig+0x94>
 8002cd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002cd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	7fdb      	ldrb	r3, [r3, #31]
 8002cde:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ce0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d102      	bne.n	8002cf2 <ETH_SetMACConfig+0xae>
 8002cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf0:	e000      	b.n	8002cf4 <ETH_SetMACConfig+0xb0>
 8002cf2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002cf4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d02:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d04:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <ETH_SetMACConfig+0x22c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d2e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d38:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d42:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d102      	bne.n	8002d56 <ETH_SetMACConfig+0x112>
 8002d50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d54:	e000      	b.n	8002d58 <ETH_SetMACConfig+0x114>
 8002d56:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d58:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <ETH_SetMACConfig+0x230>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <ETH_SetMACConfig+0x234>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002da0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002da6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002dae:	2a00      	cmp	r2, #0
 8002db0:	d101      	bne.n	8002db6 <ETH_SetMACConfig+0x172>
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	e000      	b.n	8002db8 <ETH_SetMACConfig+0x174>
 8002db6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002db8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002dce:	4013      	ands	r3, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002de0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002de8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f023 0103 	bic.w	r1, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e0e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e2a:	2a00      	cmp	r2, #0
 8002e2c:	d101      	bne.n	8002e32 <ETH_SetMACConfig+0x1ee>
 8002e2e:	2240      	movs	r2, #64	; 0x40
 8002e30:	e000      	b.n	8002e34 <ETH_SetMACConfig+0x1f0>
 8002e32:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e3c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e46:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e54:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	00048083 	.word	0x00048083
 8002e74:	c0f88000 	.word	0xc0f88000
 8002e78:	fffffef0 	.word	0xfffffef0

08002e7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <ETH_SetDMAConfig+0xf8>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	6811      	ldr	r1, [r2, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	791b      	ldrb	r3, [r3, #4]
 8002ea8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7b1b      	ldrb	r3, [r3, #12]
 8002eb4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <ETH_SetDMAConfig+0xfc>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ed4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7b5b      	ldrb	r3, [r3, #13]
 8002eda:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <ETH_SetDMAConfig+0x100>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	430b      	orrs	r3, r1
 8002efc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f00:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7d1b      	ldrb	r3, [r3, #20]
 8002f0c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f0e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7f5b      	ldrb	r3, [r3, #29]
 8002f14:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f22:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <ETH_SetDMAConfig+0x104>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	68f9      	ldr	r1, [r7, #12]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f36:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	7f1b      	ldrb	r3, [r3, #28]
 8002f3e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f50:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <ETH_SetDMAConfig+0x108>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f64:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	ffff87fd 	.word	0xffff87fd
 8002f78:	ffff2ffe 	.word	0xffff2ffe
 8002f7c:	fffec000 	.word	0xfffec000
 8002f80:	ffc0efef 	.word	0xffc0efef
 8002f84:	7fc0ffff 	.word	0x7fc0ffff

08002f88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b0a4      	sub	sp, #144	; 0x90
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f96:	2300      	movs	r3, #0
 8002f98:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002fe0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002fe4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003002:	2300      	movs	r3, #0
 8003004:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003006:	2300      	movs	r3, #0
 8003008:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800300a:	2300      	movs	r3, #0
 800300c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003020:	2320      	movs	r3, #32
 8003022:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003032:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800303c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003062:	2300      	movs	r3, #0
 8003064:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800306c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fde6 	bl	8002c44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003078:	2301      	movs	r3, #1
 800307a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003092:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003096:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800309c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80030a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fee1 	bl	8002e7c <ETH_SetDMAConfig>
}
 80030ba:	bf00      	nop
 80030bc:	3790      	adds	r7, #144	; 0x90
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e01d      	b.n	800310c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68d9      	ldr	r1, [r3, #12]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	3206      	adds	r2, #6
 8003102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3301      	adds	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d9de      	bls.n	80030d0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003120:	461a      	mov	r2, r3
 8003122:	2303      	movs	r3, #3
 8003124:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003134:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003144:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e023      	b.n	80031aa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6919      	ldr	r1, [r3, #16]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	3212      	adds	r2, #18
 80031a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d9d8      	bls.n	8003162 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d6:	461a      	mov	r2, r3
 80031d8:	2303      	movs	r3, #3
 80031da:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800321e:	4b89      	ldr	r3, [pc, #548]	; (8003444 <HAL_GPIO_Init+0x234>)
 8003220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003222:	e194      	b.n	800354e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8186 	beq.w	8003548 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d005      	beq.n	8003254 <HAL_GPIO_Init+0x44>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d130      	bne.n	80032b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800328a:	2201      	movs	r2, #1
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 0201 	and.w	r2, r3, #1
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d017      	beq.n	80032f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d123      	bne.n	8003346 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	08da      	lsrs	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3208      	adds	r2, #8
 8003306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	220f      	movs	r2, #15
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	69b9      	ldr	r1, [r7, #24]
 8003342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	2203      	movs	r2, #3
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0203 	and.w	r2, r3, #3
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80e0 	beq.w	8003548 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_GPIO_Init+0x238>)
 800338a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800338e:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_GPIO_Init+0x238>)
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_GPIO_Init+0x238>)
 800339a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a6:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_GPIO_Init+0x23c>)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HAL_GPIO_Init+0x240>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d052      	beq.n	8003478 <HAL_GPIO_Init+0x268>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_GPIO_Init+0x244>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d031      	beq.n	800343e <HAL_GPIO_Init+0x22e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_GPIO_Init+0x248>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02b      	beq.n	800343a <HAL_GPIO_Init+0x22a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_GPIO_Init+0x24c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d025      	beq.n	8003436 <HAL_GPIO_Init+0x226>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_GPIO_Init+0x250>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <HAL_GPIO_Init+0x222>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <HAL_GPIO_Init+0x254>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d019      	beq.n	800342e <HAL_GPIO_Init+0x21e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_GPIO_Init+0x258>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0x21a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_GPIO_Init+0x25c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x216>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <HAL_GPIO_Init+0x260>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x212>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_GPIO_Init+0x264>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x20e>
 800341a:	2309      	movs	r3, #9
 800341c:	e02d      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800341e:	230a      	movs	r3, #10
 8003420:	e02b      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003422:	2308      	movs	r3, #8
 8003424:	e029      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003426:	2307      	movs	r3, #7
 8003428:	e027      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800342a:	2306      	movs	r3, #6
 800342c:	e025      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800342e:	2305      	movs	r3, #5
 8003430:	e023      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003432:	2304      	movs	r3, #4
 8003434:	e021      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003436:	2303      	movs	r3, #3
 8003438:	e01f      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800343a:	2302      	movs	r3, #2
 800343c:	e01d      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800343e:	2301      	movs	r3, #1
 8003440:	e01b      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003442:	bf00      	nop
 8003444:	58000080 	.word	0x58000080
 8003448:	58024400 	.word	0x58024400
 800344c:	58000400 	.word	0x58000400
 8003450:	58020000 	.word	0x58020000
 8003454:	58020400 	.word	0x58020400
 8003458:	58020800 	.word	0x58020800
 800345c:	58020c00 	.word	0x58020c00
 8003460:	58021000 	.word	0x58021000
 8003464:	58021400 	.word	0x58021400
 8003468:	58021800 	.word	0x58021800
 800346c:	58021c00 	.word	0x58021c00
 8003470:	58022000 	.word	0x58022000
 8003474:	58022400 	.word	0x58022400
 8003478:	2300      	movs	r3, #0
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f002 0203 	and.w	r2, r2, #3
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	4093      	lsls	r3, r2
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348a:	4938      	ldr	r1, [pc, #224]	; (800356c <HAL_GPIO_Init+0x35c>)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	3302      	adds	r3, #2
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f ae63 	bne.w	8003224 <HAL_GPIO_Init+0x14>
  }
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	3724      	adds	r7, #36	; 0x24
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	58000400 	.word	0x58000400

08003570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
 800357c:	4613      	mov	r3, r2
 800357e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003580:	787b      	ldrb	r3, [r7, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800358c:	e003      	b.n	8003596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	619a      	str	r2, [r3, #24]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <HAL_HSEM_FastTake+0x2c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3320      	adds	r3, #32
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_HSEM_FastTake+0x30>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	58026400 	.word	0x58026400
 80035d4:	80000300 	.word	0x80000300

080035d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80035e2:	4906      	ldr	r1, [pc, #24]	; (80035fc <HAL_HSEM_Release+0x24>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	58026400 	.word	0x58026400

08003600 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003602:	b08f      	sub	sp, #60	; 0x3c
 8003604:	af0a      	add	r7, sp, #40	; 0x28
 8003606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e116      	b.n	8003840 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fe feff 	bl	8002430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fc33 	bl	8008ebc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	687e      	ldr	r6, [r7, #4]
 800365e:	466d      	mov	r5, sp
 8003660:	f106 0410 	add.w	r4, r6, #16
 8003664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003670:	e885 0003 	stmia.w	r5, {r0, r1}
 8003674:	1d33      	adds	r3, r6, #4
 8003676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003678:	6838      	ldr	r0, [r7, #0]
 800367a:	f005 fbb1 	bl	8008de0 <USB_CoreInit>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d7      	b.n	8003840 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f005 fc21 	bl	8008ede <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	e04a      	b.n	8003738 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	333d      	adds	r3, #61	; 0x3d
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	333c      	adds	r3, #60	; 0x3c
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	b298      	uxth	r0, r3
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3344      	adds	r3, #68	; 0x44
 80036de:	4602      	mov	r2, r0
 80036e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3340      	adds	r3, #64	; 0x40
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3348      	adds	r3, #72	; 0x48
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334c      	adds	r3, #76	; 0x4c
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3354      	adds	r3, #84	; 0x54
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	3301      	adds	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d3af      	bcc.n	80036a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e044      	b.n	80037d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	3301      	adds	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d3b5      	bcc.n	8003748 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	687e      	ldr	r6, [r7, #4]
 80037e4:	466d      	mov	r5, sp
 80037e6:	f106 0410 	add.w	r4, r6, #16
 80037ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fa:	1d33      	adds	r3, r6, #4
 80037fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037fe:	6838      	ldr	r0, [r7, #0]
 8003800:	f005 fbba 	bl	8008f78 <USB_DevInit>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e014      	b.n	8003840 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b01      	cmp	r3, #1
 800382c:	d102      	bne.n	8003834 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f80a 	bl	8003848 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f005 fd78 	bl	800932e <USB_DevDisconnect>

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003848 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_PCDEx_ActivateLPM+0x44>)
 8003878:	4313      	orrs	r3, r2
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	10000003 	.word	0x10000003

08003890 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003898:	4b29      	ldr	r3, [pc, #164]	; (8003940 <HAL_PWREx_ConfigSupply+0xb0>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d00a      	beq.n	80038ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038a4:	4b26      	ldr	r3, [pc, #152]	; (8003940 <HAL_PWREx_ConfigSupply+0xb0>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d001      	beq.n	80038b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e040      	b.n	8003938 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e03e      	b.n	8003938 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <HAL_PWREx_ConfigSupply+0xb0>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80038c2:	491f      	ldr	r1, [pc, #124]	; (8003940 <HAL_PWREx_ConfigSupply+0xb0>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038ca:	f7fe ff49 	bl	8002760 <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038d0:	e009      	b.n	80038e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038d2:	f7fe ff45 	bl	8002760 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e0:	d901      	bls.n	80038e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e028      	b.n	8003938 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_PWREx_ConfigSupply+0xb0>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f2:	d1ee      	bne.n	80038d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b1e      	cmp	r3, #30
 80038f8:	d008      	beq.n	800390c <HAL_PWREx_ConfigSupply+0x7c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b2e      	cmp	r3, #46	; 0x2e
 80038fe:	d005      	beq.n	800390c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b1d      	cmp	r3, #29
 8003904:	d002      	beq.n	800390c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b2d      	cmp	r3, #45	; 0x2d
 800390a:	d114      	bne.n	8003936 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800390c:	f7fe ff28 	bl	8002760 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003912:	e009      	b.n	8003928 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003914:	f7fe ff24 	bl	8002760 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003922:	d901      	bls.n	8003928 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_PWREx_ConfigSupply+0xb0>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d1ee      	bne.n	8003914 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58024800 	.word	0x58024800

08003944 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	60d3      	str	r3, [r2, #12]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	58024800 	.word	0x58024800

08003964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	; 0x30
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f000 bc1d 	b.w	80041b2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8087 	beq.w	8003a94 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003986:	4b99      	ldr	r3, [pc, #612]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003990:	4b96      	ldr	r3, [pc, #600]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	2b10      	cmp	r3, #16
 800399a:	d007      	beq.n	80039ac <HAL_RCC_OscConfig+0x48>
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	2b18      	cmp	r3, #24
 80039a0:	d110      	bne.n	80039c4 <HAL_RCC_OscConfig+0x60>
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b8f      	ldr	r3, [pc, #572]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d06c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x12e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d168      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e3f6      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x78>
 80039ce:	4b87      	ldr	r3, [pc, #540]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a86      	ldr	r2, [pc, #536]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e02e      	b.n	8003a3a <HAL_RCC_OscConfig+0xd6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x9a>
 80039e4:	4b81      	ldr	r3, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a80      	ldr	r2, [pc, #512]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b7e      	ldr	r3, [pc, #504]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a7d      	ldr	r2, [pc, #500]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e01d      	b.n	8003a3a <HAL_RCC_OscConfig+0xd6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCC_OscConfig+0xbe>
 8003a08:	4b78      	ldr	r3, [pc, #480]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a77      	ldr	r2, [pc, #476]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b75      	ldr	r3, [pc, #468]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a74      	ldr	r2, [pc, #464]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	e00b      	b.n	8003a3a <HAL_RCC_OscConfig+0xd6>
 8003a22:	4b72      	ldr	r3, [pc, #456]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a71      	ldr	r2, [pc, #452]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6e      	ldr	r2, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d013      	beq.n	8003a6a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe fe8d 	bl	8002760 <HAL_GetTick>
 8003a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4a:	f7fe fe89 	bl	8002760 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	; 0x64
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e3aa      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a5c:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0xe6>
 8003a68:	e014      	b.n	8003a94 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fe79 	bl	8002760 <HAL_GetTick>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a72:	f7fe fe75 	bl	8002760 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	; 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e396      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x10e>
 8003a90:	e000      	b.n	8003a94 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80cb 	beq.w	8003c38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa2:	4b52      	ldr	r3, [pc, #328]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aaa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x164>
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	2b18      	cmp	r3, #24
 8003abc:	d156      	bne.n	8003b6c <HAL_RCC_OscConfig+0x208>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d151      	bne.n	8003b6c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	4b48      	ldr	r3, [pc, #288]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x17c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e368      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 0219 	bic.w	r2, r3, #25
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	493f      	ldr	r1, [pc, #252]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003af2:	f7fe fe35 	bl	8002760 <HAL_GetTick>
 8003af6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fe fe31 	bl	8002760 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e352      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	f7fe fe52 	bl	80027c0 <HAL_GetREVID>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d817      	bhi.n	8003b56 <HAL_RCC_OscConfig+0x1f2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d108      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1dc>
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3e:	e07b      	b.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	031b      	lsls	r3, r3, #12
 8003b4e:	4927      	ldr	r1, [pc, #156]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b54:	e070      	b.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	061b      	lsls	r3, r3, #24
 8003b64:	4921      	ldr	r1, [pc, #132]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6a:	e065      	b.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d048      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 0219 	bic.w	r2, r3, #25
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	491a      	ldr	r1, [pc, #104]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe fdeb 	bl	8002760 <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe fde7 	bl	8002760 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e308      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	f7fe fe08 	bl	80027c0 <HAL_GetREVID>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d81a      	bhi.n	8003bf0 <HAL_RCC_OscConfig+0x28c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d108      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x270>
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd0:	6053      	str	r3, [r2, #4]
 8003bd2:	e031      	b.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	4902      	ldr	r1, [pc, #8]	; (8003bec <HAL_RCC_OscConfig+0x288>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	e026      	b.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
 8003bea:	bf00      	nop
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	4b9a      	ldr	r3, [pc, #616]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	4997      	ldr	r1, [pc, #604]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
 8003c04:	e018      	b.n	8003c38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c06:	4b95      	ldr	r3, [pc, #596]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a94      	ldr	r2, [pc, #592]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fe fda5 	bl	8002760 <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fe fda1 	bl	8002760 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e2c2      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c2c:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a9 	beq.w	8003d98 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c46:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c50:	4b82      	ldr	r3, [pc, #520]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d007      	beq.n	8003c6c <HAL_RCC_OscConfig+0x308>
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b18      	cmp	r3, #24
 8003c60:	d13a      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x374>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d135      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c6c:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_OscConfig+0x320>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e296      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c84:	f7fe fd9c 	bl	80027c0 <HAL_GetREVID>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d817      	bhi.n	8003cc2 <HAL_RCC_OscConfig+0x35e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d108      	bne.n	8003cac <HAL_RCC_OscConfig+0x348>
 8003c9a:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ca2:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ca8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003caa:	e075      	b.n	8003d98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cac:	4b6b      	ldr	r3, [pc, #428]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	069b      	lsls	r3, r3, #26
 8003cba:	4968      	ldr	r1, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cc0:	e06a      	b.n	8003d98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cc2:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	4962      	ldr	r1, [pc, #392]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cd6:	e05f      	b.n	8003d98 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d042      	beq.n	8003d66 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ce0:	4b5e      	ldr	r3, [pc, #376]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a5d      	ldr	r2, [pc, #372]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fd38 	bl	8002760 <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fd34 	bl	8002760 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e255      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d06:	4b55      	ldr	r3, [pc, #340]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d12:	f7fe fd55 	bl	80027c0 <HAL_GetREVID>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d817      	bhi.n	8003d50 <HAL_RCC_OscConfig+0x3ec>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d108      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3d6>
 8003d28:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d30:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d36:	6053      	str	r3, [r2, #4]
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0x434>
 8003d3a:	4b48      	ldr	r3, [pc, #288]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	069b      	lsls	r3, r3, #26
 8003d48:	4944      	ldr	r1, [pc, #272]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
 8003d4e:	e023      	b.n	8003d98 <HAL_RCC_OscConfig+0x434>
 8003d50:	4b42      	ldr	r3, [pc, #264]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	493f      	ldr	r1, [pc, #252]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
 8003d64:	e018      	b.n	8003d98 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3c      	ldr	r2, [pc, #240]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe fcf5 	bl	8002760 <HAL_GetTick>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d7a:	f7fe fcf1 	bl	8002760 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e212      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d8c:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d036      	beq.n	8003e12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d019      	beq.n	8003de0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dac:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fe fcd2 	bl	8002760 <HAL_GetTick>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fe fcce 	bl	8002760 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1ef      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x45c>
 8003dde:	e018      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fe fcb8 	bl	8002760 <HAL_GetTick>
 8003df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe fcb4 	bl	8002760 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1d5      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d039      	beq.n	8003e92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e32:	f7fe fc95 	bl	8002760 <HAL_GetTick>
 8003e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e3a:	f7fe fc91 	bl	8002760 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1b2      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x4d6>
 8003e58:	e01b      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
 8003e5a:	bf00      	nop
 8003e5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e60:	4b9b      	ldr	r3, [pc, #620]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a9a      	ldr	r2, [pc, #616]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e6c:	f7fe fc78 	bl	8002760 <HAL_GetTick>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e74:	f7fe fc74 	bl	8002760 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e195      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e86:	4b92      	ldr	r3, [pc, #584]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8081 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ea0:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <HAL_RCC_OscConfig+0x770>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a8b      	ldr	r2, [pc, #556]	; (80040d4 <HAL_RCC_OscConfig+0x770>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eac:	f7fe fc58 	bl	8002760 <HAL_GetTick>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eb4:	f7fe fc54 	bl	8002760 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e175      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec6:	4b83      	ldr	r3, [pc, #524]	; (80040d4 <HAL_RCC_OscConfig+0x770>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d106      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x584>
 8003eda:	4b7d      	ldr	r3, [pc, #500]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a7c      	ldr	r2, [pc, #496]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	e02d      	b.n	8003f44 <HAL_RCC_OscConfig+0x5e0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10c      	bne.n	8003f0a <HAL_RCC_OscConfig+0x5a6>
 8003ef0:	4b77      	ldr	r3, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a76      	ldr	r2, [pc, #472]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
 8003efc:	4b74      	ldr	r3, [pc, #464]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	4a73      	ldr	r2, [pc, #460]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f02:	f023 0304 	bic.w	r3, r3, #4
 8003f06:	6713      	str	r3, [r2, #112]	; 0x70
 8003f08:	e01c      	b.n	8003f44 <HAL_RCC_OscConfig+0x5e0>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b05      	cmp	r3, #5
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5c8>
 8003f12:	4b6f      	ldr	r3, [pc, #444]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a6e      	ldr	r2, [pc, #440]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f18:	f043 0304 	orr.w	r3, r3, #4
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1e:	4b6c      	ldr	r3, [pc, #432]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a6b      	ldr	r2, [pc, #428]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCC_OscConfig+0x5e0>
 8003f2c:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
 8003f38:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a64      	ldr	r2, [pc, #400]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f3e:	f023 0304 	bic.w	r3, r3, #4
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fc08 	bl	8002760 <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f54:	f7fe fc04 	bl	8002760 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e123      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6a:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ee      	beq.n	8003f54 <HAL_RCC_OscConfig+0x5f0>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fbf2 	bl	8002760 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fbee 	bl	8002760 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e10d      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f96:	4b4e      	ldr	r3, [pc, #312]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1ee      	bne.n	8003f80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8102 	beq.w	80041b0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fac:	4b48      	ldr	r3, [pc, #288]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb4:	2b18      	cmp	r3, #24
 8003fb6:	f000 80bd 	beq.w	8004134 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	f040 809e 	bne.w	8004100 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc4:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a41      	ldr	r2, [pc, #260]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fbc6 	bl	8002760 <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fe fbc2 	bl	8002760 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0e3      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_OscConfig+0x774>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004006:	0112      	lsls	r2, r2, #4
 8004008:	430a      	orrs	r2, r1
 800400a:	4931      	ldr	r1, [pc, #196]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	628b      	str	r3, [r1, #40]	; 0x28
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	3b01      	subs	r3, #1
 8004016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	3b01      	subs	r3, #1
 8004020:	025b      	lsls	r3, r3, #9
 8004022:	b29b      	uxth	r3, r3
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	3b01      	subs	r3, #1
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	3b01      	subs	r3, #1
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004040:	4923      	ldr	r1, [pc, #140]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004052:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004056:	4b21      	ldr	r3, [pc, #132]	; (80040dc <HAL_RCC_OscConfig+0x778>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800405e:	00d2      	lsls	r2, r2, #3
 8004060:	491b      	ldr	r1, [pc, #108]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	f023 020c 	bic.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4917      	ldr	r1, [pc, #92]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004074:	4313      	orrs	r3, r2
 8004076:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004078:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	f023 0202 	bic.w	r2, r3, #2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	4912      	ldr	r1, [pc, #72]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <HAL_RCC_OscConfig+0x76c>)
 80040c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fe fb4b 	bl	8002760 <HAL_GetTick>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040cc:	e011      	b.n	80040f2 <HAL_RCC_OscConfig+0x78e>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
 80040d4:	58024800 	.word	0x58024800
 80040d8:	fffffc0c 	.word	0xfffffc0c
 80040dc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fe fb3e 	bl	8002760 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e05f      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f2:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_RCC_OscConfig+0x858>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x77c>
 80040fe:	e057      	b.n	80041b0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004100:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <HAL_RCC_OscConfig+0x858>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <HAL_RCC_OscConfig+0x858>)
 8004106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fe fb28 	bl	8002760 <HAL_GetTick>
 8004110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7fe fb24 	bl	8002760 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e045      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_RCC_OscConfig+0x858>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x7b0>
 8004132:	e03d      	b.n	80041b0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <HAL_RCC_OscConfig+0x858>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCC_OscConfig+0x858>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b01      	cmp	r3, #1
 8004146:	d031      	beq.n	80041ac <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d12a      	bne.n	80041ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d122      	bne.n	80041ac <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d11a      	bne.n	80041ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	0a5b      	lsrs	r3, r3, #9
 800417a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d111      	bne.n	80041ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d108      	bne.n	80041ac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	0e1b      	lsrs	r3, r3, #24
 800419e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3730      	adds	r7, #48	; 0x30
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	58024400 	.word	0x58024400

080041c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e19c      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b8a      	ldr	r3, [pc, #552]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d910      	bls.n	8004204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b87      	ldr	r3, [pc, #540]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 020f 	bic.w	r2, r3, #15
 80041ea:	4985      	ldr	r1, [pc, #532]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b83      	ldr	r3, [pc, #524]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e184      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d010      	beq.n	8004232 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	4b7b      	ldr	r3, [pc, #492]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800421c:	429a      	cmp	r2, r3
 800421e:	d908      	bls.n	8004232 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004220:	4b78      	ldr	r3, [pc, #480]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	4975      	ldr	r1, [pc, #468]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 800422e:	4313      	orrs	r3, r2
 8004230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d010      	beq.n	8004260 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	4b70      	ldr	r3, [pc, #448]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800424a:	429a      	cmp	r2, r3
 800424c:	d908      	bls.n	8004260 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800424e:	4b6d      	ldr	r3, [pc, #436]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	496a      	ldr	r1, [pc, #424]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 800425c:	4313      	orrs	r3, r2
 800425e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d010      	beq.n	800428e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	4b64      	ldr	r3, [pc, #400]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004278:	429a      	cmp	r2, r3
 800427a:	d908      	bls.n	800428e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800427c:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	495e      	ldr	r1, [pc, #376]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 800428a:	4313      	orrs	r3, r2
 800428c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d010      	beq.n	80042bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	4b59      	ldr	r3, [pc, #356]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d908      	bls.n	80042bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042aa:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	4953      	ldr	r1, [pc, #332]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d908      	bls.n	80042ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f023 020f 	bic.w	r2, r3, #15
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4947      	ldr	r1, [pc, #284]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d055      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042f6:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4940      	ldr	r1, [pc, #256]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004304:	4313      	orrs	r3, r2
 8004306:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004310:	4b3c      	ldr	r3, [pc, #240]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d121      	bne.n	8004360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0f6      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d107      	bne.n	8004338 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004328:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d115      	bne.n	8004360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0ea      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d107      	bne.n	8004350 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004340:	4b30      	ldr	r3, [pc, #192]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0de      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004350:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0d6      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f023 0207 	bic.w	r2, r3, #7
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4925      	ldr	r1, [pc, #148]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fe f9f5 	bl	8002760 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004378:	e00a      	b.n	8004390 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437a:	f7fe f9f1 	bl	8002760 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	; 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0be      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004390:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	429a      	cmp	r2, r3
 80043a0:	d1eb      	bne.n	800437a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d208      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043be:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f023 020f 	bic.w	r2, r3, #15
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	490e      	ldr	r1, [pc, #56]	; (8004404 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d214      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 020f 	bic.w	r2, r3, #15
 80043e6:	4906      	ldr	r1, [pc, #24]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCC_ClockConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e086      	b.n	800450e <HAL_RCC_ClockConfig+0x34e>
 8004400:	52002000 	.word	0x52002000
 8004404:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d010      	beq.n	8004436 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004420:	429a      	cmp	r2, r3
 8004422:	d208      	bcs.n	8004436 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004424:	4b3c      	ldr	r3, [pc, #240]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	4939      	ldr	r1, [pc, #228]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 8004432:	4313      	orrs	r3, r2
 8004434:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d010      	beq.n	8004464 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	4b34      	ldr	r3, [pc, #208]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800444e:	429a      	cmp	r2, r3
 8004450:	d208      	bcs.n	8004464 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	492e      	ldr	r1, [pc, #184]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 8004460:	4313      	orrs	r3, r2
 8004462:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d010      	beq.n	8004492 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	4b28      	ldr	r3, [pc, #160]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800447c:	429a      	cmp	r2, r3
 800447e:	d208      	bcs.n	8004492 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	4922      	ldr	r1, [pc, #136]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 800448e:	4313      	orrs	r3, r2
 8004490:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d010      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d208      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4917      	ldr	r1, [pc, #92]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044c0:	f000 f834 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b14      	ldr	r3, [pc, #80]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	4912      	ldr	r1, [pc, #72]	; (800451c <HAL_RCC_ClockConfig+0x35c>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <HAL_RCC_ClockConfig+0x358>)
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	4a0d      	ldr	r2, [pc, #52]	; (800451c <HAL_RCC_ClockConfig+0x35c>)
 80044e8:	5cd3      	ldrb	r3, [r2, r3]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <HAL_RCC_ClockConfig+0x360>)
 80044f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044f8:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x364>)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_RCC_ClockConfig+0x368>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe f8e2 	bl	80026cc <HAL_InitTick>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	58024400 	.word	0x58024400
 800451c:	0800a290 	.word	0x0800a290
 8004520:	24000004 	.word	0x24000004
 8004524:	24000000 	.word	0x24000000
 8004528:	24000010 	.word	0x24000010

0800452c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004532:	4bb3      	ldr	r3, [pc, #716]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800453a:	2b18      	cmp	r3, #24
 800453c:	f200 8155 	bhi.w	80047ea <HAL_RCC_GetSysClockFreq+0x2be>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	080045ad 	.word	0x080045ad
 800454c:	080047eb 	.word	0x080047eb
 8004550:	080047eb 	.word	0x080047eb
 8004554:	080047eb 	.word	0x080047eb
 8004558:	080047eb 	.word	0x080047eb
 800455c:	080047eb 	.word	0x080047eb
 8004560:	080047eb 	.word	0x080047eb
 8004564:	080047eb 	.word	0x080047eb
 8004568:	080045d3 	.word	0x080045d3
 800456c:	080047eb 	.word	0x080047eb
 8004570:	080047eb 	.word	0x080047eb
 8004574:	080047eb 	.word	0x080047eb
 8004578:	080047eb 	.word	0x080047eb
 800457c:	080047eb 	.word	0x080047eb
 8004580:	080047eb 	.word	0x080047eb
 8004584:	080047eb 	.word	0x080047eb
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080047eb 	.word	0x080047eb
 8004590:	080047eb 	.word	0x080047eb
 8004594:	080047eb 	.word	0x080047eb
 8004598:	080047eb 	.word	0x080047eb
 800459c:	080047eb 	.word	0x080047eb
 80045a0:	080047eb 	.word	0x080047eb
 80045a4:	080047eb 	.word	0x080047eb
 80045a8:	080045df 	.word	0x080045df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ac:	4b94      	ldr	r3, [pc, #592]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045b8:	4b91      	ldr	r3, [pc, #580]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	08db      	lsrs	r3, r3, #3
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	4a90      	ldr	r2, [pc, #576]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
 80045c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80045ca:	e111      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045cc:	4b8d      	ldr	r3, [pc, #564]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ce:	61bb      	str	r3, [r7, #24]
    break;
 80045d0:	e10e      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80045d2:	4b8d      	ldr	r3, [pc, #564]	; (8004808 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045d4:	61bb      	str	r3, [r7, #24]
    break;
 80045d6:	e10b      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80045d8:	4b8c      	ldr	r3, [pc, #560]	; (800480c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045da:	61bb      	str	r3, [r7, #24]
    break;
 80045dc:	e108      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045de:	4b88      	ldr	r3, [pc, #544]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045e8:	4b85      	ldr	r3, [pc, #532]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045f4:	4b82      	ldr	r3, [pc, #520]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80045fe:	4b80      	ldr	r3, [pc, #512]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	08db      	lsrs	r3, r3, #3
 8004604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80e1 	beq.w	80047e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b02      	cmp	r3, #2
 8004626:	f000 8083 	beq.w	8004730 <HAL_RCC_GetSysClockFreq+0x204>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b02      	cmp	r3, #2
 800462e:	f200 80a1 	bhi.w	8004774 <HAL_RCC_GetSysClockFreq+0x248>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x114>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d056      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800463e:	e099      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004640:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02d      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800464c:	4b6c      	ldr	r3, [pc, #432]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	4a6b      	ldr	r2, [pc, #428]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b62      	ldr	r3, [pc, #392]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a02 	vldr	s12, [r7, #8]
 800468a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80046a6:	e087      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004814 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b51      	ldr	r3, [pc, #324]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004810 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ea:	e065      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004818 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fe:	4b40      	ldr	r3, [pc, #256]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004712:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004810 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472e:	e043      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800481c <HAL_RCC_GetSysClockFreq+0x2f0>
 800473e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004742:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004752:	ed97 6a02 	vldr	s12, [r7, #8]
 8004756:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800475a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004772:	e021      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004818 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004796:	ed97 6a02 	vldr	s12, [r7, #8]
 800479a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004810 <HAL_RCC_GetSysClockFreq+0x2e4>
 800479e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	0a5b      	lsrs	r3, r3, #9
 80047be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c2:	3301      	adds	r3, #1
 80047c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047dc:	ee17 3a90 	vmov	r3, s15
 80047e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80047e2:	e005      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61bb      	str	r3, [r7, #24]
    break;
 80047e8:	e002      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047ec:	61bb      	str	r3, [r7, #24]
    break;
 80047ee:	bf00      	nop
  }

  return sysclockfreq;
 80047f0:	69bb      	ldr	r3, [r7, #24]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	; 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	58024400 	.word	0x58024400
 8004804:	03d09000 	.word	0x03d09000
 8004808:	003d0900 	.word	0x003d0900
 800480c:	007a1200 	.word	0x007a1200
 8004810:	46000000 	.word	0x46000000
 8004814:	4c742400 	.word	0x4c742400
 8004818:	4a742400 	.word	0x4a742400
 800481c:	4af42400 	.word	0x4af42400

08004820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004826:	f7ff fe81 	bl	800452c <HAL_RCC_GetSysClockFreq>
 800482a:	4602      	mov	r2, r0
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <HAL_RCC_GetHCLKFreq+0x50>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	490f      	ldr	r1, [pc, #60]	; (8004874 <HAL_RCC_GetHCLKFreq+0x54>)
 8004838:	5ccb      	ldrb	r3, [r1, r3]
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	fa22 f303 	lsr.w	r3, r2, r3
 8004842:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_RCC_GetHCLKFreq+0x50>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	4a09      	ldr	r2, [pc, #36]	; (8004874 <HAL_RCC_GetHCLKFreq+0x54>)
 800484e:	5cd3      	ldrb	r3, [r2, r3]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <HAL_RCC_GetHCLKFreq+0x58>)
 800485c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_RCC_GetHCLKFreq+0x58>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	58024400 	.word	0x58024400
 8004874:	0800a290 	.word	0x0800a290
 8004878:	24000004 	.word	0x24000004
 800487c:	24000000 	.word	0x24000000

08004880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004884:	f7ff ffcc 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4904      	ldr	r1, [pc, #16]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	58024400 	.word	0x58024400
 80048a8:	0800a290 	.word	0x0800a290

080048ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048b0:	f7ff ffb6 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	4904      	ldr	r1, [pc, #16]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c2:	5ccb      	ldrb	r3, [r1, r3]
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	58024400 	.word	0x58024400
 80048d4:	0800a290 	.word	0x0800a290

080048d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048e0:	2300      	movs	r3, #0
 80048e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048e4:	2300      	movs	r3, #0
 80048e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d03f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048fc:	d02a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004902:	d824      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004908:	d018      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800490a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800490e:	d81e      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004918:	d007      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800491a:	e018      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491c:	4ba3      	ldr	r3, [pc, #652]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	4aa2      	ldr	r2, [pc, #648]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004928:	e015      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3304      	adds	r3, #4
 800492e:	2102      	movs	r1, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f001 f9d5 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800493a:	e00c      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3324      	adds	r3, #36	; 0x24
 8004940:	2102      	movs	r1, #2
 8004942:	4618      	mov	r0, r3
 8004944:	f001 fa7e 	bl	8005e44 <RCCEx_PLL3_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800494c:	e003      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
      break;
 8004952:	e000      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800495c:	4b93      	ldr	r3, [pc, #588]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800495e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004968:	4990      	ldr	r1, [pc, #576]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	650b      	str	r3, [r1, #80]	; 0x50
 800496e:	e001      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d03d      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	2b04      	cmp	r3, #4
 8004986:	d826      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	080049a5 	.word	0x080049a5
 8004994:	080049b3 	.word	0x080049b3
 8004998:	080049c5 	.word	0x080049c5
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049dd 	.word	0x080049dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a4:	4b81      	ldr	r3, [pc, #516]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	4a80      	ldr	r2, [pc, #512]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049b0:	e015      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 f991 	bl	8005ce0 <RCCEx_PLL2_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049c2:	e00c      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fa3a 	bl	8005e44 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
      break;
 80049da:	e000      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80049dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e4:	4b71      	ldr	r3, [pc, #452]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f023 0207 	bic.w	r2, r3, #7
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	496e      	ldr	r1, [pc, #440]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	650b      	str	r3, [r1, #80]	; 0x50
 80049f6:	e001      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d042      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a10:	d02b      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d825      	bhi.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a18:	2bc0      	cmp	r3, #192	; 0xc0
 8004a1a:	d028      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8004a1e:	d821      	bhi.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a20:	2b80      	cmp	r3, #128	; 0x80
 8004a22:	d016      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d81d      	bhi.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d007      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a30:	e018      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a32:	4b5e      	ldr	r3, [pc, #376]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4a5d      	ldr	r2, [pc, #372]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a3e:	e017      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3304      	adds	r3, #4
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 f94a 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a50:	e00e      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3324      	adds	r3, #36	; 0x24
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 f9f3 	bl	8005e44 <RCCEx_PLL3_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a62:	e005      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
      break;
 8004a68:	e002      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a76:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a82:	494a      	ldr	r1, [pc, #296]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	650b      	str	r3, [r1, #80]	; 0x50
 8004a88:	e001      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d049      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa4:	d030      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aaa:	d82a      	bhi.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004aac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ab0:	d02c      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004ab2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ab6:	d824      	bhi.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abc:	d018      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac2:	d81e      	bhi.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004acc:	d007      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004ace:	e018      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	4b36      	ldr	r3, [pc, #216]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a35      	ldr	r2, [pc, #212]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004adc:	e017      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 f8fb 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004aee:	e00e      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3324      	adds	r3, #36	; 0x24
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f9a4 	bl	8005e44 <RCCEx_PLL3_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b00:	e005      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75fb      	strb	r3, [r7, #23]
      break;
 8004b06:	e002      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b08:	bf00      	nop
 8004b0a:	e000      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b22:	4922      	ldr	r1, [pc, #136]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	658b      	str	r3, [r1, #88]	; 0x58
 8004b28:	e001      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d04b      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b44:	d030      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b4a:	d82a      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b50:	d02e      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b56:	d824      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b5c:	d018      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b62:	d81e      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b6c:	d007      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b6e:	e018      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b70:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b7c:	e019      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3304      	adds	r3, #4
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f8ab 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b8e:	e010      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3324      	adds	r3, #36	; 0x24
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 f954 	bl	8005e44 <RCCEx_PLL3_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ba0:	e007      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba6:	e004      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004ba8:	bf00      	nop
 8004baa:	e002      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004bac:	58024400 	.word	0x58024400
      break;
 8004bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bb8:	4b99      	ldr	r3, [pc, #612]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bc6:	4996      	ldr	r1, [pc, #600]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	658b      	str	r3, [r1, #88]	; 0x58
 8004bcc:	e001      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d032      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be2:	2b30      	cmp	r3, #48	; 0x30
 8004be4:	d01c      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004be6:	2b30      	cmp	r3, #48	; 0x30
 8004be8:	d817      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d00c      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	d813      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d10f      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfa:	4b89      	ldr	r3, [pc, #548]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4a88      	ldr	r2, [pc, #544]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c06:	e00e      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 f866 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c18:	e005      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c2c:	4b7c      	ldr	r3, [pc, #496]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	4979      	ldr	r1, [pc, #484]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c3e:	e001      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d047      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c58:	d030      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5e:	d82a      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c64:	d02c      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c6a:	d824      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d018      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d81e      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c80:	d007      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004c82:	e018      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c84:	4b66      	ldr	r3, [pc, #408]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a65      	ldr	r2, [pc, #404]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c90:	e017      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 f821 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e00e      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 f8ca 	bl	8005e44 <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cb4:	e005      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004cc8:	4b55      	ldr	r3, [pc, #340]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd4:	4952      	ldr	r1, [pc, #328]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	650b      	str	r3, [r1, #80]	; 0x50
 8004cda:	e001      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d049      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf4:	d02e      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004cf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cfa:	d828      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d00:	d02a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d06:	d822      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d0c:	d026      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004d0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d12:	d81c      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d18:	d010      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d1e:	d816      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01d      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d28:	d111      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 ffd5 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d3a:	e012      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3324      	adds	r3, #36	; 0x24
 8004d40:	2101      	movs	r1, #1
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 f87e 	bl	8005e44 <RCCEx_PLL3_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d4c:	e009      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
      break;
 8004d52:	e006      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d54:	bf00      	nop
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d68:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d74:	492a      	ldr	r1, [pc, #168]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	650b      	str	r3, [r1, #80]	; 0x50
 8004d7a:	e001      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d04d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d96:	d02e      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d9c:	d828      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d02a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d822      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dae:	d026      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004db4:	d81c      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dba:	d010      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc0:	d816      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01d      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dca:	d111      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 ff84 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ddc:	e012      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3324      	adds	r3, #36	; 0x24
 8004de2:	2101      	movs	r1, #1
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f82d 	bl	8005e44 <RCCEx_PLL3_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dee:	e009      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
      break;
 8004df4:	e006      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004df6:	bf00      	nop
 8004df8:	e004      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e002      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e18:	4901      	ldr	r1, [pc, #4]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e1e:	e003      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d02f      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3c:	d00e      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e42:	d814      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e4c:	d10f      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4e:	4baf      	ldr	r3, [pc, #700]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	4aae      	ldr	r2, [pc, #696]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e5a:	e00c      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 ff3c 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e6c:	e003      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
      break;
 8004e72:	e000      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e7c:	4ba3      	ldr	r3, [pc, #652]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e88:	49a0      	ldr	r1, [pc, #640]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8004e8e:	e001      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d032      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d81b      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee7 	.word	0x08004ee7
 8004eb4:	08004ec1 	.word	0x08004ec1
 8004eb8:	08004ecf 	.word	0x08004ecf
 8004ebc:	08004ee7 	.word	0x08004ee7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec0:	4b92      	ldr	r3, [pc, #584]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	4a91      	ldr	r2, [pc, #580]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ecc:	e00c      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 ff03 	bl	8005ce0 <RCCEx_PLL2_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ede:	e003      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004eee:	4b87      	ldr	r3, [pc, #540]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	4984      	ldr	r1, [pc, #528]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f00:	e001      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8086 	beq.w	8005020 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f14:	4b7e      	ldr	r3, [pc, #504]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a7d      	ldr	r2, [pc, #500]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f20:	f7fd fc1e 	bl	8002760 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f26:	e009      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f28:	f7fd fc1a 	bl	8002760 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d902      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	75fb      	strb	r3, [r7, #23]
        break;
 8004f3a:	e005      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f3c:	4b74      	ldr	r3, [pc, #464]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ef      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d166      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f4e:	4b6f      	ldr	r3, [pc, #444]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f58:	4053      	eors	r3, r2
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d013      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f62:	4b6a      	ldr	r3, [pc, #424]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f6c:	4b67      	ldr	r3, [pc, #412]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a66      	ldr	r2, [pc, #408]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f78:	4b64      	ldr	r3, [pc, #400]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	4a63      	ldr	r2, [pc, #396]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f84:	4a61      	ldr	r2, [pc, #388]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	d115      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fd fbe3 	bl	8002760 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f9c:	e00b      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fd fbdf 	bl	8002760 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d902      	bls.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fb4:	e005      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fb6:	4b55      	ldr	r3, [pc, #340]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0ed      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d126      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004fd8:	4b4c      	ldr	r3, [pc, #304]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fe6:	0919      	lsrs	r1, r3, #4
 8004fe8:	4b4a      	ldr	r3, [pc, #296]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	4947      	ldr	r1, [pc, #284]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	610b      	str	r3, [r1, #16]
 8004ff2:	e005      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004ff4:	4b45      	ldr	r3, [pc, #276]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	4a44      	ldr	r2, [pc, #272]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ffa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ffe:	6113      	str	r3, [r2, #16]
 8005000:	4b42      	ldr	r3, [pc, #264]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800500a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500e:	493f      	ldr	r1, [pc, #252]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005010:	4313      	orrs	r3, r2
 8005012:	670b      	str	r3, [r1, #112]	; 0x70
 8005014:	e004      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	75bb      	strb	r3, [r7, #22]
 800501a:	e001      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
 800501e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8085 	beq.w	8005138 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005032:	2b28      	cmp	r3, #40	; 0x28
 8005034:	d866      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005119 	.word	0x08005119
 8005040:	08005105 	.word	0x08005105
 8005044:	08005105 	.word	0x08005105
 8005048:	08005105 	.word	0x08005105
 800504c:	08005105 	.word	0x08005105
 8005050:	08005105 	.word	0x08005105
 8005054:	08005105 	.word	0x08005105
 8005058:	08005105 	.word	0x08005105
 800505c:	080050e1 	.word	0x080050e1
 8005060:	08005105 	.word	0x08005105
 8005064:	08005105 	.word	0x08005105
 8005068:	08005105 	.word	0x08005105
 800506c:	08005105 	.word	0x08005105
 8005070:	08005105 	.word	0x08005105
 8005074:	08005105 	.word	0x08005105
 8005078:	08005105 	.word	0x08005105
 800507c:	080050f3 	.word	0x080050f3
 8005080:	08005105 	.word	0x08005105
 8005084:	08005105 	.word	0x08005105
 8005088:	08005105 	.word	0x08005105
 800508c:	08005105 	.word	0x08005105
 8005090:	08005105 	.word	0x08005105
 8005094:	08005105 	.word	0x08005105
 8005098:	08005105 	.word	0x08005105
 800509c:	08005119 	.word	0x08005119
 80050a0:	08005105 	.word	0x08005105
 80050a4:	08005105 	.word	0x08005105
 80050a8:	08005105 	.word	0x08005105
 80050ac:	08005105 	.word	0x08005105
 80050b0:	08005105 	.word	0x08005105
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005105 	.word	0x08005105
 80050bc:	08005119 	.word	0x08005119
 80050c0:	08005105 	.word	0x08005105
 80050c4:	08005105 	.word	0x08005105
 80050c8:	08005105 	.word	0x08005105
 80050cc:	08005105 	.word	0x08005105
 80050d0:	08005105 	.word	0x08005105
 80050d4:	08005105 	.word	0x08005105
 80050d8:	08005105 	.word	0x08005105
 80050dc:	08005119 	.word	0x08005119
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	2101      	movs	r1, #1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fdfa 	bl	8005ce0 <RCCEx_PLL2_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050f0:	e013      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3324      	adds	r3, #36	; 0x24
 80050f6:	2101      	movs	r1, #1
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fea3 	bl	8005e44 <RCCEx_PLL3_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005102:	e00a      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
      break;
 8005108:	e007      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400
 8005110:	58024800 	.word	0x58024800
 8005114:	00ffffcf 	.word	0x00ffffcf
      break;
 8005118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005120:	4b96      	ldr	r3, [pc, #600]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005124:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512c:	4993      	ldr	r1, [pc, #588]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800512e:	4313      	orrs	r3, r2
 8005130:	654b      	str	r3, [r1, #84]	; 0x54
 8005132:	e001      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d038      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005148:	2b05      	cmp	r3, #5
 800514a:	d821      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005197 	.word	0x08005197
 8005158:	0800516d 	.word	0x0800516d
 800515c:	0800517f 	.word	0x0800517f
 8005160:	08005197 	.word	0x08005197
 8005164:	08005197 	.word	0x08005197
 8005168:	08005197 	.word	0x08005197
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	2101      	movs	r1, #1
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fdb4 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800517c:	e00c      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3324      	adds	r3, #36	; 0x24
 8005182:	2101      	movs	r1, #1
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fe5d 	bl	8005e44 <RCCEx_PLL3_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800518e:	e003      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	75fb      	strb	r3, [r7, #23]
      break;
 8005194:	e000      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800519e:	4b77      	ldr	r3, [pc, #476]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f023 0207 	bic.w	r2, r3, #7
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051aa:	4974      	ldr	r1, [pc, #464]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	654b      	str	r3, [r1, #84]	; 0x54
 80051b0:	e001      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d03a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c8:	2b05      	cmp	r3, #5
 80051ca:	d821      	bhi.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	08005217 	.word	0x08005217
 80051d8:	080051ed 	.word	0x080051ed
 80051dc:	080051ff 	.word	0x080051ff
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005217 	.word	0x08005217
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	2101      	movs	r1, #1
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fd74 	bl	8005ce0 <RCCEx_PLL2_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051fc:	e00c      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3324      	adds	r3, #36	; 0x24
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fe1d 	bl	8005e44 <RCCEx_PLL3_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800520e:	e003      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	75fb      	strb	r3, [r7, #23]
      break;
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800521e:	4b57      	ldr	r3, [pc, #348]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	f023 0207 	bic.w	r2, r3, #7
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	4953      	ldr	r1, [pc, #332]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800522e:	4313      	orrs	r3, r2
 8005230:	658b      	str	r3, [r1, #88]	; 0x58
 8005232:	e001      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d04b      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800524e:	d02e      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005254:	d828      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d02a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d822      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005266:	d026      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005268:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800526c:	d81c      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800526e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005272:	d010      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005278:	d816      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01d      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800527e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005282:	d111      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fd28 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005294:	e012      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3324      	adds	r3, #36	; 0x24
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fdd1 	bl	8005e44 <RCCEx_PLL3_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052a6:	e009      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	75fb      	strb	r3, [r7, #23]
      break;
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052ae:	bf00      	nop
 80052b0:	e004      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80052ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052c2:	4b2e      	ldr	r3, [pc, #184]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d0:	492a      	ldr	r1, [pc, #168]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	654b      	str	r3, [r1, #84]	; 0x54
 80052d6:	e001      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d04d      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052f2:	d02e      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80052f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052f8:	d828      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fe:	d02a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005304:	d822      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800530a:	d026      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800530c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005310:	d81c      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005316:	d010      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800531c:	d816      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01d      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005326:	d111      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fcd6 	bl	8005ce0 <RCCEx_PLL2_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005338:	e012      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	2102      	movs	r1, #2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd7f 	bl	8005e44 <RCCEx_PLL3_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800534a:	e009      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005352:	bf00      	nop
 8005354:	e004      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800535e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005374:	4901      	ldr	r1, [pc, #4]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	658b      	str	r3, [r1, #88]	; 0x58
 800537a:	e003      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800537c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538c:	2b00      	cmp	r3, #0
 800538e:	d04b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005396:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800539a:	d02e      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800539c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053a0:	d828      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a6:	d02a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80053a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ac:	d822      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053b2:	d026      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80053b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053b8:	d81c      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053be:	d010      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80053c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c4:	d816      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01d      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80053ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ce:	d111      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fc82 	bl	8005ce0 <RCCEx_PLL2_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053e0:	e012      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3324      	adds	r3, #36	; 0x24
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fd2b 	bl	8005e44 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053f2:	e009      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
      break;
 80053f8:	e006      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80053fa:	bf00      	nop
 80053fc:	e004      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80053fe:	bf00      	nop
 8005400:	e002      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005402:	bf00      	nop
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800540e:	4b9d      	ldr	r3, [pc, #628]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541c:	4999      	ldr	r1, [pc, #612]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800541e:	4313      	orrs	r3, r2
 8005420:	658b      	str	r3, [r1, #88]	; 0x58
 8005422:	e001      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543e:	d10a      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3324      	adds	r3, #36	; 0x24
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fcfc 	bl	8005e44 <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005456:	4b8b      	ldr	r3, [pc, #556]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005464:	4987      	ldr	r1, [pc, #540]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005466:	4313      	orrs	r3, r2
 8005468:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005480:	d10a      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3324      	adds	r3, #36	; 0x24
 8005486:	2102      	movs	r1, #2
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fcdb 	bl	8005e44 <RCCEx_PLL3_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005498:	4b7a      	ldr	r3, [pc, #488]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a6:	4977      	ldr	r1, [pc, #476]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d034      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c2:	d01d      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80054c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c8:	d817      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80054ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d2:	d009      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80054d4:	e011      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3304      	adds	r3, #4
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fbff 	bl	8005ce0 <RCCEx_PLL2_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054e6:	e00c      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fca8 	bl	8005e44 <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
      break;
 80054fe:	e000      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005508:	4b5e      	ldr	r3, [pc, #376]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005516:	495b      	ldr	r1, [pc, #364]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005518:	4313      	orrs	r3, r2
 800551a:	658b      	str	r3, [r1, #88]	; 0x58
 800551c:	e001      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d033      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005538:	d01c      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800553a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800553e:	d816      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005544:	d003      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800554a:	d007      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800554c:	e00f      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554e:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	4a4c      	ldr	r2, [pc, #304]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800555a:	e00c      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3324      	adds	r3, #36	; 0x24
 8005560:	2101      	movs	r1, #1
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fc6e 	bl	8005e44 <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800556c:	e003      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
      break;
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800557c:	4b41      	ldr	r3, [pc, #260]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800558a:	493e      	ldr	r1, [pc, #248]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800558c:	4313      	orrs	r3, r2
 800558e:	654b      	str	r3, [r1, #84]	; 0x54
 8005590:	e001      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d029      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d007      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80055b0:	e00f      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b2:	4b34      	ldr	r3, [pc, #208]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	4a33      	ldr	r2, [pc, #204]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055be:	e00b      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	2102      	movs	r1, #2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fb8a 	bl	8005ce0 <RCCEx_PLL2_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055d0:	e002      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	75fb      	strb	r3, [r7, #23]
      break;
 80055d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ea:	4926      	ldr	r1, [pc, #152]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055f0:	e001      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3324      	adds	r3, #36	; 0x24
 8005606:	2102      	movs	r1, #2
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fc1b 	bl	8005e44 <RCCEx_PLL3_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d033      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562c:	d017      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800562e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005632:	d811      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005638:	d013      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800563a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563e:	d80b      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d010      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005648:	d106      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564a:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005656:	e007      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	75fb      	strb	r3, [r7, #23]
      break;
 800565c:	e004      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800565e:	bf00      	nop
 8005660:	e002      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005662:	bf00      	nop
 8005664:	e000      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567a:	4902      	ldr	r1, [pc, #8]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800567c:	4313      	orrs	r3, r2
 800567e:	654b      	str	r3, [r1, #84]	; 0x54
 8005680:	e004      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005698:	4b31      	ldr	r3, [pc, #196]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	492e      	ldr	r1, [pc, #184]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056b6:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056c4:	4926      	ldr	r1, [pc, #152]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056d6:	4b22      	ldr	r3, [pc, #136]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e2:	491f      	ldr	r1, [pc, #124]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056f4:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4a19      	ldr	r2, [pc, #100]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056fe:	6113      	str	r3, [r2, #16]
 8005700:	4b17      	ldr	r3, [pc, #92]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800570a:	4915      	ldr	r1, [pc, #84]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800570c:	4313      	orrs	r3, r2
 800570e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	da08      	bge.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800571a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	490e      	ldr	r1, [pc, #56]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005726:	4313      	orrs	r3, r2
 8005728:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005736:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	4906      	ldr	r1, [pc, #24]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005746:	4313      	orrs	r3, r2
 8005748:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800574a:	7dbb      	ldrb	r3, [r7, #22]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	58024400 	.word	0x58024400

08005764 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005768:	f7ff f85a 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4904      	ldr	r1, [pc, #16]	; (800578c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	58024400 	.word	0x58024400
 800578c:	0800a290 	.word	0x0800a290

08005790 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005798:	4ba1      	ldr	r3, [pc, #644]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80057a2:	4b9f      	ldr	r3, [pc, #636]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	0b1b      	lsrs	r3, r3, #12
 80057a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057ae:	4b9c      	ldr	r3, [pc, #624]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80057ba:	4b99      	ldr	r3, [pc, #612]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8111 	beq.w	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f000 8083 	beq.w	80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	f200 80a1 	bhi.w	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d056      	beq.n	80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80057fa:	e099      	b.n	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057fc:	4b88      	ldr	r3, [pc, #544]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d02d      	beq.n	8005864 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005808:	4b85      	ldr	r3, [pc, #532]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	08db      	lsrs	r3, r3, #3
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	4a84      	ldr	r2, [pc, #528]	; (8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a03 	vldr	s12, [r7, #12]
 8005846:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005862:	e087      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a6:	e065      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ea:	e043      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b48      	ldr	r3, [pc, #288]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005912:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800592e:	e021      	b.n	8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a03 	vldr	s12, [r7, #12]
 8005956:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005972:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005974:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	0a5b      	lsrs	r3, r3, #9
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800598e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599a:	ee17 2a90 	vmov	r2, s15
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80059a2:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c8:	ee17 2a90 	vmov	r2, s15
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	0e1b      	lsrs	r3, r3, #24
 80059d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f6:	ee17 2a90 	vmov	r2, s15
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059fe:	e008      	b.n	8005a12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	609a      	str	r2, [r3, #8]
}
 8005a12:	bf00      	nop
 8005a14:	3724      	adds	r7, #36	; 0x24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	03d09000 	.word	0x03d09000
 8005a28:	46000000 	.word	0x46000000
 8005a2c:	4c742400 	.word	0x4c742400
 8005a30:	4a742400 	.word	0x4a742400
 8005a34:	4af42400 	.word	0x4af42400

08005a38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	; 0x24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a40:	4ba1      	ldr	r3, [pc, #644]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005a4a:	4b9f      	ldr	r3, [pc, #636]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	0d1b      	lsrs	r3, r3, #20
 8005a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a56:	4b9c      	ldr	r3, [pc, #624]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005a62:	4b99      	ldr	r3, [pc, #612]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	08db      	lsrs	r3, r3, #3
 8005a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8111 	beq.w	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	f000 8083 	beq.w	8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	f200 80a1 	bhi.w	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d056      	beq.n	8005b50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005aa2:	e099      	b.n	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa4:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d02d      	beq.n	8005b0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ab0:	4b85      	ldr	r3, [pc, #532]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	08db      	lsrs	r3, r3, #3
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	4a84      	ldr	r2, [pc, #528]	; (8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	ee07 3a90 	vmov	s15, r3
 8005ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b7b      	ldr	r3, [pc, #492]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b0a:	e087      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b6a      	ldr	r3, [pc, #424]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b4e:	e065      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b92:	e043      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b48      	ldr	r3, [pc, #288]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd6:	e021      	b.n	8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	0a5b      	lsrs	r3, r3, #9
 8005c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c42:	ee17 2a90 	vmov	r2, s15
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005c4a:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c54:	ee07 3a90 	vmov	s15, r3
 8005c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c70:	ee17 2a90 	vmov	r2, s15
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	0e1b      	lsrs	r3, r3, #24
 8005c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c9e:	ee17 2a90 	vmov	r2, s15
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ca6:	e008      	b.n	8005cba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	609a      	str	r2, [r3, #8]
}
 8005cba:	bf00      	nop
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	03d09000 	.word	0x03d09000
 8005cd0:	46000000 	.word	0x46000000
 8005cd4:	4c742400 	.word	0x4c742400
 8005cd8:	4a742400 	.word	0x4a742400
 8005cdc:	4af42400 	.word	0x4af42400

08005ce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cee:	4b53      	ldr	r3, [pc, #332]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d101      	bne.n	8005cfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e099      	b.n	8005e32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005cfe:	4b4f      	ldr	r3, [pc, #316]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a4e      	ldr	r2, [pc, #312]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fc fd29 	bl	8002760 <HAL_GetTick>
 8005d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d10:	e008      	b.n	8005d24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d12:	f7fc fd25 	bl	8002760 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e086      	b.n	8005e32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d24:	4b45      	ldr	r3, [pc, #276]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d30:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	031b      	lsls	r3, r3, #12
 8005d3e:	493f      	ldr	r1, [pc, #252]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	628b      	str	r3, [r1, #40]	; 0x28
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	025b      	lsls	r3, r3, #9
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d74:	4931      	ldr	r1, [pc, #196]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d7a:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	492d      	ldr	r1, [pc, #180]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	f023 0220 	bic.w	r2, r3, #32
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	4928      	ldr	r1, [pc, #160]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d9e:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005da4:	f023 0310 	bic.w	r3, r3, #16
 8005da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <RCCEx_PLL2_Config+0x160>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	69d2      	ldr	r2, [r2, #28]
 8005db6:	00d2      	lsls	r2, r2, #3
 8005db8:	4920      	ldr	r1, [pc, #128]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dc4:	f043 0310 	orr.w	r3, r3, #16
 8005dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ddc:	e00f      	b.n	8005dfe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d106      	bne.n	8005df2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005de4:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005df0:	e005      	b.n	8005dfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0a:	f7fc fca9 	bl	8002760 <HAL_GetTick>
 8005e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e12:	f7fc fca5 	bl	8002760 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <RCCEx_PLL2_Config+0x15c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	ffff0007 	.word	0xffff0007

08005e44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e52:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d101      	bne.n	8005e62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e099      	b.n	8005f96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e62:	4b4f      	ldr	r3, [pc, #316]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a4e      	ldr	r2, [pc, #312]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6e:	f7fc fc77 	bl	8002760 <HAL_GetTick>
 8005e72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e74:	e008      	b.n	8005e88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e76:	f7fc fc73 	bl	8002760 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e086      	b.n	8005f96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e88:	4b45      	ldr	r3, [pc, #276]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e94:	4b42      	ldr	r3, [pc, #264]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	051b      	lsls	r3, r3, #20
 8005ea2:	493f      	ldr	r1, [pc, #252]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	025b      	lsls	r3, r3, #9
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ed8:	4931      	ldr	r1, [pc, #196]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ede:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	492d      	ldr	r1, [pc, #180]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	4928      	ldr	r1, [pc, #160]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	4a26      	ldr	r2, [pc, #152]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <RCCEx_PLL3_Config+0x160>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	69d2      	ldr	r2, [r2, #28]
 8005f1a:	00d2      	lsls	r2, r2, #3
 8005f1c:	4920      	ldr	r1, [pc, #128]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f22:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f34:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f40:	e00f      	b.n	8005f62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d106      	bne.n	8005f56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f48:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f54:	e005      	b.n	8005f62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f56:	4b12      	ldr	r3, [pc, #72]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	4a11      	ldr	r2, [pc, #68]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a0e      	ldr	r2, [pc, #56]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6e:	f7fc fbf7 	bl	8002760 <HAL_GetTick>
 8005f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f74:	e008      	b.n	8005f88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f76:	f7fc fbf3 	bl	8002760 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e006      	b.n	8005f96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	ffff0007 	.word	0xffff0007

08005fa8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e0f1      	b.n	800619e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a78      	ldr	r2, [pc, #480]	; (80061a8 <HAL_SPI_Init+0x200>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <HAL_SPI_Init+0x42>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a77      	ldr	r2, [pc, #476]	; (80061ac <HAL_SPI_Init+0x204>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00a      	beq.n	8005fea <HAL_SPI_Init+0x42>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_SPI_Init+0x208>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d005      	beq.n	8005fea <HAL_SPI_Init+0x42>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b0f      	cmp	r3, #15
 8005fe4:	d901      	bls.n	8005fea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0d9      	b.n	800619e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 ff66 	bl	8006ebc <SPI_GetPacketSize>
 8005ff0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a6c      	ldr	r2, [pc, #432]	; (80061a8 <HAL_SPI_Init+0x200>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00c      	beq.n	8006016 <HAL_SPI_Init+0x6e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a6a      	ldr	r2, [pc, #424]	; (80061ac <HAL_SPI_Init+0x204>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d007      	beq.n	8006016 <HAL_SPI_Init+0x6e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a69      	ldr	r2, [pc, #420]	; (80061b0 <HAL_SPI_Init+0x208>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d002      	beq.n	8006016 <HAL_SPI_Init+0x6e>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b08      	cmp	r3, #8
 8006014:	d811      	bhi.n	800603a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800601a:	4a63      	ldr	r2, [pc, #396]	; (80061a8 <HAL_SPI_Init+0x200>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a61      	ldr	r2, [pc, #388]	; (80061ac <HAL_SPI_Init+0x204>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_SPI_Init+0x8c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a60      	ldr	r2, [pc, #384]	; (80061b0 <HAL_SPI_Init+0x208>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d104      	bne.n	800603e <HAL_SPI_Init+0x96>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b10      	cmp	r3, #16
 8006038:	d901      	bls.n	800603e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0af      	b.n	800619e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fc f882 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800607a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006084:	d119      	bne.n	80060ba <HAL_SPI_Init+0x112>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608e:	d103      	bne.n	8006098 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10c      	bne.n	80060ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80060a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a8:	d107      	bne.n	80060ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	431a      	orrs	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	ea42 0103 	orr.w	r1, r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	ea42 0103 	orr.w	r1, r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d113      	bne.n	800615a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006144:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006158:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40013000 	.word	0x40013000
 80061ac:	40003800 	.word	0x40003800
 80061b0:	40003c00 	.word	0x40003c00

080061b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3320      	adds	r3, #32
 80061ca:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_SPI_Transmit+0x2a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e1d7      	b.n	800658e <HAL_SPI_Transmit+0x3da>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e6:	f7fc fabb 	bl	8002760 <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d007      	beq.n	8006208 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006204:	7efb      	ldrb	r3, [r7, #27]
 8006206:	e1c2      	b.n	800658e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_SPI_Transmit+0x60>
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d107      	bne.n	8006224 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006220:	7efb      	ldrb	r3, [r7, #27]
 8006222:	e1b4      	b.n	800658e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2203      	movs	r2, #3
 8006228:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006274:	d107      	bne.n	8006286 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006284:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	4b96      	ldr	r3, [pc, #600]	; (80064e8 <HAL_SPI_Transmit+0x334>)
 800628e:	4013      	ands	r3, r2
 8006290:	88f9      	ldrh	r1, [r7, #6]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	430b      	orrs	r3, r1
 8006298:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b2:	d107      	bne.n	80062c4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b0f      	cmp	r3, #15
 80062ca:	d947      	bls.n	800635c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80062cc:	e03f      	b.n	800634e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d114      	bne.n	8006306 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	1d1a      	adds	r2, r3, #4
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006304:	e023      	b.n	800634e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006306:	f7fc fa2b 	bl	8002760 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d803      	bhi.n	800631e <HAL_SPI_Transmit+0x16a>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d102      	bne.n	8006324 <HAL_SPI_Transmit+0x170>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d114      	bne.n	800634e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fcfb 	bl	8006d20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006338:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e11f      	b.n	800658e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1b9      	bne.n	80062ce <HAL_SPI_Transmit+0x11a>
 800635a:	e0f2      	b.n	8006542 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b07      	cmp	r3, #7
 8006362:	f240 80e7 	bls.w	8006534 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006366:	e05d      	b.n	8006424 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d132      	bne.n	80063dc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d918      	bls.n	80063b4 <HAL_SPI_Transmit+0x200>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d014      	beq.n	80063b4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639a:	1d1a      	adds	r2, r3, #4
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b02      	subs	r3, #2
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80063b2:	e037      	b.n	8006424 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b8:	881a      	ldrh	r2, [r3, #0]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c2:	1c9a      	adds	r2, r3, #2
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80063da:	e023      	b.n	8006424 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063dc:	f7fc f9c0 	bl	8002760 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d803      	bhi.n	80063f4 <HAL_SPI_Transmit+0x240>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_Transmit+0x246>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d114      	bne.n	8006424 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fc90 	bl	8006d20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e0b4      	b.n	800658e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d19b      	bne.n	8006368 <HAL_SPI_Transmit+0x1b4>
 8006430:	e087      	b.n	8006542 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d155      	bne.n	80064ec <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b03      	cmp	r3, #3
 800644a:	d918      	bls.n	800647e <HAL_SPI_Transmit+0x2ca>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006450:	2b40      	cmp	r3, #64	; 0x40
 8006452:	d914      	bls.n	800647e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006464:	1d1a      	adds	r2, r3, #4
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b04      	subs	r3, #4
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800647c:	e05a      	b.n	8006534 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b01      	cmp	r3, #1
 8006488:	d917      	bls.n	80064ba <HAL_SPI_Transmit+0x306>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d013      	beq.n	80064ba <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	1c9a      	adds	r2, r3, #2
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b02      	subs	r3, #2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064b8:	e03c      	b.n	8006534 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3320      	adds	r3, #32
 80064c4:	7812      	ldrb	r2, [r2, #0]
 80064c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064e4:	e026      	b.n	8006534 <HAL_SPI_Transmit+0x380>
 80064e6:	bf00      	nop
 80064e8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ec:	f7fc f938 	bl	8002760 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d803      	bhi.n	8006504 <HAL_SPI_Transmit+0x350>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d102      	bne.n	800650a <HAL_SPI_Transmit+0x356>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d114      	bne.n	8006534 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fc08 	bl	8006d20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e02c      	b.n	800658e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f af78 	bne.w	8006432 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	2108      	movs	r1, #8
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fc87 	bl	8006e60 <SPI_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655e:	f043 0220 	orr.w	r2, r3, #32
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fbd9 	bl	8006d20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800658c:	7efb      	ldrb	r3, [r7, #27]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop

08006598 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3330      	adds	r3, #48	; 0x30
 80065b2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065bc:	d112      	bne.n	80065e4 <HAL_SPI_Receive+0x4c>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10e      	bne.n	80065e4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2204      	movs	r2, #4
 80065ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f978 	bl	80068d0 <HAL_SPI_TransmitReceive>
 80065e0:	4603      	mov	r3, r0
 80065e2:	e16f      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_SPI_Receive+0x5a>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e168      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065fa:	f7fc f8b1 	bl	8002760 <HAL_GetTick>
 80065fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b01      	cmp	r3, #1
 800660a:	d007      	beq.n	800661c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800660c:	2302      	movs	r3, #2
 800660e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006618:	7ffb      	ldrb	r3, [r7, #31]
 800661a:	e153      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_SPI_Receive+0x90>
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d107      	bne.n	8006638 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006634:	7ffb      	ldrb	r3, [r7, #31]
 8006636:	e145      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2204      	movs	r2, #4
 800663c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006688:	d107      	bne.n	800669a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006698:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	4b8a      	ldr	r3, [pc, #552]	; (80068cc <HAL_SPI_Receive+0x334>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	88f9      	ldrh	r1, [r7, #6]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	430b      	orrs	r3, r1
 80066ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c6:	d107      	bne.n	80066d8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2b0f      	cmp	r3, #15
 80066de:	d948      	bls.n	8006772 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80066e0:	e040      	b.n	8006764 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	f248 0308 	movw	r3, #32776	; 0x8008
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d014      	beq.n	800671c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800671a:	e023      	b.n	8006764 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800671c:	f7fc f820 	bl	8002760 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d803      	bhi.n	8006734 <HAL_SPI_Receive+0x19c>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006732:	d102      	bne.n	800673a <HAL_SPI_Receive+0x1a2>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d114      	bne.n	8006764 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 faf0 	bl	8006d20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e0af      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1b8      	bne.n	80066e2 <HAL_SPI_Receive+0x14a>
 8006770:	e095      	b.n	800689e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	2b07      	cmp	r3, #7
 8006778:	f240 808b 	bls.w	8006892 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800677c:	e03f      	b.n	80067fe <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d114      	bne.n	80067b6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	8812      	ldrh	r2, [r2, #0]
 8006794:	b292      	uxth	r2, r2
 8006796:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067b4:	e023      	b.n	80067fe <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b6:	f7fb ffd3 	bl	8002760 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d803      	bhi.n	80067ce <HAL_SPI_Receive+0x236>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d102      	bne.n	80067d4 <HAL_SPI_Receive+0x23c>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d114      	bne.n	80067fe <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 faa3 	bl	8006d20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e062      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1b9      	bne.n	800677e <HAL_SPI_Receive+0x1e6>
 800680a:	e048      	b.n	800689e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b01      	cmp	r3, #1
 8006818:	d117      	bne.n	800684a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006826:	7812      	ldrb	r2, [r2, #0]
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006848:	e023      	b.n	8006892 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800684a:	f7fb ff89 	bl	8002760 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d803      	bhi.n	8006862 <HAL_SPI_Receive+0x2ca>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d102      	bne.n	8006868 <HAL_SPI_Receive+0x2d0>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d114      	bne.n	8006892 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fa59 	bl	8006d20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800687c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e018      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1b6      	bne.n	800680c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fa3e 	bl	8006d20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	ffff0000 	.word	0xffff0000

080068d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	; 0x38
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3320      	adds	r3, #32
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3330      	adds	r3, #48	; 0x30
 80068f2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_SPI_TransmitReceive+0x32>
 80068fe:	2302      	movs	r3, #2
 8006900:	e209      	b.n	8006d16 <HAL_SPI_TransmitReceive+0x446>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800690a:	f7fb ff29 	bl	8002760 <HAL_GetTick>
 800690e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006910:	887b      	ldrh	r3, [r7, #2]
 8006912:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006914:	887b      	ldrh	r3, [r7, #2]
 8006916:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800691e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006926:	7efb      	ldrb	r3, [r7, #27]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d014      	beq.n	8006956 <HAL_SPI_TransmitReceive+0x86>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006932:	d106      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800693c:	7efb      	ldrb	r3, [r7, #27]
 800693e:	2b04      	cmp	r3, #4
 8006940:	d009      	beq.n	8006956 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006942:	2302      	movs	r3, #2
 8006944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006950:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006954:	e1df      	b.n	8006d16 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x98>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x98>
 8006962:	887b      	ldrh	r3, [r7, #2]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d109      	bne.n	800697c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800697a:	e1cc      	b.n	8006d16 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b04      	cmp	r3, #4
 8006986:	d003      	beq.n	8006990 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2205      	movs	r2, #5
 800698c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	887a      	ldrh	r2, [r7, #2]
 80069a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	887a      	ldrh	r2, [r7, #2]
 80069aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	887a      	ldrh	r2, [r7, #2]
 80069b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	887a      	ldrh	r2, [r7, #2]
 80069c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	4b82      	ldr	r3, [pc, #520]	; (8006be0 <HAL_SPI_TransmitReceive+0x310>)
 80069d8:	4013      	ands	r3, r2
 80069da:	8879      	ldrh	r1, [r7, #2]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	6812      	ldr	r2, [r2, #0]
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069fc:	d107      	bne.n	8006a0e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	2b0f      	cmp	r3, #15
 8006a14:	d970      	bls.n	8006af8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a16:	e068      	b.n	8006aea <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d11a      	bne.n	8006a5c <HAL_SPI_TransmitReceive+0x18c>
 8006a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d017      	beq.n	8006a5c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3c:	1d1a      	adds	r2, r3, #4
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695a      	ldr	r2, [r3, #20]
 8006a62:	f248 0308 	movw	r3, #32776	; 0x8008
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01a      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x1d2>
 8006a6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d017      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a7c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a82:	1d1a      	adds	r2, r3, #4
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006aa0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa2:	f7fb fe5d 	bl	8002760 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d803      	bhi.n	8006aba <HAL_SPI_TransmitReceive+0x1ea>
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d102      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x1f0>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d114      	bne.n	8006aea <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f92d 	bl	8006d20 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e115      	b.n	8006d16 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006aea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d193      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x148>
 8006af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d190      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x148>
 8006af6:	e0e7      	b.n	8006cc8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b07      	cmp	r3, #7
 8006afe:	f240 80dd 	bls.w	8006cbc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b02:	e066      	b.n	8006bd2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d119      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x276>
 8006b12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d016      	beq.n	8006b46 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	881a      	ldrh	r2, [r3, #0]
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	1c9a      	adds	r2, r3, #2
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b44:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d11a      	bne.n	8006b8a <HAL_SPI_TransmitReceive+0x2ba>
 8006b54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d017      	beq.n	8006b8a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b5e:	6a3a      	ldr	r2, [r7, #32]
 8006b60:	8812      	ldrh	r2, [r2, #0]
 8006b62:	b292      	uxth	r2, r2
 8006b64:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b88:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8a:	f7fb fde9 	bl	8002760 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d803      	bhi.n	8006ba2 <HAL_SPI_TransmitReceive+0x2d2>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d102      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x2d8>
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d114      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f8b9 	bl	8006d20 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e0a1      	b.n	8006d16 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006bd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d195      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x234>
 8006bd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d192      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x234>
 8006bde:	e073      	b.n	8006cc8 <HAL_SPI_TransmitReceive+0x3f8>
 8006be0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d11b      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x35a>
 8006bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d018      	beq.n	8006c2a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3320      	adds	r3, #32
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c28:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d11d      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x3a4>
 8006c38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01a      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c4a:	7812      	ldrb	r2, [r2, #0]
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c72:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c74:	f7fb fd74 	bl	8002760 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d803      	bhi.n	8006c8c <HAL_SPI_TransmitReceive+0x3bc>
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d102      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x3c2>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d114      	bne.n	8006cbc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f844 	bl	8006d20 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e02c      	b.n	8006d16 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006cbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d190      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x314>
 8006cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d18d      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2108      	movs	r1, #8
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f8c4 	bl	8006e60 <SPI_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce4:	f043 0220 	orr.w	r2, r3, #32
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f816 	bl	8006d20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e001      	b.n	8006d16 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3730      	adds	r7, #48	; 0x30
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop

08006d20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0208 	orr.w	r2, r2, #8
 8006d3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0210 	orr.w	r2, r2, #16
 8006d4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6919      	ldr	r1, [r3, #16]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b3c      	ldr	r3, [pc, #240]	; (8006e5c <SPI_CloseTransfer+0x13c>)
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006d7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d014      	beq.n	8006db6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00f      	beq.n	8006db6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0220 	orr.w	r2, r2, #32
 8006db4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d014      	beq.n	8006dec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00f      	beq.n	8006dec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd2:	f043 0204 	orr.w	r2, r3, #4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00f      	beq.n	8006e16 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfc:	f043 0201 	orr.w	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00f      	beq.n	8006e40 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e26:	f043 0208 	orr.w	r2, r3, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699a      	ldr	r2, [r3, #24]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	fffffc90 	.word	0xfffffc90

08006e60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e70:	e010      	b.n	8006e94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e72:	f7fb fc75 	bl	8002760 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d803      	bhi.n	8006e8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d102      	bne.n	8006e90 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e00f      	b.n	8006eb4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695a      	ldr	r2, [r3, #20]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2301      	moveq	r3, #1
 8006ea6:	2300      	movne	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d0df      	beq.n	8006e72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3307      	adds	r3, #7
 8006eda:	08db      	lsrs	r3, r3, #3
 8006edc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e049      	b.n	8006f98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fb f985 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f000 fab9 	bl	80074a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e049      	b.n	8007046 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d106      	bne.n	8006fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f841 	bl	800704e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f000 fa62 	bl	80074a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <HAL_TIM_PWM_Start+0x24>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	bf14      	ite	ne
 8007080:	2301      	movne	r3, #1
 8007082:	2300      	moveq	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	e03c      	b.n	8007102 <HAL_TIM_PWM_Start+0x9e>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b04      	cmp	r3, #4
 800708c:	d109      	bne.n	80070a2 <HAL_TIM_PWM_Start+0x3e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b01      	cmp	r3, #1
 8007098:	bf14      	ite	ne
 800709a:	2301      	movne	r3, #1
 800709c:	2300      	moveq	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	e02f      	b.n	8007102 <HAL_TIM_PWM_Start+0x9e>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d109      	bne.n	80070bc <HAL_TIM_PWM_Start+0x58>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	e022      	b.n	8007102 <HAL_TIM_PWM_Start+0x9e>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b0c      	cmp	r3, #12
 80070c0:	d109      	bne.n	80070d6 <HAL_TIM_PWM_Start+0x72>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	bf14      	ite	ne
 80070ce:	2301      	movne	r3, #1
 80070d0:	2300      	moveq	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	e015      	b.n	8007102 <HAL_TIM_PWM_Start+0x9e>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d109      	bne.n	80070f0 <HAL_TIM_PWM_Start+0x8c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	bf14      	ite	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	2300      	moveq	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	e008      	b.n	8007102 <HAL_TIM_PWM_Start+0x9e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e0a1      	b.n	800724e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_TIM_PWM_Start+0xb6>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007118:	e023      	b.n	8007162 <HAL_TIM_PWM_Start+0xfe>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b04      	cmp	r3, #4
 800711e:	d104      	bne.n	800712a <HAL_TIM_PWM_Start+0xc6>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007128:	e01b      	b.n	8007162 <HAL_TIM_PWM_Start+0xfe>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b08      	cmp	r3, #8
 800712e:	d104      	bne.n	800713a <HAL_TIM_PWM_Start+0xd6>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007138:	e013      	b.n	8007162 <HAL_TIM_PWM_Start+0xfe>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b0c      	cmp	r3, #12
 800713e:	d104      	bne.n	800714a <HAL_TIM_PWM_Start+0xe6>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007148:	e00b      	b.n	8007162 <HAL_TIM_PWM_Start+0xfe>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b10      	cmp	r3, #16
 800714e:	d104      	bne.n	800715a <HAL_TIM_PWM_Start+0xf6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007158:	e003      	b.n	8007162 <HAL_TIM_PWM_Start+0xfe>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2201      	movs	r2, #1
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fd0c 	bl	8007b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a38      	ldr	r2, [pc, #224]	; (8007258 <HAL_TIM_PWM_Start+0x1f4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x13e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a37      	ldr	r2, [pc, #220]	; (800725c <HAL_TIM_PWM_Start+0x1f8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00e      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x13e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a35      	ldr	r2, [pc, #212]	; (8007260 <HAL_TIM_PWM_Start+0x1fc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d009      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x13e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a34      	ldr	r2, [pc, #208]	; (8007264 <HAL_TIM_PWM_Start+0x200>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <HAL_TIM_PWM_Start+0x13e>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a32      	ldr	r2, [pc, #200]	; (8007268 <HAL_TIM_PWM_Start+0x204>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_PWM_Start+0x142>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <HAL_TIM_PWM_Start+0x144>
 80071a6:	2300      	movs	r3, #0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a25      	ldr	r2, [pc, #148]	; (8007258 <HAL_TIM_PWM_Start+0x1f4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d022      	beq.n	800720c <HAL_TIM_PWM_Start+0x1a8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ce:	d01d      	beq.n	800720c <HAL_TIM_PWM_Start+0x1a8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a25      	ldr	r2, [pc, #148]	; (800726c <HAL_TIM_PWM_Start+0x208>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_TIM_PWM_Start+0x1a8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a24      	ldr	r2, [pc, #144]	; (8007270 <HAL_TIM_PWM_Start+0x20c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <HAL_TIM_PWM_Start+0x1a8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a22      	ldr	r2, [pc, #136]	; (8007274 <HAL_TIM_PWM_Start+0x210>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_TIM_PWM_Start+0x1a8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a1a      	ldr	r2, [pc, #104]	; (800725c <HAL_TIM_PWM_Start+0x1f8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_TIM_PWM_Start+0x1a8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <HAL_TIM_PWM_Start+0x214>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_TIM_PWM_Start+0x1a8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a16      	ldr	r2, [pc, #88]	; (8007260 <HAL_TIM_PWM_Start+0x1fc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d115      	bne.n	8007238 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	4b1a      	ldr	r3, [pc, #104]	; (800727c <HAL_TIM_PWM_Start+0x218>)
 8007214:	4013      	ands	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b06      	cmp	r3, #6
 800721c:	d015      	beq.n	800724a <HAL_TIM_PWM_Start+0x1e6>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d011      	beq.n	800724a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0201 	orr.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007236:	e008      	b.n	800724a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e000      	b.n	800724c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40010000 	.word	0x40010000
 800725c:	40010400 	.word	0x40010400
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800
 800726c:	40000400 	.word	0x40000400
 8007270:	40000800 	.word	0x40000800
 8007274:	40000c00 	.word	0x40000c00
 8007278:	40001800 	.word	0x40001800
 800727c:	00010007 	.word	0x00010007

08007280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800729a:	2302      	movs	r3, #2
 800729c:	e0ff      	b.n	800749e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b14      	cmp	r3, #20
 80072aa:	f200 80f0 	bhi.w	800748e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	08007309 	.word	0x08007309
 80072b8:	0800748f 	.word	0x0800748f
 80072bc:	0800748f 	.word	0x0800748f
 80072c0:	0800748f 	.word	0x0800748f
 80072c4:	08007349 	.word	0x08007349
 80072c8:	0800748f 	.word	0x0800748f
 80072cc:	0800748f 	.word	0x0800748f
 80072d0:	0800748f 	.word	0x0800748f
 80072d4:	0800738b 	.word	0x0800738b
 80072d8:	0800748f 	.word	0x0800748f
 80072dc:	0800748f 	.word	0x0800748f
 80072e0:	0800748f 	.word	0x0800748f
 80072e4:	080073cb 	.word	0x080073cb
 80072e8:	0800748f 	.word	0x0800748f
 80072ec:	0800748f 	.word	0x0800748f
 80072f0:	0800748f 	.word	0x0800748f
 80072f4:	0800740d 	.word	0x0800740d
 80072f8:	0800748f 	.word	0x0800748f
 80072fc:	0800748f 	.word	0x0800748f
 8007300:	0800748f 	.word	0x0800748f
 8007304:	0800744d 	.word	0x0800744d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f964 	bl	80075dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0208 	orr.w	r2, r2, #8
 8007322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0204 	bic.w	r2, r2, #4
 8007332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6999      	ldr	r1, [r3, #24]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	619a      	str	r2, [r3, #24]
      break;
 8007346:	e0a5      	b.n	8007494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 f9d4 	bl	80076fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6999      	ldr	r1, [r3, #24]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	021a      	lsls	r2, r3, #8
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	619a      	str	r2, [r3, #24]
      break;
 8007388:	e084      	b.n	8007494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fa3d 	bl	8007810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0208 	orr.w	r2, r2, #8
 80073a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0204 	bic.w	r2, r2, #4
 80073b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69d9      	ldr	r1, [r3, #28]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	61da      	str	r2, [r3, #28]
      break;
 80073c8:	e064      	b.n	8007494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 faa5 	bl	8007920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69d9      	ldr	r1, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	021a      	lsls	r2, r3, #8
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	61da      	str	r2, [r3, #28]
      break;
 800740a:	e043      	b.n	8007494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 faee 	bl	80079f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0208 	orr.w	r2, r2, #8
 8007426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0204 	bic.w	r2, r2, #4
 8007436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800744a:	e023      	b.n	8007494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fb32 	bl	8007abc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	021a      	lsls	r2, r3, #8
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800748c:	e002      	b.n	8007494 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]
      break;
 8007492:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop

080074a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a40      	ldr	r2, [pc, #256]	; (80075bc <TIM_Base_SetConfig+0x114>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c6:	d00f      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a3d      	ldr	r2, [pc, #244]	; (80075c0 <TIM_Base_SetConfig+0x118>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00b      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a3c      	ldr	r2, [pc, #240]	; (80075c4 <TIM_Base_SetConfig+0x11c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d007      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3b      	ldr	r2, [pc, #236]	; (80075c8 <TIM_Base_SetConfig+0x120>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a3a      	ldr	r2, [pc, #232]	; (80075cc <TIM_Base_SetConfig+0x124>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a2f      	ldr	r2, [pc, #188]	; (80075bc <TIM_Base_SetConfig+0x114>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01f      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007508:	d01b      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2c      	ldr	r2, [pc, #176]	; (80075c0 <TIM_Base_SetConfig+0x118>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d017      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2b      	ldr	r2, [pc, #172]	; (80075c4 <TIM_Base_SetConfig+0x11c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2a      	ldr	r2, [pc, #168]	; (80075c8 <TIM_Base_SetConfig+0x120>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00f      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a29      	ldr	r2, [pc, #164]	; (80075cc <TIM_Base_SetConfig+0x124>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00b      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a28      	ldr	r2, [pc, #160]	; (80075d0 <TIM_Base_SetConfig+0x128>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d007      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a27      	ldr	r2, [pc, #156]	; (80075d4 <TIM_Base_SetConfig+0x12c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <TIM_Base_SetConfig+0x130>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d108      	bne.n	8007554 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <TIM_Base_SetConfig+0x114>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00f      	beq.n	80075a0 <TIM_Base_SetConfig+0xf8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a12      	ldr	r2, [pc, #72]	; (80075cc <TIM_Base_SetConfig+0x124>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00b      	beq.n	80075a0 <TIM_Base_SetConfig+0xf8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <TIM_Base_SetConfig+0x128>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d007      	beq.n	80075a0 <TIM_Base_SetConfig+0xf8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a10      	ldr	r2, [pc, #64]	; (80075d4 <TIM_Base_SetConfig+0x12c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <TIM_Base_SetConfig+0xf8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a0f      	ldr	r2, [pc, #60]	; (80075d8 <TIM_Base_SetConfig+0x130>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d103      	bne.n	80075a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	691a      	ldr	r2, [r3, #16]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	615a      	str	r2, [r3, #20]
}
 80075ae:	bf00      	nop
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40000c00 	.word	0x40000c00
 80075cc:	40010400 	.word	0x40010400
 80075d0:	40014000 	.word	0x40014000
 80075d4:	40014400 	.word	0x40014400
 80075d8:	40014800 	.word	0x40014800

080075dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f023 0201 	bic.w	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4b37      	ldr	r3, [pc, #220]	; (80076e4 <TIM_OC1_SetConfig+0x108>)
 8007608:	4013      	ands	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0303 	bic.w	r3, r3, #3
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f023 0302 	bic.w	r3, r3, #2
 8007624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a2d      	ldr	r2, [pc, #180]	; (80076e8 <TIM_OC1_SetConfig+0x10c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00f      	beq.n	8007658 <TIM_OC1_SetConfig+0x7c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a2c      	ldr	r2, [pc, #176]	; (80076ec <TIM_OC1_SetConfig+0x110>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00b      	beq.n	8007658 <TIM_OC1_SetConfig+0x7c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a2b      	ldr	r2, [pc, #172]	; (80076f0 <TIM_OC1_SetConfig+0x114>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d007      	beq.n	8007658 <TIM_OC1_SetConfig+0x7c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2a      	ldr	r2, [pc, #168]	; (80076f4 <TIM_OC1_SetConfig+0x118>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_OC1_SetConfig+0x7c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a29      	ldr	r2, [pc, #164]	; (80076f8 <TIM_OC1_SetConfig+0x11c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d10c      	bne.n	8007672 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f023 0308 	bic.w	r3, r3, #8
 800765e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f023 0304 	bic.w	r3, r3, #4
 8007670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1c      	ldr	r2, [pc, #112]	; (80076e8 <TIM_OC1_SetConfig+0x10c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00f      	beq.n	800769a <TIM_OC1_SetConfig+0xbe>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <TIM_OC1_SetConfig+0x110>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00b      	beq.n	800769a <TIM_OC1_SetConfig+0xbe>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1a      	ldr	r2, [pc, #104]	; (80076f0 <TIM_OC1_SetConfig+0x114>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d007      	beq.n	800769a <TIM_OC1_SetConfig+0xbe>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a19      	ldr	r2, [pc, #100]	; (80076f4 <TIM_OC1_SetConfig+0x118>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d003      	beq.n	800769a <TIM_OC1_SetConfig+0xbe>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a18      	ldr	r2, [pc, #96]	; (80076f8 <TIM_OC1_SetConfig+0x11c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d111      	bne.n	80076be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	621a      	str	r2, [r3, #32]
}
 80076d8:	bf00      	nop
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	fffeff8f 	.word	0xfffeff8f
 80076e8:	40010000 	.word	0x40010000
 80076ec:	40010400 	.word	0x40010400
 80076f0:	40014000 	.word	0x40014000
 80076f4:	40014400 	.word	0x40014400
 80076f8:	40014800 	.word	0x40014800

080076fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f023 0210 	bic.w	r2, r3, #16
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4b34      	ldr	r3, [pc, #208]	; (80077f8 <TIM_OC2_SetConfig+0xfc>)
 8007728:	4013      	ands	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	021b      	lsls	r3, r3, #8
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f023 0320 	bic.w	r3, r3, #32
 8007746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a29      	ldr	r2, [pc, #164]	; (80077fc <TIM_OC2_SetConfig+0x100>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_OC2_SetConfig+0x68>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a28      	ldr	r2, [pc, #160]	; (8007800 <TIM_OC2_SetConfig+0x104>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d10d      	bne.n	8007780 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800776a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <TIM_OC2_SetConfig+0x100>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00f      	beq.n	80077a8 <TIM_OC2_SetConfig+0xac>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <TIM_OC2_SetConfig+0x104>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00b      	beq.n	80077a8 <TIM_OC2_SetConfig+0xac>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <TIM_OC2_SetConfig+0x108>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d007      	beq.n	80077a8 <TIM_OC2_SetConfig+0xac>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <TIM_OC2_SetConfig+0x10c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC2_SetConfig+0xac>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a1a      	ldr	r2, [pc, #104]	; (800780c <TIM_OC2_SetConfig+0x110>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d113      	bne.n	80077d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	feff8fff 	.word	0xfeff8fff
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800

08007810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4b33      	ldr	r3, [pc, #204]	; (8007908 <TIM_OC3_SetConfig+0xf8>)
 800783c:	4013      	ands	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a28      	ldr	r2, [pc, #160]	; (800790c <TIM_OC3_SetConfig+0xfc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d003      	beq.n	8007876 <TIM_OC3_SetConfig+0x66>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a27      	ldr	r2, [pc, #156]	; (8007910 <TIM_OC3_SetConfig+0x100>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d10d      	bne.n	8007892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800787c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a1d      	ldr	r2, [pc, #116]	; (800790c <TIM_OC3_SetConfig+0xfc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00f      	beq.n	80078ba <TIM_OC3_SetConfig+0xaa>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1c      	ldr	r2, [pc, #112]	; (8007910 <TIM_OC3_SetConfig+0x100>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00b      	beq.n	80078ba <TIM_OC3_SetConfig+0xaa>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1b      	ldr	r2, [pc, #108]	; (8007914 <TIM_OC3_SetConfig+0x104>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d007      	beq.n	80078ba <TIM_OC3_SetConfig+0xaa>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a1a      	ldr	r2, [pc, #104]	; (8007918 <TIM_OC3_SetConfig+0x108>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d003      	beq.n	80078ba <TIM_OC3_SetConfig+0xaa>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a19      	ldr	r2, [pc, #100]	; (800791c <TIM_OC3_SetConfig+0x10c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d113      	bne.n	80078e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	621a      	str	r2, [r3, #32]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	fffeff8f 	.word	0xfffeff8f
 800790c:	40010000 	.word	0x40010000
 8007910:	40010400 	.word	0x40010400
 8007914:	40014000 	.word	0x40014000
 8007918:	40014400 	.word	0x40014400
 800791c:	40014800 	.word	0x40014800

08007920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4b24      	ldr	r3, [pc, #144]	; (80079dc <TIM_OC4_SetConfig+0xbc>)
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800796a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	031b      	lsls	r3, r3, #12
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a19      	ldr	r2, [pc, #100]	; (80079e0 <TIM_OC4_SetConfig+0xc0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00f      	beq.n	80079a0 <TIM_OC4_SetConfig+0x80>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a18      	ldr	r2, [pc, #96]	; (80079e4 <TIM_OC4_SetConfig+0xc4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00b      	beq.n	80079a0 <TIM_OC4_SetConfig+0x80>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <TIM_OC4_SetConfig+0xc8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <TIM_OC4_SetConfig+0x80>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a16      	ldr	r2, [pc, #88]	; (80079ec <TIM_OC4_SetConfig+0xcc>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC4_SetConfig+0x80>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <TIM_OC4_SetConfig+0xd0>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	019b      	lsls	r3, r3, #6
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	feff8fff 	.word	0xfeff8fff
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40014400 	.word	0x40014400
 80079f0:	40014800 	.word	0x40014800

080079f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <TIM_OC5_SetConfig+0xb0>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	041b      	lsls	r3, r3, #16
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a18      	ldr	r2, [pc, #96]	; (8007aa8 <TIM_OC5_SetConfig+0xb4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00f      	beq.n	8007a6a <TIM_OC5_SetConfig+0x76>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a17      	ldr	r2, [pc, #92]	; (8007aac <TIM_OC5_SetConfig+0xb8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00b      	beq.n	8007a6a <TIM_OC5_SetConfig+0x76>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a16      	ldr	r2, [pc, #88]	; (8007ab0 <TIM_OC5_SetConfig+0xbc>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d007      	beq.n	8007a6a <TIM_OC5_SetConfig+0x76>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a15      	ldr	r2, [pc, #84]	; (8007ab4 <TIM_OC5_SetConfig+0xc0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d003      	beq.n	8007a6a <TIM_OC5_SetConfig+0x76>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <TIM_OC5_SetConfig+0xc4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d109      	bne.n	8007a7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	621a      	str	r2, [r3, #32]
}
 8007a98:	bf00      	nop
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	fffeff8f 	.word	0xfffeff8f
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40010400 	.word	0x40010400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40014400 	.word	0x40014400
 8007ab8:	40014800 	.word	0x40014800

08007abc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4b22      	ldr	r3, [pc, #136]	; (8007b70 <TIM_OC6_SetConfig+0xb4>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	051b      	lsls	r3, r3, #20
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a19      	ldr	r2, [pc, #100]	; (8007b74 <TIM_OC6_SetConfig+0xb8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00f      	beq.n	8007b34 <TIM_OC6_SetConfig+0x78>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <TIM_OC6_SetConfig+0xbc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00b      	beq.n	8007b34 <TIM_OC6_SetConfig+0x78>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a17      	ldr	r2, [pc, #92]	; (8007b7c <TIM_OC6_SetConfig+0xc0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d007      	beq.n	8007b34 <TIM_OC6_SetConfig+0x78>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <TIM_OC6_SetConfig+0xc4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_OC6_SetConfig+0x78>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <TIM_OC6_SetConfig+0xc8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d109      	bne.n	8007b48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	029b      	lsls	r3, r3, #10
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	feff8fff 	.word	0xfeff8fff
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40010400 	.word	0x40010400
 8007b7c:	40014000 	.word	0x40014000
 8007b80:	40014400 	.word	0x40014400
 8007b84:	40014800 	.word	0x40014800

08007b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f003 031f 	and.w	r3, r3, #31
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1a      	ldr	r2, [r3, #32]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	401a      	ands	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a1a      	ldr	r2, [r3, #32]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e042      	b.n	8007c6a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fa fbb4 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2224      	movs	r2, #36	; 0x24
 8007c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0201 	bic.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8c3 	bl	8007da0 <UART_SetConfig>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e022      	b.n	8007c6a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fe1f 	bl	8008870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0201 	orr.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fea6 	bl	80089b4 <UART_CheckIdleState>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b08a      	sub	sp, #40	; 0x28
 8007c76:	af02      	add	r7, sp, #8
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	603b      	str	r3, [r7, #0]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	f040 8083 	bne.w	8007d94 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_UART_Transmit+0x28>
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e07b      	b.n	8007d96 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_UART_Transmit+0x3a>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e074      	b.n	8007d96 <HAL_UART_Transmit+0x124>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2221      	movs	r2, #33	; 0x21
 8007cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cc4:	f7fa fd4c 	bl	8002760 <HAL_GetTick>
 8007cc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	88fa      	ldrh	r2, [r7, #6]
 8007cd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce2:	d108      	bne.n	8007cf6 <HAL_UART_Transmit+0x84>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	e003      	b.n	8007cfe <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007d06:	e02c      	b.n	8007d62 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fe99 	bl	8008a4a <UART_WaitOnFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e039      	b.n	8007d96 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	3302      	adds	r3, #2
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e007      	b.n	8007d50 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1cc      	bne.n	8007d08 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2200      	movs	r2, #0
 8007d76:	2140      	movs	r1, #64	; 0x40
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fe66 	bl	8008a4a <UART_WaitOnFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e006      	b.n	8007d96 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e000      	b.n	8007d96 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da4:	b092      	sub	sp, #72	; 0x48
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	431a      	orrs	r2, r3
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4bbe      	ldr	r3, [pc, #760]	; (80080c8 <UART_SetConfig+0x328>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4ab3      	ldr	r2, [pc, #716]	; (80080cc <UART_SetConfig+0x32c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d004      	beq.n	8007e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	4baf      	ldr	r3, [pc, #700]	; (80080d0 <UART_SetConfig+0x330>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	f023 010f 	bic.w	r1, r3, #15
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4aa6      	ldr	r2, [pc, #664]	; (80080d4 <UART_SetConfig+0x334>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d177      	bne.n	8007f30 <UART_SetConfig+0x190>
 8007e40:	4ba5      	ldr	r3, [pc, #660]	; (80080d8 <UART_SetConfig+0x338>)
 8007e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e48:	2b28      	cmp	r3, #40	; 0x28
 8007e4a:	d86d      	bhi.n	8007f28 <UART_SetConfig+0x188>
 8007e4c:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <UART_SetConfig+0xb4>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007ef9 	.word	0x08007ef9
 8007e58:	08007f29 	.word	0x08007f29
 8007e5c:	08007f29 	.word	0x08007f29
 8007e60:	08007f29 	.word	0x08007f29
 8007e64:	08007f29 	.word	0x08007f29
 8007e68:	08007f29 	.word	0x08007f29
 8007e6c:	08007f29 	.word	0x08007f29
 8007e70:	08007f29 	.word	0x08007f29
 8007e74:	08007f01 	.word	0x08007f01
 8007e78:	08007f29 	.word	0x08007f29
 8007e7c:	08007f29 	.word	0x08007f29
 8007e80:	08007f29 	.word	0x08007f29
 8007e84:	08007f29 	.word	0x08007f29
 8007e88:	08007f29 	.word	0x08007f29
 8007e8c:	08007f29 	.word	0x08007f29
 8007e90:	08007f29 	.word	0x08007f29
 8007e94:	08007f09 	.word	0x08007f09
 8007e98:	08007f29 	.word	0x08007f29
 8007e9c:	08007f29 	.word	0x08007f29
 8007ea0:	08007f29 	.word	0x08007f29
 8007ea4:	08007f29 	.word	0x08007f29
 8007ea8:	08007f29 	.word	0x08007f29
 8007eac:	08007f29 	.word	0x08007f29
 8007eb0:	08007f29 	.word	0x08007f29
 8007eb4:	08007f11 	.word	0x08007f11
 8007eb8:	08007f29 	.word	0x08007f29
 8007ebc:	08007f29 	.word	0x08007f29
 8007ec0:	08007f29 	.word	0x08007f29
 8007ec4:	08007f29 	.word	0x08007f29
 8007ec8:	08007f29 	.word	0x08007f29
 8007ecc:	08007f29 	.word	0x08007f29
 8007ed0:	08007f29 	.word	0x08007f29
 8007ed4:	08007f19 	.word	0x08007f19
 8007ed8:	08007f29 	.word	0x08007f29
 8007edc:	08007f29 	.word	0x08007f29
 8007ee0:	08007f29 	.word	0x08007f29
 8007ee4:	08007f29 	.word	0x08007f29
 8007ee8:	08007f29 	.word	0x08007f29
 8007eec:	08007f29 	.word	0x08007f29
 8007ef0:	08007f29 	.word	0x08007f29
 8007ef4:	08007f21 	.word	0x08007f21
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e222      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f00:	2304      	movs	r3, #4
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f06:	e21e      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0e:	e21a      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f16:	e216      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f18:	2320      	movs	r3, #32
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1e:	e212      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f20:	2340      	movs	r3, #64	; 0x40
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f26:	e20e      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f28:	2380      	movs	r3, #128	; 0x80
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2e:	e20a      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a69      	ldr	r2, [pc, #420]	; (80080dc <UART_SetConfig+0x33c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d130      	bne.n	8007f9c <UART_SetConfig+0x1fc>
 8007f3a:	4b67      	ldr	r3, [pc, #412]	; (80080d8 <UART_SetConfig+0x338>)
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	d826      	bhi.n	8007f94 <UART_SetConfig+0x1f4>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x1ac>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f65 	.word	0x08007f65
 8007f50:	08007f6d 	.word	0x08007f6d
 8007f54:	08007f75 	.word	0x08007f75
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	2300      	movs	r3, #0
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e1ec      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f72:	e1e8      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f74:	2308      	movs	r3, #8
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7a:	e1e4      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f82:	e1e0      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f84:	2320      	movs	r3, #32
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8a:	e1dc      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f8c:	2340      	movs	r3, #64	; 0x40
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f92:	e1d8      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f94:	2380      	movs	r3, #128	; 0x80
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9a:	e1d4      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a4f      	ldr	r2, [pc, #316]	; (80080e0 <UART_SetConfig+0x340>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d130      	bne.n	8008008 <UART_SetConfig+0x268>
 8007fa6:	4b4c      	ldr	r3, [pc, #304]	; (80080d8 <UART_SetConfig+0x338>)
 8007fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	d826      	bhi.n	8008000 <UART_SetConfig+0x260>
 8007fb2:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <UART_SetConfig+0x218>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08007fd1 	.word	0x08007fd1
 8007fbc:	08007fd9 	.word	0x08007fd9
 8007fc0:	08007fe1 	.word	0x08007fe1
 8007fc4:	08007fe9 	.word	0x08007fe9
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007ff9 	.word	0x08007ff9
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e1b6      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e1b2      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007fe0:	2308      	movs	r3, #8
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe6:	e1ae      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007fe8:	2310      	movs	r3, #16
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fee:	e1aa      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff6:	e1a6      	b.n	8008346 <UART_SetConfig+0x5a6>
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffe:	e1a2      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008000:	2380      	movs	r3, #128	; 0x80
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008006:	e19e      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a35      	ldr	r2, [pc, #212]	; (80080e4 <UART_SetConfig+0x344>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d130      	bne.n	8008074 <UART_SetConfig+0x2d4>
 8008012:	4b31      	ldr	r3, [pc, #196]	; (80080d8 <UART_SetConfig+0x338>)
 8008014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b05      	cmp	r3, #5
 800801c:	d826      	bhi.n	800806c <UART_SetConfig+0x2cc>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <UART_SetConfig+0x284>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	0800803d 	.word	0x0800803d
 8008028:	08008045 	.word	0x08008045
 800802c:	0800804d 	.word	0x0800804d
 8008030:	08008055 	.word	0x08008055
 8008034:	0800805d 	.word	0x0800805d
 8008038:	08008065 	.word	0x08008065
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e180      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008044:	2304      	movs	r3, #4
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e17c      	b.n	8008346 <UART_SetConfig+0x5a6>
 800804c:	2308      	movs	r3, #8
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008052:	e178      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008054:	2310      	movs	r3, #16
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805a:	e174      	b.n	8008346 <UART_SetConfig+0x5a6>
 800805c:	2320      	movs	r3, #32
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008062:	e170      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806a:	e16c      	b.n	8008346 <UART_SetConfig+0x5a6>
 800806c:	2380      	movs	r3, #128	; 0x80
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e168      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <UART_SetConfig+0x348>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d142      	bne.n	8008104 <UART_SetConfig+0x364>
 800807e:	4b16      	ldr	r3, [pc, #88]	; (80080d8 <UART_SetConfig+0x338>)
 8008080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b05      	cmp	r3, #5
 8008088:	d838      	bhi.n	80080fc <UART_SetConfig+0x35c>
 800808a:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <UART_SetConfig+0x2f0>)
 800808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008090:	080080a9 	.word	0x080080a9
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080b9 	.word	0x080080b9
 800809c:	080080c1 	.word	0x080080c1
 80080a0:	080080ed 	.word	0x080080ed
 80080a4:	080080f5 	.word	0x080080f5
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ae:	e14a      	b.n	8008346 <UART_SetConfig+0x5a6>
 80080b0:	2304      	movs	r3, #4
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e146      	b.n	8008346 <UART_SetConfig+0x5a6>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e142      	b.n	8008346 <UART_SetConfig+0x5a6>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e13e      	b.n	8008346 <UART_SetConfig+0x5a6>
 80080c8:	cfff69f3 	.word	0xcfff69f3
 80080cc:	58000c00 	.word	0x58000c00
 80080d0:	11fff4ff 	.word	0x11fff4ff
 80080d4:	40011000 	.word	0x40011000
 80080d8:	58024400 	.word	0x58024400
 80080dc:	40004400 	.word	0x40004400
 80080e0:	40004800 	.word	0x40004800
 80080e4:	40004c00 	.word	0x40004c00
 80080e8:	40005000 	.word	0x40005000
 80080ec:	2320      	movs	r3, #32
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f2:	e128      	b.n	8008346 <UART_SetConfig+0x5a6>
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fa:	e124      	b.n	8008346 <UART_SetConfig+0x5a6>
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008102:	e120      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4acb      	ldr	r2, [pc, #812]	; (8008438 <UART_SetConfig+0x698>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d176      	bne.n	80081fc <UART_SetConfig+0x45c>
 800810e:	4bcb      	ldr	r3, [pc, #812]	; (800843c <UART_SetConfig+0x69c>)
 8008110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008116:	2b28      	cmp	r3, #40	; 0x28
 8008118:	d86c      	bhi.n	80081f4 <UART_SetConfig+0x454>
 800811a:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <UART_SetConfig+0x380>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	080081c5 	.word	0x080081c5
 8008124:	080081f5 	.word	0x080081f5
 8008128:	080081f5 	.word	0x080081f5
 800812c:	080081f5 	.word	0x080081f5
 8008130:	080081f5 	.word	0x080081f5
 8008134:	080081f5 	.word	0x080081f5
 8008138:	080081f5 	.word	0x080081f5
 800813c:	080081f5 	.word	0x080081f5
 8008140:	080081cd 	.word	0x080081cd
 8008144:	080081f5 	.word	0x080081f5
 8008148:	080081f5 	.word	0x080081f5
 800814c:	080081f5 	.word	0x080081f5
 8008150:	080081f5 	.word	0x080081f5
 8008154:	080081f5 	.word	0x080081f5
 8008158:	080081f5 	.word	0x080081f5
 800815c:	080081f5 	.word	0x080081f5
 8008160:	080081d5 	.word	0x080081d5
 8008164:	080081f5 	.word	0x080081f5
 8008168:	080081f5 	.word	0x080081f5
 800816c:	080081f5 	.word	0x080081f5
 8008170:	080081f5 	.word	0x080081f5
 8008174:	080081f5 	.word	0x080081f5
 8008178:	080081f5 	.word	0x080081f5
 800817c:	080081f5 	.word	0x080081f5
 8008180:	080081dd 	.word	0x080081dd
 8008184:	080081f5 	.word	0x080081f5
 8008188:	080081f5 	.word	0x080081f5
 800818c:	080081f5 	.word	0x080081f5
 8008190:	080081f5 	.word	0x080081f5
 8008194:	080081f5 	.word	0x080081f5
 8008198:	080081f5 	.word	0x080081f5
 800819c:	080081f5 	.word	0x080081f5
 80081a0:	080081e5 	.word	0x080081e5
 80081a4:	080081f5 	.word	0x080081f5
 80081a8:	080081f5 	.word	0x080081f5
 80081ac:	080081f5 	.word	0x080081f5
 80081b0:	080081f5 	.word	0x080081f5
 80081b4:	080081f5 	.word	0x080081f5
 80081b8:	080081f5 	.word	0x080081f5
 80081bc:	080081f5 	.word	0x080081f5
 80081c0:	080081ed 	.word	0x080081ed
 80081c4:	2301      	movs	r3, #1
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ca:	e0bc      	b.n	8008346 <UART_SetConfig+0x5a6>
 80081cc:	2304      	movs	r3, #4
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d2:	e0b8      	b.n	8008346 <UART_SetConfig+0x5a6>
 80081d4:	2308      	movs	r3, #8
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081da:	e0b4      	b.n	8008346 <UART_SetConfig+0x5a6>
 80081dc:	2310      	movs	r3, #16
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e2:	e0b0      	b.n	8008346 <UART_SetConfig+0x5a6>
 80081e4:	2320      	movs	r3, #32
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ea:	e0ac      	b.n	8008346 <UART_SetConfig+0x5a6>
 80081ec:	2340      	movs	r3, #64	; 0x40
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f2:	e0a8      	b.n	8008346 <UART_SetConfig+0x5a6>
 80081f4:	2380      	movs	r3, #128	; 0x80
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fa:	e0a4      	b.n	8008346 <UART_SetConfig+0x5a6>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a8f      	ldr	r2, [pc, #572]	; (8008440 <UART_SetConfig+0x6a0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d130      	bne.n	8008268 <UART_SetConfig+0x4c8>
 8008206:	4b8d      	ldr	r3, [pc, #564]	; (800843c <UART_SetConfig+0x69c>)
 8008208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	2b05      	cmp	r3, #5
 8008210:	d826      	bhi.n	8008260 <UART_SetConfig+0x4c0>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <UART_SetConfig+0x478>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	08008231 	.word	0x08008231
 800821c:	08008239 	.word	0x08008239
 8008220:	08008241 	.word	0x08008241
 8008224:	08008249 	.word	0x08008249
 8008228:	08008251 	.word	0x08008251
 800822c:	08008259 	.word	0x08008259
 8008230:	2300      	movs	r3, #0
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e086      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008238:	2304      	movs	r3, #4
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e082      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008240:	2308      	movs	r3, #8
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e07e      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008248:	2310      	movs	r3, #16
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824e:	e07a      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008250:	2320      	movs	r3, #32
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008256:	e076      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008258:	2340      	movs	r3, #64	; 0x40
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825e:	e072      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008260:	2380      	movs	r3, #128	; 0x80
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008266:	e06e      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a75      	ldr	r2, [pc, #468]	; (8008444 <UART_SetConfig+0x6a4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d130      	bne.n	80082d4 <UART_SetConfig+0x534>
 8008272:	4b72      	ldr	r3, [pc, #456]	; (800843c <UART_SetConfig+0x69c>)
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b05      	cmp	r3, #5
 800827c:	d826      	bhi.n	80082cc <UART_SetConfig+0x52c>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <UART_SetConfig+0x4e4>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	0800829d 	.word	0x0800829d
 8008288:	080082a5 	.word	0x080082a5
 800828c:	080082ad 	.word	0x080082ad
 8008290:	080082b5 	.word	0x080082b5
 8008294:	080082bd 	.word	0x080082bd
 8008298:	080082c5 	.word	0x080082c5
 800829c:	2300      	movs	r3, #0
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e050      	b.n	8008346 <UART_SetConfig+0x5a6>
 80082a4:	2304      	movs	r3, #4
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e04c      	b.n	8008346 <UART_SetConfig+0x5a6>
 80082ac:	2308      	movs	r3, #8
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e048      	b.n	8008346 <UART_SetConfig+0x5a6>
 80082b4:	2310      	movs	r3, #16
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ba:	e044      	b.n	8008346 <UART_SetConfig+0x5a6>
 80082bc:	2320      	movs	r3, #32
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c2:	e040      	b.n	8008346 <UART_SetConfig+0x5a6>
 80082c4:	2340      	movs	r3, #64	; 0x40
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ca:	e03c      	b.n	8008346 <UART_SetConfig+0x5a6>
 80082cc:	2380      	movs	r3, #128	; 0x80
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e038      	b.n	8008346 <UART_SetConfig+0x5a6>
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a5b      	ldr	r2, [pc, #364]	; (8008448 <UART_SetConfig+0x6a8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d130      	bne.n	8008340 <UART_SetConfig+0x5a0>
 80082de:	4b57      	ldr	r3, [pc, #348]	; (800843c <UART_SetConfig+0x69c>)
 80082e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d826      	bhi.n	8008338 <UART_SetConfig+0x598>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <UART_SetConfig+0x550>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008309 	.word	0x08008309
 80082f4:	08008311 	.word	0x08008311
 80082f8:	08008319 	.word	0x08008319
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	2302      	movs	r3, #2
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e01a      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e016      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e012      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e00e      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008328:	2320      	movs	r3, #32
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e00a      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008336:	e006      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008338:	2380      	movs	r3, #128	; 0x80
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e002      	b.n	8008346 <UART_SetConfig+0x5a6>
 8008340:	2380      	movs	r3, #128	; 0x80
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a3f      	ldr	r2, [pc, #252]	; (8008448 <UART_SetConfig+0x6a8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	f040 80f8 	bne.w	8008542 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008352:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008356:	2b20      	cmp	r3, #32
 8008358:	dc46      	bgt.n	80083e8 <UART_SetConfig+0x648>
 800835a:	2b02      	cmp	r3, #2
 800835c:	f2c0 8082 	blt.w	8008464 <UART_SetConfig+0x6c4>
 8008360:	3b02      	subs	r3, #2
 8008362:	2b1e      	cmp	r3, #30
 8008364:	d87e      	bhi.n	8008464 <UART_SetConfig+0x6c4>
 8008366:	a201      	add	r2, pc, #4	; (adr r2, 800836c <UART_SetConfig+0x5cc>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	080083ef 	.word	0x080083ef
 8008370:	08008465 	.word	0x08008465
 8008374:	080083f7 	.word	0x080083f7
 8008378:	08008465 	.word	0x08008465
 800837c:	08008465 	.word	0x08008465
 8008380:	08008465 	.word	0x08008465
 8008384:	08008407 	.word	0x08008407
 8008388:	08008465 	.word	0x08008465
 800838c:	08008465 	.word	0x08008465
 8008390:	08008465 	.word	0x08008465
 8008394:	08008465 	.word	0x08008465
 8008398:	08008465 	.word	0x08008465
 800839c:	08008465 	.word	0x08008465
 80083a0:	08008465 	.word	0x08008465
 80083a4:	08008417 	.word	0x08008417
 80083a8:	08008465 	.word	0x08008465
 80083ac:	08008465 	.word	0x08008465
 80083b0:	08008465 	.word	0x08008465
 80083b4:	08008465 	.word	0x08008465
 80083b8:	08008465 	.word	0x08008465
 80083bc:	08008465 	.word	0x08008465
 80083c0:	08008465 	.word	0x08008465
 80083c4:	08008465 	.word	0x08008465
 80083c8:	08008465 	.word	0x08008465
 80083cc:	08008465 	.word	0x08008465
 80083d0:	08008465 	.word	0x08008465
 80083d4:	08008465 	.word	0x08008465
 80083d8:	08008465 	.word	0x08008465
 80083dc:	08008465 	.word	0x08008465
 80083e0:	08008465 	.word	0x08008465
 80083e4:	08008457 	.word	0x08008457
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	d037      	beq.n	800845c <UART_SetConfig+0x6bc>
 80083ec:	e03a      	b.n	8008464 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083ee:	f7fd f9b9 	bl	8005764 <HAL_RCCEx_GetD3PCLK1Freq>
 80083f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083f4:	e03c      	b.n	8008470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fd f9c8 	bl	8005790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e034      	b.n	8008470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008406:	f107 0318 	add.w	r3, r7, #24
 800840a:	4618      	mov	r0, r3
 800840c:	f7fd fb14 	bl	8005a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008414:	e02c      	b.n	8008470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <UART_SetConfig+0x69c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d016      	beq.n	8008450 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008422:	4b06      	ldr	r3, [pc, #24]	; (800843c <UART_SetConfig+0x69c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	08db      	lsrs	r3, r3, #3
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	4a07      	ldr	r2, [pc, #28]	; (800844c <UART_SetConfig+0x6ac>)
 800842e:	fa22 f303 	lsr.w	r3, r2, r3
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008434:	e01c      	b.n	8008470 <UART_SetConfig+0x6d0>
 8008436:	bf00      	nop
 8008438:	40011400 	.word	0x40011400
 800843c:	58024400 	.word	0x58024400
 8008440:	40007800 	.word	0x40007800
 8008444:	40007c00 	.word	0x40007c00
 8008448:	58000c00 	.word	0x58000c00
 800844c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008450:	4b9d      	ldr	r3, [pc, #628]	; (80086c8 <UART_SetConfig+0x928>)
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008454:	e00c      	b.n	8008470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008456:	4b9d      	ldr	r3, [pc, #628]	; (80086cc <UART_SetConfig+0x92c>)
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845a:	e009      	b.n	8008470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008462:	e005      	b.n	8008470 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800846e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 81de 	beq.w	8008834 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	4a94      	ldr	r2, [pc, #592]	; (80086d0 <UART_SetConfig+0x930>)
 800847e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008482:	461a      	mov	r2, r3
 8008484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008486:	fbb3 f3f2 	udiv	r3, r3, r2
 800848a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4413      	add	r3, r2
 8008496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008498:	429a      	cmp	r2, r3
 800849a:	d305      	bcc.n	80084a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084ae:	e1c1      	b.n	8008834 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b2:	2200      	movs	r2, #0
 80084b4:	60bb      	str	r3, [r7, #8]
 80084b6:	60fa      	str	r2, [r7, #12]
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	4a84      	ldr	r2, [pc, #528]	; (80086d0 <UART_SetConfig+0x930>)
 80084be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	2200      	movs	r2, #0
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	607a      	str	r2, [r7, #4]
 80084ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084d2:	f7f7 ff5d 	bl	8000390 <__aeabi_uldivmod>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4610      	mov	r0, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	f04f 0200 	mov.w	r2, #0
 80084e2:	f04f 0300 	mov.w	r3, #0
 80084e6:	020b      	lsls	r3, r1, #8
 80084e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084ec:	0202      	lsls	r2, r0, #8
 80084ee:	6979      	ldr	r1, [r7, #20]
 80084f0:	6849      	ldr	r1, [r1, #4]
 80084f2:	0849      	lsrs	r1, r1, #1
 80084f4:	2000      	movs	r0, #0
 80084f6:	460c      	mov	r4, r1
 80084f8:	4605      	mov	r5, r0
 80084fa:	eb12 0804 	adds.w	r8, r2, r4
 80084fe:	eb43 0905 	adc.w	r9, r3, r5
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	469a      	mov	sl, r3
 800850a:	4693      	mov	fp, r2
 800850c:	4652      	mov	r2, sl
 800850e:	465b      	mov	r3, fp
 8008510:	4640      	mov	r0, r8
 8008512:	4649      	mov	r1, r9
 8008514:	f7f7 ff3c 	bl	8000390 <__aeabi_uldivmod>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4613      	mov	r3, r2
 800851e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008526:	d308      	bcc.n	800853a <UART_SetConfig+0x79a>
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800852e:	d204      	bcs.n	800853a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008536:	60da      	str	r2, [r3, #12]
 8008538:	e17c      	b.n	8008834 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008540:	e178      	b.n	8008834 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800854a:	f040 80c5 	bne.w	80086d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800854e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008552:	2b20      	cmp	r3, #32
 8008554:	dc48      	bgt.n	80085e8 <UART_SetConfig+0x848>
 8008556:	2b00      	cmp	r3, #0
 8008558:	db7b      	blt.n	8008652 <UART_SetConfig+0x8b2>
 800855a:	2b20      	cmp	r3, #32
 800855c:	d879      	bhi.n	8008652 <UART_SetConfig+0x8b2>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <UART_SetConfig+0x7c4>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	080085ef 	.word	0x080085ef
 8008568:	080085f7 	.word	0x080085f7
 800856c:	08008653 	.word	0x08008653
 8008570:	08008653 	.word	0x08008653
 8008574:	080085ff 	.word	0x080085ff
 8008578:	08008653 	.word	0x08008653
 800857c:	08008653 	.word	0x08008653
 8008580:	08008653 	.word	0x08008653
 8008584:	0800860f 	.word	0x0800860f
 8008588:	08008653 	.word	0x08008653
 800858c:	08008653 	.word	0x08008653
 8008590:	08008653 	.word	0x08008653
 8008594:	08008653 	.word	0x08008653
 8008598:	08008653 	.word	0x08008653
 800859c:	08008653 	.word	0x08008653
 80085a0:	08008653 	.word	0x08008653
 80085a4:	0800861f 	.word	0x0800861f
 80085a8:	08008653 	.word	0x08008653
 80085ac:	08008653 	.word	0x08008653
 80085b0:	08008653 	.word	0x08008653
 80085b4:	08008653 	.word	0x08008653
 80085b8:	08008653 	.word	0x08008653
 80085bc:	08008653 	.word	0x08008653
 80085c0:	08008653 	.word	0x08008653
 80085c4:	08008653 	.word	0x08008653
 80085c8:	08008653 	.word	0x08008653
 80085cc:	08008653 	.word	0x08008653
 80085d0:	08008653 	.word	0x08008653
 80085d4:	08008653 	.word	0x08008653
 80085d8:	08008653 	.word	0x08008653
 80085dc:	08008653 	.word	0x08008653
 80085e0:	08008653 	.word	0x08008653
 80085e4:	08008645 	.word	0x08008645
 80085e8:	2b40      	cmp	r3, #64	; 0x40
 80085ea:	d02e      	beq.n	800864a <UART_SetConfig+0x8aa>
 80085ec:	e031      	b.n	8008652 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ee:	f7fc f947 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 80085f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085f4:	e033      	b.n	800865e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085f6:	f7fc f959 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 80085fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085fc:	e02f      	b.n	800865e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008602:	4618      	mov	r0, r3
 8008604:	f7fd f8c4 	bl	8005790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860c:	e027      	b.n	800865e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800860e:	f107 0318 	add.w	r3, r7, #24
 8008612:	4618      	mov	r0, r3
 8008614:	f7fd fa10 	bl	8005a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861c:	e01f      	b.n	800865e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800861e:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <UART_SetConfig+0x934>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0320 	and.w	r3, r3, #32
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800862a:	4b2a      	ldr	r3, [pc, #168]	; (80086d4 <UART_SetConfig+0x934>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	08db      	lsrs	r3, r3, #3
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	4a24      	ldr	r2, [pc, #144]	; (80086c8 <UART_SetConfig+0x928>)
 8008636:	fa22 f303 	lsr.w	r3, r2, r3
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800863c:	e00f      	b.n	800865e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800863e:	4b22      	ldr	r3, [pc, #136]	; (80086c8 <UART_SetConfig+0x928>)
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008642:	e00c      	b.n	800865e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008644:	4b21      	ldr	r3, [pc, #132]	; (80086cc <UART_SetConfig+0x92c>)
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008648:	e009      	b.n	800865e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008650:	e005      	b.n	800865e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800865c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80e7 	beq.w	8008834 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	4a19      	ldr	r2, [pc, #100]	; (80086d0 <UART_SetConfig+0x930>)
 800866c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008670:	461a      	mov	r2, r3
 8008672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008674:	fbb3 f3f2 	udiv	r3, r3, r2
 8008678:	005a      	lsls	r2, r3, #1
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	085b      	lsrs	r3, r3, #1
 8008680:	441a      	add	r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	fbb2 f3f3 	udiv	r3, r2, r3
 800868a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	2b0f      	cmp	r3, #15
 8008690:	d916      	bls.n	80086c0 <UART_SetConfig+0x920>
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008698:	d212      	bcs.n	80086c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	b29b      	uxth	r3, r3
 800869e:	f023 030f 	bic.w	r3, r3, #15
 80086a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80086b2:	4313      	orrs	r3, r2
 80086b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80086bc:	60da      	str	r2, [r3, #12]
 80086be:	e0b9      	b.n	8008834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80086c6:	e0b5      	b.n	8008834 <UART_SetConfig+0xa94>
 80086c8:	03d09000 	.word	0x03d09000
 80086cc:	003d0900 	.word	0x003d0900
 80086d0:	0800a2b0 	.word	0x0800a2b0
 80086d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80086d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086dc:	2b20      	cmp	r3, #32
 80086de:	dc49      	bgt.n	8008774 <UART_SetConfig+0x9d4>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db7c      	blt.n	80087de <UART_SetConfig+0xa3e>
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d87a      	bhi.n	80087de <UART_SetConfig+0xa3e>
 80086e8:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <UART_SetConfig+0x950>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	0800877b 	.word	0x0800877b
 80086f4:	08008783 	.word	0x08008783
 80086f8:	080087df 	.word	0x080087df
 80086fc:	080087df 	.word	0x080087df
 8008700:	0800878b 	.word	0x0800878b
 8008704:	080087df 	.word	0x080087df
 8008708:	080087df 	.word	0x080087df
 800870c:	080087df 	.word	0x080087df
 8008710:	0800879b 	.word	0x0800879b
 8008714:	080087df 	.word	0x080087df
 8008718:	080087df 	.word	0x080087df
 800871c:	080087df 	.word	0x080087df
 8008720:	080087df 	.word	0x080087df
 8008724:	080087df 	.word	0x080087df
 8008728:	080087df 	.word	0x080087df
 800872c:	080087df 	.word	0x080087df
 8008730:	080087ab 	.word	0x080087ab
 8008734:	080087df 	.word	0x080087df
 8008738:	080087df 	.word	0x080087df
 800873c:	080087df 	.word	0x080087df
 8008740:	080087df 	.word	0x080087df
 8008744:	080087df 	.word	0x080087df
 8008748:	080087df 	.word	0x080087df
 800874c:	080087df 	.word	0x080087df
 8008750:	080087df 	.word	0x080087df
 8008754:	080087df 	.word	0x080087df
 8008758:	080087df 	.word	0x080087df
 800875c:	080087df 	.word	0x080087df
 8008760:	080087df 	.word	0x080087df
 8008764:	080087df 	.word	0x080087df
 8008768:	080087df 	.word	0x080087df
 800876c:	080087df 	.word	0x080087df
 8008770:	080087d1 	.word	0x080087d1
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	d02e      	beq.n	80087d6 <UART_SetConfig+0xa36>
 8008778:	e031      	b.n	80087de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800877a:	f7fc f881 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 800877e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008780:	e033      	b.n	80087ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008782:	f7fc f893 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8008786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008788:	e02f      	b.n	80087ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800878e:	4618      	mov	r0, r3
 8008790:	f7fc fffe 	bl	8005790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008798:	e027      	b.n	80087ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800879a:	f107 0318 	add.w	r3, r7, #24
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd f94a 	bl	8005a38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a8:	e01f      	b.n	80087ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087aa:	4b2d      	ldr	r3, [pc, #180]	; (8008860 <UART_SetConfig+0xac0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087b6:	4b2a      	ldr	r3, [pc, #168]	; (8008860 <UART_SetConfig+0xac0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	08db      	lsrs	r3, r3, #3
 80087bc:	f003 0303 	and.w	r3, r3, #3
 80087c0:	4a28      	ldr	r2, [pc, #160]	; (8008864 <UART_SetConfig+0xac4>)
 80087c2:	fa22 f303 	lsr.w	r3, r2, r3
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087c8:	e00f      	b.n	80087ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80087ca:	4b26      	ldr	r3, [pc, #152]	; (8008864 <UART_SetConfig+0xac4>)
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ce:	e00c      	b.n	80087ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087d0:	4b25      	ldr	r3, [pc, #148]	; (8008868 <UART_SetConfig+0xac8>)
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d4:	e009      	b.n	80087ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087dc:	e005      	b.n	80087ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80087e8:	bf00      	nop
    }

    if (pclk != 0U)
 80087ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d021      	beq.n	8008834 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	4a1d      	ldr	r2, [pc, #116]	; (800886c <UART_SetConfig+0xacc>)
 80087f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	085b      	lsrs	r3, r3, #1
 8008808:	441a      	add	r2, r3
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008812:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	2b0f      	cmp	r3, #15
 8008818:	d909      	bls.n	800882e <UART_SetConfig+0xa8e>
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d205      	bcs.n	800882e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	b29a      	uxth	r2, r3
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60da      	str	r2, [r3, #12]
 800882c:	e002      	b.n	8008834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2201      	movs	r2, #1
 8008838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2201      	movs	r2, #1
 8008840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2200      	movs	r2, #0
 8008848:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2200      	movs	r2, #0
 800884e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008850:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008854:	4618      	mov	r0, r3
 8008856:	3748      	adds	r7, #72	; 0x48
 8008858:	46bd      	mov	sp, r7
 800885a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
 8008864:	03d09000 	.word	0x03d09000
 8008868:	003d0900 	.word	0x003d0900
 800886c:	0800a2b0 	.word	0x0800a2b0

08008870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	f003 0310 	and.w	r3, r3, #16
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01a      	beq.n	8008986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800896e:	d10a      	bne.n	8008986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]
  }
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089c4:	f7f9 fecc 	bl	8002760 <HAL_GetTick>
 80089c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0308 	and.w	r3, r3, #8
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d10e      	bne.n	80089f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f82f 	bl	8008a4a <UART_WaitOnFlagUntilTimeout>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e025      	b.n	8008a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d10e      	bne.n	8008a22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f819 	bl	8008a4a <UART_WaitOnFlagUntilTimeout>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e00f      	b.n	8008a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b09c      	sub	sp, #112	; 0x70
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	603b      	str	r3, [r7, #0]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5a:	e0a9      	b.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	f000 80a5 	beq.w	8008bb0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a66:	f7f9 fe7b 	bl	8002760 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d302      	bcc.n	8008a7c <UART_WaitOnFlagUntilTimeout+0x32>
 8008a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d140      	bne.n	8008afe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a90:	667b      	str	r3, [r7, #100]	; 0x64
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e6      	bne.n	8008a7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ace:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ad0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e5      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e069      	b.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d051      	beq.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b1a:	d149      	bne.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
 8008b46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e6      	bne.n	8008b26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	613b      	str	r3, [r7, #16]
   return(result);
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f023 0301 	bic.w	r3, r3, #1
 8008b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b78:	623a      	str	r2, [r7, #32]
 8008b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	69f9      	ldr	r1, [r7, #28]
 8008b7e:	6a3a      	ldr	r2, [r7, #32]
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e5      	bne.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e010      	b.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69da      	ldr	r2, [r3, #28]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	bf0c      	ite	eq
 8008bc0:	2301      	moveq	r3, #1
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	f43f af46 	beq.w	8008a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3770      	adds	r7, #112	; 0x70
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e027      	b.n	8008c40 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2224      	movs	r2, #36	; 0x24
 8008bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0201 	bic.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d101      	bne.n	8008c64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c60:	2302      	movs	r3, #2
 8008c62:	e02d      	b.n	8008cc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2224      	movs	r2, #36	; 0x24
 8008c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0201 	bic.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f84f 	bl	8008d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e02d      	b.n	8008d3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2224      	movs	r2, #36	; 0x24
 8008cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0201 	bic.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f811 	bl	8008d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d108      	bne.n	8008d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d64:	e031      	b.n	8008dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d66:	2310      	movs	r3, #16
 8008d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	0e5b      	lsrs	r3, r3, #25
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	0f5b      	lsrs	r3, r3, #29
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	7b3a      	ldrb	r2, [r7, #12]
 8008d92:	4911      	ldr	r1, [pc, #68]	; (8008dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8008d94:	5c8a      	ldrb	r2, [r1, r2]
 8008d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d9a:	7b3a      	ldrb	r2, [r7, #12]
 8008d9c:	490f      	ldr	r1, [pc, #60]	; (8008ddc <UARTEx_SetNbDataToProcess+0x98>)
 8008d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	7b7a      	ldrb	r2, [r7, #13]
 8008db0:	4909      	ldr	r1, [pc, #36]	; (8008dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8008db2:	5c8a      	ldrb	r2, [r1, r2]
 8008db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008db8:	7b7a      	ldrb	r2, [r7, #13]
 8008dba:	4908      	ldr	r1, [pc, #32]	; (8008ddc <UARTEx_SetNbDataToProcess+0x98>)
 8008dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008dca:	bf00      	nop
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	0800a2c8 	.word	0x0800a2c8
 8008ddc:	0800a2d0 	.word	0x0800a2d0

08008de0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de0:	b084      	sub	sp, #16
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	f107 001c 	add.w	r0, r7, #28
 8008dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d120      	bne.n	8008e3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	4b2a      	ldr	r3, [pc, #168]	; (8008eb4 <USB_CoreInit+0xd4>)
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d105      	bne.n	8008e2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 faac 	bl	800938c <USB_CoreReset>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]
 8008e38:	e01a      	b.n	8008e70 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 faa0 	bl	800938c <USB_CoreReset>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38
 8008e62:	e005      	b.n	8008e70 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d116      	bne.n	8008ea4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <USB_CoreInit+0xd8>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f043 0206 	orr.w	r2, r3, #6
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f043 0220 	orr.w	r2, r3, #32
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eb0:	b004      	add	sp, #16
 8008eb2:	4770      	bx	lr
 8008eb4:	ffbdffbf 	.word	0xffbdffbf
 8008eb8:	03ee0000 	.word	0x03ee0000

08008ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f023 0201 	bic.w	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d115      	bne.n	8008f2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	f7f9 fc33 	bl	8002778 <HAL_Delay>
      ms++;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fa29 	bl	8009370 <USB_GetMode>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d01e      	beq.n	8008f62 <USB_SetCurrentMode+0x84>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b31      	cmp	r3, #49	; 0x31
 8008f28:	d9f0      	bls.n	8008f0c <USB_SetCurrentMode+0x2e>
 8008f2a:	e01a      	b.n	8008f62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f2c:	78fb      	ldrb	r3, [r7, #3]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d115      	bne.n	8008f5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f3e:	2001      	movs	r0, #1
 8008f40:	f7f9 fc1a 	bl	8002778 <HAL_Delay>
      ms++;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa10 	bl	8009370 <USB_GetMode>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <USB_SetCurrentMode+0x84>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b31      	cmp	r3, #49	; 0x31
 8008f5a:	d9f0      	bls.n	8008f3e <USB_SetCurrentMode+0x60>
 8008f5c:	e001      	b.n	8008f62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e005      	b.n	8008f6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b32      	cmp	r3, #50	; 0x32
 8008f66:	d101      	bne.n	8008f6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f78:	b084      	sub	sp, #16
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b086      	sub	sp, #24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f92:	2300      	movs	r3, #0
 8008f94:	613b      	str	r3, [r7, #16]
 8008f96:	e009      	b.n	8008fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	3340      	adds	r3, #64	; 0x40
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2b0e      	cmp	r3, #14
 8008fb0:	d9f2      	bls.n	8008f98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11c      	bne.n	8008ff2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc6:	f043 0302 	orr.w	r3, r3, #2
 8008fca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e005      	b.n	8008ffe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009004:	461a      	mov	r2, r3
 8009006:	2300      	movs	r3, #0
 8009008:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009010:	4619      	mov	r1, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009018:	461a      	mov	r2, r3
 800901a:	680b      	ldr	r3, [r1, #0]
 800901c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10c      	bne.n	800903e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	2b00      	cmp	r3, #0
 8009028:	d104      	bne.n	8009034 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800902a:	2100      	movs	r1, #0
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f965 	bl	80092fc <USB_SetDevSpeed>
 8009032:	e008      	b.n	8009046 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009034:	2101      	movs	r1, #1
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f960 	bl	80092fc <USB_SetDevSpeed>
 800903c:	e003      	b.n	8009046 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800903e:	2103      	movs	r1, #3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f95b 	bl	80092fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009046:	2110      	movs	r1, #16
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f8f3 	bl	8009234 <USB_FlushTxFifo>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f91f 	bl	800929c <USB_FlushRxFifo>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906e:	461a      	mov	r2, r3
 8009070:	2300      	movs	r3, #0
 8009072:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907a:	461a      	mov	r2, r3
 800907c:	2300      	movs	r3, #0
 800907e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009086:	461a      	mov	r2, r3
 8009088:	2300      	movs	r3, #0
 800908a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800908c:	2300      	movs	r3, #0
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	e043      	b.n	800911a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a8:	d118      	bne.n	80090dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	461a      	mov	r2, r3
 80090be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	e013      	b.n	80090ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d2:	461a      	mov	r2, r3
 80090d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	e008      	b.n	80090ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e8:	461a      	mov	r2, r3
 80090ea:	2300      	movs	r3, #0
 80090ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fa:	461a      	mov	r2, r3
 80090fc:	2300      	movs	r3, #0
 80090fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910c:	461a      	mov	r2, r3
 800910e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	3301      	adds	r3, #1
 8009118:	613b      	str	r3, [r7, #16]
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	429a      	cmp	r2, r3
 8009120:	d3b7      	bcc.n	8009092 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009122:	2300      	movs	r3, #0
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	e043      	b.n	80091b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800913a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800913e:	d118      	bne.n	8009172 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009152:	461a      	mov	r2, r3
 8009154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	e013      	b.n	8009184 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009168:	461a      	mov	r2, r3
 800916a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	e008      	b.n	8009184 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917e:	461a      	mov	r2, r3
 8009180:	2300      	movs	r3, #0
 8009182:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	461a      	mov	r2, r3
 8009192:	2300      	movs	r3, #0
 8009194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a2:	461a      	mov	r2, r3
 80091a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d3b7      	bcc.n	8009128 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80091d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d105      	bne.n	80091ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	f043 0210 	orr.w	r2, r3, #16
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	4b0e      	ldr	r3, [pc, #56]	; (800922c <USB_DevInit+0x2b4>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80091f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	f043 0208 	orr.w	r2, r3, #8
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800920a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d105      	bne.n	800921c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699a      	ldr	r2, [r3, #24]
 8009214:	4b06      	ldr	r3, [pc, #24]	; (8009230 <USB_DevInit+0x2b8>)
 8009216:	4313      	orrs	r3, r2
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009228:	b004      	add	sp, #16
 800922a:	4770      	bx	lr
 800922c:	803c3800 	.word	0x803c3800
 8009230:	40000004 	.word	0x40000004

08009234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4a13      	ldr	r2, [pc, #76]	; (8009298 <USB_FlushTxFifo+0x64>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d901      	bls.n	8009254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e01b      	b.n	800928c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	daf2      	bge.n	8009242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	019b      	lsls	r3, r3, #6
 8009264:	f043 0220 	orr.w	r2, r3, #32
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3301      	adds	r3, #1
 8009270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4a08      	ldr	r2, [pc, #32]	; (8009298 <USB_FlushTxFifo+0x64>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d901      	bls.n	800927e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e006      	b.n	800928c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b20      	cmp	r3, #32
 8009288:	d0f0      	beq.n	800926c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	00030d40 	.word	0x00030d40

0800929c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4a11      	ldr	r2, [pc, #68]	; (80092f8 <USB_FlushRxFifo+0x5c>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d901      	bls.n	80092ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e018      	b.n	80092ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	daf2      	bge.n	80092a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2210      	movs	r2, #16
 80092ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3301      	adds	r3, #1
 80092d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4a08      	ldr	r2, [pc, #32]	; (80092f8 <USB_FlushRxFifo+0x5c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d901      	bls.n	80092de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e006      	b.n	80092ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0310 	and.w	r3, r3, #16
 80092e6:	2b10      	cmp	r3, #16
 80092e8:	d0f0      	beq.n	80092cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	00030d40 	.word	0x00030d40

080092fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800931c:	4313      	orrs	r3, r2
 800931e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009348:	f023 0303 	bic.w	r3, r3, #3
 800934c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800935c:	f043 0302 	orr.w	r3, r3, #2
 8009360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	f003 0301 	and.w	r3, r3, #1
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3301      	adds	r3, #1
 800939c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4a13      	ldr	r2, [pc, #76]	; (80093f0 <USB_CoreReset+0x64>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d901      	bls.n	80093aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e01b      	b.n	80093e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	daf2      	bge.n	8009398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f043 0201 	orr.w	r2, r3, #1
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3301      	adds	r3, #1
 80093c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4a09      	ldr	r2, [pc, #36]	; (80093f0 <USB_CoreReset+0x64>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d901      	bls.n	80093d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e006      	b.n	80093e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d0f0      	beq.n	80093c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	00030d40 	.word	0x00030d40

080093f4 <__errno>:
 80093f4:	4b01      	ldr	r3, [pc, #4]	; (80093fc <__errno+0x8>)
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	24000018 	.word	0x24000018

08009400 <__libc_init_array>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	4d0d      	ldr	r5, [pc, #52]	; (8009438 <__libc_init_array+0x38>)
 8009404:	4c0d      	ldr	r4, [pc, #52]	; (800943c <__libc_init_array+0x3c>)
 8009406:	1b64      	subs	r4, r4, r5
 8009408:	10a4      	asrs	r4, r4, #2
 800940a:	2600      	movs	r6, #0
 800940c:	42a6      	cmp	r6, r4
 800940e:	d109      	bne.n	8009424 <__libc_init_array+0x24>
 8009410:	4d0b      	ldr	r5, [pc, #44]	; (8009440 <__libc_init_array+0x40>)
 8009412:	4c0c      	ldr	r4, [pc, #48]	; (8009444 <__libc_init_array+0x44>)
 8009414:	f000 fc8e 	bl	8009d34 <_init>
 8009418:	1b64      	subs	r4, r4, r5
 800941a:	10a4      	asrs	r4, r4, #2
 800941c:	2600      	movs	r6, #0
 800941e:	42a6      	cmp	r6, r4
 8009420:	d105      	bne.n	800942e <__libc_init_array+0x2e>
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	f855 3b04 	ldr.w	r3, [r5], #4
 8009428:	4798      	blx	r3
 800942a:	3601      	adds	r6, #1
 800942c:	e7ee      	b.n	800940c <__libc_init_array+0xc>
 800942e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009432:	4798      	blx	r3
 8009434:	3601      	adds	r6, #1
 8009436:	e7f2      	b.n	800941e <__libc_init_array+0x1e>
 8009438:	0800a374 	.word	0x0800a374
 800943c:	0800a374 	.word	0x0800a374
 8009440:	0800a374 	.word	0x0800a374
 8009444:	0800a378 	.word	0x0800a378

08009448 <memcpy>:
 8009448:	440a      	add	r2, r1
 800944a:	4291      	cmp	r1, r2
 800944c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009450:	d100      	bne.n	8009454 <memcpy+0xc>
 8009452:	4770      	bx	lr
 8009454:	b510      	push	{r4, lr}
 8009456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800945a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800945e:	4291      	cmp	r1, r2
 8009460:	d1f9      	bne.n	8009456 <memcpy+0xe>
 8009462:	bd10      	pop	{r4, pc}

08009464 <memset>:
 8009464:	4402      	add	r2, r0
 8009466:	4603      	mov	r3, r0
 8009468:	4293      	cmp	r3, r2
 800946a:	d100      	bne.n	800946e <memset+0xa>
 800946c:	4770      	bx	lr
 800946e:	f803 1b01 	strb.w	r1, [r3], #1
 8009472:	e7f9      	b.n	8009468 <memset+0x4>

08009474 <_free_r>:
 8009474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009476:	2900      	cmp	r1, #0
 8009478:	d044      	beq.n	8009504 <_free_r+0x90>
 800947a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947e:	9001      	str	r0, [sp, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f1a1 0404 	sub.w	r4, r1, #4
 8009486:	bfb8      	it	lt
 8009488:	18e4      	addlt	r4, r4, r3
 800948a:	f000 f903 	bl	8009694 <__malloc_lock>
 800948e:	4a1e      	ldr	r2, [pc, #120]	; (8009508 <_free_r+0x94>)
 8009490:	9801      	ldr	r0, [sp, #4]
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	b933      	cbnz	r3, 80094a4 <_free_r+0x30>
 8009496:	6063      	str	r3, [r4, #4]
 8009498:	6014      	str	r4, [r2, #0]
 800949a:	b003      	add	sp, #12
 800949c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094a0:	f000 b8fe 	b.w	80096a0 <__malloc_unlock>
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	d908      	bls.n	80094ba <_free_r+0x46>
 80094a8:	6825      	ldr	r5, [r4, #0]
 80094aa:	1961      	adds	r1, r4, r5
 80094ac:	428b      	cmp	r3, r1
 80094ae:	bf01      	itttt	eq
 80094b0:	6819      	ldreq	r1, [r3, #0]
 80094b2:	685b      	ldreq	r3, [r3, #4]
 80094b4:	1949      	addeq	r1, r1, r5
 80094b6:	6021      	streq	r1, [r4, #0]
 80094b8:	e7ed      	b.n	8009496 <_free_r+0x22>
 80094ba:	461a      	mov	r2, r3
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	b10b      	cbz	r3, 80094c4 <_free_r+0x50>
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d9fa      	bls.n	80094ba <_free_r+0x46>
 80094c4:	6811      	ldr	r1, [r2, #0]
 80094c6:	1855      	adds	r5, r2, r1
 80094c8:	42a5      	cmp	r5, r4
 80094ca:	d10b      	bne.n	80094e4 <_free_r+0x70>
 80094cc:	6824      	ldr	r4, [r4, #0]
 80094ce:	4421      	add	r1, r4
 80094d0:	1854      	adds	r4, r2, r1
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	d1e0      	bne.n	800949a <_free_r+0x26>
 80094d8:	681c      	ldr	r4, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	6053      	str	r3, [r2, #4]
 80094de:	4421      	add	r1, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	e7da      	b.n	800949a <_free_r+0x26>
 80094e4:	d902      	bls.n	80094ec <_free_r+0x78>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6003      	str	r3, [r0, #0]
 80094ea:	e7d6      	b.n	800949a <_free_r+0x26>
 80094ec:	6825      	ldr	r5, [r4, #0]
 80094ee:	1961      	adds	r1, r4, r5
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf04      	itt	eq
 80094f4:	6819      	ldreq	r1, [r3, #0]
 80094f6:	685b      	ldreq	r3, [r3, #4]
 80094f8:	6063      	str	r3, [r4, #4]
 80094fa:	bf04      	itt	eq
 80094fc:	1949      	addeq	r1, r1, r5
 80094fe:	6021      	streq	r1, [r4, #0]
 8009500:	6054      	str	r4, [r2, #4]
 8009502:	e7ca      	b.n	800949a <_free_r+0x26>
 8009504:	b003      	add	sp, #12
 8009506:	bd30      	pop	{r4, r5, pc}
 8009508:	24000a40 	.word	0x24000a40

0800950c <sbrk_aligned>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4e0e      	ldr	r6, [pc, #56]	; (8009548 <sbrk_aligned+0x3c>)
 8009510:	460c      	mov	r4, r1
 8009512:	6831      	ldr	r1, [r6, #0]
 8009514:	4605      	mov	r5, r0
 8009516:	b911      	cbnz	r1, 800951e <sbrk_aligned+0x12>
 8009518:	f000 f88c 	bl	8009634 <_sbrk_r>
 800951c:	6030      	str	r0, [r6, #0]
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 f887 	bl	8009634 <_sbrk_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d00a      	beq.n	8009540 <sbrk_aligned+0x34>
 800952a:	1cc4      	adds	r4, r0, #3
 800952c:	f024 0403 	bic.w	r4, r4, #3
 8009530:	42a0      	cmp	r0, r4
 8009532:	d007      	beq.n	8009544 <sbrk_aligned+0x38>
 8009534:	1a21      	subs	r1, r4, r0
 8009536:	4628      	mov	r0, r5
 8009538:	f000 f87c 	bl	8009634 <_sbrk_r>
 800953c:	3001      	adds	r0, #1
 800953e:	d101      	bne.n	8009544 <sbrk_aligned+0x38>
 8009540:	f04f 34ff 	mov.w	r4, #4294967295
 8009544:	4620      	mov	r0, r4
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	24000a44 	.word	0x24000a44

0800954c <_malloc_r>:
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	1ccd      	adds	r5, r1, #3
 8009552:	f025 0503 	bic.w	r5, r5, #3
 8009556:	3508      	adds	r5, #8
 8009558:	2d0c      	cmp	r5, #12
 800955a:	bf38      	it	cc
 800955c:	250c      	movcc	r5, #12
 800955e:	2d00      	cmp	r5, #0
 8009560:	4607      	mov	r7, r0
 8009562:	db01      	blt.n	8009568 <_malloc_r+0x1c>
 8009564:	42a9      	cmp	r1, r5
 8009566:	d905      	bls.n	8009574 <_malloc_r+0x28>
 8009568:	230c      	movs	r3, #12
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	2600      	movs	r6, #0
 800956e:	4630      	mov	r0, r6
 8009570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009574:	4e2e      	ldr	r6, [pc, #184]	; (8009630 <_malloc_r+0xe4>)
 8009576:	f000 f88d 	bl	8009694 <__malloc_lock>
 800957a:	6833      	ldr	r3, [r6, #0]
 800957c:	461c      	mov	r4, r3
 800957e:	bb34      	cbnz	r4, 80095ce <_malloc_r+0x82>
 8009580:	4629      	mov	r1, r5
 8009582:	4638      	mov	r0, r7
 8009584:	f7ff ffc2 	bl	800950c <sbrk_aligned>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	4604      	mov	r4, r0
 800958c:	d14d      	bne.n	800962a <_malloc_r+0xde>
 800958e:	6834      	ldr	r4, [r6, #0]
 8009590:	4626      	mov	r6, r4
 8009592:	2e00      	cmp	r6, #0
 8009594:	d140      	bne.n	8009618 <_malloc_r+0xcc>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	4631      	mov	r1, r6
 800959a:	4638      	mov	r0, r7
 800959c:	eb04 0803 	add.w	r8, r4, r3
 80095a0:	f000 f848 	bl	8009634 <_sbrk_r>
 80095a4:	4580      	cmp	r8, r0
 80095a6:	d13a      	bne.n	800961e <_malloc_r+0xd2>
 80095a8:	6821      	ldr	r1, [r4, #0]
 80095aa:	3503      	adds	r5, #3
 80095ac:	1a6d      	subs	r5, r5, r1
 80095ae:	f025 0503 	bic.w	r5, r5, #3
 80095b2:	3508      	adds	r5, #8
 80095b4:	2d0c      	cmp	r5, #12
 80095b6:	bf38      	it	cc
 80095b8:	250c      	movcc	r5, #12
 80095ba:	4629      	mov	r1, r5
 80095bc:	4638      	mov	r0, r7
 80095be:	f7ff ffa5 	bl	800950c <sbrk_aligned>
 80095c2:	3001      	adds	r0, #1
 80095c4:	d02b      	beq.n	800961e <_malloc_r+0xd2>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	442b      	add	r3, r5
 80095ca:	6023      	str	r3, [r4, #0]
 80095cc:	e00e      	b.n	80095ec <_malloc_r+0xa0>
 80095ce:	6822      	ldr	r2, [r4, #0]
 80095d0:	1b52      	subs	r2, r2, r5
 80095d2:	d41e      	bmi.n	8009612 <_malloc_r+0xc6>
 80095d4:	2a0b      	cmp	r2, #11
 80095d6:	d916      	bls.n	8009606 <_malloc_r+0xba>
 80095d8:	1961      	adds	r1, r4, r5
 80095da:	42a3      	cmp	r3, r4
 80095dc:	6025      	str	r5, [r4, #0]
 80095de:	bf18      	it	ne
 80095e0:	6059      	strne	r1, [r3, #4]
 80095e2:	6863      	ldr	r3, [r4, #4]
 80095e4:	bf08      	it	eq
 80095e6:	6031      	streq	r1, [r6, #0]
 80095e8:	5162      	str	r2, [r4, r5]
 80095ea:	604b      	str	r3, [r1, #4]
 80095ec:	4638      	mov	r0, r7
 80095ee:	f104 060b 	add.w	r6, r4, #11
 80095f2:	f000 f855 	bl	80096a0 <__malloc_unlock>
 80095f6:	f026 0607 	bic.w	r6, r6, #7
 80095fa:	1d23      	adds	r3, r4, #4
 80095fc:	1af2      	subs	r2, r6, r3
 80095fe:	d0b6      	beq.n	800956e <_malloc_r+0x22>
 8009600:	1b9b      	subs	r3, r3, r6
 8009602:	50a3      	str	r3, [r4, r2]
 8009604:	e7b3      	b.n	800956e <_malloc_r+0x22>
 8009606:	6862      	ldr	r2, [r4, #4]
 8009608:	42a3      	cmp	r3, r4
 800960a:	bf0c      	ite	eq
 800960c:	6032      	streq	r2, [r6, #0]
 800960e:	605a      	strne	r2, [r3, #4]
 8009610:	e7ec      	b.n	80095ec <_malloc_r+0xa0>
 8009612:	4623      	mov	r3, r4
 8009614:	6864      	ldr	r4, [r4, #4]
 8009616:	e7b2      	b.n	800957e <_malloc_r+0x32>
 8009618:	4634      	mov	r4, r6
 800961a:	6876      	ldr	r6, [r6, #4]
 800961c:	e7b9      	b.n	8009592 <_malloc_r+0x46>
 800961e:	230c      	movs	r3, #12
 8009620:	603b      	str	r3, [r7, #0]
 8009622:	4638      	mov	r0, r7
 8009624:	f000 f83c 	bl	80096a0 <__malloc_unlock>
 8009628:	e7a1      	b.n	800956e <_malloc_r+0x22>
 800962a:	6025      	str	r5, [r4, #0]
 800962c:	e7de      	b.n	80095ec <_malloc_r+0xa0>
 800962e:	bf00      	nop
 8009630:	24000a40 	.word	0x24000a40

08009634 <_sbrk_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d06      	ldr	r5, [pc, #24]	; (8009650 <_sbrk_r+0x1c>)
 8009638:	2300      	movs	r3, #0
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f8 ffa8 	bl	8002594 <_sbrk>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_sbrk_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_sbrk_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	24000a48 	.word	0x24000a48

08009654 <siprintf>:
 8009654:	b40e      	push	{r1, r2, r3}
 8009656:	b500      	push	{lr}
 8009658:	b09c      	sub	sp, #112	; 0x70
 800965a:	ab1d      	add	r3, sp, #116	; 0x74
 800965c:	9002      	str	r0, [sp, #8]
 800965e:	9006      	str	r0, [sp, #24]
 8009660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009664:	4809      	ldr	r0, [pc, #36]	; (800968c <siprintf+0x38>)
 8009666:	9107      	str	r1, [sp, #28]
 8009668:	9104      	str	r1, [sp, #16]
 800966a:	4909      	ldr	r1, [pc, #36]	; (8009690 <siprintf+0x3c>)
 800966c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009670:	9105      	str	r1, [sp, #20]
 8009672:	6800      	ldr	r0, [r0, #0]
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	a902      	add	r1, sp, #8
 8009678:	f000 f874 	bl	8009764 <_svfiprintf_r>
 800967c:	9b02      	ldr	r3, [sp, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
 8009682:	b01c      	add	sp, #112	; 0x70
 8009684:	f85d eb04 	ldr.w	lr, [sp], #4
 8009688:	b003      	add	sp, #12
 800968a:	4770      	bx	lr
 800968c:	24000018 	.word	0x24000018
 8009690:	ffff0208 	.word	0xffff0208

08009694 <__malloc_lock>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__malloc_lock+0x8>)
 8009696:	f000 baf9 	b.w	8009c8c <__retarget_lock_acquire_recursive>
 800969a:	bf00      	nop
 800969c:	24000a4c 	.word	0x24000a4c

080096a0 <__malloc_unlock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_unlock+0x8>)
 80096a2:	f000 baf4 	b.w	8009c8e <__retarget_lock_release_recursive>
 80096a6:	bf00      	nop
 80096a8:	24000a4c 	.word	0x24000a4c

080096ac <__ssputs_r>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	688e      	ldr	r6, [r1, #8]
 80096b2:	429e      	cmp	r6, r3
 80096b4:	4682      	mov	sl, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	4690      	mov	r8, r2
 80096ba:	461f      	mov	r7, r3
 80096bc:	d838      	bhi.n	8009730 <__ssputs_r+0x84>
 80096be:	898a      	ldrh	r2, [r1, #12]
 80096c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096c4:	d032      	beq.n	800972c <__ssputs_r+0x80>
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	6909      	ldr	r1, [r1, #16]
 80096ca:	eba5 0901 	sub.w	r9, r5, r1
 80096ce:	6965      	ldr	r5, [r4, #20]
 80096d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096d8:	3301      	adds	r3, #1
 80096da:	444b      	add	r3, r9
 80096dc:	106d      	asrs	r5, r5, #1
 80096de:	429d      	cmp	r5, r3
 80096e0:	bf38      	it	cc
 80096e2:	461d      	movcc	r5, r3
 80096e4:	0553      	lsls	r3, r2, #21
 80096e6:	d531      	bpl.n	800974c <__ssputs_r+0xa0>
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7ff ff2f 	bl	800954c <_malloc_r>
 80096ee:	4606      	mov	r6, r0
 80096f0:	b950      	cbnz	r0, 8009708 <__ssputs_r+0x5c>
 80096f2:	230c      	movs	r3, #12
 80096f4:	f8ca 3000 	str.w	r3, [sl]
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009708:	6921      	ldr	r1, [r4, #16]
 800970a:	464a      	mov	r2, r9
 800970c:	f7ff fe9c 	bl	8009448 <memcpy>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	6126      	str	r6, [r4, #16]
 800971e:	6165      	str	r5, [r4, #20]
 8009720:	444e      	add	r6, r9
 8009722:	eba5 0509 	sub.w	r5, r5, r9
 8009726:	6026      	str	r6, [r4, #0]
 8009728:	60a5      	str	r5, [r4, #8]
 800972a:	463e      	mov	r6, r7
 800972c:	42be      	cmp	r6, r7
 800972e:	d900      	bls.n	8009732 <__ssputs_r+0x86>
 8009730:	463e      	mov	r6, r7
 8009732:	6820      	ldr	r0, [r4, #0]
 8009734:	4632      	mov	r2, r6
 8009736:	4641      	mov	r1, r8
 8009738:	f000 faaa 	bl	8009c90 <memmove>
 800973c:	68a3      	ldr	r3, [r4, #8]
 800973e:	1b9b      	subs	r3, r3, r6
 8009740:	60a3      	str	r3, [r4, #8]
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	4433      	add	r3, r6
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	2000      	movs	r0, #0
 800974a:	e7db      	b.n	8009704 <__ssputs_r+0x58>
 800974c:	462a      	mov	r2, r5
 800974e:	f000 fab9 	bl	8009cc4 <_realloc_r>
 8009752:	4606      	mov	r6, r0
 8009754:	2800      	cmp	r0, #0
 8009756:	d1e1      	bne.n	800971c <__ssputs_r+0x70>
 8009758:	6921      	ldr	r1, [r4, #16]
 800975a:	4650      	mov	r0, sl
 800975c:	f7ff fe8a 	bl	8009474 <_free_r>
 8009760:	e7c7      	b.n	80096f2 <__ssputs_r+0x46>
	...

08009764 <_svfiprintf_r>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	4698      	mov	r8, r3
 800976a:	898b      	ldrh	r3, [r1, #12]
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	b09d      	sub	sp, #116	; 0x74
 8009770:	4607      	mov	r7, r0
 8009772:	460d      	mov	r5, r1
 8009774:	4614      	mov	r4, r2
 8009776:	d50e      	bpl.n	8009796 <_svfiprintf_r+0x32>
 8009778:	690b      	ldr	r3, [r1, #16]
 800977a:	b963      	cbnz	r3, 8009796 <_svfiprintf_r+0x32>
 800977c:	2140      	movs	r1, #64	; 0x40
 800977e:	f7ff fee5 	bl	800954c <_malloc_r>
 8009782:	6028      	str	r0, [r5, #0]
 8009784:	6128      	str	r0, [r5, #16]
 8009786:	b920      	cbnz	r0, 8009792 <_svfiprintf_r+0x2e>
 8009788:	230c      	movs	r3, #12
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e0d1      	b.n	8009936 <_svfiprintf_r+0x1d2>
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	616b      	str	r3, [r5, #20]
 8009796:	2300      	movs	r3, #0
 8009798:	9309      	str	r3, [sp, #36]	; 0x24
 800979a:	2320      	movs	r3, #32
 800979c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097a4:	2330      	movs	r3, #48	; 0x30
 80097a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009950 <_svfiprintf_r+0x1ec>
 80097aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097ae:	f04f 0901 	mov.w	r9, #1
 80097b2:	4623      	mov	r3, r4
 80097b4:	469a      	mov	sl, r3
 80097b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ba:	b10a      	cbz	r2, 80097c0 <_svfiprintf_r+0x5c>
 80097bc:	2a25      	cmp	r2, #37	; 0x25
 80097be:	d1f9      	bne.n	80097b4 <_svfiprintf_r+0x50>
 80097c0:	ebba 0b04 	subs.w	fp, sl, r4
 80097c4:	d00b      	beq.n	80097de <_svfiprintf_r+0x7a>
 80097c6:	465b      	mov	r3, fp
 80097c8:	4622      	mov	r2, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7ff ff6d 	bl	80096ac <__ssputs_r>
 80097d2:	3001      	adds	r0, #1
 80097d4:	f000 80aa 	beq.w	800992c <_svfiprintf_r+0x1c8>
 80097d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097da:	445a      	add	r2, fp
 80097dc:	9209      	str	r2, [sp, #36]	; 0x24
 80097de:	f89a 3000 	ldrb.w	r3, [sl]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 80a2 	beq.w	800992c <_svfiprintf_r+0x1c8>
 80097e8:	2300      	movs	r3, #0
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f2:	f10a 0a01 	add.w	sl, sl, #1
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	9307      	str	r3, [sp, #28]
 80097fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009800:	4654      	mov	r4, sl
 8009802:	2205      	movs	r2, #5
 8009804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009808:	4851      	ldr	r0, [pc, #324]	; (8009950 <_svfiprintf_r+0x1ec>)
 800980a:	f7f6 fd71 	bl	80002f0 <memchr>
 800980e:	9a04      	ldr	r2, [sp, #16]
 8009810:	b9d8      	cbnz	r0, 800984a <_svfiprintf_r+0xe6>
 8009812:	06d0      	lsls	r0, r2, #27
 8009814:	bf44      	itt	mi
 8009816:	2320      	movmi	r3, #32
 8009818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800981c:	0711      	lsls	r1, r2, #28
 800981e:	bf44      	itt	mi
 8009820:	232b      	movmi	r3, #43	; 0x2b
 8009822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009826:	f89a 3000 	ldrb.w	r3, [sl]
 800982a:	2b2a      	cmp	r3, #42	; 0x2a
 800982c:	d015      	beq.n	800985a <_svfiprintf_r+0xf6>
 800982e:	9a07      	ldr	r2, [sp, #28]
 8009830:	4654      	mov	r4, sl
 8009832:	2000      	movs	r0, #0
 8009834:	f04f 0c0a 	mov.w	ip, #10
 8009838:	4621      	mov	r1, r4
 800983a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800983e:	3b30      	subs	r3, #48	; 0x30
 8009840:	2b09      	cmp	r3, #9
 8009842:	d94e      	bls.n	80098e2 <_svfiprintf_r+0x17e>
 8009844:	b1b0      	cbz	r0, 8009874 <_svfiprintf_r+0x110>
 8009846:	9207      	str	r2, [sp, #28]
 8009848:	e014      	b.n	8009874 <_svfiprintf_r+0x110>
 800984a:	eba0 0308 	sub.w	r3, r0, r8
 800984e:	fa09 f303 	lsl.w	r3, r9, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	46a2      	mov	sl, r4
 8009858:	e7d2      	b.n	8009800 <_svfiprintf_r+0x9c>
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	1d19      	adds	r1, r3, #4
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	9103      	str	r1, [sp, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	bfbb      	ittet	lt
 8009866:	425b      	neglt	r3, r3
 8009868:	f042 0202 	orrlt.w	r2, r2, #2
 800986c:	9307      	strge	r3, [sp, #28]
 800986e:	9307      	strlt	r3, [sp, #28]
 8009870:	bfb8      	it	lt
 8009872:	9204      	strlt	r2, [sp, #16]
 8009874:	7823      	ldrb	r3, [r4, #0]
 8009876:	2b2e      	cmp	r3, #46	; 0x2e
 8009878:	d10c      	bne.n	8009894 <_svfiprintf_r+0x130>
 800987a:	7863      	ldrb	r3, [r4, #1]
 800987c:	2b2a      	cmp	r3, #42	; 0x2a
 800987e:	d135      	bne.n	80098ec <_svfiprintf_r+0x188>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	1d1a      	adds	r2, r3, #4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	9203      	str	r2, [sp, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfb8      	it	lt
 800988c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009890:	3402      	adds	r4, #2
 8009892:	9305      	str	r3, [sp, #20]
 8009894:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009960 <_svfiprintf_r+0x1fc>
 8009898:	7821      	ldrb	r1, [r4, #0]
 800989a:	2203      	movs	r2, #3
 800989c:	4650      	mov	r0, sl
 800989e:	f7f6 fd27 	bl	80002f0 <memchr>
 80098a2:	b140      	cbz	r0, 80098b6 <_svfiprintf_r+0x152>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	eba0 000a 	sub.w	r0, r0, sl
 80098aa:	fa03 f000 	lsl.w	r0, r3, r0
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	4303      	orrs	r3, r0
 80098b2:	3401      	adds	r4, #1
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ba:	4826      	ldr	r0, [pc, #152]	; (8009954 <_svfiprintf_r+0x1f0>)
 80098bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098c0:	2206      	movs	r2, #6
 80098c2:	f7f6 fd15 	bl	80002f0 <memchr>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d038      	beq.n	800993c <_svfiprintf_r+0x1d8>
 80098ca:	4b23      	ldr	r3, [pc, #140]	; (8009958 <_svfiprintf_r+0x1f4>)
 80098cc:	bb1b      	cbnz	r3, 8009916 <_svfiprintf_r+0x1b2>
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	3307      	adds	r3, #7
 80098d2:	f023 0307 	bic.w	r3, r3, #7
 80098d6:	3308      	adds	r3, #8
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	4433      	add	r3, r6
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	e767      	b.n	80097b2 <_svfiprintf_r+0x4e>
 80098e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80098e6:	460c      	mov	r4, r1
 80098e8:	2001      	movs	r0, #1
 80098ea:	e7a5      	b.n	8009838 <_svfiprintf_r+0xd4>
 80098ec:	2300      	movs	r3, #0
 80098ee:	3401      	adds	r4, #1
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	4619      	mov	r1, r3
 80098f4:	f04f 0c0a 	mov.w	ip, #10
 80098f8:	4620      	mov	r0, r4
 80098fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098fe:	3a30      	subs	r2, #48	; 0x30
 8009900:	2a09      	cmp	r2, #9
 8009902:	d903      	bls.n	800990c <_svfiprintf_r+0x1a8>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0c5      	beq.n	8009894 <_svfiprintf_r+0x130>
 8009908:	9105      	str	r1, [sp, #20]
 800990a:	e7c3      	b.n	8009894 <_svfiprintf_r+0x130>
 800990c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009910:	4604      	mov	r4, r0
 8009912:	2301      	movs	r3, #1
 8009914:	e7f0      	b.n	80098f8 <_svfiprintf_r+0x194>
 8009916:	ab03      	add	r3, sp, #12
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	462a      	mov	r2, r5
 800991c:	4b0f      	ldr	r3, [pc, #60]	; (800995c <_svfiprintf_r+0x1f8>)
 800991e:	a904      	add	r1, sp, #16
 8009920:	4638      	mov	r0, r7
 8009922:	f3af 8000 	nop.w
 8009926:	1c42      	adds	r2, r0, #1
 8009928:	4606      	mov	r6, r0
 800992a:	d1d6      	bne.n	80098da <_svfiprintf_r+0x176>
 800992c:	89ab      	ldrh	r3, [r5, #12]
 800992e:	065b      	lsls	r3, r3, #25
 8009930:	f53f af2c 	bmi.w	800978c <_svfiprintf_r+0x28>
 8009934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009936:	b01d      	add	sp, #116	; 0x74
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	462a      	mov	r2, r5
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <_svfiprintf_r+0x1f8>)
 8009944:	a904      	add	r1, sp, #16
 8009946:	4638      	mov	r0, r7
 8009948:	f000 f87a 	bl	8009a40 <_printf_i>
 800994c:	e7eb      	b.n	8009926 <_svfiprintf_r+0x1c2>
 800994e:	bf00      	nop
 8009950:	0800a2d8 	.word	0x0800a2d8
 8009954:	0800a2e2 	.word	0x0800a2e2
 8009958:	00000000 	.word	0x00000000
 800995c:	080096ad 	.word	0x080096ad
 8009960:	0800a2de 	.word	0x0800a2de

08009964 <_printf_common>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	4616      	mov	r6, r2
 800996a:	4699      	mov	r9, r3
 800996c:	688a      	ldr	r2, [r1, #8]
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009974:	4293      	cmp	r3, r2
 8009976:	bfb8      	it	lt
 8009978:	4613      	movlt	r3, r2
 800997a:	6033      	str	r3, [r6, #0]
 800997c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009980:	4607      	mov	r7, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b10a      	cbz	r2, 800998a <_printf_common+0x26>
 8009986:	3301      	adds	r3, #1
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	0699      	lsls	r1, r3, #26
 800998e:	bf42      	ittt	mi
 8009990:	6833      	ldrmi	r3, [r6, #0]
 8009992:	3302      	addmi	r3, #2
 8009994:	6033      	strmi	r3, [r6, #0]
 8009996:	6825      	ldr	r5, [r4, #0]
 8009998:	f015 0506 	ands.w	r5, r5, #6
 800999c:	d106      	bne.n	80099ac <_printf_common+0x48>
 800999e:	f104 0a19 	add.w	sl, r4, #25
 80099a2:	68e3      	ldr	r3, [r4, #12]
 80099a4:	6832      	ldr	r2, [r6, #0]
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	42ab      	cmp	r3, r5
 80099aa:	dc26      	bgt.n	80099fa <_printf_common+0x96>
 80099ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099b0:	1e13      	subs	r3, r2, #0
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	bf18      	it	ne
 80099b6:	2301      	movne	r3, #1
 80099b8:	0692      	lsls	r2, r2, #26
 80099ba:	d42b      	bmi.n	8009a14 <_printf_common+0xb0>
 80099bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099c0:	4649      	mov	r1, r9
 80099c2:	4638      	mov	r0, r7
 80099c4:	47c0      	blx	r8
 80099c6:	3001      	adds	r0, #1
 80099c8:	d01e      	beq.n	8009a08 <_printf_common+0xa4>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	68e5      	ldr	r5, [r4, #12]
 80099ce:	6832      	ldr	r2, [r6, #0]
 80099d0:	f003 0306 	and.w	r3, r3, #6
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	bf08      	it	eq
 80099d8:	1aad      	subeq	r5, r5, r2
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	6922      	ldr	r2, [r4, #16]
 80099de:	bf0c      	ite	eq
 80099e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099e4:	2500      	movne	r5, #0
 80099e6:	4293      	cmp	r3, r2
 80099e8:	bfc4      	itt	gt
 80099ea:	1a9b      	subgt	r3, r3, r2
 80099ec:	18ed      	addgt	r5, r5, r3
 80099ee:	2600      	movs	r6, #0
 80099f0:	341a      	adds	r4, #26
 80099f2:	42b5      	cmp	r5, r6
 80099f4:	d11a      	bne.n	8009a2c <_printf_common+0xc8>
 80099f6:	2000      	movs	r0, #0
 80099f8:	e008      	b.n	8009a0c <_printf_common+0xa8>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4652      	mov	r2, sl
 80099fe:	4649      	mov	r1, r9
 8009a00:	4638      	mov	r0, r7
 8009a02:	47c0      	blx	r8
 8009a04:	3001      	adds	r0, #1
 8009a06:	d103      	bne.n	8009a10 <_printf_common+0xac>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	3501      	adds	r5, #1
 8009a12:	e7c6      	b.n	80099a2 <_printf_common+0x3e>
 8009a14:	18e1      	adds	r1, r4, r3
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	2030      	movs	r0, #48	; 0x30
 8009a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a1e:	4422      	add	r2, r4
 8009a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a28:	3302      	adds	r3, #2
 8009a2a:	e7c7      	b.n	80099bc <_printf_common+0x58>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4622      	mov	r2, r4
 8009a30:	4649      	mov	r1, r9
 8009a32:	4638      	mov	r0, r7
 8009a34:	47c0      	blx	r8
 8009a36:	3001      	adds	r0, #1
 8009a38:	d0e6      	beq.n	8009a08 <_printf_common+0xa4>
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7d9      	b.n	80099f2 <_printf_common+0x8e>
	...

08009a40 <_printf_i>:
 8009a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	7e0f      	ldrb	r7, [r1, #24]
 8009a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a48:	2f78      	cmp	r7, #120	; 0x78
 8009a4a:	4691      	mov	r9, r2
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	469a      	mov	sl, r3
 8009a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a56:	d807      	bhi.n	8009a68 <_printf_i+0x28>
 8009a58:	2f62      	cmp	r7, #98	; 0x62
 8009a5a:	d80a      	bhi.n	8009a72 <_printf_i+0x32>
 8009a5c:	2f00      	cmp	r7, #0
 8009a5e:	f000 80d8 	beq.w	8009c12 <_printf_i+0x1d2>
 8009a62:	2f58      	cmp	r7, #88	; 0x58
 8009a64:	f000 80a3 	beq.w	8009bae <_printf_i+0x16e>
 8009a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a70:	e03a      	b.n	8009ae8 <_printf_i+0xa8>
 8009a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a76:	2b15      	cmp	r3, #21
 8009a78:	d8f6      	bhi.n	8009a68 <_printf_i+0x28>
 8009a7a:	a101      	add	r1, pc, #4	; (adr r1, 8009a80 <_printf_i+0x40>)
 8009a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a80:	08009ad9 	.word	0x08009ad9
 8009a84:	08009aed 	.word	0x08009aed
 8009a88:	08009a69 	.word	0x08009a69
 8009a8c:	08009a69 	.word	0x08009a69
 8009a90:	08009a69 	.word	0x08009a69
 8009a94:	08009a69 	.word	0x08009a69
 8009a98:	08009aed 	.word	0x08009aed
 8009a9c:	08009a69 	.word	0x08009a69
 8009aa0:	08009a69 	.word	0x08009a69
 8009aa4:	08009a69 	.word	0x08009a69
 8009aa8:	08009a69 	.word	0x08009a69
 8009aac:	08009bf9 	.word	0x08009bf9
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009bdb 	.word	0x08009bdb
 8009ab8:	08009a69 	.word	0x08009a69
 8009abc:	08009a69 	.word	0x08009a69
 8009ac0:	08009c1b 	.word	0x08009c1b
 8009ac4:	08009a69 	.word	0x08009a69
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009a69 	.word	0x08009a69
 8009ad0:	08009a69 	.word	0x08009a69
 8009ad4:	08009be3 	.word	0x08009be3
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	1d1a      	adds	r2, r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	602a      	str	r2, [r5, #0]
 8009ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e0a3      	b.n	8009c34 <_printf_i+0x1f4>
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	6829      	ldr	r1, [r5, #0]
 8009af0:	0606      	lsls	r6, r0, #24
 8009af2:	f101 0304 	add.w	r3, r1, #4
 8009af6:	d50a      	bpl.n	8009b0e <_printf_i+0xce>
 8009af8:	680e      	ldr	r6, [r1, #0]
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	2e00      	cmp	r6, #0
 8009afe:	da03      	bge.n	8009b08 <_printf_i+0xc8>
 8009b00:	232d      	movs	r3, #45	; 0x2d
 8009b02:	4276      	negs	r6, r6
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	485e      	ldr	r0, [pc, #376]	; (8009c84 <_printf_i+0x244>)
 8009b0a:	230a      	movs	r3, #10
 8009b0c:	e019      	b.n	8009b42 <_printf_i+0x102>
 8009b0e:	680e      	ldr	r6, [r1, #0]
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b16:	bf18      	it	ne
 8009b18:	b236      	sxthne	r6, r6
 8009b1a:	e7ef      	b.n	8009afc <_printf_i+0xbc>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	1d19      	adds	r1, r3, #4
 8009b22:	6029      	str	r1, [r5, #0]
 8009b24:	0601      	lsls	r1, r0, #24
 8009b26:	d501      	bpl.n	8009b2c <_printf_i+0xec>
 8009b28:	681e      	ldr	r6, [r3, #0]
 8009b2a:	e002      	b.n	8009b32 <_printf_i+0xf2>
 8009b2c:	0646      	lsls	r6, r0, #25
 8009b2e:	d5fb      	bpl.n	8009b28 <_printf_i+0xe8>
 8009b30:	881e      	ldrh	r6, [r3, #0]
 8009b32:	4854      	ldr	r0, [pc, #336]	; (8009c84 <_printf_i+0x244>)
 8009b34:	2f6f      	cmp	r7, #111	; 0x6f
 8009b36:	bf0c      	ite	eq
 8009b38:	2308      	moveq	r3, #8
 8009b3a:	230a      	movne	r3, #10
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b42:	6865      	ldr	r5, [r4, #4]
 8009b44:	60a5      	str	r5, [r4, #8]
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	bfa2      	ittt	ge
 8009b4a:	6821      	ldrge	r1, [r4, #0]
 8009b4c:	f021 0104 	bicge.w	r1, r1, #4
 8009b50:	6021      	strge	r1, [r4, #0]
 8009b52:	b90e      	cbnz	r6, 8009b58 <_printf_i+0x118>
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	d04d      	beq.n	8009bf4 <_printf_i+0x1b4>
 8009b58:	4615      	mov	r5, r2
 8009b5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b5e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b62:	5dc7      	ldrb	r7, [r0, r7]
 8009b64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b68:	4637      	mov	r7, r6
 8009b6a:	42bb      	cmp	r3, r7
 8009b6c:	460e      	mov	r6, r1
 8009b6e:	d9f4      	bls.n	8009b5a <_printf_i+0x11a>
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d10b      	bne.n	8009b8c <_printf_i+0x14c>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	07de      	lsls	r6, r3, #31
 8009b78:	d508      	bpl.n	8009b8c <_printf_i+0x14c>
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	6861      	ldr	r1, [r4, #4]
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	bfde      	ittt	le
 8009b82:	2330      	movle	r3, #48	; 0x30
 8009b84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b8c:	1b52      	subs	r2, r2, r5
 8009b8e:	6122      	str	r2, [r4, #16]
 8009b90:	f8cd a000 	str.w	sl, [sp]
 8009b94:	464b      	mov	r3, r9
 8009b96:	aa03      	add	r2, sp, #12
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	f7ff fee2 	bl	8009964 <_printf_common>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d14c      	bne.n	8009c3e <_printf_i+0x1fe>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	b004      	add	sp, #16
 8009baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bae:	4835      	ldr	r0, [pc, #212]	; (8009c84 <_printf_i+0x244>)
 8009bb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bb4:	6829      	ldr	r1, [r5, #0]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bbc:	6029      	str	r1, [r5, #0]
 8009bbe:	061d      	lsls	r5, r3, #24
 8009bc0:	d514      	bpl.n	8009bec <_printf_i+0x1ac>
 8009bc2:	07df      	lsls	r7, r3, #31
 8009bc4:	bf44      	itt	mi
 8009bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009bca:	6023      	strmi	r3, [r4, #0]
 8009bcc:	b91e      	cbnz	r6, 8009bd6 <_printf_i+0x196>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	f023 0320 	bic.w	r3, r3, #32
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	e7b0      	b.n	8009b3c <_printf_i+0xfc>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	f043 0320 	orr.w	r3, r3, #32
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	2378      	movs	r3, #120	; 0x78
 8009be4:	4828      	ldr	r0, [pc, #160]	; (8009c88 <_printf_i+0x248>)
 8009be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bea:	e7e3      	b.n	8009bb4 <_printf_i+0x174>
 8009bec:	0659      	lsls	r1, r3, #25
 8009bee:	bf48      	it	mi
 8009bf0:	b2b6      	uxthmi	r6, r6
 8009bf2:	e7e6      	b.n	8009bc2 <_printf_i+0x182>
 8009bf4:	4615      	mov	r5, r2
 8009bf6:	e7bb      	b.n	8009b70 <_printf_i+0x130>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	6826      	ldr	r6, [r4, #0]
 8009bfc:	6961      	ldr	r1, [r4, #20]
 8009bfe:	1d18      	adds	r0, r3, #4
 8009c00:	6028      	str	r0, [r5, #0]
 8009c02:	0635      	lsls	r5, r6, #24
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	d501      	bpl.n	8009c0c <_printf_i+0x1cc>
 8009c08:	6019      	str	r1, [r3, #0]
 8009c0a:	e002      	b.n	8009c12 <_printf_i+0x1d2>
 8009c0c:	0670      	lsls	r0, r6, #25
 8009c0e:	d5fb      	bpl.n	8009c08 <_printf_i+0x1c8>
 8009c10:	8019      	strh	r1, [r3, #0]
 8009c12:	2300      	movs	r3, #0
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	4615      	mov	r5, r2
 8009c18:	e7ba      	b.n	8009b90 <_printf_i+0x150>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	1d1a      	adds	r2, r3, #4
 8009c1e:	602a      	str	r2, [r5, #0]
 8009c20:	681d      	ldr	r5, [r3, #0]
 8009c22:	6862      	ldr	r2, [r4, #4]
 8009c24:	2100      	movs	r1, #0
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7f6 fb62 	bl	80002f0 <memchr>
 8009c2c:	b108      	cbz	r0, 8009c32 <_printf_i+0x1f2>
 8009c2e:	1b40      	subs	r0, r0, r5
 8009c30:	6060      	str	r0, [r4, #4]
 8009c32:	6863      	ldr	r3, [r4, #4]
 8009c34:	6123      	str	r3, [r4, #16]
 8009c36:	2300      	movs	r3, #0
 8009c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c3c:	e7a8      	b.n	8009b90 <_printf_i+0x150>
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	462a      	mov	r2, r5
 8009c42:	4649      	mov	r1, r9
 8009c44:	4640      	mov	r0, r8
 8009c46:	47d0      	blx	sl
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d0ab      	beq.n	8009ba4 <_printf_i+0x164>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	079b      	lsls	r3, r3, #30
 8009c50:	d413      	bmi.n	8009c7a <_printf_i+0x23a>
 8009c52:	68e0      	ldr	r0, [r4, #12]
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	4298      	cmp	r0, r3
 8009c58:	bfb8      	it	lt
 8009c5a:	4618      	movlt	r0, r3
 8009c5c:	e7a4      	b.n	8009ba8 <_printf_i+0x168>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4632      	mov	r2, r6
 8009c62:	4649      	mov	r1, r9
 8009c64:	4640      	mov	r0, r8
 8009c66:	47d0      	blx	sl
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d09b      	beq.n	8009ba4 <_printf_i+0x164>
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	68e3      	ldr	r3, [r4, #12]
 8009c70:	9903      	ldr	r1, [sp, #12]
 8009c72:	1a5b      	subs	r3, r3, r1
 8009c74:	42ab      	cmp	r3, r5
 8009c76:	dcf2      	bgt.n	8009c5e <_printf_i+0x21e>
 8009c78:	e7eb      	b.n	8009c52 <_printf_i+0x212>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	f104 0619 	add.w	r6, r4, #25
 8009c80:	e7f5      	b.n	8009c6e <_printf_i+0x22e>
 8009c82:	bf00      	nop
 8009c84:	0800a2e9 	.word	0x0800a2e9
 8009c88:	0800a2fa 	.word	0x0800a2fa

08009c8c <__retarget_lock_acquire_recursive>:
 8009c8c:	4770      	bx	lr

08009c8e <__retarget_lock_release_recursive>:
 8009c8e:	4770      	bx	lr

08009c90 <memmove>:
 8009c90:	4288      	cmp	r0, r1
 8009c92:	b510      	push	{r4, lr}
 8009c94:	eb01 0402 	add.w	r4, r1, r2
 8009c98:	d902      	bls.n	8009ca0 <memmove+0x10>
 8009c9a:	4284      	cmp	r4, r0
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	d807      	bhi.n	8009cb0 <memmove+0x20>
 8009ca0:	1e43      	subs	r3, r0, #1
 8009ca2:	42a1      	cmp	r1, r4
 8009ca4:	d008      	beq.n	8009cb8 <memmove+0x28>
 8009ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cae:	e7f8      	b.n	8009ca2 <memmove+0x12>
 8009cb0:	4402      	add	r2, r0
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	428a      	cmp	r2, r1
 8009cb6:	d100      	bne.n	8009cba <memmove+0x2a>
 8009cb8:	bd10      	pop	{r4, pc}
 8009cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cc2:	e7f7      	b.n	8009cb4 <memmove+0x24>

08009cc4 <_realloc_r>:
 8009cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc8:	4680      	mov	r8, r0
 8009cca:	4614      	mov	r4, r2
 8009ccc:	460e      	mov	r6, r1
 8009cce:	b921      	cbnz	r1, 8009cda <_realloc_r+0x16>
 8009cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	f7ff bc39 	b.w	800954c <_malloc_r>
 8009cda:	b92a      	cbnz	r2, 8009ce8 <_realloc_r+0x24>
 8009cdc:	f7ff fbca 	bl	8009474 <_free_r>
 8009ce0:	4625      	mov	r5, r4
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce8:	f000 f81b 	bl	8009d22 <_malloc_usable_size_r>
 8009cec:	4284      	cmp	r4, r0
 8009cee:	4607      	mov	r7, r0
 8009cf0:	d802      	bhi.n	8009cf8 <_realloc_r+0x34>
 8009cf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cf6:	d812      	bhi.n	8009d1e <_realloc_r+0x5a>
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7ff fc26 	bl	800954c <_malloc_r>
 8009d00:	4605      	mov	r5, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d0ed      	beq.n	8009ce2 <_realloc_r+0x1e>
 8009d06:	42bc      	cmp	r4, r7
 8009d08:	4622      	mov	r2, r4
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	bf28      	it	cs
 8009d0e:	463a      	movcs	r2, r7
 8009d10:	f7ff fb9a 	bl	8009448 <memcpy>
 8009d14:	4631      	mov	r1, r6
 8009d16:	4640      	mov	r0, r8
 8009d18:	f7ff fbac 	bl	8009474 <_free_r>
 8009d1c:	e7e1      	b.n	8009ce2 <_realloc_r+0x1e>
 8009d1e:	4635      	mov	r5, r6
 8009d20:	e7df      	b.n	8009ce2 <_realloc_r+0x1e>

08009d22 <_malloc_usable_size_r>:
 8009d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d26:	1f18      	subs	r0, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bfbc      	itt	lt
 8009d2c:	580b      	ldrlt	r3, [r1, r0]
 8009d2e:	18c0      	addlt	r0, r0, r3
 8009d30:	4770      	bx	lr
	...

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
