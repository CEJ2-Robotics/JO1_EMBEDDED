
JO1_Embedded_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e80  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08104120  08104120  00005120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104178  08104178  00005178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810417c  0810417c  0000517c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000064  10000000  08104180  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004b98  10000064  081041e4  00006064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004bfc  081041e4  00006bfc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018364  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000319f  00000000  00000000  0001e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001448  00000000  00000000  00021598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000f9d  00000000  00000000  000229e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a675  00000000  00000000  0002397d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001547b  00000000  00000000  0005dff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018b9a9  00000000  00000000  0007346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001fee16  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005810  00000000  00000000  001fee5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  0020466c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000064 	.word	0x10000064
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08104108 	.word	0x08104108

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000068 	.word	0x10000068
 81002dc:	08104108 	.word	0x08104108

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	@ (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	@ (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	@ (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	@ (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100316:	4b20      	ldr	r3, [pc, #128]	@ (8100398 <main+0x88>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810031c:	4a1e      	ldr	r2, [pc, #120]	@ (8100398 <main+0x88>)
 810031e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100326:	4b1c      	ldr	r3, [pc, #112]	@ (8100398 <main+0x88>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810032c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f000 fa95 	bl	8100864 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f000 fb1f 	bl	810097c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f000 faa0 	bl	8100888 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b14      	ldr	r3, [pc, #80]	@ (810039c <main+0x8c>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d108      	bne.n	8100368 <main+0x58>
 8100356:	4b12      	ldr	r3, [pc, #72]	@ (81003a0 <main+0x90>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810035c:	4a10      	ldr	r2, [pc, #64]	@ (81003a0 <main+0x90>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100366:	e007      	b.n	8100378 <main+0x68>
 8100368:	4b0d      	ldr	r3, [pc, #52]	@ (81003a0 <main+0x90>)
 810036a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810036e:	4a0c      	ldr	r2, [pc, #48]	@ (81003a0 <main+0x90>)
 8100370:	f043 0301 	orr.w	r3, r3, #1
 8100374:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100378:	f000 f90e 	bl	8100598 <HAL_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 810037c:	f001 f82e 	bl	81013dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100380:	4a08      	ldr	r2, [pc, #32]	@ (81003a4 <main+0x94>)
 8100382:	2100      	movs	r1, #0
 8100384:	4808      	ldr	r0, [pc, #32]	@ (81003a8 <main+0x98>)
 8100386:	f001 f873 	bl	8101470 <osThreadNew>
 810038a:	4603      	mov	r3, r0
 810038c:	4a07      	ldr	r2, [pc, #28]	@ (81003ac <main+0x9c>)
 810038e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100390:	f001 f848 	bl	8101424 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100394:	bf00      	nop
 8100396:	e7fd      	b.n	8100394 <main+0x84>
 8100398:	58024400 	.word	0x58024400
 810039c:	e000ed00 	.word	0xe000ed00
 81003a0:	58026400 	.word	0x58026400
 81003a4:	08104154 	.word	0x08104154
 81003a8:	081003b1 	.word	0x081003b1
 81003ac:	10000080 	.word	0x10000080

081003b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81003b0:	b580      	push	{r7, lr}
 81003b2:	b082      	sub	sp, #8
 81003b4:	af00      	add	r7, sp, #0
 81003b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 81003b8:	2001      	movs	r0, #1
 81003ba:	f001 f8eb 	bl	8101594 <osDelay>
 81003be:	e7fb      	b.n	81003b8 <StartDefaultTask+0x8>

081003c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81003c0:	b580      	push	{r7, lr}
 81003c2:	b082      	sub	sp, #8
 81003c4:	af00      	add	r7, sp, #0
 81003c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 81003c8:	687b      	ldr	r3, [r7, #4]
 81003ca:	681b      	ldr	r3, [r3, #0]
 81003cc:	4a04      	ldr	r2, [pc, #16]	@ (81003e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81003ce:	4293      	cmp	r3, r2
 81003d0:	d101      	bne.n	81003d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81003d2:	f000 f93f 	bl	8100654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81003d6:	bf00      	nop
 81003d8:	3708      	adds	r7, #8
 81003da:	46bd      	mov	sp, r7
 81003dc:	bd80      	pop	{r7, pc}
 81003de:	bf00      	nop
 81003e0:	40000400 	.word	0x40000400

081003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81003e4:	b580      	push	{r7, lr}
 81003e6:	b082      	sub	sp, #8
 81003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81003ea:	4b0c      	ldr	r3, [pc, #48]	@ (810041c <HAL_MspInit+0x38>)
 81003ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81003f0:	4a0a      	ldr	r2, [pc, #40]	@ (810041c <HAL_MspInit+0x38>)
 81003f2:	f043 0302 	orr.w	r3, r3, #2
 81003f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81003fa:	4b08      	ldr	r3, [pc, #32]	@ (810041c <HAL_MspInit+0x38>)
 81003fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100400:	f003 0302 	and.w	r3, r3, #2
 8100404:	607b      	str	r3, [r7, #4]
 8100406:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100408:	2200      	movs	r2, #0
 810040a:	210f      	movs	r1, #15
 810040c:	f06f 0001 	mvn.w	r0, #1
 8100410:	f000 f9ec 	bl	81007ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100414:	bf00      	nop
 8100416:	3708      	adds	r7, #8
 8100418:	46bd      	mov	sp, r7
 810041a:	bd80      	pop	{r7, pc}
 810041c:	58024400 	.word	0x58024400

08100420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100420:	b580      	push	{r7, lr}
 8100422:	b090      	sub	sp, #64	@ 0x40
 8100424:	af00      	add	r7, sp, #0
 8100426:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100428:	687b      	ldr	r3, [r7, #4]
 810042a:	2b0f      	cmp	r3, #15
 810042c:	d827      	bhi.n	810047e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 810042e:	2200      	movs	r2, #0
 8100430:	6879      	ldr	r1, [r7, #4]
 8100432:	201d      	movs	r0, #29
 8100434:	f000 f9da 	bl	81007ec <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8100438:	201d      	movs	r0, #29
 810043a:	f000 f9f1 	bl	8100820 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 810043e:	4a29      	ldr	r2, [pc, #164]	@ (81004e4 <HAL_InitTick+0xc4>)
 8100440:	687b      	ldr	r3, [r7, #4]
 8100442:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8100444:	4b28      	ldr	r3, [pc, #160]	@ (81004e8 <HAL_InitTick+0xc8>)
 8100446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810044a:	4a27      	ldr	r2, [pc, #156]	@ (81004e8 <HAL_InitTick+0xc8>)
 810044c:	f043 0302 	orr.w	r3, r3, #2
 8100450:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100454:	4b24      	ldr	r3, [pc, #144]	@ (81004e8 <HAL_InitTick+0xc8>)
 8100456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810045a:	f003 0302 	and.w	r3, r3, #2
 810045e:	60fb      	str	r3, [r7, #12]
 8100460:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100462:	f107 0210 	add.w	r2, r7, #16
 8100466:	f107 0314 	add.w	r3, r7, #20
 810046a:	4611      	mov	r1, r2
 810046c:	4618      	mov	r0, r3
 810046e:	f000 fc55 	bl	8100d1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100474:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100478:	2b00      	cmp	r3, #0
 810047a:	d106      	bne.n	810048a <HAL_InitTick+0x6a>
 810047c:	e001      	b.n	8100482 <HAL_InitTick+0x62>
    return HAL_ERROR;
 810047e:	2301      	movs	r3, #1
 8100480:	e02b      	b.n	81004da <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100482:	f000 fc35 	bl	8100cf0 <HAL_RCC_GetPCLK1Freq>
 8100486:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100488:	e004      	b.n	8100494 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810048a:	f000 fc31 	bl	8100cf0 <HAL_RCC_GetPCLK1Freq>
 810048e:	4603      	mov	r3, r0
 8100490:	005b      	lsls	r3, r3, #1
 8100492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100496:	4a15      	ldr	r2, [pc, #84]	@ (81004ec <HAL_InitTick+0xcc>)
 8100498:	fba2 2303 	umull	r2, r3, r2, r3
 810049c:	0c9b      	lsrs	r3, r3, #18
 810049e:	3b01      	subs	r3, #1
 81004a0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 81004a2:	4b13      	ldr	r3, [pc, #76]	@ (81004f0 <HAL_InitTick+0xd0>)
 81004a4:	4a13      	ldr	r2, [pc, #76]	@ (81004f4 <HAL_InitTick+0xd4>)
 81004a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 81004a8:	4b11      	ldr	r3, [pc, #68]	@ (81004f0 <HAL_InitTick+0xd0>)
 81004aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81004ae:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 81004b0:	4a0f      	ldr	r2, [pc, #60]	@ (81004f0 <HAL_InitTick+0xd0>)
 81004b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81004b4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 81004b6:	4b0e      	ldr	r3, [pc, #56]	@ (81004f0 <HAL_InitTick+0xd0>)
 81004b8:	2200      	movs	r2, #0
 81004ba:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81004bc:	4b0c      	ldr	r3, [pc, #48]	@ (81004f0 <HAL_InitTick+0xd0>)
 81004be:	2200      	movs	r2, #0
 81004c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 81004c2:	480b      	ldr	r0, [pc, #44]	@ (81004f0 <HAL_InitTick+0xd0>)
 81004c4:	f000 fc6c 	bl	8100da0 <HAL_TIM_Base_Init>
 81004c8:	4603      	mov	r3, r0
 81004ca:	2b00      	cmp	r3, #0
 81004cc:	d104      	bne.n	81004d8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 81004ce:	4808      	ldr	r0, [pc, #32]	@ (81004f0 <HAL_InitTick+0xd0>)
 81004d0:	f000 fcc8 	bl	8100e64 <HAL_TIM_Base_Start_IT>
 81004d4:	4603      	mov	r3, r0
 81004d6:	e000      	b.n	81004da <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81004d8:	2301      	movs	r3, #1
}
 81004da:	4618      	mov	r0, r3
 81004dc:	3740      	adds	r7, #64	@ 0x40
 81004de:	46bd      	mov	sp, r7
 81004e0:	bd80      	pop	{r7, pc}
 81004e2:	bf00      	nop
 81004e4:	10000008 	.word	0x10000008
 81004e8:	58024400 	.word	0x58024400
 81004ec:	431bde83 	.word	0x431bde83
 81004f0:	10000084 	.word	0x10000084
 81004f4:	40000400 	.word	0x40000400

081004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81004f8:	b480      	push	{r7}
 81004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81004fc:	bf00      	nop
 81004fe:	e7fd      	b.n	81004fc <NMI_Handler+0x4>

08100500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100500:	b480      	push	{r7}
 8100502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100504:	bf00      	nop
 8100506:	e7fd      	b.n	8100504 <HardFault_Handler+0x4>

08100508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100508:	b480      	push	{r7}
 810050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810050c:	bf00      	nop
 810050e:	e7fd      	b.n	810050c <MemManage_Handler+0x4>

08100510 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100510:	b480      	push	{r7}
 8100512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100514:	bf00      	nop
 8100516:	e7fd      	b.n	8100514 <BusFault_Handler+0x4>

08100518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100518:	b480      	push	{r7}
 810051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810051c:	bf00      	nop
 810051e:	e7fd      	b.n	810051c <UsageFault_Handler+0x4>

08100520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100520:	b480      	push	{r7}
 8100522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100524:	bf00      	nop
 8100526:	46bd      	mov	sp, r7
 8100528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810052c:	4770      	bx	lr
	...

08100530 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8100530:	b580      	push	{r7, lr}
 8100532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8100534:	4802      	ldr	r0, [pc, #8]	@ (8100540 <TIM3_IRQHandler+0x10>)
 8100536:	f000 fd0d 	bl	8100f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 810053a:	bf00      	nop
 810053c:	bd80      	pop	{r7, pc}
 810053e:	bf00      	nop
 8100540:	10000084 	.word	0x10000084

08100544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810057c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100548:	f7ff feca 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810054c:	480c      	ldr	r0, [pc, #48]	@ (8100580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810054e:	490d      	ldr	r1, [pc, #52]	@ (8100584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100550:	4a0d      	ldr	r2, [pc, #52]	@ (8100588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100554:	e002      	b.n	810055c <LoopCopyDataInit>

08100556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810055a:	3304      	adds	r3, #4

0810055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100560:	d3f9      	bcc.n	8100556 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100562:	4a0a      	ldr	r2, [pc, #40]	@ (810058c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100564:	4c0a      	ldr	r4, [pc, #40]	@ (8100590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100568:	e001      	b.n	810056e <LoopFillZerobss>

0810056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810056c:	3204      	adds	r2, #4

0810056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100570:	d3fb      	bcc.n	810056a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100572:	f003 fd3f 	bl	8103ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100576:	f7ff fecb 	bl	8100310 <main>
  bx  lr
 810057a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810057c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100580:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100584:	10000064 	.word	0x10000064
  ldr r2, =_sidata
 8100588:	08104180 	.word	0x08104180
  ldr r2, =_sbss
 810058c:	10000064 	.word	0x10000064
  ldr r4, =_ebss
 8100590:	10004bfc 	.word	0x10004bfc

08100594 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100594:	e7fe      	b.n	8100594 <ADC3_IRQHandler>
	...

08100598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100598:	b580      	push	{r7, lr}
 810059a:	b082      	sub	sp, #8
 810059c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810059e:	4b28      	ldr	r3, [pc, #160]	@ (8100640 <HAL_Init+0xa8>)
 81005a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81005a4:	4a26      	ldr	r2, [pc, #152]	@ (8100640 <HAL_Init+0xa8>)
 81005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81005aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81005ae:	4b24      	ldr	r3, [pc, #144]	@ (8100640 <HAL_Init+0xa8>)
 81005b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81005b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81005b8:	603b      	str	r3, [r7, #0]
 81005ba:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81005bc:	4b21      	ldr	r3, [pc, #132]	@ (8100644 <HAL_Init+0xac>)
 81005be:	681b      	ldr	r3, [r3, #0]
 81005c0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81005c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81005c8:	4a1e      	ldr	r2, [pc, #120]	@ (8100644 <HAL_Init+0xac>)
 81005ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81005ce:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81005d0:	4b1c      	ldr	r3, [pc, #112]	@ (8100644 <HAL_Init+0xac>)
 81005d2:	681b      	ldr	r3, [r3, #0]
 81005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8100644 <HAL_Init+0xac>)
 81005d6:	f043 0301 	orr.w	r3, r3, #1
 81005da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81005dc:	2003      	movs	r0, #3
 81005de:	f000 f8fa 	bl	81007d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81005e2:	f000 f9d9 	bl	8100998 <HAL_RCC_GetSysClockFreq>
 81005e6:	4602      	mov	r2, r0
 81005e8:	4b15      	ldr	r3, [pc, #84]	@ (8100640 <HAL_Init+0xa8>)
 81005ea:	699b      	ldr	r3, [r3, #24]
 81005ec:	0a1b      	lsrs	r3, r3, #8
 81005ee:	f003 030f 	and.w	r3, r3, #15
 81005f2:	4915      	ldr	r1, [pc, #84]	@ (8100648 <HAL_Init+0xb0>)
 81005f4:	5ccb      	ldrb	r3, [r1, r3]
 81005f6:	f003 031f 	and.w	r3, r3, #31
 81005fa:	fa22 f303 	lsr.w	r3, r2, r3
 81005fe:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100600:	4b0f      	ldr	r3, [pc, #60]	@ (8100640 <HAL_Init+0xa8>)
 8100602:	699b      	ldr	r3, [r3, #24]
 8100604:	f003 030f 	and.w	r3, r3, #15
 8100608:	4a0f      	ldr	r2, [pc, #60]	@ (8100648 <HAL_Init+0xb0>)
 810060a:	5cd3      	ldrb	r3, [r2, r3]
 810060c:	f003 031f 	and.w	r3, r3, #31
 8100610:	687a      	ldr	r2, [r7, #4]
 8100612:	fa22 f303 	lsr.w	r3, r2, r3
 8100616:	4a0d      	ldr	r2, [pc, #52]	@ (810064c <HAL_Init+0xb4>)
 8100618:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810061a:	4b0c      	ldr	r3, [pc, #48]	@ (810064c <HAL_Init+0xb4>)
 810061c:	681b      	ldr	r3, [r3, #0]
 810061e:	4a0c      	ldr	r2, [pc, #48]	@ (8100650 <HAL_Init+0xb8>)
 8100620:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100622:	200f      	movs	r0, #15
 8100624:	f7ff fefc 	bl	8100420 <HAL_InitTick>
 8100628:	4603      	mov	r3, r0
 810062a:	2b00      	cmp	r3, #0
 810062c:	d001      	beq.n	8100632 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810062e:	2301      	movs	r3, #1
 8100630:	e002      	b.n	8100638 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100632:	f7ff fed7 	bl	81003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100636:	2300      	movs	r3, #0
}
 8100638:	4618      	mov	r0, r3
 810063a:	3708      	adds	r7, #8
 810063c:	46bd      	mov	sp, r7
 810063e:	bd80      	pop	{r7, pc}
 8100640:	58024400 	.word	0x58024400
 8100644:	40024400 	.word	0x40024400
 8100648:	08104144 	.word	0x08104144
 810064c:	10000004 	.word	0x10000004
 8100650:	10000000 	.word	0x10000000

08100654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100654:	b480      	push	{r7}
 8100656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100658:	4b06      	ldr	r3, [pc, #24]	@ (8100674 <HAL_IncTick+0x20>)
 810065a:	781b      	ldrb	r3, [r3, #0]
 810065c:	461a      	mov	r2, r3
 810065e:	4b06      	ldr	r3, [pc, #24]	@ (8100678 <HAL_IncTick+0x24>)
 8100660:	681b      	ldr	r3, [r3, #0]
 8100662:	4413      	add	r3, r2
 8100664:	4a04      	ldr	r2, [pc, #16]	@ (8100678 <HAL_IncTick+0x24>)
 8100666:	6013      	str	r3, [r2, #0]
}
 8100668:	bf00      	nop
 810066a:	46bd      	mov	sp, r7
 810066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100670:	4770      	bx	lr
 8100672:	bf00      	nop
 8100674:	1000000c 	.word	0x1000000c
 8100678:	100000d0 	.word	0x100000d0

0810067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810067c:	b480      	push	{r7}
 810067e:	b085      	sub	sp, #20
 8100680:	af00      	add	r7, sp, #0
 8100682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100684:	687b      	ldr	r3, [r7, #4]
 8100686:	f003 0307 	and.w	r3, r3, #7
 810068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810068c:	4b0c      	ldr	r3, [pc, #48]	@ (81006c0 <__NVIC_SetPriorityGrouping+0x44>)
 810068e:	68db      	ldr	r3, [r3, #12]
 8100690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100692:	68ba      	ldr	r2, [r7, #8]
 8100694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100698:	4013      	ands	r3, r2
 810069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810069c:	68fb      	ldr	r3, [r7, #12]
 810069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006a0:	68bb      	ldr	r3, [r7, #8]
 81006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81006a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006ae:	4a04      	ldr	r2, [pc, #16]	@ (81006c0 <__NVIC_SetPriorityGrouping+0x44>)
 81006b0:	68bb      	ldr	r3, [r7, #8]
 81006b2:	60d3      	str	r3, [r2, #12]
}
 81006b4:	bf00      	nop
 81006b6:	3714      	adds	r7, #20
 81006b8:	46bd      	mov	sp, r7
 81006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006be:	4770      	bx	lr
 81006c0:	e000ed00 	.word	0xe000ed00

081006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006c4:	b480      	push	{r7}
 81006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006c8:	4b04      	ldr	r3, [pc, #16]	@ (81006dc <__NVIC_GetPriorityGrouping+0x18>)
 81006ca:	68db      	ldr	r3, [r3, #12]
 81006cc:	0a1b      	lsrs	r3, r3, #8
 81006ce:	f003 0307 	and.w	r3, r3, #7
}
 81006d2:	4618      	mov	r0, r3
 81006d4:	46bd      	mov	sp, r7
 81006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006da:	4770      	bx	lr
 81006dc:	e000ed00 	.word	0xe000ed00

081006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81006e0:	b480      	push	{r7}
 81006e2:	b083      	sub	sp, #12
 81006e4:	af00      	add	r7, sp, #0
 81006e6:	4603      	mov	r3, r0
 81006e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81006ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006ee:	2b00      	cmp	r3, #0
 81006f0:	db0b      	blt.n	810070a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81006f2:	88fb      	ldrh	r3, [r7, #6]
 81006f4:	f003 021f 	and.w	r2, r3, #31
 81006f8:	4907      	ldr	r1, [pc, #28]	@ (8100718 <__NVIC_EnableIRQ+0x38>)
 81006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006fe:	095b      	lsrs	r3, r3, #5
 8100700:	2001      	movs	r0, #1
 8100702:	fa00 f202 	lsl.w	r2, r0, r2
 8100706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810070a:	bf00      	nop
 810070c:	370c      	adds	r7, #12
 810070e:	46bd      	mov	sp, r7
 8100710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100714:	4770      	bx	lr
 8100716:	bf00      	nop
 8100718:	e000e100 	.word	0xe000e100

0810071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810071c:	b480      	push	{r7}
 810071e:	b083      	sub	sp, #12
 8100720:	af00      	add	r7, sp, #0
 8100722:	4603      	mov	r3, r0
 8100724:	6039      	str	r1, [r7, #0]
 8100726:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810072c:	2b00      	cmp	r3, #0
 810072e:	db0a      	blt.n	8100746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100730:	683b      	ldr	r3, [r7, #0]
 8100732:	b2da      	uxtb	r2, r3
 8100734:	490c      	ldr	r1, [pc, #48]	@ (8100768 <__NVIC_SetPriority+0x4c>)
 8100736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810073a:	0112      	lsls	r2, r2, #4
 810073c:	b2d2      	uxtb	r2, r2
 810073e:	440b      	add	r3, r1
 8100740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100744:	e00a      	b.n	810075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100746:	683b      	ldr	r3, [r7, #0]
 8100748:	b2da      	uxtb	r2, r3
 810074a:	4908      	ldr	r1, [pc, #32]	@ (810076c <__NVIC_SetPriority+0x50>)
 810074c:	88fb      	ldrh	r3, [r7, #6]
 810074e:	f003 030f 	and.w	r3, r3, #15
 8100752:	3b04      	subs	r3, #4
 8100754:	0112      	lsls	r2, r2, #4
 8100756:	b2d2      	uxtb	r2, r2
 8100758:	440b      	add	r3, r1
 810075a:	761a      	strb	r2, [r3, #24]
}
 810075c:	bf00      	nop
 810075e:	370c      	adds	r7, #12
 8100760:	46bd      	mov	sp, r7
 8100762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100766:	4770      	bx	lr
 8100768:	e000e100 	.word	0xe000e100
 810076c:	e000ed00 	.word	0xe000ed00

08100770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100770:	b480      	push	{r7}
 8100772:	b089      	sub	sp, #36	@ 0x24
 8100774:	af00      	add	r7, sp, #0
 8100776:	60f8      	str	r0, [r7, #12]
 8100778:	60b9      	str	r1, [r7, #8]
 810077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810077c:	68fb      	ldr	r3, [r7, #12]
 810077e:	f003 0307 	and.w	r3, r3, #7
 8100782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100784:	69fb      	ldr	r3, [r7, #28]
 8100786:	f1c3 0307 	rsb	r3, r3, #7
 810078a:	2b04      	cmp	r3, #4
 810078c:	bf28      	it	cs
 810078e:	2304      	movcs	r3, #4
 8100790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100792:	69fb      	ldr	r3, [r7, #28]
 8100794:	3304      	adds	r3, #4
 8100796:	2b06      	cmp	r3, #6
 8100798:	d902      	bls.n	81007a0 <NVIC_EncodePriority+0x30>
 810079a:	69fb      	ldr	r3, [r7, #28]
 810079c:	3b03      	subs	r3, #3
 810079e:	e000      	b.n	81007a2 <NVIC_EncodePriority+0x32>
 81007a0:	2300      	movs	r3, #0
 81007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81007a8:	69bb      	ldr	r3, [r7, #24]
 81007aa:	fa02 f303 	lsl.w	r3, r2, r3
 81007ae:	43da      	mvns	r2, r3
 81007b0:	68bb      	ldr	r3, [r7, #8]
 81007b2:	401a      	ands	r2, r3
 81007b4:	697b      	ldr	r3, [r7, #20]
 81007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81007b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 81007bc:	697b      	ldr	r3, [r7, #20]
 81007be:	fa01 f303 	lsl.w	r3, r1, r3
 81007c2:	43d9      	mvns	r1, r3
 81007c4:	687b      	ldr	r3, [r7, #4]
 81007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007c8:	4313      	orrs	r3, r2
         );
}
 81007ca:	4618      	mov	r0, r3
 81007cc:	3724      	adds	r7, #36	@ 0x24
 81007ce:	46bd      	mov	sp, r7
 81007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d4:	4770      	bx	lr

081007d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007d6:	b580      	push	{r7, lr}
 81007d8:	b082      	sub	sp, #8
 81007da:	af00      	add	r7, sp, #0
 81007dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81007de:	6878      	ldr	r0, [r7, #4]
 81007e0:	f7ff ff4c 	bl	810067c <__NVIC_SetPriorityGrouping>
}
 81007e4:	bf00      	nop
 81007e6:	3708      	adds	r7, #8
 81007e8:	46bd      	mov	sp, r7
 81007ea:	bd80      	pop	{r7, pc}

081007ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007ec:	b580      	push	{r7, lr}
 81007ee:	b086      	sub	sp, #24
 81007f0:	af00      	add	r7, sp, #0
 81007f2:	4603      	mov	r3, r0
 81007f4:	60b9      	str	r1, [r7, #8]
 81007f6:	607a      	str	r2, [r7, #4]
 81007f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81007fa:	f7ff ff63 	bl	81006c4 <__NVIC_GetPriorityGrouping>
 81007fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100800:	687a      	ldr	r2, [r7, #4]
 8100802:	68b9      	ldr	r1, [r7, #8]
 8100804:	6978      	ldr	r0, [r7, #20]
 8100806:	f7ff ffb3 	bl	8100770 <NVIC_EncodePriority>
 810080a:	4602      	mov	r2, r0
 810080c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100810:	4611      	mov	r1, r2
 8100812:	4618      	mov	r0, r3
 8100814:	f7ff ff82 	bl	810071c <__NVIC_SetPriority>
}
 8100818:	bf00      	nop
 810081a:	3718      	adds	r7, #24
 810081c:	46bd      	mov	sp, r7
 810081e:	bd80      	pop	{r7, pc}

08100820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100820:	b580      	push	{r7, lr}
 8100822:	b082      	sub	sp, #8
 8100824:	af00      	add	r7, sp, #0
 8100826:	4603      	mov	r3, r0
 8100828:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810082a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810082e:	4618      	mov	r0, r3
 8100830:	f7ff ff56 	bl	81006e0 <__NVIC_EnableIRQ>
}
 8100834:	bf00      	nop
 8100836:	3708      	adds	r7, #8
 8100838:	46bd      	mov	sp, r7
 810083a:	bd80      	pop	{r7, pc}

0810083c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810083c:	b480      	push	{r7}
 810083e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100840:	4b07      	ldr	r3, [pc, #28]	@ (8100860 <HAL_GetCurrentCPUID+0x24>)
 8100842:	681b      	ldr	r3, [r3, #0]
 8100844:	091b      	lsrs	r3, r3, #4
 8100846:	f003 030f 	and.w	r3, r3, #15
 810084a:	2b07      	cmp	r3, #7
 810084c:	d101      	bne.n	8100852 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810084e:	2303      	movs	r3, #3
 8100850:	e000      	b.n	8100854 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100852:	2301      	movs	r3, #1
  }
}
 8100854:	4618      	mov	r0, r3
 8100856:	46bd      	mov	sp, r7
 8100858:	f85d 7b04 	ldr.w	r7, [sp], #4
 810085c:	4770      	bx	lr
 810085e:	bf00      	nop
 8100860:	e000ed00 	.word	0xe000ed00

08100864 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100864:	b480      	push	{r7}
 8100866:	b083      	sub	sp, #12
 8100868:	af00      	add	r7, sp, #0
 810086a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810086c:	4b05      	ldr	r3, [pc, #20]	@ (8100884 <HAL_HSEM_ActivateNotification+0x20>)
 810086e:	681a      	ldr	r2, [r3, #0]
 8100870:	4904      	ldr	r1, [pc, #16]	@ (8100884 <HAL_HSEM_ActivateNotification+0x20>)
 8100872:	687b      	ldr	r3, [r7, #4]
 8100874:	4313      	orrs	r3, r2
 8100876:	600b      	str	r3, [r1, #0]
#endif
}
 8100878:	bf00      	nop
 810087a:	370c      	adds	r7, #12
 810087c:	46bd      	mov	sp, r7
 810087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100882:	4770      	bx	lr
 8100884:	58026510 	.word	0x58026510

08100888 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100888:	b580      	push	{r7, lr}
 810088a:	b084      	sub	sp, #16
 810088c:	af00      	add	r7, sp, #0
 810088e:	60f8      	str	r0, [r7, #12]
 8100890:	460b      	mov	r3, r1
 8100892:	607a      	str	r2, [r7, #4]
 8100894:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100896:	4b37      	ldr	r3, [pc, #220]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100898:	681b      	ldr	r3, [r3, #0]
 810089a:	f023 0201 	bic.w	r2, r3, #1
 810089e:	4935      	ldr	r1, [pc, #212]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008a0:	68fb      	ldr	r3, [r7, #12]
 81008a2:	4313      	orrs	r3, r2
 81008a4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81008a6:	687b      	ldr	r3, [r7, #4]
 81008a8:	2b00      	cmp	r3, #0
 81008aa:	d123      	bne.n	81008f4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81008ac:	f7ff ffc6 	bl	810083c <HAL_GetCurrentCPUID>
 81008b0:	4603      	mov	r3, r0
 81008b2:	2b03      	cmp	r3, #3
 81008b4:	d158      	bne.n	8100968 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81008b6:	4b2f      	ldr	r3, [pc, #188]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008b8:	691b      	ldr	r3, [r3, #16]
 81008ba:	4a2e      	ldr	r2, [pc, #184]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008bc:	f023 0301 	bic.w	r3, r3, #1
 81008c0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008c4:	691b      	ldr	r3, [r3, #16]
 81008c6:	4a2c      	ldr	r2, [pc, #176]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008c8:	f043 0304 	orr.w	r3, r3, #4
 81008cc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81008ce:	f3bf 8f4f 	dsb	sy
}
 81008d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81008d4:	f3bf 8f6f 	isb	sy
}
 81008d8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81008da:	7afb      	ldrb	r3, [r7, #11]
 81008dc:	2b01      	cmp	r3, #1
 81008de:	d101      	bne.n	81008e4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81008e0:	bf30      	wfi
 81008e2:	e000      	b.n	81008e6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81008e4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008e6:	4b24      	ldr	r3, [pc, #144]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008e8:	691b      	ldr	r3, [r3, #16]
 81008ea:	4a23      	ldr	r2, [pc, #140]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008ec:	f023 0304 	bic.w	r3, r3, #4
 81008f0:	6113      	str	r3, [r2, #16]
 81008f2:	e03c      	b.n	810096e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81008f4:	687b      	ldr	r3, [r7, #4]
 81008f6:	2b01      	cmp	r3, #1
 81008f8:	d123      	bne.n	8100942 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81008fa:	f7ff ff9f 	bl	810083c <HAL_GetCurrentCPUID>
 81008fe:	4603      	mov	r3, r0
 8100900:	2b01      	cmp	r3, #1
 8100902:	d133      	bne.n	810096c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100904:	4b1b      	ldr	r3, [pc, #108]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100906:	695b      	ldr	r3, [r3, #20]
 8100908:	4a1a      	ldr	r2, [pc, #104]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 810090a:	f023 0302 	bic.w	r3, r3, #2
 810090e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100910:	4b19      	ldr	r3, [pc, #100]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100912:	691b      	ldr	r3, [r3, #16]
 8100914:	4a18      	ldr	r2, [pc, #96]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100916:	f043 0304 	orr.w	r3, r3, #4
 810091a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810091c:	f3bf 8f4f 	dsb	sy
}
 8100920:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100922:	f3bf 8f6f 	isb	sy
}
 8100926:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100928:	7afb      	ldrb	r3, [r7, #11]
 810092a:	2b01      	cmp	r3, #1
 810092c:	d101      	bne.n	8100932 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810092e:	bf30      	wfi
 8100930:	e000      	b.n	8100934 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100932:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100934:	4b10      	ldr	r3, [pc, #64]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100936:	691b      	ldr	r3, [r3, #16]
 8100938:	4a0f      	ldr	r2, [pc, #60]	@ (8100978 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810093a:	f023 0304 	bic.w	r3, r3, #4
 810093e:	6113      	str	r3, [r2, #16]
 8100940:	e015      	b.n	810096e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100942:	f7ff ff7b 	bl	810083c <HAL_GetCurrentCPUID>
 8100946:	4603      	mov	r3, r0
 8100948:	2b03      	cmp	r3, #3
 810094a:	d106      	bne.n	810095a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810094c:	4b09      	ldr	r3, [pc, #36]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 810094e:	691b      	ldr	r3, [r3, #16]
 8100950:	4a08      	ldr	r2, [pc, #32]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100952:	f023 0304 	bic.w	r3, r3, #4
 8100956:	6113      	str	r3, [r2, #16]
 8100958:	e009      	b.n	810096e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810095a:	4b06      	ldr	r3, [pc, #24]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 810095c:	695b      	ldr	r3, [r3, #20]
 810095e:	4a05      	ldr	r2, [pc, #20]	@ (8100974 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100960:	f023 0304 	bic.w	r3, r3, #4
 8100964:	6153      	str	r3, [r2, #20]
 8100966:	e002      	b.n	810096e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100968:	bf00      	nop
 810096a:	e000      	b.n	810096e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810096c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810096e:	3710      	adds	r7, #16
 8100970:	46bd      	mov	sp, r7
 8100972:	bd80      	pop	{r7, pc}
 8100974:	58024800 	.word	0x58024800
 8100978:	e000ed00 	.word	0xe000ed00

0810097c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810097c:	b580      	push	{r7, lr}
 810097e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100980:	f7ff ff5c 	bl	810083c <HAL_GetCurrentCPUID>
 8100984:	4603      	mov	r3, r0
 8100986:	2b03      	cmp	r3, #3
 8100988:	d101      	bne.n	810098e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810098a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810098c:	e001      	b.n	8100992 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810098e:	bf40      	sev
    __WFE ();
 8100990:	bf20      	wfe
}
 8100992:	bf00      	nop
 8100994:	bd80      	pop	{r7, pc}
	...

08100998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100998:	b480      	push	{r7}
 810099a:	b089      	sub	sp, #36	@ 0x24
 810099c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810099e:	4bb3      	ldr	r3, [pc, #716]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009a0:	691b      	ldr	r3, [r3, #16]
 81009a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81009a6:	2b18      	cmp	r3, #24
 81009a8:	f200 8155 	bhi.w	8100c56 <HAL_RCC_GetSysClockFreq+0x2be>
 81009ac:	a201      	add	r2, pc, #4	@ (adr r2, 81009b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81009b2:	bf00      	nop
 81009b4:	08100a19 	.word	0x08100a19
 81009b8:	08100c57 	.word	0x08100c57
 81009bc:	08100c57 	.word	0x08100c57
 81009c0:	08100c57 	.word	0x08100c57
 81009c4:	08100c57 	.word	0x08100c57
 81009c8:	08100c57 	.word	0x08100c57
 81009cc:	08100c57 	.word	0x08100c57
 81009d0:	08100c57 	.word	0x08100c57
 81009d4:	08100a3f 	.word	0x08100a3f
 81009d8:	08100c57 	.word	0x08100c57
 81009dc:	08100c57 	.word	0x08100c57
 81009e0:	08100c57 	.word	0x08100c57
 81009e4:	08100c57 	.word	0x08100c57
 81009e8:	08100c57 	.word	0x08100c57
 81009ec:	08100c57 	.word	0x08100c57
 81009f0:	08100c57 	.word	0x08100c57
 81009f4:	08100a45 	.word	0x08100a45
 81009f8:	08100c57 	.word	0x08100c57
 81009fc:	08100c57 	.word	0x08100c57
 8100a00:	08100c57 	.word	0x08100c57
 8100a04:	08100c57 	.word	0x08100c57
 8100a08:	08100c57 	.word	0x08100c57
 8100a0c:	08100c57 	.word	0x08100c57
 8100a10:	08100c57 	.word	0x08100c57
 8100a14:	08100a4b 	.word	0x08100a4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a18:	4b94      	ldr	r3, [pc, #592]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a1a:	681b      	ldr	r3, [r3, #0]
 8100a1c:	f003 0320 	and.w	r3, r3, #32
 8100a20:	2b00      	cmp	r3, #0
 8100a22:	d009      	beq.n	8100a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100a24:	4b91      	ldr	r3, [pc, #580]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a26:	681b      	ldr	r3, [r3, #0]
 8100a28:	08db      	lsrs	r3, r3, #3
 8100a2a:	f003 0303 	and.w	r3, r3, #3
 8100a2e:	4a90      	ldr	r2, [pc, #576]	@ (8100c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a30:	fa22 f303 	lsr.w	r3, r2, r3
 8100a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100a36:	e111      	b.n	8100c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100a38:	4b8d      	ldr	r3, [pc, #564]	@ (8100c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a3a:	61bb      	str	r3, [r7, #24]
    break;
 8100a3c:	e10e      	b.n	8100c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8100c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100a40:	61bb      	str	r3, [r7, #24]
    break;
 8100a42:	e10b      	b.n	8100c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100a44:	4b8c      	ldr	r3, [pc, #560]	@ (8100c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100a46:	61bb      	str	r3, [r7, #24]
    break;
 8100a48:	e108      	b.n	8100c5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100a4a:	4b88      	ldr	r3, [pc, #544]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100a4e:	f003 0303 	and.w	r3, r3, #3
 8100a52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100a54:	4b85      	ldr	r3, [pc, #532]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100a58:	091b      	lsrs	r3, r3, #4
 8100a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100a5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100a60:	4b82      	ldr	r3, [pc, #520]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100a64:	f003 0301 	and.w	r3, r3, #1
 8100a68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100a6a:	4b80      	ldr	r3, [pc, #512]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100a6e:	08db      	lsrs	r3, r3, #3
 8100a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100a74:	68fa      	ldr	r2, [r7, #12]
 8100a76:	fb02 f303 	mul.w	r3, r2, r3
 8100a7a:	ee07 3a90 	vmov	s15, r3
 8100a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100a86:	693b      	ldr	r3, [r7, #16]
 8100a88:	2b00      	cmp	r3, #0
 8100a8a:	f000 80e1 	beq.w	8100c50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100a8e:	697b      	ldr	r3, [r7, #20]
 8100a90:	2b02      	cmp	r3, #2
 8100a92:	f000 8083 	beq.w	8100b9c <HAL_RCC_GetSysClockFreq+0x204>
 8100a96:	697b      	ldr	r3, [r7, #20]
 8100a98:	2b02      	cmp	r3, #2
 8100a9a:	f200 80a1 	bhi.w	8100be0 <HAL_RCC_GetSysClockFreq+0x248>
 8100a9e:	697b      	ldr	r3, [r7, #20]
 8100aa0:	2b00      	cmp	r3, #0
 8100aa2:	d003      	beq.n	8100aac <HAL_RCC_GetSysClockFreq+0x114>
 8100aa4:	697b      	ldr	r3, [r7, #20]
 8100aa6:	2b01      	cmp	r3, #1
 8100aa8:	d056      	beq.n	8100b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100aaa:	e099      	b.n	8100be0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100aac:	4b6f      	ldr	r3, [pc, #444]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aae:	681b      	ldr	r3, [r3, #0]
 8100ab0:	f003 0320 	and.w	r3, r3, #32
 8100ab4:	2b00      	cmp	r3, #0
 8100ab6:	d02d      	beq.n	8100b14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aba:	681b      	ldr	r3, [r3, #0]
 8100abc:	08db      	lsrs	r3, r3, #3
 8100abe:	f003 0303 	and.w	r3, r3, #3
 8100ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8100c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8100ac8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100aca:	687b      	ldr	r3, [r7, #4]
 8100acc:	ee07 3a90 	vmov	s15, r3
 8100ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ad4:	693b      	ldr	r3, [r7, #16]
 8100ad6:	ee07 3a90 	vmov	s15, r3
 8100ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ae2:	4b62      	ldr	r3, [pc, #392]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100aea:	ee07 3a90 	vmov	s15, r3
 8100aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100af6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8100c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100b12:	e087      	b.n	8100c24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b14:	693b      	ldr	r3, [r7, #16]
 8100b16:	ee07 3a90 	vmov	s15, r3
 8100b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8100c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b26:	4b51      	ldr	r3, [pc, #324]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b2e:	ee07 3a90 	vmov	s15, r3
 8100b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8100c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100b56:	e065      	b.n	8100c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b58:	693b      	ldr	r3, [r7, #16]
 8100b5a:	ee07 3a90 	vmov	s15, r3
 8100b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8100c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b6a:	4b40      	ldr	r3, [pc, #256]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b72:	ee07 3a90 	vmov	s15, r3
 8100b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8100c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100b9a:	e043      	b.n	8100c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b9c:	693b      	ldr	r3, [r7, #16]
 8100b9e:	ee07 3a90 	vmov	s15, r3
 8100ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ba6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8100c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100bae:	4b2f      	ldr	r3, [pc, #188]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bb6:	ee07 3a90 	vmov	s15, r3
 8100bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8100c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100bde:	e021      	b.n	8100c24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100be0:	693b      	ldr	r3, [r7, #16]
 8100be2:	ee07 3a90 	vmov	s15, r3
 8100be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100bea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8100c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bfa:	ee07 3a90 	vmov	s15, r3
 8100bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8100c06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8100c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100c22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8100c24:	4b11      	ldr	r3, [pc, #68]	@ (8100c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c28:	0a5b      	lsrs	r3, r3, #9
 8100c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8100c2e:	3301      	adds	r3, #1
 8100c30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8100c32:	683b      	ldr	r3, [r7, #0]
 8100c34:	ee07 3a90 	vmov	s15, r3
 8100c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8100c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100c48:	ee17 3a90 	vmov	r3, s15
 8100c4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8100c4e:	e005      	b.n	8100c5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8100c50:	2300      	movs	r3, #0
 8100c52:	61bb      	str	r3, [r7, #24]
    break;
 8100c54:	e002      	b.n	8100c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8100c56:	4b07      	ldr	r3, [pc, #28]	@ (8100c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100c58:	61bb      	str	r3, [r7, #24]
    break;
 8100c5a:	bf00      	nop
  }

  return sysclockfreq;
 8100c5c:	69bb      	ldr	r3, [r7, #24]
}
 8100c5e:	4618      	mov	r0, r3
 8100c60:	3724      	adds	r7, #36	@ 0x24
 8100c62:	46bd      	mov	sp, r7
 8100c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c68:	4770      	bx	lr
 8100c6a:	bf00      	nop
 8100c6c:	58024400 	.word	0x58024400
 8100c70:	03d09000 	.word	0x03d09000
 8100c74:	003d0900 	.word	0x003d0900
 8100c78:	007a1200 	.word	0x007a1200
 8100c7c:	46000000 	.word	0x46000000
 8100c80:	4c742400 	.word	0x4c742400
 8100c84:	4a742400 	.word	0x4a742400
 8100c88:	4af42400 	.word	0x4af42400

08100c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8100c8c:	b580      	push	{r7, lr}
 8100c8e:	b082      	sub	sp, #8
 8100c90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8100c92:	f7ff fe81 	bl	8100998 <HAL_RCC_GetSysClockFreq>
 8100c96:	4602      	mov	r2, r0
 8100c98:	4b11      	ldr	r3, [pc, #68]	@ (8100ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8100c9a:	699b      	ldr	r3, [r3, #24]
 8100c9c:	0a1b      	lsrs	r3, r3, #8
 8100c9e:	f003 030f 	and.w	r3, r3, #15
 8100ca2:	4910      	ldr	r1, [pc, #64]	@ (8100ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8100ca4:	5ccb      	ldrb	r3, [r1, r3]
 8100ca6:	f003 031f 	and.w	r3, r3, #31
 8100caa:	fa22 f303 	lsr.w	r3, r2, r3
 8100cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8100ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8100cb2:	699b      	ldr	r3, [r3, #24]
 8100cb4:	f003 030f 	and.w	r3, r3, #15
 8100cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8100ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8100cba:	5cd3      	ldrb	r3, [r2, r3]
 8100cbc:	f003 031f 	and.w	r3, r3, #31
 8100cc0:	687a      	ldr	r2, [r7, #4]
 8100cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8100cc6:	4a08      	ldr	r2, [pc, #32]	@ (8100ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8100cc8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100cca:	4b07      	ldr	r3, [pc, #28]	@ (8100ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8100ccc:	681b      	ldr	r3, [r3, #0]
 8100cce:	4a07      	ldr	r2, [pc, #28]	@ (8100cec <HAL_RCC_GetHCLKFreq+0x60>)
 8100cd0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8100cd2:	4b05      	ldr	r3, [pc, #20]	@ (8100ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8100cd4:	681b      	ldr	r3, [r3, #0]
}
 8100cd6:	4618      	mov	r0, r3
 8100cd8:	3708      	adds	r7, #8
 8100cda:	46bd      	mov	sp, r7
 8100cdc:	bd80      	pop	{r7, pc}
 8100cde:	bf00      	nop
 8100ce0:	58024400 	.word	0x58024400
 8100ce4:	08104144 	.word	0x08104144
 8100ce8:	10000004 	.word	0x10000004
 8100cec:	10000000 	.word	0x10000000

08100cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8100cf0:	b580      	push	{r7, lr}
 8100cf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8100cf4:	f7ff ffca 	bl	8100c8c <HAL_RCC_GetHCLKFreq>
 8100cf8:	4602      	mov	r2, r0
 8100cfa:	4b06      	ldr	r3, [pc, #24]	@ (8100d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8100cfc:	69db      	ldr	r3, [r3, #28]
 8100cfe:	091b      	lsrs	r3, r3, #4
 8100d00:	f003 0307 	and.w	r3, r3, #7
 8100d04:	4904      	ldr	r1, [pc, #16]	@ (8100d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8100d06:	5ccb      	ldrb	r3, [r1, r3]
 8100d08:	f003 031f 	and.w	r3, r3, #31
 8100d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8100d10:	4618      	mov	r0, r3
 8100d12:	bd80      	pop	{r7, pc}
 8100d14:	58024400 	.word	0x58024400
 8100d18:	08104144 	.word	0x08104144

08100d1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8100d1c:	b480      	push	{r7}
 8100d1e:	b083      	sub	sp, #12
 8100d20:	af00      	add	r7, sp, #0
 8100d22:	6078      	str	r0, [r7, #4]
 8100d24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8100d26:	687b      	ldr	r3, [r7, #4]
 8100d28:	223f      	movs	r2, #63	@ 0x3f
 8100d2a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8100d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8100d98 <HAL_RCC_GetClockConfig+0x7c>)
 8100d2e:	691b      	ldr	r3, [r3, #16]
 8100d30:	f003 0207 	and.w	r2, r3, #7
 8100d34:	687b      	ldr	r3, [r7, #4]
 8100d36:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8100d38:	4b17      	ldr	r3, [pc, #92]	@ (8100d98 <HAL_RCC_GetClockConfig+0x7c>)
 8100d3a:	699b      	ldr	r3, [r3, #24]
 8100d3c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8100d40:	687b      	ldr	r3, [r7, #4]
 8100d42:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8100d44:	4b14      	ldr	r3, [pc, #80]	@ (8100d98 <HAL_RCC_GetClockConfig+0x7c>)
 8100d46:	699b      	ldr	r3, [r3, #24]
 8100d48:	f003 020f 	and.w	r2, r3, #15
 8100d4c:	687b      	ldr	r3, [r7, #4]
 8100d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8100d50:	4b11      	ldr	r3, [pc, #68]	@ (8100d98 <HAL_RCC_GetClockConfig+0x7c>)
 8100d52:	699b      	ldr	r3, [r3, #24]
 8100d54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8100d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8100d98 <HAL_RCC_GetClockConfig+0x7c>)
 8100d5e:	69db      	ldr	r3, [r3, #28]
 8100d60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8100d64:	687b      	ldr	r3, [r7, #4]
 8100d66:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8100d68:	4b0b      	ldr	r3, [pc, #44]	@ (8100d98 <HAL_RCC_GetClockConfig+0x7c>)
 8100d6a:	69db      	ldr	r3, [r3, #28]
 8100d6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8100d70:	687b      	ldr	r3, [r7, #4]
 8100d72:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8100d74:	4b08      	ldr	r3, [pc, #32]	@ (8100d98 <HAL_RCC_GetClockConfig+0x7c>)
 8100d76:	6a1b      	ldr	r3, [r3, #32]
 8100d78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8100d7c:	687b      	ldr	r3, [r7, #4]
 8100d7e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8100d80:	4b06      	ldr	r3, [pc, #24]	@ (8100d9c <HAL_RCC_GetClockConfig+0x80>)
 8100d82:	681b      	ldr	r3, [r3, #0]
 8100d84:	f003 020f 	and.w	r2, r3, #15
 8100d88:	683b      	ldr	r3, [r7, #0]
 8100d8a:	601a      	str	r2, [r3, #0]
}
 8100d8c:	bf00      	nop
 8100d8e:	370c      	adds	r7, #12
 8100d90:	46bd      	mov	sp, r7
 8100d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d96:	4770      	bx	lr
 8100d98:	58024400 	.word	0x58024400
 8100d9c:	52002000 	.word	0x52002000

08100da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8100da0:	b580      	push	{r7, lr}
 8100da2:	b082      	sub	sp, #8
 8100da4:	af00      	add	r7, sp, #0
 8100da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8100da8:	687b      	ldr	r3, [r7, #4]
 8100daa:	2b00      	cmp	r3, #0
 8100dac:	d101      	bne.n	8100db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8100dae:	2301      	movs	r3, #1
 8100db0:	e049      	b.n	8100e46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8100db2:	687b      	ldr	r3, [r7, #4]
 8100db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8100db8:	b2db      	uxtb	r3, r3
 8100dba:	2b00      	cmp	r3, #0
 8100dbc:	d106      	bne.n	8100dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8100dbe:	687b      	ldr	r3, [r7, #4]
 8100dc0:	2200      	movs	r2, #0
 8100dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8100dc6:	6878      	ldr	r0, [r7, #4]
 8100dc8:	f000 f841 	bl	8100e4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100dcc:	687b      	ldr	r3, [r7, #4]
 8100dce:	2202      	movs	r2, #2
 8100dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	681a      	ldr	r2, [r3, #0]
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	3304      	adds	r3, #4
 8100ddc:	4619      	mov	r1, r3
 8100dde:	4610      	mov	r0, r2
 8100de0:	f000 fa00 	bl	81011e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8100de4:	687b      	ldr	r3, [r7, #4]
 8100de6:	2201      	movs	r2, #1
 8100de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	2201      	movs	r2, #1
 8100df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8100df4:	687b      	ldr	r3, [r7, #4]
 8100df6:	2201      	movs	r2, #1
 8100df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8100dfc:	687b      	ldr	r3, [r7, #4]
 8100dfe:	2201      	movs	r2, #1
 8100e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	2201      	movs	r2, #1
 8100e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	2201      	movs	r2, #1
 8100e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8100e14:	687b      	ldr	r3, [r7, #4]
 8100e16:	2201      	movs	r2, #1
 8100e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100e1c:	687b      	ldr	r3, [r7, #4]
 8100e1e:	2201      	movs	r2, #1
 8100e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8100e24:	687b      	ldr	r3, [r7, #4]
 8100e26:	2201      	movs	r2, #1
 8100e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8100e2c:	687b      	ldr	r3, [r7, #4]
 8100e2e:	2201      	movs	r2, #1
 8100e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8100e34:	687b      	ldr	r3, [r7, #4]
 8100e36:	2201      	movs	r2, #1
 8100e38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8100e3c:	687b      	ldr	r3, [r7, #4]
 8100e3e:	2201      	movs	r2, #1
 8100e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8100e44:	2300      	movs	r3, #0
}
 8100e46:	4618      	mov	r0, r3
 8100e48:	3708      	adds	r7, #8
 8100e4a:	46bd      	mov	sp, r7
 8100e4c:	bd80      	pop	{r7, pc}

08100e4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8100e4e:	b480      	push	{r7}
 8100e50:	b083      	sub	sp, #12
 8100e52:	af00      	add	r7, sp, #0
 8100e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8100e56:	bf00      	nop
 8100e58:	370c      	adds	r7, #12
 8100e5a:	46bd      	mov	sp, r7
 8100e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e60:	4770      	bx	lr
	...

08100e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8100e64:	b480      	push	{r7}
 8100e66:	b085      	sub	sp, #20
 8100e68:	af00      	add	r7, sp, #0
 8100e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8100e72:	b2db      	uxtb	r3, r3
 8100e74:	2b01      	cmp	r3, #1
 8100e76:	d001      	beq.n	8100e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8100e78:	2301      	movs	r3, #1
 8100e7a:	e054      	b.n	8100f26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	2202      	movs	r2, #2
 8100e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8100e84:	687b      	ldr	r3, [r7, #4]
 8100e86:	681b      	ldr	r3, [r3, #0]
 8100e88:	68da      	ldr	r2, [r3, #12]
 8100e8a:	687b      	ldr	r3, [r7, #4]
 8100e8c:	681b      	ldr	r3, [r3, #0]
 8100e8e:	f042 0201 	orr.w	r2, r2, #1
 8100e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	681b      	ldr	r3, [r3, #0]
 8100e98:	4a26      	ldr	r2, [pc, #152]	@ (8100f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8100e9a:	4293      	cmp	r3, r2
 8100e9c:	d022      	beq.n	8100ee4 <HAL_TIM_Base_Start_IT+0x80>
 8100e9e:	687b      	ldr	r3, [r7, #4]
 8100ea0:	681b      	ldr	r3, [r3, #0]
 8100ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8100ea6:	d01d      	beq.n	8100ee4 <HAL_TIM_Base_Start_IT+0x80>
 8100ea8:	687b      	ldr	r3, [r7, #4]
 8100eaa:	681b      	ldr	r3, [r3, #0]
 8100eac:	4a22      	ldr	r2, [pc, #136]	@ (8100f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8100eae:	4293      	cmp	r3, r2
 8100eb0:	d018      	beq.n	8100ee4 <HAL_TIM_Base_Start_IT+0x80>
 8100eb2:	687b      	ldr	r3, [r7, #4]
 8100eb4:	681b      	ldr	r3, [r3, #0]
 8100eb6:	4a21      	ldr	r2, [pc, #132]	@ (8100f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8100eb8:	4293      	cmp	r3, r2
 8100eba:	d013      	beq.n	8100ee4 <HAL_TIM_Base_Start_IT+0x80>
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	681b      	ldr	r3, [r3, #0]
 8100ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8100f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8100ec2:	4293      	cmp	r3, r2
 8100ec4:	d00e      	beq.n	8100ee4 <HAL_TIM_Base_Start_IT+0x80>
 8100ec6:	687b      	ldr	r3, [r7, #4]
 8100ec8:	681b      	ldr	r3, [r3, #0]
 8100eca:	4a1e      	ldr	r2, [pc, #120]	@ (8100f44 <HAL_TIM_Base_Start_IT+0xe0>)
 8100ecc:	4293      	cmp	r3, r2
 8100ece:	d009      	beq.n	8100ee4 <HAL_TIM_Base_Start_IT+0x80>
 8100ed0:	687b      	ldr	r3, [r7, #4]
 8100ed2:	681b      	ldr	r3, [r3, #0]
 8100ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8100f48 <HAL_TIM_Base_Start_IT+0xe4>)
 8100ed6:	4293      	cmp	r3, r2
 8100ed8:	d004      	beq.n	8100ee4 <HAL_TIM_Base_Start_IT+0x80>
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	681b      	ldr	r3, [r3, #0]
 8100ede:	4a1b      	ldr	r2, [pc, #108]	@ (8100f4c <HAL_TIM_Base_Start_IT+0xe8>)
 8100ee0:	4293      	cmp	r3, r2
 8100ee2:	d115      	bne.n	8100f10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8100ee4:	687b      	ldr	r3, [r7, #4]
 8100ee6:	681b      	ldr	r3, [r3, #0]
 8100ee8:	689a      	ldr	r2, [r3, #8]
 8100eea:	4b19      	ldr	r3, [pc, #100]	@ (8100f50 <HAL_TIM_Base_Start_IT+0xec>)
 8100eec:	4013      	ands	r3, r2
 8100eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100ef0:	68fb      	ldr	r3, [r7, #12]
 8100ef2:	2b06      	cmp	r3, #6
 8100ef4:	d015      	beq.n	8100f22 <HAL_TIM_Base_Start_IT+0xbe>
 8100ef6:	68fb      	ldr	r3, [r7, #12]
 8100ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8100efc:	d011      	beq.n	8100f22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8100efe:	687b      	ldr	r3, [r7, #4]
 8100f00:	681b      	ldr	r3, [r3, #0]
 8100f02:	681a      	ldr	r2, [r3, #0]
 8100f04:	687b      	ldr	r3, [r7, #4]
 8100f06:	681b      	ldr	r3, [r3, #0]
 8100f08:	f042 0201 	orr.w	r2, r2, #1
 8100f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100f0e:	e008      	b.n	8100f22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8100f10:	687b      	ldr	r3, [r7, #4]
 8100f12:	681b      	ldr	r3, [r3, #0]
 8100f14:	681a      	ldr	r2, [r3, #0]
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	681b      	ldr	r3, [r3, #0]
 8100f1a:	f042 0201 	orr.w	r2, r2, #1
 8100f1e:	601a      	str	r2, [r3, #0]
 8100f20:	e000      	b.n	8100f24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100f22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8100f24:	2300      	movs	r3, #0
}
 8100f26:	4618      	mov	r0, r3
 8100f28:	3714      	adds	r7, #20
 8100f2a:	46bd      	mov	sp, r7
 8100f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f30:	4770      	bx	lr
 8100f32:	bf00      	nop
 8100f34:	40010000 	.word	0x40010000
 8100f38:	40000400 	.word	0x40000400
 8100f3c:	40000800 	.word	0x40000800
 8100f40:	40000c00 	.word	0x40000c00
 8100f44:	40010400 	.word	0x40010400
 8100f48:	40001800 	.word	0x40001800
 8100f4c:	40014000 	.word	0x40014000
 8100f50:	00010007 	.word	0x00010007

08100f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8100f54:	b580      	push	{r7, lr}
 8100f56:	b082      	sub	sp, #8
 8100f58:	af00      	add	r7, sp, #0
 8100f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8100f5c:	687b      	ldr	r3, [r7, #4]
 8100f5e:	681b      	ldr	r3, [r3, #0]
 8100f60:	691b      	ldr	r3, [r3, #16]
 8100f62:	f003 0302 	and.w	r3, r3, #2
 8100f66:	2b02      	cmp	r3, #2
 8100f68:	d122      	bne.n	8100fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8100f6a:	687b      	ldr	r3, [r7, #4]
 8100f6c:	681b      	ldr	r3, [r3, #0]
 8100f6e:	68db      	ldr	r3, [r3, #12]
 8100f70:	f003 0302 	and.w	r3, r3, #2
 8100f74:	2b02      	cmp	r3, #2
 8100f76:	d11b      	bne.n	8100fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8100f78:	687b      	ldr	r3, [r7, #4]
 8100f7a:	681b      	ldr	r3, [r3, #0]
 8100f7c:	f06f 0202 	mvn.w	r2, #2
 8100f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8100f82:	687b      	ldr	r3, [r7, #4]
 8100f84:	2201      	movs	r2, #1
 8100f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8100f88:	687b      	ldr	r3, [r7, #4]
 8100f8a:	681b      	ldr	r3, [r3, #0]
 8100f8c:	699b      	ldr	r3, [r3, #24]
 8100f8e:	f003 0303 	and.w	r3, r3, #3
 8100f92:	2b00      	cmp	r3, #0
 8100f94:	d003      	beq.n	8100f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8100f96:	6878      	ldr	r0, [r7, #4]
 8100f98:	f000 f905 	bl	81011a6 <HAL_TIM_IC_CaptureCallback>
 8100f9c:	e005      	b.n	8100faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8100f9e:	6878      	ldr	r0, [r7, #4]
 8100fa0:	f000 f8f7 	bl	8101192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100fa4:	6878      	ldr	r0, [r7, #4]
 8100fa6:	f000 f908 	bl	81011ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100faa:	687b      	ldr	r3, [r7, #4]
 8100fac:	2200      	movs	r2, #0
 8100fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8100fb0:	687b      	ldr	r3, [r7, #4]
 8100fb2:	681b      	ldr	r3, [r3, #0]
 8100fb4:	691b      	ldr	r3, [r3, #16]
 8100fb6:	f003 0304 	and.w	r3, r3, #4
 8100fba:	2b04      	cmp	r3, #4
 8100fbc:	d122      	bne.n	8101004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8100fbe:	687b      	ldr	r3, [r7, #4]
 8100fc0:	681b      	ldr	r3, [r3, #0]
 8100fc2:	68db      	ldr	r3, [r3, #12]
 8100fc4:	f003 0304 	and.w	r3, r3, #4
 8100fc8:	2b04      	cmp	r3, #4
 8100fca:	d11b      	bne.n	8101004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8100fcc:	687b      	ldr	r3, [r7, #4]
 8100fce:	681b      	ldr	r3, [r3, #0]
 8100fd0:	f06f 0204 	mvn.w	r2, #4
 8100fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	2202      	movs	r2, #2
 8100fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8100fdc:	687b      	ldr	r3, [r7, #4]
 8100fde:	681b      	ldr	r3, [r3, #0]
 8100fe0:	699b      	ldr	r3, [r3, #24]
 8100fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8100fe6:	2b00      	cmp	r3, #0
 8100fe8:	d003      	beq.n	8100ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8100fea:	6878      	ldr	r0, [r7, #4]
 8100fec:	f000 f8db 	bl	81011a6 <HAL_TIM_IC_CaptureCallback>
 8100ff0:	e005      	b.n	8100ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8100ff2:	6878      	ldr	r0, [r7, #4]
 8100ff4:	f000 f8cd 	bl	8101192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100ff8:	6878      	ldr	r0, [r7, #4]
 8100ffa:	f000 f8de 	bl	81011ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	2200      	movs	r2, #0
 8101002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	681b      	ldr	r3, [r3, #0]
 8101008:	691b      	ldr	r3, [r3, #16]
 810100a:	f003 0308 	and.w	r3, r3, #8
 810100e:	2b08      	cmp	r3, #8
 8101010:	d122      	bne.n	8101058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8101012:	687b      	ldr	r3, [r7, #4]
 8101014:	681b      	ldr	r3, [r3, #0]
 8101016:	68db      	ldr	r3, [r3, #12]
 8101018:	f003 0308 	and.w	r3, r3, #8
 810101c:	2b08      	cmp	r3, #8
 810101e:	d11b      	bne.n	8101058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	681b      	ldr	r3, [r3, #0]
 8101024:	f06f 0208 	mvn.w	r2, #8
 8101028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	2204      	movs	r2, #4
 810102e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101030:	687b      	ldr	r3, [r7, #4]
 8101032:	681b      	ldr	r3, [r3, #0]
 8101034:	69db      	ldr	r3, [r3, #28]
 8101036:	f003 0303 	and.w	r3, r3, #3
 810103a:	2b00      	cmp	r3, #0
 810103c:	d003      	beq.n	8101046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810103e:	6878      	ldr	r0, [r7, #4]
 8101040:	f000 f8b1 	bl	81011a6 <HAL_TIM_IC_CaptureCallback>
 8101044:	e005      	b.n	8101052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101046:	6878      	ldr	r0, [r7, #4]
 8101048:	f000 f8a3 	bl	8101192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810104c:	6878      	ldr	r0, [r7, #4]
 810104e:	f000 f8b4 	bl	81011ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101052:	687b      	ldr	r3, [r7, #4]
 8101054:	2200      	movs	r2, #0
 8101056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	681b      	ldr	r3, [r3, #0]
 810105c:	691b      	ldr	r3, [r3, #16]
 810105e:	f003 0310 	and.w	r3, r3, #16
 8101062:	2b10      	cmp	r3, #16
 8101064:	d122      	bne.n	81010ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8101066:	687b      	ldr	r3, [r7, #4]
 8101068:	681b      	ldr	r3, [r3, #0]
 810106a:	68db      	ldr	r3, [r3, #12]
 810106c:	f003 0310 	and.w	r3, r3, #16
 8101070:	2b10      	cmp	r3, #16
 8101072:	d11b      	bne.n	81010ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8101074:	687b      	ldr	r3, [r7, #4]
 8101076:	681b      	ldr	r3, [r3, #0]
 8101078:	f06f 0210 	mvn.w	r2, #16
 810107c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	2208      	movs	r2, #8
 8101082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8101084:	687b      	ldr	r3, [r7, #4]
 8101086:	681b      	ldr	r3, [r3, #0]
 8101088:	69db      	ldr	r3, [r3, #28]
 810108a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810108e:	2b00      	cmp	r3, #0
 8101090:	d003      	beq.n	810109a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101092:	6878      	ldr	r0, [r7, #4]
 8101094:	f000 f887 	bl	81011a6 <HAL_TIM_IC_CaptureCallback>
 8101098:	e005      	b.n	81010a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810109a:	6878      	ldr	r0, [r7, #4]
 810109c:	f000 f879 	bl	8101192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81010a0:	6878      	ldr	r0, [r7, #4]
 81010a2:	f000 f88a 	bl	81011ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	2200      	movs	r2, #0
 81010aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81010ac:	687b      	ldr	r3, [r7, #4]
 81010ae:	681b      	ldr	r3, [r3, #0]
 81010b0:	691b      	ldr	r3, [r3, #16]
 81010b2:	f003 0301 	and.w	r3, r3, #1
 81010b6:	2b01      	cmp	r3, #1
 81010b8:	d10e      	bne.n	81010d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	681b      	ldr	r3, [r3, #0]
 81010be:	68db      	ldr	r3, [r3, #12]
 81010c0:	f003 0301 	and.w	r3, r3, #1
 81010c4:	2b01      	cmp	r3, #1
 81010c6:	d107      	bne.n	81010d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	681b      	ldr	r3, [r3, #0]
 81010cc:	f06f 0201 	mvn.w	r2, #1
 81010d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81010d2:	6878      	ldr	r0, [r7, #4]
 81010d4:	f7ff f974 	bl	81003c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81010d8:	687b      	ldr	r3, [r7, #4]
 81010da:	681b      	ldr	r3, [r3, #0]
 81010dc:	691b      	ldr	r3, [r3, #16]
 81010de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81010e2:	2b80      	cmp	r3, #128	@ 0x80
 81010e4:	d10e      	bne.n	8101104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81010e6:	687b      	ldr	r3, [r7, #4]
 81010e8:	681b      	ldr	r3, [r3, #0]
 81010ea:	68db      	ldr	r3, [r3, #12]
 81010ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81010f0:	2b80      	cmp	r3, #128	@ 0x80
 81010f2:	d107      	bne.n	8101104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 81010fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81010fe:	6878      	ldr	r0, [r7, #4]
 8101100:	f000 f914 	bl	810132c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	691b      	ldr	r3, [r3, #16]
 810110a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810110e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101112:	d10e      	bne.n	8101132 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	681b      	ldr	r3, [r3, #0]
 8101118:	68db      	ldr	r3, [r3, #12]
 810111a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810111e:	2b80      	cmp	r3, #128	@ 0x80
 8101120:	d107      	bne.n	8101132 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	681b      	ldr	r3, [r3, #0]
 8101126:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810112a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810112c:	6878      	ldr	r0, [r7, #4]
 810112e:	f000 f907 	bl	8101340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8101132:	687b      	ldr	r3, [r7, #4]
 8101134:	681b      	ldr	r3, [r3, #0]
 8101136:	691b      	ldr	r3, [r3, #16]
 8101138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810113c:	2b40      	cmp	r3, #64	@ 0x40
 810113e:	d10e      	bne.n	810115e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8101140:	687b      	ldr	r3, [r7, #4]
 8101142:	681b      	ldr	r3, [r3, #0]
 8101144:	68db      	ldr	r3, [r3, #12]
 8101146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810114a:	2b40      	cmp	r3, #64	@ 0x40
 810114c:	d107      	bne.n	810115e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	681b      	ldr	r3, [r3, #0]
 8101152:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8101156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101158:	6878      	ldr	r0, [r7, #4]
 810115a:	f000 f838 	bl	81011ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	681b      	ldr	r3, [r3, #0]
 8101162:	691b      	ldr	r3, [r3, #16]
 8101164:	f003 0320 	and.w	r3, r3, #32
 8101168:	2b20      	cmp	r3, #32
 810116a:	d10e      	bne.n	810118a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810116c:	687b      	ldr	r3, [r7, #4]
 810116e:	681b      	ldr	r3, [r3, #0]
 8101170:	68db      	ldr	r3, [r3, #12]
 8101172:	f003 0320 	and.w	r3, r3, #32
 8101176:	2b20      	cmp	r3, #32
 8101178:	d107      	bne.n	810118a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810117a:	687b      	ldr	r3, [r7, #4]
 810117c:	681b      	ldr	r3, [r3, #0]
 810117e:	f06f 0220 	mvn.w	r2, #32
 8101182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101184:	6878      	ldr	r0, [r7, #4]
 8101186:	f000 f8c7 	bl	8101318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810118a:	bf00      	nop
 810118c:	3708      	adds	r7, #8
 810118e:	46bd      	mov	sp, r7
 8101190:	bd80      	pop	{r7, pc}

08101192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101192:	b480      	push	{r7}
 8101194:	b083      	sub	sp, #12
 8101196:	af00      	add	r7, sp, #0
 8101198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810119a:	bf00      	nop
 810119c:	370c      	adds	r7, #12
 810119e:	46bd      	mov	sp, r7
 81011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011a4:	4770      	bx	lr

081011a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81011a6:	b480      	push	{r7}
 81011a8:	b083      	sub	sp, #12
 81011aa:	af00      	add	r7, sp, #0
 81011ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81011ae:	bf00      	nop
 81011b0:	370c      	adds	r7, #12
 81011b2:	46bd      	mov	sp, r7
 81011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b8:	4770      	bx	lr

081011ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81011ba:	b480      	push	{r7}
 81011bc:	b083      	sub	sp, #12
 81011be:	af00      	add	r7, sp, #0
 81011c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81011c2:	bf00      	nop
 81011c4:	370c      	adds	r7, #12
 81011c6:	46bd      	mov	sp, r7
 81011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011cc:	4770      	bx	lr

081011ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81011ce:	b480      	push	{r7}
 81011d0:	b083      	sub	sp, #12
 81011d2:	af00      	add	r7, sp, #0
 81011d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81011d6:	bf00      	nop
 81011d8:	370c      	adds	r7, #12
 81011da:	46bd      	mov	sp, r7
 81011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011e0:	4770      	bx	lr
	...

081011e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81011e4:	b480      	push	{r7}
 81011e6:	b085      	sub	sp, #20
 81011e8:	af00      	add	r7, sp, #0
 81011ea:	6078      	str	r0, [r7, #4]
 81011ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81011ee:	687b      	ldr	r3, [r7, #4]
 81011f0:	681b      	ldr	r3, [r3, #0]
 81011f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	4a40      	ldr	r2, [pc, #256]	@ (81012f8 <TIM_Base_SetConfig+0x114>)
 81011f8:	4293      	cmp	r3, r2
 81011fa:	d013      	beq.n	8101224 <TIM_Base_SetConfig+0x40>
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101202:	d00f      	beq.n	8101224 <TIM_Base_SetConfig+0x40>
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	4a3d      	ldr	r2, [pc, #244]	@ (81012fc <TIM_Base_SetConfig+0x118>)
 8101208:	4293      	cmp	r3, r2
 810120a:	d00b      	beq.n	8101224 <TIM_Base_SetConfig+0x40>
 810120c:	687b      	ldr	r3, [r7, #4]
 810120e:	4a3c      	ldr	r2, [pc, #240]	@ (8101300 <TIM_Base_SetConfig+0x11c>)
 8101210:	4293      	cmp	r3, r2
 8101212:	d007      	beq.n	8101224 <TIM_Base_SetConfig+0x40>
 8101214:	687b      	ldr	r3, [r7, #4]
 8101216:	4a3b      	ldr	r2, [pc, #236]	@ (8101304 <TIM_Base_SetConfig+0x120>)
 8101218:	4293      	cmp	r3, r2
 810121a:	d003      	beq.n	8101224 <TIM_Base_SetConfig+0x40>
 810121c:	687b      	ldr	r3, [r7, #4]
 810121e:	4a3a      	ldr	r2, [pc, #232]	@ (8101308 <TIM_Base_SetConfig+0x124>)
 8101220:	4293      	cmp	r3, r2
 8101222:	d108      	bne.n	8101236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101224:	68fb      	ldr	r3, [r7, #12]
 8101226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810122a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810122c:	683b      	ldr	r3, [r7, #0]
 810122e:	685b      	ldr	r3, [r3, #4]
 8101230:	68fa      	ldr	r2, [r7, #12]
 8101232:	4313      	orrs	r3, r2
 8101234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	4a2f      	ldr	r2, [pc, #188]	@ (81012f8 <TIM_Base_SetConfig+0x114>)
 810123a:	4293      	cmp	r3, r2
 810123c:	d01f      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101244:	d01b      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	4a2c      	ldr	r2, [pc, #176]	@ (81012fc <TIM_Base_SetConfig+0x118>)
 810124a:	4293      	cmp	r3, r2
 810124c:	d017      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 810124e:	687b      	ldr	r3, [r7, #4]
 8101250:	4a2b      	ldr	r2, [pc, #172]	@ (8101300 <TIM_Base_SetConfig+0x11c>)
 8101252:	4293      	cmp	r3, r2
 8101254:	d013      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	4a2a      	ldr	r2, [pc, #168]	@ (8101304 <TIM_Base_SetConfig+0x120>)
 810125a:	4293      	cmp	r3, r2
 810125c:	d00f      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	4a29      	ldr	r2, [pc, #164]	@ (8101308 <TIM_Base_SetConfig+0x124>)
 8101262:	4293      	cmp	r3, r2
 8101264:	d00b      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	4a28      	ldr	r2, [pc, #160]	@ (810130c <TIM_Base_SetConfig+0x128>)
 810126a:	4293      	cmp	r3, r2
 810126c:	d007      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 810126e:	687b      	ldr	r3, [r7, #4]
 8101270:	4a27      	ldr	r2, [pc, #156]	@ (8101310 <TIM_Base_SetConfig+0x12c>)
 8101272:	4293      	cmp	r3, r2
 8101274:	d003      	beq.n	810127e <TIM_Base_SetConfig+0x9a>
 8101276:	687b      	ldr	r3, [r7, #4]
 8101278:	4a26      	ldr	r2, [pc, #152]	@ (8101314 <TIM_Base_SetConfig+0x130>)
 810127a:	4293      	cmp	r3, r2
 810127c:	d108      	bne.n	8101290 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810127e:	68fb      	ldr	r3, [r7, #12]
 8101280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8101286:	683b      	ldr	r3, [r7, #0]
 8101288:	68db      	ldr	r3, [r3, #12]
 810128a:	68fa      	ldr	r2, [r7, #12]
 810128c:	4313      	orrs	r3, r2
 810128e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8101290:	68fb      	ldr	r3, [r7, #12]
 8101292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8101296:	683b      	ldr	r3, [r7, #0]
 8101298:	695b      	ldr	r3, [r3, #20]
 810129a:	4313      	orrs	r3, r2
 810129c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810129e:	687b      	ldr	r3, [r7, #4]
 81012a0:	68fa      	ldr	r2, [r7, #12]
 81012a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81012a4:	683b      	ldr	r3, [r7, #0]
 81012a6:	689a      	ldr	r2, [r3, #8]
 81012a8:	687b      	ldr	r3, [r7, #4]
 81012aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81012ac:	683b      	ldr	r3, [r7, #0]
 81012ae:	681a      	ldr	r2, [r3, #0]
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	4a10      	ldr	r2, [pc, #64]	@ (81012f8 <TIM_Base_SetConfig+0x114>)
 81012b8:	4293      	cmp	r3, r2
 81012ba:	d00f      	beq.n	81012dc <TIM_Base_SetConfig+0xf8>
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	4a12      	ldr	r2, [pc, #72]	@ (8101308 <TIM_Base_SetConfig+0x124>)
 81012c0:	4293      	cmp	r3, r2
 81012c2:	d00b      	beq.n	81012dc <TIM_Base_SetConfig+0xf8>
 81012c4:	687b      	ldr	r3, [r7, #4]
 81012c6:	4a11      	ldr	r2, [pc, #68]	@ (810130c <TIM_Base_SetConfig+0x128>)
 81012c8:	4293      	cmp	r3, r2
 81012ca:	d007      	beq.n	81012dc <TIM_Base_SetConfig+0xf8>
 81012cc:	687b      	ldr	r3, [r7, #4]
 81012ce:	4a10      	ldr	r2, [pc, #64]	@ (8101310 <TIM_Base_SetConfig+0x12c>)
 81012d0:	4293      	cmp	r3, r2
 81012d2:	d003      	beq.n	81012dc <TIM_Base_SetConfig+0xf8>
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8101314 <TIM_Base_SetConfig+0x130>)
 81012d8:	4293      	cmp	r3, r2
 81012da:	d103      	bne.n	81012e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81012dc:	683b      	ldr	r3, [r7, #0]
 81012de:	691a      	ldr	r2, [r3, #16]
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81012e4:	687b      	ldr	r3, [r7, #4]
 81012e6:	2201      	movs	r2, #1
 81012e8:	615a      	str	r2, [r3, #20]
}
 81012ea:	bf00      	nop
 81012ec:	3714      	adds	r7, #20
 81012ee:	46bd      	mov	sp, r7
 81012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012f4:	4770      	bx	lr
 81012f6:	bf00      	nop
 81012f8:	40010000 	.word	0x40010000
 81012fc:	40000400 	.word	0x40000400
 8101300:	40000800 	.word	0x40000800
 8101304:	40000c00 	.word	0x40000c00
 8101308:	40010400 	.word	0x40010400
 810130c:	40014000 	.word	0x40014000
 8101310:	40014400 	.word	0x40014400
 8101314:	40014800 	.word	0x40014800

08101318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101318:	b480      	push	{r7}
 810131a:	b083      	sub	sp, #12
 810131c:	af00      	add	r7, sp, #0
 810131e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101320:	bf00      	nop
 8101322:	370c      	adds	r7, #12
 8101324:	46bd      	mov	sp, r7
 8101326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810132a:	4770      	bx	lr

0810132c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810132c:	b480      	push	{r7}
 810132e:	b083      	sub	sp, #12
 8101330:	af00      	add	r7, sp, #0
 8101332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8101334:	bf00      	nop
 8101336:	370c      	adds	r7, #12
 8101338:	46bd      	mov	sp, r7
 810133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133e:	4770      	bx	lr

08101340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8101340:	b480      	push	{r7}
 8101342:	b083      	sub	sp, #12
 8101344:	af00      	add	r7, sp, #0
 8101346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8101348:	bf00      	nop
 810134a:	370c      	adds	r7, #12
 810134c:	46bd      	mov	sp, r7
 810134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101352:	4770      	bx	lr

08101354 <__NVIC_SetPriority>:
{
 8101354:	b480      	push	{r7}
 8101356:	b083      	sub	sp, #12
 8101358:	af00      	add	r7, sp, #0
 810135a:	4603      	mov	r3, r0
 810135c:	6039      	str	r1, [r7, #0]
 810135e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101364:	2b00      	cmp	r3, #0
 8101366:	db0a      	blt.n	810137e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101368:	683b      	ldr	r3, [r7, #0]
 810136a:	b2da      	uxtb	r2, r3
 810136c:	490c      	ldr	r1, [pc, #48]	@ (81013a0 <__NVIC_SetPriority+0x4c>)
 810136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101372:	0112      	lsls	r2, r2, #4
 8101374:	b2d2      	uxtb	r2, r2
 8101376:	440b      	add	r3, r1
 8101378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810137c:	e00a      	b.n	8101394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810137e:	683b      	ldr	r3, [r7, #0]
 8101380:	b2da      	uxtb	r2, r3
 8101382:	4908      	ldr	r1, [pc, #32]	@ (81013a4 <__NVIC_SetPriority+0x50>)
 8101384:	88fb      	ldrh	r3, [r7, #6]
 8101386:	f003 030f 	and.w	r3, r3, #15
 810138a:	3b04      	subs	r3, #4
 810138c:	0112      	lsls	r2, r2, #4
 810138e:	b2d2      	uxtb	r2, r2
 8101390:	440b      	add	r3, r1
 8101392:	761a      	strb	r2, [r3, #24]
}
 8101394:	bf00      	nop
 8101396:	370c      	adds	r7, #12
 8101398:	46bd      	mov	sp, r7
 810139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810139e:	4770      	bx	lr
 81013a0:	e000e100 	.word	0xe000e100
 81013a4:	e000ed00 	.word	0xe000ed00

081013a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81013a8:	b580      	push	{r7, lr}
 81013aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81013ac:	4b05      	ldr	r3, [pc, #20]	@ (81013c4 <SysTick_Handler+0x1c>)
 81013ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81013b0:	f002 f986 	bl	81036c0 <xTaskGetSchedulerState>
 81013b4:	4603      	mov	r3, r0
 81013b6:	2b01      	cmp	r3, #1
 81013b8:	d001      	beq.n	81013be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81013ba:	f000 fd9d 	bl	8101ef8 <xPortSysTickHandler>
  }
}
 81013be:	bf00      	nop
 81013c0:	bd80      	pop	{r7, pc}
 81013c2:	bf00      	nop
 81013c4:	e000e010 	.word	0xe000e010

081013c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81013c8:	b580      	push	{r7, lr}
 81013ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 81013cc:	2100      	movs	r1, #0
 81013ce:	f06f 0004 	mvn.w	r0, #4
 81013d2:	f7ff ffbf 	bl	8101354 <__NVIC_SetPriority>
#endif
}
 81013d6:	bf00      	nop
 81013d8:	bd80      	pop	{r7, pc}
	...

081013dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81013dc:	b480      	push	{r7}
 81013de:	b083      	sub	sp, #12
 81013e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81013e2:	f3ef 8305 	mrs	r3, IPSR
 81013e6:	603b      	str	r3, [r7, #0]
  return(result);
 81013e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81013ea:	2b00      	cmp	r3, #0
 81013ec:	d003      	beq.n	81013f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 81013ee:	f06f 0305 	mvn.w	r3, #5
 81013f2:	607b      	str	r3, [r7, #4]
 81013f4:	e00c      	b.n	8101410 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 81013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8101420 <osKernelInitialize+0x44>)
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d105      	bne.n	810140a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81013fe:	4b08      	ldr	r3, [pc, #32]	@ (8101420 <osKernelInitialize+0x44>)
 8101400:	2201      	movs	r2, #1
 8101402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8101404:	2300      	movs	r3, #0
 8101406:	607b      	str	r3, [r7, #4]
 8101408:	e002      	b.n	8101410 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810140a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810140e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101410:	687b      	ldr	r3, [r7, #4]
}
 8101412:	4618      	mov	r0, r3
 8101414:	370c      	adds	r7, #12
 8101416:	46bd      	mov	sp, r7
 8101418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810141c:	4770      	bx	lr
 810141e:	bf00      	nop
 8101420:	100000d4 	.word	0x100000d4

08101424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8101424:	b580      	push	{r7, lr}
 8101426:	b082      	sub	sp, #8
 8101428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810142a:	f3ef 8305 	mrs	r3, IPSR
 810142e:	603b      	str	r3, [r7, #0]
  return(result);
 8101430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101432:	2b00      	cmp	r3, #0
 8101434:	d003      	beq.n	810143e <osKernelStart+0x1a>
    stat = osErrorISR;
 8101436:	f06f 0305 	mvn.w	r3, #5
 810143a:	607b      	str	r3, [r7, #4]
 810143c:	e010      	b.n	8101460 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810143e:	4b0b      	ldr	r3, [pc, #44]	@ (810146c <osKernelStart+0x48>)
 8101440:	681b      	ldr	r3, [r3, #0]
 8101442:	2b01      	cmp	r3, #1
 8101444:	d109      	bne.n	810145a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8101446:	f7ff ffbf 	bl	81013c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810144a:	4b08      	ldr	r3, [pc, #32]	@ (810146c <osKernelStart+0x48>)
 810144c:	2202      	movs	r2, #2
 810144e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8101450:	f001 fcd2 	bl	8102df8 <vTaskStartScheduler>
      stat = osOK;
 8101454:	2300      	movs	r3, #0
 8101456:	607b      	str	r3, [r7, #4]
 8101458:	e002      	b.n	8101460 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810145a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810145e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101460:	687b      	ldr	r3, [r7, #4]
}
 8101462:	4618      	mov	r0, r3
 8101464:	3708      	adds	r7, #8
 8101466:	46bd      	mov	sp, r7
 8101468:	bd80      	pop	{r7, pc}
 810146a:	bf00      	nop
 810146c:	100000d4 	.word	0x100000d4

08101470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8101470:	b580      	push	{r7, lr}
 8101472:	b08e      	sub	sp, #56	@ 0x38
 8101474:	af04      	add	r7, sp, #16
 8101476:	60f8      	str	r0, [r7, #12]
 8101478:	60b9      	str	r1, [r7, #8]
 810147a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810147c:	2300      	movs	r3, #0
 810147e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101480:	f3ef 8305 	mrs	r3, IPSR
 8101484:	617b      	str	r3, [r7, #20]
  return(result);
 8101486:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8101488:	2b00      	cmp	r3, #0
 810148a:	d17e      	bne.n	810158a <osThreadNew+0x11a>
 810148c:	68fb      	ldr	r3, [r7, #12]
 810148e:	2b00      	cmp	r3, #0
 8101490:	d07b      	beq.n	810158a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8101492:	2380      	movs	r3, #128	@ 0x80
 8101494:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8101496:	2318      	movs	r3, #24
 8101498:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810149a:	2300      	movs	r3, #0
 810149c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810149e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 81014a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81014a4:	687b      	ldr	r3, [r7, #4]
 81014a6:	2b00      	cmp	r3, #0
 81014a8:	d045      	beq.n	8101536 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	681b      	ldr	r3, [r3, #0]
 81014ae:	2b00      	cmp	r3, #0
 81014b0:	d002      	beq.n	81014b8 <osThreadNew+0x48>
        name = attr->name;
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	699b      	ldr	r3, [r3, #24]
 81014bc:	2b00      	cmp	r3, #0
 81014be:	d002      	beq.n	81014c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	699b      	ldr	r3, [r3, #24]
 81014c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81014c6:	69fb      	ldr	r3, [r7, #28]
 81014c8:	2b00      	cmp	r3, #0
 81014ca:	d008      	beq.n	81014de <osThreadNew+0x6e>
 81014cc:	69fb      	ldr	r3, [r7, #28]
 81014ce:	2b38      	cmp	r3, #56	@ 0x38
 81014d0:	d805      	bhi.n	81014de <osThreadNew+0x6e>
 81014d2:	687b      	ldr	r3, [r7, #4]
 81014d4:	685b      	ldr	r3, [r3, #4]
 81014d6:	f003 0301 	and.w	r3, r3, #1
 81014da:	2b00      	cmp	r3, #0
 81014dc:	d001      	beq.n	81014e2 <osThreadNew+0x72>
        return (NULL);
 81014de:	2300      	movs	r3, #0
 81014e0:	e054      	b.n	810158c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	695b      	ldr	r3, [r3, #20]
 81014e6:	2b00      	cmp	r3, #0
 81014e8:	d003      	beq.n	81014f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 81014ea:	687b      	ldr	r3, [r7, #4]
 81014ec:	695b      	ldr	r3, [r3, #20]
 81014ee:	089b      	lsrs	r3, r3, #2
 81014f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	689b      	ldr	r3, [r3, #8]
 81014f6:	2b00      	cmp	r3, #0
 81014f8:	d00e      	beq.n	8101518 <osThreadNew+0xa8>
 81014fa:	687b      	ldr	r3, [r7, #4]
 81014fc:	68db      	ldr	r3, [r3, #12]
 81014fe:	2ba7      	cmp	r3, #167	@ 0xa7
 8101500:	d90a      	bls.n	8101518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101502:	687b      	ldr	r3, [r7, #4]
 8101504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8101506:	2b00      	cmp	r3, #0
 8101508:	d006      	beq.n	8101518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	695b      	ldr	r3, [r3, #20]
 810150e:	2b00      	cmp	r3, #0
 8101510:	d002      	beq.n	8101518 <osThreadNew+0xa8>
        mem = 1;
 8101512:	2301      	movs	r3, #1
 8101514:	61bb      	str	r3, [r7, #24]
 8101516:	e010      	b.n	810153a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	689b      	ldr	r3, [r3, #8]
 810151c:	2b00      	cmp	r3, #0
 810151e:	d10c      	bne.n	810153a <osThreadNew+0xca>
 8101520:	687b      	ldr	r3, [r7, #4]
 8101522:	68db      	ldr	r3, [r3, #12]
 8101524:	2b00      	cmp	r3, #0
 8101526:	d108      	bne.n	810153a <osThreadNew+0xca>
 8101528:	687b      	ldr	r3, [r7, #4]
 810152a:	691b      	ldr	r3, [r3, #16]
 810152c:	2b00      	cmp	r3, #0
 810152e:	d104      	bne.n	810153a <osThreadNew+0xca>
          mem = 0;
 8101530:	2300      	movs	r3, #0
 8101532:	61bb      	str	r3, [r7, #24]
 8101534:	e001      	b.n	810153a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8101536:	2300      	movs	r3, #0
 8101538:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810153a:	69bb      	ldr	r3, [r7, #24]
 810153c:	2b01      	cmp	r3, #1
 810153e:	d110      	bne.n	8101562 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101540:	687b      	ldr	r3, [r7, #4]
 8101542:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8101544:	687a      	ldr	r2, [r7, #4]
 8101546:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101548:	9202      	str	r2, [sp, #8]
 810154a:	9301      	str	r3, [sp, #4]
 810154c:	69fb      	ldr	r3, [r7, #28]
 810154e:	9300      	str	r3, [sp, #0]
 8101550:	68bb      	ldr	r3, [r7, #8]
 8101552:	6a3a      	ldr	r2, [r7, #32]
 8101554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101556:	68f8      	ldr	r0, [r7, #12]
 8101558:	f001 fa5a 	bl	8102a10 <xTaskCreateStatic>
 810155c:	4603      	mov	r3, r0
 810155e:	613b      	str	r3, [r7, #16]
 8101560:	e013      	b.n	810158a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8101562:	69bb      	ldr	r3, [r7, #24]
 8101564:	2b00      	cmp	r3, #0
 8101566:	d110      	bne.n	810158a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8101568:	6a3b      	ldr	r3, [r7, #32]
 810156a:	b29a      	uxth	r2, r3
 810156c:	f107 0310 	add.w	r3, r7, #16
 8101570:	9301      	str	r3, [sp, #4]
 8101572:	69fb      	ldr	r3, [r7, #28]
 8101574:	9300      	str	r3, [sp, #0]
 8101576:	68bb      	ldr	r3, [r7, #8]
 8101578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810157a:	68f8      	ldr	r0, [r7, #12]
 810157c:	f001 faa8 	bl	8102ad0 <xTaskCreate>
 8101580:	4603      	mov	r3, r0
 8101582:	2b01      	cmp	r3, #1
 8101584:	d001      	beq.n	810158a <osThreadNew+0x11a>
            hTask = NULL;
 8101586:	2300      	movs	r3, #0
 8101588:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810158a:	693b      	ldr	r3, [r7, #16]
}
 810158c:	4618      	mov	r0, r3
 810158e:	3728      	adds	r7, #40	@ 0x28
 8101590:	46bd      	mov	sp, r7
 8101592:	bd80      	pop	{r7, pc}

08101594 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8101594:	b580      	push	{r7, lr}
 8101596:	b084      	sub	sp, #16
 8101598:	af00      	add	r7, sp, #0
 810159a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810159c:	f3ef 8305 	mrs	r3, IPSR
 81015a0:	60bb      	str	r3, [r7, #8]
  return(result);
 81015a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81015a4:	2b00      	cmp	r3, #0
 81015a6:	d003      	beq.n	81015b0 <osDelay+0x1c>
    stat = osErrorISR;
 81015a8:	f06f 0305 	mvn.w	r3, #5
 81015ac:	60fb      	str	r3, [r7, #12]
 81015ae:	e007      	b.n	81015c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81015b0:	2300      	movs	r3, #0
 81015b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	2b00      	cmp	r3, #0
 81015b8:	d002      	beq.n	81015c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 81015ba:	6878      	ldr	r0, [r7, #4]
 81015bc:	f001 fbe6 	bl	8102d8c <vTaskDelay>
    }
  }

  return (stat);
 81015c0:	68fb      	ldr	r3, [r7, #12]
}
 81015c2:	4618      	mov	r0, r3
 81015c4:	3710      	adds	r7, #16
 81015c6:	46bd      	mov	sp, r7
 81015c8:	bd80      	pop	{r7, pc}
	...

081015cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81015cc:	b480      	push	{r7}
 81015ce:	b085      	sub	sp, #20
 81015d0:	af00      	add	r7, sp, #0
 81015d2:	60f8      	str	r0, [r7, #12]
 81015d4:	60b9      	str	r1, [r7, #8]
 81015d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81015d8:	68fb      	ldr	r3, [r7, #12]
 81015da:	4a07      	ldr	r2, [pc, #28]	@ (81015f8 <vApplicationGetIdleTaskMemory+0x2c>)
 81015dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81015de:	68bb      	ldr	r3, [r7, #8]
 81015e0:	4a06      	ldr	r2, [pc, #24]	@ (81015fc <vApplicationGetIdleTaskMemory+0x30>)
 81015e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81015e4:	687b      	ldr	r3, [r7, #4]
 81015e6:	2280      	movs	r2, #128	@ 0x80
 81015e8:	601a      	str	r2, [r3, #0]
}
 81015ea:	bf00      	nop
 81015ec:	3714      	adds	r7, #20
 81015ee:	46bd      	mov	sp, r7
 81015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f4:	4770      	bx	lr
 81015f6:	bf00      	nop
 81015f8:	100000d8 	.word	0x100000d8
 81015fc:	10000180 	.word	0x10000180

08101600 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8101600:	b480      	push	{r7}
 8101602:	b085      	sub	sp, #20
 8101604:	af00      	add	r7, sp, #0
 8101606:	60f8      	str	r0, [r7, #12]
 8101608:	60b9      	str	r1, [r7, #8]
 810160a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810160c:	68fb      	ldr	r3, [r7, #12]
 810160e:	4a07      	ldr	r2, [pc, #28]	@ (810162c <vApplicationGetTimerTaskMemory+0x2c>)
 8101610:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101612:	68bb      	ldr	r3, [r7, #8]
 8101614:	4a06      	ldr	r2, [pc, #24]	@ (8101630 <vApplicationGetTimerTaskMemory+0x30>)
 8101616:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810161e:	601a      	str	r2, [r3, #0]
}
 8101620:	bf00      	nop
 8101622:	3714      	adds	r7, #20
 8101624:	46bd      	mov	sp, r7
 8101626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810162a:	4770      	bx	lr
 810162c:	10000380 	.word	0x10000380
 8101630:	10000428 	.word	0x10000428

08101634 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101634:	b580      	push	{r7, lr}
 8101636:	b08a      	sub	sp, #40	@ 0x28
 8101638:	af00      	add	r7, sp, #0
 810163a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810163c:	2300      	movs	r3, #0
 810163e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101640:	f001 fc4a 	bl	8102ed8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101644:	4b5c      	ldr	r3, [pc, #368]	@ (81017b8 <pvPortMalloc+0x184>)
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	2b00      	cmp	r3, #0
 810164a:	d101      	bne.n	8101650 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810164c:	f000 f924 	bl	8101898 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8101650:	4b5a      	ldr	r3, [pc, #360]	@ (81017bc <pvPortMalloc+0x188>)
 8101652:	681a      	ldr	r2, [r3, #0]
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	4013      	ands	r3, r2
 8101658:	2b00      	cmp	r3, #0
 810165a:	f040 8095 	bne.w	8101788 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810165e:	687b      	ldr	r3, [r7, #4]
 8101660:	2b00      	cmp	r3, #0
 8101662:	d01e      	beq.n	81016a2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8101664:	2208      	movs	r2, #8
 8101666:	687b      	ldr	r3, [r7, #4]
 8101668:	4413      	add	r3, r2
 810166a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	f003 0307 	and.w	r3, r3, #7
 8101672:	2b00      	cmp	r3, #0
 8101674:	d015      	beq.n	81016a2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8101676:	687b      	ldr	r3, [r7, #4]
 8101678:	f023 0307 	bic.w	r3, r3, #7
 810167c:	3308      	adds	r3, #8
 810167e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	f003 0307 	and.w	r3, r3, #7
 8101686:	2b00      	cmp	r3, #0
 8101688:	d00b      	beq.n	81016a2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810168a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810168e:	f383 8811 	msr	BASEPRI, r3
 8101692:	f3bf 8f6f 	isb	sy
 8101696:	f3bf 8f4f 	dsb	sy
 810169a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810169c:	bf00      	nop
 810169e:	bf00      	nop
 81016a0:	e7fd      	b.n	810169e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	2b00      	cmp	r3, #0
 81016a6:	d06f      	beq.n	8101788 <pvPortMalloc+0x154>
 81016a8:	4b45      	ldr	r3, [pc, #276]	@ (81017c0 <pvPortMalloc+0x18c>)
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	687a      	ldr	r2, [r7, #4]
 81016ae:	429a      	cmp	r2, r3
 81016b0:	d86a      	bhi.n	8101788 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81016b2:	4b44      	ldr	r3, [pc, #272]	@ (81017c4 <pvPortMalloc+0x190>)
 81016b4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81016b6:	4b43      	ldr	r3, [pc, #268]	@ (81017c4 <pvPortMalloc+0x190>)
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81016bc:	e004      	b.n	81016c8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 81016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81016c0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81016c4:	681b      	ldr	r3, [r3, #0]
 81016c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81016ca:	685b      	ldr	r3, [r3, #4]
 81016cc:	687a      	ldr	r2, [r7, #4]
 81016ce:	429a      	cmp	r2, r3
 81016d0:	d903      	bls.n	81016da <pvPortMalloc+0xa6>
 81016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81016d4:	681b      	ldr	r3, [r3, #0]
 81016d6:	2b00      	cmp	r3, #0
 81016d8:	d1f1      	bne.n	81016be <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81016da:	4b37      	ldr	r3, [pc, #220]	@ (81017b8 <pvPortMalloc+0x184>)
 81016dc:	681b      	ldr	r3, [r3, #0]
 81016de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81016e0:	429a      	cmp	r2, r3
 81016e2:	d051      	beq.n	8101788 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81016e4:	6a3b      	ldr	r3, [r7, #32]
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	2208      	movs	r2, #8
 81016ea:	4413      	add	r3, r2
 81016ec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81016f0:	681a      	ldr	r2, [r3, #0]
 81016f2:	6a3b      	ldr	r3, [r7, #32]
 81016f4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81016f8:	685a      	ldr	r2, [r3, #4]
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	1ad2      	subs	r2, r2, r3
 81016fe:	2308      	movs	r3, #8
 8101700:	005b      	lsls	r3, r3, #1
 8101702:	429a      	cmp	r2, r3
 8101704:	d920      	bls.n	8101748 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101708:	687b      	ldr	r3, [r7, #4]
 810170a:	4413      	add	r3, r2
 810170c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810170e:	69bb      	ldr	r3, [r7, #24]
 8101710:	f003 0307 	and.w	r3, r3, #7
 8101714:	2b00      	cmp	r3, #0
 8101716:	d00b      	beq.n	8101730 <pvPortMalloc+0xfc>
	__asm volatile
 8101718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810171c:	f383 8811 	msr	BASEPRI, r3
 8101720:	f3bf 8f6f 	isb	sy
 8101724:	f3bf 8f4f 	dsb	sy
 8101728:	613b      	str	r3, [r7, #16]
}
 810172a:	bf00      	nop
 810172c:	bf00      	nop
 810172e:	e7fd      	b.n	810172c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101732:	685a      	ldr	r2, [r3, #4]
 8101734:	687b      	ldr	r3, [r7, #4]
 8101736:	1ad2      	subs	r2, r2, r3
 8101738:	69bb      	ldr	r3, [r7, #24]
 810173a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810173e:	687a      	ldr	r2, [r7, #4]
 8101740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8101742:	69b8      	ldr	r0, [r7, #24]
 8101744:	f000 f90a 	bl	810195c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101748:	4b1d      	ldr	r3, [pc, #116]	@ (81017c0 <pvPortMalloc+0x18c>)
 810174a:	681a      	ldr	r2, [r3, #0]
 810174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810174e:	685b      	ldr	r3, [r3, #4]
 8101750:	1ad3      	subs	r3, r2, r3
 8101752:	4a1b      	ldr	r2, [pc, #108]	@ (81017c0 <pvPortMalloc+0x18c>)
 8101754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8101756:	4b1a      	ldr	r3, [pc, #104]	@ (81017c0 <pvPortMalloc+0x18c>)
 8101758:	681a      	ldr	r2, [r3, #0]
 810175a:	4b1b      	ldr	r3, [pc, #108]	@ (81017c8 <pvPortMalloc+0x194>)
 810175c:	681b      	ldr	r3, [r3, #0]
 810175e:	429a      	cmp	r2, r3
 8101760:	d203      	bcs.n	810176a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8101762:	4b17      	ldr	r3, [pc, #92]	@ (81017c0 <pvPortMalloc+0x18c>)
 8101764:	681b      	ldr	r3, [r3, #0]
 8101766:	4a18      	ldr	r2, [pc, #96]	@ (81017c8 <pvPortMalloc+0x194>)
 8101768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810176c:	685a      	ldr	r2, [r3, #4]
 810176e:	4b13      	ldr	r3, [pc, #76]	@ (81017bc <pvPortMalloc+0x188>)
 8101770:	681b      	ldr	r3, [r3, #0]
 8101772:	431a      	orrs	r2, r3
 8101774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8101778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810177a:	2200      	movs	r2, #0
 810177c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810177e:	4b13      	ldr	r3, [pc, #76]	@ (81017cc <pvPortMalloc+0x198>)
 8101780:	681b      	ldr	r3, [r3, #0]
 8101782:	3301      	adds	r3, #1
 8101784:	4a11      	ldr	r2, [pc, #68]	@ (81017cc <pvPortMalloc+0x198>)
 8101786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101788:	f001 fbb4 	bl	8102ef4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810178c:	69fb      	ldr	r3, [r7, #28]
 810178e:	f003 0307 	and.w	r3, r3, #7
 8101792:	2b00      	cmp	r3, #0
 8101794:	d00b      	beq.n	81017ae <pvPortMalloc+0x17a>
	__asm volatile
 8101796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810179a:	f383 8811 	msr	BASEPRI, r3
 810179e:	f3bf 8f6f 	isb	sy
 81017a2:	f3bf 8f4f 	dsb	sy
 81017a6:	60fb      	str	r3, [r7, #12]
}
 81017a8:	bf00      	nop
 81017aa:	bf00      	nop
 81017ac:	e7fd      	b.n	81017aa <pvPortMalloc+0x176>
	return pvReturn;
 81017ae:	69fb      	ldr	r3, [r7, #28]
}
 81017b0:	4618      	mov	r0, r3
 81017b2:	3728      	adds	r7, #40	@ 0x28
 81017b4:	46bd      	mov	sp, r7
 81017b6:	bd80      	pop	{r7, pc}
 81017b8:	10004430 	.word	0x10004430
 81017bc:	10004444 	.word	0x10004444
 81017c0:	10004434 	.word	0x10004434
 81017c4:	10004428 	.word	0x10004428
 81017c8:	10004438 	.word	0x10004438
 81017cc:	1000443c 	.word	0x1000443c

081017d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81017d0:	b580      	push	{r7, lr}
 81017d2:	b086      	sub	sp, #24
 81017d4:	af00      	add	r7, sp, #0
 81017d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81017d8:	687b      	ldr	r3, [r7, #4]
 81017da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	2b00      	cmp	r3, #0
 81017e0:	d04f      	beq.n	8101882 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81017e2:	2308      	movs	r3, #8
 81017e4:	425b      	negs	r3, r3
 81017e6:	697a      	ldr	r2, [r7, #20]
 81017e8:	4413      	add	r3, r2
 81017ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81017ec:	697b      	ldr	r3, [r7, #20]
 81017ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81017f0:	693b      	ldr	r3, [r7, #16]
 81017f2:	685a      	ldr	r2, [r3, #4]
 81017f4:	4b25      	ldr	r3, [pc, #148]	@ (810188c <vPortFree+0xbc>)
 81017f6:	681b      	ldr	r3, [r3, #0]
 81017f8:	4013      	ands	r3, r2
 81017fa:	2b00      	cmp	r3, #0
 81017fc:	d10b      	bne.n	8101816 <vPortFree+0x46>
	__asm volatile
 81017fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101802:	f383 8811 	msr	BASEPRI, r3
 8101806:	f3bf 8f6f 	isb	sy
 810180a:	f3bf 8f4f 	dsb	sy
 810180e:	60fb      	str	r3, [r7, #12]
}
 8101810:	bf00      	nop
 8101812:	bf00      	nop
 8101814:	e7fd      	b.n	8101812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101816:	693b      	ldr	r3, [r7, #16]
 8101818:	681b      	ldr	r3, [r3, #0]
 810181a:	2b00      	cmp	r3, #0
 810181c:	d00b      	beq.n	8101836 <vPortFree+0x66>
	__asm volatile
 810181e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101822:	f383 8811 	msr	BASEPRI, r3
 8101826:	f3bf 8f6f 	isb	sy
 810182a:	f3bf 8f4f 	dsb	sy
 810182e:	60bb      	str	r3, [r7, #8]
}
 8101830:	bf00      	nop
 8101832:	bf00      	nop
 8101834:	e7fd      	b.n	8101832 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101836:	693b      	ldr	r3, [r7, #16]
 8101838:	685a      	ldr	r2, [r3, #4]
 810183a:	4b14      	ldr	r3, [pc, #80]	@ (810188c <vPortFree+0xbc>)
 810183c:	681b      	ldr	r3, [r3, #0]
 810183e:	4013      	ands	r3, r2
 8101840:	2b00      	cmp	r3, #0
 8101842:	d01e      	beq.n	8101882 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8101844:	693b      	ldr	r3, [r7, #16]
 8101846:	681b      	ldr	r3, [r3, #0]
 8101848:	2b00      	cmp	r3, #0
 810184a:	d11a      	bne.n	8101882 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810184c:	693b      	ldr	r3, [r7, #16]
 810184e:	685a      	ldr	r2, [r3, #4]
 8101850:	4b0e      	ldr	r3, [pc, #56]	@ (810188c <vPortFree+0xbc>)
 8101852:	681b      	ldr	r3, [r3, #0]
 8101854:	43db      	mvns	r3, r3
 8101856:	401a      	ands	r2, r3
 8101858:	693b      	ldr	r3, [r7, #16]
 810185a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810185c:	f001 fb3c 	bl	8102ed8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8101860:	693b      	ldr	r3, [r7, #16]
 8101862:	685a      	ldr	r2, [r3, #4]
 8101864:	4b0a      	ldr	r3, [pc, #40]	@ (8101890 <vPortFree+0xc0>)
 8101866:	681b      	ldr	r3, [r3, #0]
 8101868:	4413      	add	r3, r2
 810186a:	4a09      	ldr	r2, [pc, #36]	@ (8101890 <vPortFree+0xc0>)
 810186c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810186e:	6938      	ldr	r0, [r7, #16]
 8101870:	f000 f874 	bl	810195c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8101874:	4b07      	ldr	r3, [pc, #28]	@ (8101894 <vPortFree+0xc4>)
 8101876:	681b      	ldr	r3, [r3, #0]
 8101878:	3301      	adds	r3, #1
 810187a:	4a06      	ldr	r2, [pc, #24]	@ (8101894 <vPortFree+0xc4>)
 810187c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810187e:	f001 fb39 	bl	8102ef4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8101882:	bf00      	nop
 8101884:	3718      	adds	r7, #24
 8101886:	46bd      	mov	sp, r7
 8101888:	bd80      	pop	{r7, pc}
 810188a:	bf00      	nop
 810188c:	10004444 	.word	0x10004444
 8101890:	10004434 	.word	0x10004434
 8101894:	10004440 	.word	0x10004440

08101898 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8101898:	b480      	push	{r7}
 810189a:	b085      	sub	sp, #20
 810189c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810189e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 81018a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81018a4:	4b27      	ldr	r3, [pc, #156]	@ (8101944 <prvHeapInit+0xac>)
 81018a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81018a8:	68fb      	ldr	r3, [r7, #12]
 81018aa:	f003 0307 	and.w	r3, r3, #7
 81018ae:	2b00      	cmp	r3, #0
 81018b0:	d00c      	beq.n	81018cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81018b2:	68fb      	ldr	r3, [r7, #12]
 81018b4:	3307      	adds	r3, #7
 81018b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81018b8:	68fb      	ldr	r3, [r7, #12]
 81018ba:	f023 0307 	bic.w	r3, r3, #7
 81018be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81018c0:	68ba      	ldr	r2, [r7, #8]
 81018c2:	68fb      	ldr	r3, [r7, #12]
 81018c4:	1ad3      	subs	r3, r2, r3
 81018c6:	4a1f      	ldr	r2, [pc, #124]	@ (8101944 <prvHeapInit+0xac>)
 81018c8:	4413      	add	r3, r2
 81018ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81018cc:	68fb      	ldr	r3, [r7, #12]
 81018ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81018d0:	4a1d      	ldr	r2, [pc, #116]	@ (8101948 <prvHeapInit+0xb0>)
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8101948 <prvHeapInit+0xb0>)
 81018d8:	2200      	movs	r2, #0
 81018da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	68ba      	ldr	r2, [r7, #8]
 81018e0:	4413      	add	r3, r2
 81018e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81018e4:	2208      	movs	r2, #8
 81018e6:	68fb      	ldr	r3, [r7, #12]
 81018e8:	1a9b      	subs	r3, r3, r2
 81018ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81018ec:	68fb      	ldr	r3, [r7, #12]
 81018ee:	f023 0307 	bic.w	r3, r3, #7
 81018f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81018f4:	68fb      	ldr	r3, [r7, #12]
 81018f6:	4a15      	ldr	r2, [pc, #84]	@ (810194c <prvHeapInit+0xb4>)
 81018f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81018fa:	4b14      	ldr	r3, [pc, #80]	@ (810194c <prvHeapInit+0xb4>)
 81018fc:	681b      	ldr	r3, [r3, #0]
 81018fe:	2200      	movs	r2, #0
 8101900:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8101902:	4b12      	ldr	r3, [pc, #72]	@ (810194c <prvHeapInit+0xb4>)
 8101904:	681b      	ldr	r3, [r3, #0]
 8101906:	2200      	movs	r2, #0
 8101908:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810190e:	683b      	ldr	r3, [r7, #0]
 8101910:	68fa      	ldr	r2, [r7, #12]
 8101912:	1ad2      	subs	r2, r2, r3
 8101914:	683b      	ldr	r3, [r7, #0]
 8101916:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101918:	4b0c      	ldr	r3, [pc, #48]	@ (810194c <prvHeapInit+0xb4>)
 810191a:	681a      	ldr	r2, [r3, #0]
 810191c:	683b      	ldr	r3, [r7, #0]
 810191e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101920:	683b      	ldr	r3, [r7, #0]
 8101922:	685b      	ldr	r3, [r3, #4]
 8101924:	4a0a      	ldr	r2, [pc, #40]	@ (8101950 <prvHeapInit+0xb8>)
 8101926:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101928:	683b      	ldr	r3, [r7, #0]
 810192a:	685b      	ldr	r3, [r3, #4]
 810192c:	4a09      	ldr	r2, [pc, #36]	@ (8101954 <prvHeapInit+0xbc>)
 810192e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101930:	4b09      	ldr	r3, [pc, #36]	@ (8101958 <prvHeapInit+0xc0>)
 8101932:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8101936:	601a      	str	r2, [r3, #0]
}
 8101938:	bf00      	nop
 810193a:	3714      	adds	r7, #20
 810193c:	46bd      	mov	sp, r7
 810193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101942:	4770      	bx	lr
 8101944:	10000828 	.word	0x10000828
 8101948:	10004428 	.word	0x10004428
 810194c:	10004430 	.word	0x10004430
 8101950:	10004438 	.word	0x10004438
 8101954:	10004434 	.word	0x10004434
 8101958:	10004444 	.word	0x10004444

0810195c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810195c:	b480      	push	{r7}
 810195e:	b085      	sub	sp, #20
 8101960:	af00      	add	r7, sp, #0
 8101962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8101964:	4b28      	ldr	r3, [pc, #160]	@ (8101a08 <prvInsertBlockIntoFreeList+0xac>)
 8101966:	60fb      	str	r3, [r7, #12]
 8101968:	e002      	b.n	8101970 <prvInsertBlockIntoFreeList+0x14>
 810196a:	68fb      	ldr	r3, [r7, #12]
 810196c:	681b      	ldr	r3, [r3, #0]
 810196e:	60fb      	str	r3, [r7, #12]
 8101970:	68fb      	ldr	r3, [r7, #12]
 8101972:	681b      	ldr	r3, [r3, #0]
 8101974:	687a      	ldr	r2, [r7, #4]
 8101976:	429a      	cmp	r2, r3
 8101978:	d8f7      	bhi.n	810196a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810197a:	68fb      	ldr	r3, [r7, #12]
 810197c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810197e:	68fb      	ldr	r3, [r7, #12]
 8101980:	685b      	ldr	r3, [r3, #4]
 8101982:	68ba      	ldr	r2, [r7, #8]
 8101984:	4413      	add	r3, r2
 8101986:	687a      	ldr	r2, [r7, #4]
 8101988:	429a      	cmp	r2, r3
 810198a:	d108      	bne.n	810199e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810198c:	68fb      	ldr	r3, [r7, #12]
 810198e:	685a      	ldr	r2, [r3, #4]
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	685b      	ldr	r3, [r3, #4]
 8101994:	441a      	add	r2, r3
 8101996:	68fb      	ldr	r3, [r7, #12]
 8101998:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810199a:	68fb      	ldr	r3, [r7, #12]
 810199c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	685b      	ldr	r3, [r3, #4]
 81019a6:	68ba      	ldr	r2, [r7, #8]
 81019a8:	441a      	add	r2, r3
 81019aa:	68fb      	ldr	r3, [r7, #12]
 81019ac:	681b      	ldr	r3, [r3, #0]
 81019ae:	429a      	cmp	r2, r3
 81019b0:	d118      	bne.n	81019e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81019b2:	68fb      	ldr	r3, [r7, #12]
 81019b4:	681a      	ldr	r2, [r3, #0]
 81019b6:	4b15      	ldr	r3, [pc, #84]	@ (8101a0c <prvInsertBlockIntoFreeList+0xb0>)
 81019b8:	681b      	ldr	r3, [r3, #0]
 81019ba:	429a      	cmp	r2, r3
 81019bc:	d00d      	beq.n	81019da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81019be:	687b      	ldr	r3, [r7, #4]
 81019c0:	685a      	ldr	r2, [r3, #4]
 81019c2:	68fb      	ldr	r3, [r7, #12]
 81019c4:	681b      	ldr	r3, [r3, #0]
 81019c6:	685b      	ldr	r3, [r3, #4]
 81019c8:	441a      	add	r2, r3
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81019ce:	68fb      	ldr	r3, [r7, #12]
 81019d0:	681b      	ldr	r3, [r3, #0]
 81019d2:	681a      	ldr	r2, [r3, #0]
 81019d4:	687b      	ldr	r3, [r7, #4]
 81019d6:	601a      	str	r2, [r3, #0]
 81019d8:	e008      	b.n	81019ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81019da:	4b0c      	ldr	r3, [pc, #48]	@ (8101a0c <prvInsertBlockIntoFreeList+0xb0>)
 81019dc:	681a      	ldr	r2, [r3, #0]
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	601a      	str	r2, [r3, #0]
 81019e2:	e003      	b.n	81019ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81019e4:	68fb      	ldr	r3, [r7, #12]
 81019e6:	681a      	ldr	r2, [r3, #0]
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81019ec:	68fa      	ldr	r2, [r7, #12]
 81019ee:	687b      	ldr	r3, [r7, #4]
 81019f0:	429a      	cmp	r2, r3
 81019f2:	d002      	beq.n	81019fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81019f4:	68fb      	ldr	r3, [r7, #12]
 81019f6:	687a      	ldr	r2, [r7, #4]
 81019f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81019fa:	bf00      	nop
 81019fc:	3714      	adds	r7, #20
 81019fe:	46bd      	mov	sp, r7
 8101a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a04:	4770      	bx	lr
 8101a06:	bf00      	nop
 8101a08:	10004428 	.word	0x10004428
 8101a0c:	10004430 	.word	0x10004430

08101a10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101a10:	b480      	push	{r7}
 8101a12:	b083      	sub	sp, #12
 8101a14:	af00      	add	r7, sp, #0
 8101a16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	f103 0208 	add.w	r2, r3, #8
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8101a28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	f103 0208 	add.w	r2, r3, #8
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	f103 0208 	add.w	r2, r3, #8
 8101a3a:	687b      	ldr	r3, [r7, #4]
 8101a3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	2200      	movs	r2, #0
 8101a42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8101a44:	bf00      	nop
 8101a46:	370c      	adds	r7, #12
 8101a48:	46bd      	mov	sp, r7
 8101a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a4e:	4770      	bx	lr

08101a50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8101a50:	b480      	push	{r7}
 8101a52:	b083      	sub	sp, #12
 8101a54:	af00      	add	r7, sp, #0
 8101a56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	2200      	movs	r2, #0
 8101a5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8101a5e:	bf00      	nop
 8101a60:	370c      	adds	r7, #12
 8101a62:	46bd      	mov	sp, r7
 8101a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a68:	4770      	bx	lr

08101a6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101a6a:	b480      	push	{r7}
 8101a6c:	b085      	sub	sp, #20
 8101a6e:	af00      	add	r7, sp, #0
 8101a70:	6078      	str	r0, [r7, #4]
 8101a72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	685b      	ldr	r3, [r3, #4]
 8101a78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8101a7a:	683b      	ldr	r3, [r7, #0]
 8101a7c:	68fa      	ldr	r2, [r7, #12]
 8101a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8101a80:	68fb      	ldr	r3, [r7, #12]
 8101a82:	689a      	ldr	r2, [r3, #8]
 8101a84:	683b      	ldr	r3, [r7, #0]
 8101a86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8101a88:	68fb      	ldr	r3, [r7, #12]
 8101a8a:	689b      	ldr	r3, [r3, #8]
 8101a8c:	683a      	ldr	r2, [r7, #0]
 8101a8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8101a90:	68fb      	ldr	r3, [r7, #12]
 8101a92:	683a      	ldr	r2, [r7, #0]
 8101a94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8101a96:	683b      	ldr	r3, [r7, #0]
 8101a98:	687a      	ldr	r2, [r7, #4]
 8101a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	681b      	ldr	r3, [r3, #0]
 8101aa0:	1c5a      	adds	r2, r3, #1
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	601a      	str	r2, [r3, #0]
}
 8101aa6:	bf00      	nop
 8101aa8:	3714      	adds	r7, #20
 8101aaa:	46bd      	mov	sp, r7
 8101aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab0:	4770      	bx	lr

08101ab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101ab2:	b480      	push	{r7}
 8101ab4:	b085      	sub	sp, #20
 8101ab6:	af00      	add	r7, sp, #0
 8101ab8:	6078      	str	r0, [r7, #4]
 8101aba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8101abc:	683b      	ldr	r3, [r7, #0]
 8101abe:	681b      	ldr	r3, [r3, #0]
 8101ac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101ac2:	68bb      	ldr	r3, [r7, #8]
 8101ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101ac8:	d103      	bne.n	8101ad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	691b      	ldr	r3, [r3, #16]
 8101ace:	60fb      	str	r3, [r7, #12]
 8101ad0:	e00c      	b.n	8101aec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	3308      	adds	r3, #8
 8101ad6:	60fb      	str	r3, [r7, #12]
 8101ad8:	e002      	b.n	8101ae0 <vListInsert+0x2e>
 8101ada:	68fb      	ldr	r3, [r7, #12]
 8101adc:	685b      	ldr	r3, [r3, #4]
 8101ade:	60fb      	str	r3, [r7, #12]
 8101ae0:	68fb      	ldr	r3, [r7, #12]
 8101ae2:	685b      	ldr	r3, [r3, #4]
 8101ae4:	681b      	ldr	r3, [r3, #0]
 8101ae6:	68ba      	ldr	r2, [r7, #8]
 8101ae8:	429a      	cmp	r2, r3
 8101aea:	d2f6      	bcs.n	8101ada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8101aec:	68fb      	ldr	r3, [r7, #12]
 8101aee:	685a      	ldr	r2, [r3, #4]
 8101af0:	683b      	ldr	r3, [r7, #0]
 8101af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101af4:	683b      	ldr	r3, [r7, #0]
 8101af6:	685b      	ldr	r3, [r3, #4]
 8101af8:	683a      	ldr	r2, [r7, #0]
 8101afa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8101afc:	683b      	ldr	r3, [r7, #0]
 8101afe:	68fa      	ldr	r2, [r7, #12]
 8101b00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101b02:	68fb      	ldr	r3, [r7, #12]
 8101b04:	683a      	ldr	r2, [r7, #0]
 8101b06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101b08:	683b      	ldr	r3, [r7, #0]
 8101b0a:	687a      	ldr	r2, [r7, #4]
 8101b0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	681b      	ldr	r3, [r3, #0]
 8101b12:	1c5a      	adds	r2, r3, #1
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	601a      	str	r2, [r3, #0]
}
 8101b18:	bf00      	nop
 8101b1a:	3714      	adds	r7, #20
 8101b1c:	46bd      	mov	sp, r7
 8101b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b22:	4770      	bx	lr

08101b24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101b24:	b480      	push	{r7}
 8101b26:	b085      	sub	sp, #20
 8101b28:	af00      	add	r7, sp, #0
 8101b2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	691b      	ldr	r3, [r3, #16]
 8101b30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	685b      	ldr	r3, [r3, #4]
 8101b36:	687a      	ldr	r2, [r7, #4]
 8101b38:	6892      	ldr	r2, [r2, #8]
 8101b3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8101b3c:	687b      	ldr	r3, [r7, #4]
 8101b3e:	689b      	ldr	r3, [r3, #8]
 8101b40:	687a      	ldr	r2, [r7, #4]
 8101b42:	6852      	ldr	r2, [r2, #4]
 8101b44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8101b46:	68fb      	ldr	r3, [r7, #12]
 8101b48:	685b      	ldr	r3, [r3, #4]
 8101b4a:	687a      	ldr	r2, [r7, #4]
 8101b4c:	429a      	cmp	r2, r3
 8101b4e:	d103      	bne.n	8101b58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	689a      	ldr	r2, [r3, #8]
 8101b54:	68fb      	ldr	r3, [r7, #12]
 8101b56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	2200      	movs	r2, #0
 8101b5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8101b5e:	68fb      	ldr	r3, [r7, #12]
 8101b60:	681b      	ldr	r3, [r3, #0]
 8101b62:	1e5a      	subs	r2, r3, #1
 8101b64:	68fb      	ldr	r3, [r7, #12]
 8101b66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8101b68:	68fb      	ldr	r3, [r7, #12]
 8101b6a:	681b      	ldr	r3, [r3, #0]
}
 8101b6c:	4618      	mov	r0, r3
 8101b6e:	3714      	adds	r7, #20
 8101b70:	46bd      	mov	sp, r7
 8101b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b76:	4770      	bx	lr

08101b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101b78:	b480      	push	{r7}
 8101b7a:	b085      	sub	sp, #20
 8101b7c:	af00      	add	r7, sp, #0
 8101b7e:	60f8      	str	r0, [r7, #12]
 8101b80:	60b9      	str	r1, [r7, #8]
 8101b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8101b84:	68fb      	ldr	r3, [r7, #12]
 8101b86:	3b04      	subs	r3, #4
 8101b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8101b8a:	68fb      	ldr	r3, [r7, #12]
 8101b8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8101b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101b92:	68fb      	ldr	r3, [r7, #12]
 8101b94:	3b04      	subs	r3, #4
 8101b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101b98:	68bb      	ldr	r3, [r7, #8]
 8101b9a:	f023 0201 	bic.w	r2, r3, #1
 8101b9e:	68fb      	ldr	r3, [r7, #12]
 8101ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101ba2:	68fb      	ldr	r3, [r7, #12]
 8101ba4:	3b04      	subs	r3, #4
 8101ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8101bdc <pxPortInitialiseStack+0x64>)
 8101baa:	68fb      	ldr	r3, [r7, #12]
 8101bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101bae:	68fb      	ldr	r3, [r7, #12]
 8101bb0:	3b14      	subs	r3, #20
 8101bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8101bb4:	687a      	ldr	r2, [r7, #4]
 8101bb6:	68fb      	ldr	r3, [r7, #12]
 8101bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101bba:	68fb      	ldr	r3, [r7, #12]
 8101bbc:	3b04      	subs	r3, #4
 8101bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101bc0:	68fb      	ldr	r3, [r7, #12]
 8101bc2:	f06f 0202 	mvn.w	r2, #2
 8101bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101bc8:	68fb      	ldr	r3, [r7, #12]
 8101bca:	3b20      	subs	r3, #32
 8101bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101bce:	68fb      	ldr	r3, [r7, #12]
}
 8101bd0:	4618      	mov	r0, r3
 8101bd2:	3714      	adds	r7, #20
 8101bd4:	46bd      	mov	sp, r7
 8101bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bda:	4770      	bx	lr
 8101bdc:	08101be1 	.word	0x08101be1

08101be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8101be0:	b480      	push	{r7}
 8101be2:	b085      	sub	sp, #20
 8101be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8101be6:	2300      	movs	r3, #0
 8101be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8101bea:	4b13      	ldr	r3, [pc, #76]	@ (8101c38 <prvTaskExitError+0x58>)
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101bf2:	d00b      	beq.n	8101c0c <prvTaskExitError+0x2c>
	__asm volatile
 8101bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101bf8:	f383 8811 	msr	BASEPRI, r3
 8101bfc:	f3bf 8f6f 	isb	sy
 8101c00:	f3bf 8f4f 	dsb	sy
 8101c04:	60fb      	str	r3, [r7, #12]
}
 8101c06:	bf00      	nop
 8101c08:	bf00      	nop
 8101c0a:	e7fd      	b.n	8101c08 <prvTaskExitError+0x28>
	__asm volatile
 8101c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c10:	f383 8811 	msr	BASEPRI, r3
 8101c14:	f3bf 8f6f 	isb	sy
 8101c18:	f3bf 8f4f 	dsb	sy
 8101c1c:	60bb      	str	r3, [r7, #8]
}
 8101c1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8101c20:	bf00      	nop
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	2b00      	cmp	r3, #0
 8101c26:	d0fc      	beq.n	8101c22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8101c28:	bf00      	nop
 8101c2a:	bf00      	nop
 8101c2c:	3714      	adds	r7, #20
 8101c2e:	46bd      	mov	sp, r7
 8101c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c34:	4770      	bx	lr
 8101c36:	bf00      	nop
 8101c38:	10000010 	.word	0x10000010
 8101c3c:	00000000 	.word	0x00000000

08101c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8101c40:	4b07      	ldr	r3, [pc, #28]	@ (8101c60 <pxCurrentTCBConst2>)
 8101c42:	6819      	ldr	r1, [r3, #0]
 8101c44:	6808      	ldr	r0, [r1, #0]
 8101c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101c4a:	f380 8809 	msr	PSP, r0
 8101c4e:	f3bf 8f6f 	isb	sy
 8101c52:	f04f 0000 	mov.w	r0, #0
 8101c56:	f380 8811 	msr	BASEPRI, r0
 8101c5a:	4770      	bx	lr
 8101c5c:	f3af 8000 	nop.w

08101c60 <pxCurrentTCBConst2>:
 8101c60:	10004490 	.word	0x10004490
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8101c64:	bf00      	nop
 8101c66:	bf00      	nop

08101c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8101c68:	4808      	ldr	r0, [pc, #32]	@ (8101c8c <prvPortStartFirstTask+0x24>)
 8101c6a:	6800      	ldr	r0, [r0, #0]
 8101c6c:	6800      	ldr	r0, [r0, #0]
 8101c6e:	f380 8808 	msr	MSP, r0
 8101c72:	f04f 0000 	mov.w	r0, #0
 8101c76:	f380 8814 	msr	CONTROL, r0
 8101c7a:	b662      	cpsie	i
 8101c7c:	b661      	cpsie	f
 8101c7e:	f3bf 8f4f 	dsb	sy
 8101c82:	f3bf 8f6f 	isb	sy
 8101c86:	df00      	svc	0
 8101c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8101c8a:	bf00      	nop
 8101c8c:	e000ed08 	.word	0xe000ed08

08101c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8101c90:	b580      	push	{r7, lr}
 8101c92:	b086      	sub	sp, #24
 8101c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8101c96:	4b47      	ldr	r3, [pc, #284]	@ (8101db4 <xPortStartScheduler+0x124>)
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	4a47      	ldr	r2, [pc, #284]	@ (8101db8 <xPortStartScheduler+0x128>)
 8101c9c:	4293      	cmp	r3, r2
 8101c9e:	d10b      	bne.n	8101cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8101ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101ca4:	f383 8811 	msr	BASEPRI, r3
 8101ca8:	f3bf 8f6f 	isb	sy
 8101cac:	f3bf 8f4f 	dsb	sy
 8101cb0:	613b      	str	r3, [r7, #16]
}
 8101cb2:	bf00      	nop
 8101cb4:	bf00      	nop
 8101cb6:	e7fd      	b.n	8101cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8101cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8101db4 <xPortStartScheduler+0x124>)
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8101dbc <xPortStartScheduler+0x12c>)
 8101cbe:	4293      	cmp	r3, r2
 8101cc0:	d10b      	bne.n	8101cda <xPortStartScheduler+0x4a>
	__asm volatile
 8101cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101cc6:	f383 8811 	msr	BASEPRI, r3
 8101cca:	f3bf 8f6f 	isb	sy
 8101cce:	f3bf 8f4f 	dsb	sy
 8101cd2:	60fb      	str	r3, [r7, #12]
}
 8101cd4:	bf00      	nop
 8101cd6:	bf00      	nop
 8101cd8:	e7fd      	b.n	8101cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8101cda:	4b39      	ldr	r3, [pc, #228]	@ (8101dc0 <xPortStartScheduler+0x130>)
 8101cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8101cde:	697b      	ldr	r3, [r7, #20]
 8101ce0:	781b      	ldrb	r3, [r3, #0]
 8101ce2:	b2db      	uxtb	r3, r3
 8101ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8101ce6:	697b      	ldr	r3, [r7, #20]
 8101ce8:	22ff      	movs	r2, #255	@ 0xff
 8101cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8101cec:	697b      	ldr	r3, [r7, #20]
 8101cee:	781b      	ldrb	r3, [r3, #0]
 8101cf0:	b2db      	uxtb	r3, r3
 8101cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8101cf4:	78fb      	ldrb	r3, [r7, #3]
 8101cf6:	b2db      	uxtb	r3, r3
 8101cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8101cfc:	b2da      	uxtb	r2, r3
 8101cfe:	4b31      	ldr	r3, [pc, #196]	@ (8101dc4 <xPortStartScheduler+0x134>)
 8101d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8101d02:	4b31      	ldr	r3, [pc, #196]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d04:	2207      	movs	r2, #7
 8101d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101d08:	e009      	b.n	8101d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8101d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d0c:	681b      	ldr	r3, [r3, #0]
 8101d0e:	3b01      	subs	r3, #1
 8101d10:	4a2d      	ldr	r2, [pc, #180]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8101d14:	78fb      	ldrb	r3, [r7, #3]
 8101d16:	b2db      	uxtb	r3, r3
 8101d18:	005b      	lsls	r3, r3, #1
 8101d1a:	b2db      	uxtb	r3, r3
 8101d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101d1e:	78fb      	ldrb	r3, [r7, #3]
 8101d20:	b2db      	uxtb	r3, r3
 8101d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101d26:	2b80      	cmp	r3, #128	@ 0x80
 8101d28:	d0ef      	beq.n	8101d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8101d2a:	4b27      	ldr	r3, [pc, #156]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	f1c3 0307 	rsb	r3, r3, #7
 8101d32:	2b04      	cmp	r3, #4
 8101d34:	d00b      	beq.n	8101d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8101d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101d3a:	f383 8811 	msr	BASEPRI, r3
 8101d3e:	f3bf 8f6f 	isb	sy
 8101d42:	f3bf 8f4f 	dsb	sy
 8101d46:	60bb      	str	r3, [r7, #8]
}
 8101d48:	bf00      	nop
 8101d4a:	bf00      	nop
 8101d4c:	e7fd      	b.n	8101d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8101d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	021b      	lsls	r3, r3, #8
 8101d54:	4a1c      	ldr	r2, [pc, #112]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8101d58:	4b1b      	ldr	r3, [pc, #108]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d5a:	681b      	ldr	r3, [r3, #0]
 8101d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8101d60:	4a19      	ldr	r2, [pc, #100]	@ (8101dc8 <xPortStartScheduler+0x138>)
 8101d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	b2da      	uxtb	r2, r3
 8101d68:	697b      	ldr	r3, [r7, #20]
 8101d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8101d6c:	4b17      	ldr	r3, [pc, #92]	@ (8101dcc <xPortStartScheduler+0x13c>)
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	4a16      	ldr	r2, [pc, #88]	@ (8101dcc <xPortStartScheduler+0x13c>)
 8101d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8101d78:	4b14      	ldr	r3, [pc, #80]	@ (8101dcc <xPortStartScheduler+0x13c>)
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	4a13      	ldr	r2, [pc, #76]	@ (8101dcc <xPortStartScheduler+0x13c>)
 8101d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8101d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8101d84:	f000 f8da 	bl	8101f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8101d88:	4b11      	ldr	r3, [pc, #68]	@ (8101dd0 <xPortStartScheduler+0x140>)
 8101d8a:	2200      	movs	r2, #0
 8101d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8101d8e:	f000 f8f9 	bl	8101f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8101d92:	4b10      	ldr	r3, [pc, #64]	@ (8101dd4 <xPortStartScheduler+0x144>)
 8101d94:	681b      	ldr	r3, [r3, #0]
 8101d96:	4a0f      	ldr	r2, [pc, #60]	@ (8101dd4 <xPortStartScheduler+0x144>)
 8101d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8101d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8101d9e:	f7ff ff63 	bl	8101c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8101da2:	f001 fa0f 	bl	81031c4 <vTaskSwitchContext>
	prvTaskExitError();
 8101da6:	f7ff ff1b 	bl	8101be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8101daa:	2300      	movs	r3, #0
}
 8101dac:	4618      	mov	r0, r3
 8101dae:	3718      	adds	r7, #24
 8101db0:	46bd      	mov	sp, r7
 8101db2:	bd80      	pop	{r7, pc}
 8101db4:	e000ed00 	.word	0xe000ed00
 8101db8:	410fc271 	.word	0x410fc271
 8101dbc:	410fc270 	.word	0x410fc270
 8101dc0:	e000e400 	.word	0xe000e400
 8101dc4:	10004448 	.word	0x10004448
 8101dc8:	1000444c 	.word	0x1000444c
 8101dcc:	e000ed20 	.word	0xe000ed20
 8101dd0:	10000010 	.word	0x10000010
 8101dd4:	e000ef34 	.word	0xe000ef34

08101dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8101dd8:	b480      	push	{r7}
 8101dda:	b083      	sub	sp, #12
 8101ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8101dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101de2:	f383 8811 	msr	BASEPRI, r3
 8101de6:	f3bf 8f6f 	isb	sy
 8101dea:	f3bf 8f4f 	dsb	sy
 8101dee:	607b      	str	r3, [r7, #4]
}
 8101df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8101df2:	4b10      	ldr	r3, [pc, #64]	@ (8101e34 <vPortEnterCritical+0x5c>)
 8101df4:	681b      	ldr	r3, [r3, #0]
 8101df6:	3301      	adds	r3, #1
 8101df8:	4a0e      	ldr	r2, [pc, #56]	@ (8101e34 <vPortEnterCritical+0x5c>)
 8101dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8101dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8101e34 <vPortEnterCritical+0x5c>)
 8101dfe:	681b      	ldr	r3, [r3, #0]
 8101e00:	2b01      	cmp	r3, #1
 8101e02:	d110      	bne.n	8101e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8101e04:	4b0c      	ldr	r3, [pc, #48]	@ (8101e38 <vPortEnterCritical+0x60>)
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	b2db      	uxtb	r3, r3
 8101e0a:	2b00      	cmp	r3, #0
 8101e0c:	d00b      	beq.n	8101e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8101e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101e12:	f383 8811 	msr	BASEPRI, r3
 8101e16:	f3bf 8f6f 	isb	sy
 8101e1a:	f3bf 8f4f 	dsb	sy
 8101e1e:	603b      	str	r3, [r7, #0]
}
 8101e20:	bf00      	nop
 8101e22:	bf00      	nop
 8101e24:	e7fd      	b.n	8101e22 <vPortEnterCritical+0x4a>
	}
}
 8101e26:	bf00      	nop
 8101e28:	370c      	adds	r7, #12
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e30:	4770      	bx	lr
 8101e32:	bf00      	nop
 8101e34:	10000010 	.word	0x10000010
 8101e38:	e000ed04 	.word	0xe000ed04

08101e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8101e3c:	b480      	push	{r7}
 8101e3e:	b083      	sub	sp, #12
 8101e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8101e42:	4b12      	ldr	r3, [pc, #72]	@ (8101e8c <vPortExitCritical+0x50>)
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d10b      	bne.n	8101e62 <vPortExitCritical+0x26>
	__asm volatile
 8101e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101e4e:	f383 8811 	msr	BASEPRI, r3
 8101e52:	f3bf 8f6f 	isb	sy
 8101e56:	f3bf 8f4f 	dsb	sy
 8101e5a:	607b      	str	r3, [r7, #4]
}
 8101e5c:	bf00      	nop
 8101e5e:	bf00      	nop
 8101e60:	e7fd      	b.n	8101e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8101e62:	4b0a      	ldr	r3, [pc, #40]	@ (8101e8c <vPortExitCritical+0x50>)
 8101e64:	681b      	ldr	r3, [r3, #0]
 8101e66:	3b01      	subs	r3, #1
 8101e68:	4a08      	ldr	r2, [pc, #32]	@ (8101e8c <vPortExitCritical+0x50>)
 8101e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8101e6c:	4b07      	ldr	r3, [pc, #28]	@ (8101e8c <vPortExitCritical+0x50>)
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	2b00      	cmp	r3, #0
 8101e72:	d105      	bne.n	8101e80 <vPortExitCritical+0x44>
 8101e74:	2300      	movs	r3, #0
 8101e76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8101e78:	683b      	ldr	r3, [r7, #0]
 8101e7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8101e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8101e80:	bf00      	nop
 8101e82:	370c      	adds	r7, #12
 8101e84:	46bd      	mov	sp, r7
 8101e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e8a:	4770      	bx	lr
 8101e8c:	10000010 	.word	0x10000010

08101e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8101e90:	f3ef 8009 	mrs	r0, PSP
 8101e94:	f3bf 8f6f 	isb	sy
 8101e98:	4b15      	ldr	r3, [pc, #84]	@ (8101ef0 <pxCurrentTCBConst>)
 8101e9a:	681a      	ldr	r2, [r3, #0]
 8101e9c:	f01e 0f10 	tst.w	lr, #16
 8101ea0:	bf08      	it	eq
 8101ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8101ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101eaa:	6010      	str	r0, [r2, #0]
 8101eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8101eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8101eb4:	f380 8811 	msr	BASEPRI, r0
 8101eb8:	f3bf 8f4f 	dsb	sy
 8101ebc:	f3bf 8f6f 	isb	sy
 8101ec0:	f001 f980 	bl	81031c4 <vTaskSwitchContext>
 8101ec4:	f04f 0000 	mov.w	r0, #0
 8101ec8:	f380 8811 	msr	BASEPRI, r0
 8101ecc:	bc09      	pop	{r0, r3}
 8101ece:	6819      	ldr	r1, [r3, #0]
 8101ed0:	6808      	ldr	r0, [r1, #0]
 8101ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101ed6:	f01e 0f10 	tst.w	lr, #16
 8101eda:	bf08      	it	eq
 8101edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8101ee0:	f380 8809 	msr	PSP, r0
 8101ee4:	f3bf 8f6f 	isb	sy
 8101ee8:	4770      	bx	lr
 8101eea:	bf00      	nop
 8101eec:	f3af 8000 	nop.w

08101ef0 <pxCurrentTCBConst>:
 8101ef0:	10004490 	.word	0x10004490
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8101ef4:	bf00      	nop
 8101ef6:	bf00      	nop

08101ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8101ef8:	b580      	push	{r7, lr}
 8101efa:	b082      	sub	sp, #8
 8101efc:	af00      	add	r7, sp, #0
	__asm volatile
 8101efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101f02:	f383 8811 	msr	BASEPRI, r3
 8101f06:	f3bf 8f6f 	isb	sy
 8101f0a:	f3bf 8f4f 	dsb	sy
 8101f0e:	607b      	str	r3, [r7, #4]
}
 8101f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8101f12:	f001 f89d 	bl	8103050 <xTaskIncrementTick>
 8101f16:	4603      	mov	r3, r0
 8101f18:	2b00      	cmp	r3, #0
 8101f1a:	d003      	beq.n	8101f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8101f1c:	4b06      	ldr	r3, [pc, #24]	@ (8101f38 <xPortSysTickHandler+0x40>)
 8101f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101f22:	601a      	str	r2, [r3, #0]
 8101f24:	2300      	movs	r3, #0
 8101f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8101f28:	683b      	ldr	r3, [r7, #0]
 8101f2a:	f383 8811 	msr	BASEPRI, r3
}
 8101f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8101f30:	bf00      	nop
 8101f32:	3708      	adds	r7, #8
 8101f34:	46bd      	mov	sp, r7
 8101f36:	bd80      	pop	{r7, pc}
 8101f38:	e000ed04 	.word	0xe000ed04

08101f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8101f3c:	b480      	push	{r7}
 8101f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8101f40:	4b0b      	ldr	r3, [pc, #44]	@ (8101f70 <vPortSetupTimerInterrupt+0x34>)
 8101f42:	2200      	movs	r2, #0
 8101f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8101f46:	4b0b      	ldr	r3, [pc, #44]	@ (8101f74 <vPortSetupTimerInterrupt+0x38>)
 8101f48:	2200      	movs	r2, #0
 8101f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8101f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8101f78 <vPortSetupTimerInterrupt+0x3c>)
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	4a0a      	ldr	r2, [pc, #40]	@ (8101f7c <vPortSetupTimerInterrupt+0x40>)
 8101f52:	fba2 2303 	umull	r2, r3, r2, r3
 8101f56:	099b      	lsrs	r3, r3, #6
 8101f58:	4a09      	ldr	r2, [pc, #36]	@ (8101f80 <vPortSetupTimerInterrupt+0x44>)
 8101f5a:	3b01      	subs	r3, #1
 8101f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8101f5e:	4b04      	ldr	r3, [pc, #16]	@ (8101f70 <vPortSetupTimerInterrupt+0x34>)
 8101f60:	2207      	movs	r2, #7
 8101f62:	601a      	str	r2, [r3, #0]
}
 8101f64:	bf00      	nop
 8101f66:	46bd      	mov	sp, r7
 8101f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f6c:	4770      	bx	lr
 8101f6e:	bf00      	nop
 8101f70:	e000e010 	.word	0xe000e010
 8101f74:	e000e018 	.word	0xe000e018
 8101f78:	10000004 	.word	0x10000004
 8101f7c:	10624dd3 	.word	0x10624dd3
 8101f80:	e000e014 	.word	0xe000e014

08101f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8101f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8101f94 <vPortEnableVFP+0x10>
 8101f88:	6801      	ldr	r1, [r0, #0]
 8101f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8101f8e:	6001      	str	r1, [r0, #0]
 8101f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8101f92:	bf00      	nop
 8101f94:	e000ed88 	.word	0xe000ed88

08101f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8101f98:	b480      	push	{r7}
 8101f9a:	b085      	sub	sp, #20
 8101f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8101f9e:	f3ef 8305 	mrs	r3, IPSR
 8101fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8101fa4:	68fb      	ldr	r3, [r7, #12]
 8101fa6:	2b0f      	cmp	r3, #15
 8101fa8:	d915      	bls.n	8101fd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8101faa:	4a18      	ldr	r2, [pc, #96]	@ (810200c <vPortValidateInterruptPriority+0x74>)
 8101fac:	68fb      	ldr	r3, [r7, #12]
 8101fae:	4413      	add	r3, r2
 8101fb0:	781b      	ldrb	r3, [r3, #0]
 8101fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8101fb4:	4b16      	ldr	r3, [pc, #88]	@ (8102010 <vPortValidateInterruptPriority+0x78>)
 8101fb6:	781b      	ldrb	r3, [r3, #0]
 8101fb8:	7afa      	ldrb	r2, [r7, #11]
 8101fba:	429a      	cmp	r2, r3
 8101fbc:	d20b      	bcs.n	8101fd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8101fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101fc2:	f383 8811 	msr	BASEPRI, r3
 8101fc6:	f3bf 8f6f 	isb	sy
 8101fca:	f3bf 8f4f 	dsb	sy
 8101fce:	607b      	str	r3, [r7, #4]
}
 8101fd0:	bf00      	nop
 8101fd2:	bf00      	nop
 8101fd4:	e7fd      	b.n	8101fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8101fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8102014 <vPortValidateInterruptPriority+0x7c>)
 8101fd8:	681b      	ldr	r3, [r3, #0]
 8101fda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8101fde:	4b0e      	ldr	r3, [pc, #56]	@ (8102018 <vPortValidateInterruptPriority+0x80>)
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	429a      	cmp	r2, r3
 8101fe4:	d90b      	bls.n	8101ffe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8101fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101fea:	f383 8811 	msr	BASEPRI, r3
 8101fee:	f3bf 8f6f 	isb	sy
 8101ff2:	f3bf 8f4f 	dsb	sy
 8101ff6:	603b      	str	r3, [r7, #0]
}
 8101ff8:	bf00      	nop
 8101ffa:	bf00      	nop
 8101ffc:	e7fd      	b.n	8101ffa <vPortValidateInterruptPriority+0x62>
	}
 8101ffe:	bf00      	nop
 8102000:	3714      	adds	r7, #20
 8102002:	46bd      	mov	sp, r7
 8102004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102008:	4770      	bx	lr
 810200a:	bf00      	nop
 810200c:	e000e3f0 	.word	0xe000e3f0
 8102010:	10004448 	.word	0x10004448
 8102014:	e000ed0c 	.word	0xe000ed0c
 8102018:	1000444c 	.word	0x1000444c

0810201c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810201c:	b580      	push	{r7, lr}
 810201e:	b084      	sub	sp, #16
 8102020:	af00      	add	r7, sp, #0
 8102022:	6078      	str	r0, [r7, #4]
 8102024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810202a:	68fb      	ldr	r3, [r7, #12]
 810202c:	2b00      	cmp	r3, #0
 810202e:	d10b      	bne.n	8102048 <xQueueGenericReset+0x2c>
	__asm volatile
 8102030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102034:	f383 8811 	msr	BASEPRI, r3
 8102038:	f3bf 8f6f 	isb	sy
 810203c:	f3bf 8f4f 	dsb	sy
 8102040:	60bb      	str	r3, [r7, #8]
}
 8102042:	bf00      	nop
 8102044:	bf00      	nop
 8102046:	e7fd      	b.n	8102044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8102048:	f7ff fec6 	bl	8101dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810204c:	68fb      	ldr	r3, [r7, #12]
 810204e:	681a      	ldr	r2, [r3, #0]
 8102050:	68fb      	ldr	r3, [r7, #12]
 8102052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102054:	68f9      	ldr	r1, [r7, #12]
 8102056:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8102058:	fb01 f303 	mul.w	r3, r1, r3
 810205c:	441a      	add	r2, r3
 810205e:	68fb      	ldr	r3, [r7, #12]
 8102060:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8102062:	68fb      	ldr	r3, [r7, #12]
 8102064:	2200      	movs	r2, #0
 8102066:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8102068:	68fb      	ldr	r3, [r7, #12]
 810206a:	681a      	ldr	r2, [r3, #0]
 810206c:	68fb      	ldr	r3, [r7, #12]
 810206e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8102070:	68fb      	ldr	r3, [r7, #12]
 8102072:	681a      	ldr	r2, [r3, #0]
 8102074:	68fb      	ldr	r3, [r7, #12]
 8102076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102078:	3b01      	subs	r3, #1
 810207a:	68f9      	ldr	r1, [r7, #12]
 810207c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810207e:	fb01 f303 	mul.w	r3, r1, r3
 8102082:	441a      	add	r2, r3
 8102084:	68fb      	ldr	r3, [r7, #12]
 8102086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8102088:	68fb      	ldr	r3, [r7, #12]
 810208a:	22ff      	movs	r2, #255	@ 0xff
 810208c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8102090:	68fb      	ldr	r3, [r7, #12]
 8102092:	22ff      	movs	r2, #255	@ 0xff
 8102094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8102098:	683b      	ldr	r3, [r7, #0]
 810209a:	2b00      	cmp	r3, #0
 810209c:	d114      	bne.n	81020c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810209e:	68fb      	ldr	r3, [r7, #12]
 81020a0:	691b      	ldr	r3, [r3, #16]
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d01a      	beq.n	81020dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81020a6:	68fb      	ldr	r3, [r7, #12]
 81020a8:	3310      	adds	r3, #16
 81020aa:	4618      	mov	r0, r3
 81020ac:	f001 f942 	bl	8103334 <xTaskRemoveFromEventList>
 81020b0:	4603      	mov	r3, r0
 81020b2:	2b00      	cmp	r3, #0
 81020b4:	d012      	beq.n	81020dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81020b6:	4b0d      	ldr	r3, [pc, #52]	@ (81020ec <xQueueGenericReset+0xd0>)
 81020b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81020bc:	601a      	str	r2, [r3, #0]
 81020be:	f3bf 8f4f 	dsb	sy
 81020c2:	f3bf 8f6f 	isb	sy
 81020c6:	e009      	b.n	81020dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81020c8:	68fb      	ldr	r3, [r7, #12]
 81020ca:	3310      	adds	r3, #16
 81020cc:	4618      	mov	r0, r3
 81020ce:	f7ff fc9f 	bl	8101a10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 81020d2:	68fb      	ldr	r3, [r7, #12]
 81020d4:	3324      	adds	r3, #36	@ 0x24
 81020d6:	4618      	mov	r0, r3
 81020d8:	f7ff fc9a 	bl	8101a10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 81020dc:	f7ff feae 	bl	8101e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 81020e0:	2301      	movs	r3, #1
}
 81020e2:	4618      	mov	r0, r3
 81020e4:	3710      	adds	r7, #16
 81020e6:	46bd      	mov	sp, r7
 81020e8:	bd80      	pop	{r7, pc}
 81020ea:	bf00      	nop
 81020ec:	e000ed04 	.word	0xe000ed04

081020f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 81020f0:	b580      	push	{r7, lr}
 81020f2:	b08e      	sub	sp, #56	@ 0x38
 81020f4:	af02      	add	r7, sp, #8
 81020f6:	60f8      	str	r0, [r7, #12]
 81020f8:	60b9      	str	r1, [r7, #8]
 81020fa:	607a      	str	r2, [r7, #4]
 81020fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	2b00      	cmp	r3, #0
 8102102:	d10b      	bne.n	810211c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8102104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102108:	f383 8811 	msr	BASEPRI, r3
 810210c:	f3bf 8f6f 	isb	sy
 8102110:	f3bf 8f4f 	dsb	sy
 8102114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8102116:	bf00      	nop
 8102118:	bf00      	nop
 810211a:	e7fd      	b.n	8102118 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810211c:	683b      	ldr	r3, [r7, #0]
 810211e:	2b00      	cmp	r3, #0
 8102120:	d10b      	bne.n	810213a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8102122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102126:	f383 8811 	msr	BASEPRI, r3
 810212a:	f3bf 8f6f 	isb	sy
 810212e:	f3bf 8f4f 	dsb	sy
 8102132:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8102134:	bf00      	nop
 8102136:	bf00      	nop
 8102138:	e7fd      	b.n	8102136 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	2b00      	cmp	r3, #0
 810213e:	d002      	beq.n	8102146 <xQueueGenericCreateStatic+0x56>
 8102140:	68bb      	ldr	r3, [r7, #8]
 8102142:	2b00      	cmp	r3, #0
 8102144:	d001      	beq.n	810214a <xQueueGenericCreateStatic+0x5a>
 8102146:	2301      	movs	r3, #1
 8102148:	e000      	b.n	810214c <xQueueGenericCreateStatic+0x5c>
 810214a:	2300      	movs	r3, #0
 810214c:	2b00      	cmp	r3, #0
 810214e:	d10b      	bne.n	8102168 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8102150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102154:	f383 8811 	msr	BASEPRI, r3
 8102158:	f3bf 8f6f 	isb	sy
 810215c:	f3bf 8f4f 	dsb	sy
 8102160:	623b      	str	r3, [r7, #32]
}
 8102162:	bf00      	nop
 8102164:	bf00      	nop
 8102166:	e7fd      	b.n	8102164 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	2b00      	cmp	r3, #0
 810216c:	d102      	bne.n	8102174 <xQueueGenericCreateStatic+0x84>
 810216e:	68bb      	ldr	r3, [r7, #8]
 8102170:	2b00      	cmp	r3, #0
 8102172:	d101      	bne.n	8102178 <xQueueGenericCreateStatic+0x88>
 8102174:	2301      	movs	r3, #1
 8102176:	e000      	b.n	810217a <xQueueGenericCreateStatic+0x8a>
 8102178:	2300      	movs	r3, #0
 810217a:	2b00      	cmp	r3, #0
 810217c:	d10b      	bne.n	8102196 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810217e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102182:	f383 8811 	msr	BASEPRI, r3
 8102186:	f3bf 8f6f 	isb	sy
 810218a:	f3bf 8f4f 	dsb	sy
 810218e:	61fb      	str	r3, [r7, #28]
}
 8102190:	bf00      	nop
 8102192:	bf00      	nop
 8102194:	e7fd      	b.n	8102192 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8102196:	2350      	movs	r3, #80	@ 0x50
 8102198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810219a:	697b      	ldr	r3, [r7, #20]
 810219c:	2b50      	cmp	r3, #80	@ 0x50
 810219e:	d00b      	beq.n	81021b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81021a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81021a4:	f383 8811 	msr	BASEPRI, r3
 81021a8:	f3bf 8f6f 	isb	sy
 81021ac:	f3bf 8f4f 	dsb	sy
 81021b0:	61bb      	str	r3, [r7, #24]
}
 81021b2:	bf00      	nop
 81021b4:	bf00      	nop
 81021b6:	e7fd      	b.n	81021b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81021b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81021ba:	683b      	ldr	r3, [r7, #0]
 81021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81021be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81021c0:	2b00      	cmp	r3, #0
 81021c2:	d00d      	beq.n	81021e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81021c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81021c6:	2201      	movs	r2, #1
 81021c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81021cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 81021d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81021d2:	9300      	str	r3, [sp, #0]
 81021d4:	4613      	mov	r3, r2
 81021d6:	687a      	ldr	r2, [r7, #4]
 81021d8:	68b9      	ldr	r1, [r7, #8]
 81021da:	68f8      	ldr	r0, [r7, #12]
 81021dc:	f000 f805 	bl	81021ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81021e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 81021e2:	4618      	mov	r0, r3
 81021e4:	3730      	adds	r7, #48	@ 0x30
 81021e6:	46bd      	mov	sp, r7
 81021e8:	bd80      	pop	{r7, pc}

081021ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81021ea:	b580      	push	{r7, lr}
 81021ec:	b084      	sub	sp, #16
 81021ee:	af00      	add	r7, sp, #0
 81021f0:	60f8      	str	r0, [r7, #12]
 81021f2:	60b9      	str	r1, [r7, #8]
 81021f4:	607a      	str	r2, [r7, #4]
 81021f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 81021f8:	68bb      	ldr	r3, [r7, #8]
 81021fa:	2b00      	cmp	r3, #0
 81021fc:	d103      	bne.n	8102206 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81021fe:	69bb      	ldr	r3, [r7, #24]
 8102200:	69ba      	ldr	r2, [r7, #24]
 8102202:	601a      	str	r2, [r3, #0]
 8102204:	e002      	b.n	810220c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8102206:	69bb      	ldr	r3, [r7, #24]
 8102208:	687a      	ldr	r2, [r7, #4]
 810220a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810220c:	69bb      	ldr	r3, [r7, #24]
 810220e:	68fa      	ldr	r2, [r7, #12]
 8102210:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8102212:	69bb      	ldr	r3, [r7, #24]
 8102214:	68ba      	ldr	r2, [r7, #8]
 8102216:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8102218:	2101      	movs	r1, #1
 810221a:	69b8      	ldr	r0, [r7, #24]
 810221c:	f7ff fefe 	bl	810201c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8102220:	69bb      	ldr	r3, [r7, #24]
 8102222:	78fa      	ldrb	r2, [r7, #3]
 8102224:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8102228:	bf00      	nop
 810222a:	3710      	adds	r7, #16
 810222c:	46bd      	mov	sp, r7
 810222e:	bd80      	pop	{r7, pc}

08102230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8102230:	b580      	push	{r7, lr}
 8102232:	b08e      	sub	sp, #56	@ 0x38
 8102234:	af00      	add	r7, sp, #0
 8102236:	60f8      	str	r0, [r7, #12]
 8102238:	60b9      	str	r1, [r7, #8]
 810223a:	607a      	str	r2, [r7, #4]
 810223c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810223e:	2300      	movs	r3, #0
 8102240:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102242:	68fb      	ldr	r3, [r7, #12]
 8102244:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8102246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102248:	2b00      	cmp	r3, #0
 810224a:	d10b      	bne.n	8102264 <xQueueGenericSend+0x34>
	__asm volatile
 810224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102250:	f383 8811 	msr	BASEPRI, r3
 8102254:	f3bf 8f6f 	isb	sy
 8102258:	f3bf 8f4f 	dsb	sy
 810225c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810225e:	bf00      	nop
 8102260:	bf00      	nop
 8102262:	e7fd      	b.n	8102260 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102264:	68bb      	ldr	r3, [r7, #8]
 8102266:	2b00      	cmp	r3, #0
 8102268:	d103      	bne.n	8102272 <xQueueGenericSend+0x42>
 810226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810226e:	2b00      	cmp	r3, #0
 8102270:	d101      	bne.n	8102276 <xQueueGenericSend+0x46>
 8102272:	2301      	movs	r3, #1
 8102274:	e000      	b.n	8102278 <xQueueGenericSend+0x48>
 8102276:	2300      	movs	r3, #0
 8102278:	2b00      	cmp	r3, #0
 810227a:	d10b      	bne.n	8102294 <xQueueGenericSend+0x64>
	__asm volatile
 810227c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102280:	f383 8811 	msr	BASEPRI, r3
 8102284:	f3bf 8f6f 	isb	sy
 8102288:	f3bf 8f4f 	dsb	sy
 810228c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810228e:	bf00      	nop
 8102290:	bf00      	nop
 8102292:	e7fd      	b.n	8102290 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102294:	683b      	ldr	r3, [r7, #0]
 8102296:	2b02      	cmp	r3, #2
 8102298:	d103      	bne.n	81022a2 <xQueueGenericSend+0x72>
 810229a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810229c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810229e:	2b01      	cmp	r3, #1
 81022a0:	d101      	bne.n	81022a6 <xQueueGenericSend+0x76>
 81022a2:	2301      	movs	r3, #1
 81022a4:	e000      	b.n	81022a8 <xQueueGenericSend+0x78>
 81022a6:	2300      	movs	r3, #0
 81022a8:	2b00      	cmp	r3, #0
 81022aa:	d10b      	bne.n	81022c4 <xQueueGenericSend+0x94>
	__asm volatile
 81022ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81022b0:	f383 8811 	msr	BASEPRI, r3
 81022b4:	f3bf 8f6f 	isb	sy
 81022b8:	f3bf 8f4f 	dsb	sy
 81022bc:	623b      	str	r3, [r7, #32]
}
 81022be:	bf00      	nop
 81022c0:	bf00      	nop
 81022c2:	e7fd      	b.n	81022c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81022c4:	f001 f9fc 	bl	81036c0 <xTaskGetSchedulerState>
 81022c8:	4603      	mov	r3, r0
 81022ca:	2b00      	cmp	r3, #0
 81022cc:	d102      	bne.n	81022d4 <xQueueGenericSend+0xa4>
 81022ce:	687b      	ldr	r3, [r7, #4]
 81022d0:	2b00      	cmp	r3, #0
 81022d2:	d101      	bne.n	81022d8 <xQueueGenericSend+0xa8>
 81022d4:	2301      	movs	r3, #1
 81022d6:	e000      	b.n	81022da <xQueueGenericSend+0xaa>
 81022d8:	2300      	movs	r3, #0
 81022da:	2b00      	cmp	r3, #0
 81022dc:	d10b      	bne.n	81022f6 <xQueueGenericSend+0xc6>
	__asm volatile
 81022de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81022e2:	f383 8811 	msr	BASEPRI, r3
 81022e6:	f3bf 8f6f 	isb	sy
 81022ea:	f3bf 8f4f 	dsb	sy
 81022ee:	61fb      	str	r3, [r7, #28]
}
 81022f0:	bf00      	nop
 81022f2:	bf00      	nop
 81022f4:	e7fd      	b.n	81022f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81022f6:	f7ff fd6f 	bl	8101dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81022fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81022fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81022fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102302:	429a      	cmp	r2, r3
 8102304:	d302      	bcc.n	810230c <xQueueGenericSend+0xdc>
 8102306:	683b      	ldr	r3, [r7, #0]
 8102308:	2b02      	cmp	r3, #2
 810230a:	d129      	bne.n	8102360 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810230c:	683a      	ldr	r2, [r7, #0]
 810230e:	68b9      	ldr	r1, [r7, #8]
 8102310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102312:	f000 fa0f 	bl	8102734 <prvCopyDataToQueue>
 8102316:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810231c:	2b00      	cmp	r3, #0
 810231e:	d010      	beq.n	8102342 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102322:	3324      	adds	r3, #36	@ 0x24
 8102324:	4618      	mov	r0, r3
 8102326:	f001 f805 	bl	8103334 <xTaskRemoveFromEventList>
 810232a:	4603      	mov	r3, r0
 810232c:	2b00      	cmp	r3, #0
 810232e:	d013      	beq.n	8102358 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8102330:	4b3f      	ldr	r3, [pc, #252]	@ (8102430 <xQueueGenericSend+0x200>)
 8102332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102336:	601a      	str	r2, [r3, #0]
 8102338:	f3bf 8f4f 	dsb	sy
 810233c:	f3bf 8f6f 	isb	sy
 8102340:	e00a      	b.n	8102358 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8102342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102344:	2b00      	cmp	r3, #0
 8102346:	d007      	beq.n	8102358 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8102348:	4b39      	ldr	r3, [pc, #228]	@ (8102430 <xQueueGenericSend+0x200>)
 810234a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810234e:	601a      	str	r2, [r3, #0]
 8102350:	f3bf 8f4f 	dsb	sy
 8102354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8102358:	f7ff fd70 	bl	8101e3c <vPortExitCritical>
				return pdPASS;
 810235c:	2301      	movs	r3, #1
 810235e:	e063      	b.n	8102428 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	2b00      	cmp	r3, #0
 8102364:	d103      	bne.n	810236e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102366:	f7ff fd69 	bl	8101e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810236a:	2300      	movs	r3, #0
 810236c:	e05c      	b.n	8102428 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810236e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102370:	2b00      	cmp	r3, #0
 8102372:	d106      	bne.n	8102382 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102374:	f107 0314 	add.w	r3, r7, #20
 8102378:	4618      	mov	r0, r3
 810237a:	f001 f83f 	bl	81033fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810237e:	2301      	movs	r3, #1
 8102380:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102382:	f7ff fd5b 	bl	8101e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102386:	f000 fda7 	bl	8102ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810238a:	f7ff fd25 	bl	8101dd8 <vPortEnterCritical>
 810238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102394:	b25b      	sxtb	r3, r3
 8102396:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810239a:	d103      	bne.n	81023a4 <xQueueGenericSend+0x174>
 810239c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810239e:	2200      	movs	r2, #0
 81023a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81023a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81023a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81023aa:	b25b      	sxtb	r3, r3
 81023ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81023b0:	d103      	bne.n	81023ba <xQueueGenericSend+0x18a>
 81023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81023b4:	2200      	movs	r2, #0
 81023b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81023ba:	f7ff fd3f 	bl	8101e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81023be:	1d3a      	adds	r2, r7, #4
 81023c0:	f107 0314 	add.w	r3, r7, #20
 81023c4:	4611      	mov	r1, r2
 81023c6:	4618      	mov	r0, r3
 81023c8:	f001 f82e 	bl	8103428 <xTaskCheckForTimeOut>
 81023cc:	4603      	mov	r3, r0
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d124      	bne.n	810241c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81023d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81023d4:	f000 faa6 	bl	8102924 <prvIsQueueFull>
 81023d8:	4603      	mov	r3, r0
 81023da:	2b00      	cmp	r3, #0
 81023dc:	d018      	beq.n	8102410 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81023e0:	3310      	adds	r3, #16
 81023e2:	687a      	ldr	r2, [r7, #4]
 81023e4:	4611      	mov	r1, r2
 81023e6:	4618      	mov	r0, r3
 81023e8:	f000 ff52 	bl	8103290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81023ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81023ee:	f000 fa31 	bl	8102854 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81023f2:	f000 fd7f 	bl	8102ef4 <xTaskResumeAll>
 81023f6:	4603      	mov	r3, r0
 81023f8:	2b00      	cmp	r3, #0
 81023fa:	f47f af7c 	bne.w	81022f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 81023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8102430 <xQueueGenericSend+0x200>)
 8102400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102404:	601a      	str	r2, [r3, #0]
 8102406:	f3bf 8f4f 	dsb	sy
 810240a:	f3bf 8f6f 	isb	sy
 810240e:	e772      	b.n	81022f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8102410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102412:	f000 fa1f 	bl	8102854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102416:	f000 fd6d 	bl	8102ef4 <xTaskResumeAll>
 810241a:	e76c      	b.n	81022f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810241c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810241e:	f000 fa19 	bl	8102854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102422:	f000 fd67 	bl	8102ef4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8102426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8102428:	4618      	mov	r0, r3
 810242a:	3738      	adds	r7, #56	@ 0x38
 810242c:	46bd      	mov	sp, r7
 810242e:	bd80      	pop	{r7, pc}
 8102430:	e000ed04 	.word	0xe000ed04

08102434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8102434:	b580      	push	{r7, lr}
 8102436:	b090      	sub	sp, #64	@ 0x40
 8102438:	af00      	add	r7, sp, #0
 810243a:	60f8      	str	r0, [r7, #12]
 810243c:	60b9      	str	r1, [r7, #8]
 810243e:	607a      	str	r2, [r7, #4]
 8102440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8102442:	68fb      	ldr	r3, [r7, #12]
 8102444:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8102446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102448:	2b00      	cmp	r3, #0
 810244a:	d10b      	bne.n	8102464 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810244c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102450:	f383 8811 	msr	BASEPRI, r3
 8102454:	f3bf 8f6f 	isb	sy
 8102458:	f3bf 8f4f 	dsb	sy
 810245c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810245e:	bf00      	nop
 8102460:	bf00      	nop
 8102462:	e7fd      	b.n	8102460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102464:	68bb      	ldr	r3, [r7, #8]
 8102466:	2b00      	cmp	r3, #0
 8102468:	d103      	bne.n	8102472 <xQueueGenericSendFromISR+0x3e>
 810246a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810246e:	2b00      	cmp	r3, #0
 8102470:	d101      	bne.n	8102476 <xQueueGenericSendFromISR+0x42>
 8102472:	2301      	movs	r3, #1
 8102474:	e000      	b.n	8102478 <xQueueGenericSendFromISR+0x44>
 8102476:	2300      	movs	r3, #0
 8102478:	2b00      	cmp	r3, #0
 810247a:	d10b      	bne.n	8102494 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810247c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102480:	f383 8811 	msr	BASEPRI, r3
 8102484:	f3bf 8f6f 	isb	sy
 8102488:	f3bf 8f4f 	dsb	sy
 810248c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810248e:	bf00      	nop
 8102490:	bf00      	nop
 8102492:	e7fd      	b.n	8102490 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102494:	683b      	ldr	r3, [r7, #0]
 8102496:	2b02      	cmp	r3, #2
 8102498:	d103      	bne.n	81024a2 <xQueueGenericSendFromISR+0x6e>
 810249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810249c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810249e:	2b01      	cmp	r3, #1
 81024a0:	d101      	bne.n	81024a6 <xQueueGenericSendFromISR+0x72>
 81024a2:	2301      	movs	r3, #1
 81024a4:	e000      	b.n	81024a8 <xQueueGenericSendFromISR+0x74>
 81024a6:	2300      	movs	r3, #0
 81024a8:	2b00      	cmp	r3, #0
 81024aa:	d10b      	bne.n	81024c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 81024ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81024b0:	f383 8811 	msr	BASEPRI, r3
 81024b4:	f3bf 8f6f 	isb	sy
 81024b8:	f3bf 8f4f 	dsb	sy
 81024bc:	623b      	str	r3, [r7, #32]
}
 81024be:	bf00      	nop
 81024c0:	bf00      	nop
 81024c2:	e7fd      	b.n	81024c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81024c4:	f7ff fd68 	bl	8101f98 <vPortValidateInterruptPriority>
	__asm volatile
 81024c8:	f3ef 8211 	mrs	r2, BASEPRI
 81024cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81024d0:	f383 8811 	msr	BASEPRI, r3
 81024d4:	f3bf 8f6f 	isb	sy
 81024d8:	f3bf 8f4f 	dsb	sy
 81024dc:	61fa      	str	r2, [r7, #28]
 81024de:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81024e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81024e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81024e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81024e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81024ec:	429a      	cmp	r2, r3
 81024ee:	d302      	bcc.n	81024f6 <xQueueGenericSendFromISR+0xc2>
 81024f0:	683b      	ldr	r3, [r7, #0]
 81024f2:	2b02      	cmp	r3, #2
 81024f4:	d12f      	bne.n	8102556 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81024f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81024f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81024fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102504:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102506:	683a      	ldr	r2, [r7, #0]
 8102508:	68b9      	ldr	r1, [r7, #8]
 810250a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810250c:	f000 f912 	bl	8102734 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102510:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8102514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102518:	d112      	bne.n	8102540 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810251a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810251e:	2b00      	cmp	r3, #0
 8102520:	d016      	beq.n	8102550 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102524:	3324      	adds	r3, #36	@ 0x24
 8102526:	4618      	mov	r0, r3
 8102528:	f000 ff04 	bl	8103334 <xTaskRemoveFromEventList>
 810252c:	4603      	mov	r3, r0
 810252e:	2b00      	cmp	r3, #0
 8102530:	d00e      	beq.n	8102550 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	2b00      	cmp	r3, #0
 8102536:	d00b      	beq.n	8102550 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	2201      	movs	r2, #1
 810253c:	601a      	str	r2, [r3, #0]
 810253e:	e007      	b.n	8102550 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102540:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8102544:	3301      	adds	r3, #1
 8102546:	b2db      	uxtb	r3, r3
 8102548:	b25a      	sxtb	r2, r3
 810254a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810254c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8102550:	2301      	movs	r3, #1
 8102552:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8102554:	e001      	b.n	810255a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102556:	2300      	movs	r3, #0
 8102558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810255a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810255c:	617b      	str	r3, [r7, #20]
	__asm volatile
 810255e:	697b      	ldr	r3, [r7, #20]
 8102560:	f383 8811 	msr	BASEPRI, r3
}
 8102564:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8102568:	4618      	mov	r0, r3
 810256a:	3740      	adds	r7, #64	@ 0x40
 810256c:	46bd      	mov	sp, r7
 810256e:	bd80      	pop	{r7, pc}

08102570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8102570:	b580      	push	{r7, lr}
 8102572:	b08c      	sub	sp, #48	@ 0x30
 8102574:	af00      	add	r7, sp, #0
 8102576:	60f8      	str	r0, [r7, #12]
 8102578:	60b9      	str	r1, [r7, #8]
 810257a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810257c:	2300      	movs	r3, #0
 810257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102580:	68fb      	ldr	r3, [r7, #12]
 8102582:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8102584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102586:	2b00      	cmp	r3, #0
 8102588:	d10b      	bne.n	81025a2 <xQueueReceive+0x32>
	__asm volatile
 810258a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810258e:	f383 8811 	msr	BASEPRI, r3
 8102592:	f3bf 8f6f 	isb	sy
 8102596:	f3bf 8f4f 	dsb	sy
 810259a:	623b      	str	r3, [r7, #32]
}
 810259c:	bf00      	nop
 810259e:	bf00      	nop
 81025a0:	e7fd      	b.n	810259e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81025a2:	68bb      	ldr	r3, [r7, #8]
 81025a4:	2b00      	cmp	r3, #0
 81025a6:	d103      	bne.n	81025b0 <xQueueReceive+0x40>
 81025a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81025ac:	2b00      	cmp	r3, #0
 81025ae:	d101      	bne.n	81025b4 <xQueueReceive+0x44>
 81025b0:	2301      	movs	r3, #1
 81025b2:	e000      	b.n	81025b6 <xQueueReceive+0x46>
 81025b4:	2300      	movs	r3, #0
 81025b6:	2b00      	cmp	r3, #0
 81025b8:	d10b      	bne.n	81025d2 <xQueueReceive+0x62>
	__asm volatile
 81025ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81025be:	f383 8811 	msr	BASEPRI, r3
 81025c2:	f3bf 8f6f 	isb	sy
 81025c6:	f3bf 8f4f 	dsb	sy
 81025ca:	61fb      	str	r3, [r7, #28]
}
 81025cc:	bf00      	nop
 81025ce:	bf00      	nop
 81025d0:	e7fd      	b.n	81025ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81025d2:	f001 f875 	bl	81036c0 <xTaskGetSchedulerState>
 81025d6:	4603      	mov	r3, r0
 81025d8:	2b00      	cmp	r3, #0
 81025da:	d102      	bne.n	81025e2 <xQueueReceive+0x72>
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d101      	bne.n	81025e6 <xQueueReceive+0x76>
 81025e2:	2301      	movs	r3, #1
 81025e4:	e000      	b.n	81025e8 <xQueueReceive+0x78>
 81025e6:	2300      	movs	r3, #0
 81025e8:	2b00      	cmp	r3, #0
 81025ea:	d10b      	bne.n	8102604 <xQueueReceive+0x94>
	__asm volatile
 81025ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81025f0:	f383 8811 	msr	BASEPRI, r3
 81025f4:	f3bf 8f6f 	isb	sy
 81025f8:	f3bf 8f4f 	dsb	sy
 81025fc:	61bb      	str	r3, [r7, #24]
}
 81025fe:	bf00      	nop
 8102600:	bf00      	nop
 8102602:	e7fd      	b.n	8102600 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102604:	f7ff fbe8 	bl	8101dd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810260a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810260c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102610:	2b00      	cmp	r3, #0
 8102612:	d01f      	beq.n	8102654 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102614:	68b9      	ldr	r1, [r7, #8]
 8102616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102618:	f000 f8f6 	bl	8102808 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810261e:	1e5a      	subs	r2, r3, #1
 8102620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102622:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102626:	691b      	ldr	r3, [r3, #16]
 8102628:	2b00      	cmp	r3, #0
 810262a:	d00f      	beq.n	810264c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810262c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810262e:	3310      	adds	r3, #16
 8102630:	4618      	mov	r0, r3
 8102632:	f000 fe7f 	bl	8103334 <xTaskRemoveFromEventList>
 8102636:	4603      	mov	r3, r0
 8102638:	2b00      	cmp	r3, #0
 810263a:	d007      	beq.n	810264c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810263c:	4b3c      	ldr	r3, [pc, #240]	@ (8102730 <xQueueReceive+0x1c0>)
 810263e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102642:	601a      	str	r2, [r3, #0]
 8102644:	f3bf 8f4f 	dsb	sy
 8102648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810264c:	f7ff fbf6 	bl	8101e3c <vPortExitCritical>
				return pdPASS;
 8102650:	2301      	movs	r3, #1
 8102652:	e069      	b.n	8102728 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102654:	687b      	ldr	r3, [r7, #4]
 8102656:	2b00      	cmp	r3, #0
 8102658:	d103      	bne.n	8102662 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810265a:	f7ff fbef 	bl	8101e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810265e:	2300      	movs	r3, #0
 8102660:	e062      	b.n	8102728 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102664:	2b00      	cmp	r3, #0
 8102666:	d106      	bne.n	8102676 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102668:	f107 0310 	add.w	r3, r7, #16
 810266c:	4618      	mov	r0, r3
 810266e:	f000 fec5 	bl	81033fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102672:	2301      	movs	r3, #1
 8102674:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102676:	f7ff fbe1 	bl	8101e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810267a:	f000 fc2d 	bl	8102ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810267e:	f7ff fbab 	bl	8101dd8 <vPortEnterCritical>
 8102682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102688:	b25b      	sxtb	r3, r3
 810268a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810268e:	d103      	bne.n	8102698 <xQueueReceive+0x128>
 8102690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102692:	2200      	movs	r2, #0
 8102694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8102698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810269a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810269e:	b25b      	sxtb	r3, r3
 81026a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81026a4:	d103      	bne.n	81026ae <xQueueReceive+0x13e>
 81026a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81026a8:	2200      	movs	r2, #0
 81026aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81026ae:	f7ff fbc5 	bl	8101e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81026b2:	1d3a      	adds	r2, r7, #4
 81026b4:	f107 0310 	add.w	r3, r7, #16
 81026b8:	4611      	mov	r1, r2
 81026ba:	4618      	mov	r0, r3
 81026bc:	f000 feb4 	bl	8103428 <xTaskCheckForTimeOut>
 81026c0:	4603      	mov	r3, r0
 81026c2:	2b00      	cmp	r3, #0
 81026c4:	d123      	bne.n	810270e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81026c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81026c8:	f000 f916 	bl	81028f8 <prvIsQueueEmpty>
 81026cc:	4603      	mov	r3, r0
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d017      	beq.n	8102702 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81026d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81026d4:	3324      	adds	r3, #36	@ 0x24
 81026d6:	687a      	ldr	r2, [r7, #4]
 81026d8:	4611      	mov	r1, r2
 81026da:	4618      	mov	r0, r3
 81026dc:	f000 fdd8 	bl	8103290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81026e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81026e2:	f000 f8b7 	bl	8102854 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81026e6:	f000 fc05 	bl	8102ef4 <xTaskResumeAll>
 81026ea:	4603      	mov	r3, r0
 81026ec:	2b00      	cmp	r3, #0
 81026ee:	d189      	bne.n	8102604 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 81026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8102730 <xQueueReceive+0x1c0>)
 81026f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81026f6:	601a      	str	r2, [r3, #0]
 81026f8:	f3bf 8f4f 	dsb	sy
 81026fc:	f3bf 8f6f 	isb	sy
 8102700:	e780      	b.n	8102604 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102704:	f000 f8a6 	bl	8102854 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102708:	f000 fbf4 	bl	8102ef4 <xTaskResumeAll>
 810270c:	e77a      	b.n	8102604 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810270e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102710:	f000 f8a0 	bl	8102854 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102714:	f000 fbee 	bl	8102ef4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810271a:	f000 f8ed 	bl	81028f8 <prvIsQueueEmpty>
 810271e:	4603      	mov	r3, r0
 8102720:	2b00      	cmp	r3, #0
 8102722:	f43f af6f 	beq.w	8102604 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8102726:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8102728:	4618      	mov	r0, r3
 810272a:	3730      	adds	r7, #48	@ 0x30
 810272c:	46bd      	mov	sp, r7
 810272e:	bd80      	pop	{r7, pc}
 8102730:	e000ed04 	.word	0xe000ed04

08102734 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8102734:	b580      	push	{r7, lr}
 8102736:	b086      	sub	sp, #24
 8102738:	af00      	add	r7, sp, #0
 810273a:	60f8      	str	r0, [r7, #12]
 810273c:	60b9      	str	r1, [r7, #8]
 810273e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8102740:	2300      	movs	r3, #0
 8102742:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102744:	68fb      	ldr	r3, [r7, #12]
 8102746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102748:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810274a:	68fb      	ldr	r3, [r7, #12]
 810274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810274e:	2b00      	cmp	r3, #0
 8102750:	d10d      	bne.n	810276e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8102752:	68fb      	ldr	r3, [r7, #12]
 8102754:	681b      	ldr	r3, [r3, #0]
 8102756:	2b00      	cmp	r3, #0
 8102758:	d14d      	bne.n	81027f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810275a:	68fb      	ldr	r3, [r7, #12]
 810275c:	689b      	ldr	r3, [r3, #8]
 810275e:	4618      	mov	r0, r3
 8102760:	f000 ffcc 	bl	81036fc <xTaskPriorityDisinherit>
 8102764:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8102766:	68fb      	ldr	r3, [r7, #12]
 8102768:	2200      	movs	r2, #0
 810276a:	609a      	str	r2, [r3, #8]
 810276c:	e043      	b.n	81027f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	2b00      	cmp	r3, #0
 8102772:	d119      	bne.n	81027a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102774:	68fb      	ldr	r3, [r7, #12]
 8102776:	6858      	ldr	r0, [r3, #4]
 8102778:	68fb      	ldr	r3, [r7, #12]
 810277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810277c:	461a      	mov	r2, r3
 810277e:	68b9      	ldr	r1, [r7, #8]
 8102780:	f001 fc5e 	bl	8104040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102784:	68fb      	ldr	r3, [r7, #12]
 8102786:	685a      	ldr	r2, [r3, #4]
 8102788:	68fb      	ldr	r3, [r7, #12]
 810278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810278c:	441a      	add	r2, r3
 810278e:	68fb      	ldr	r3, [r7, #12]
 8102790:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102792:	68fb      	ldr	r3, [r7, #12]
 8102794:	685a      	ldr	r2, [r3, #4]
 8102796:	68fb      	ldr	r3, [r7, #12]
 8102798:	689b      	ldr	r3, [r3, #8]
 810279a:	429a      	cmp	r2, r3
 810279c:	d32b      	bcc.n	81027f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810279e:	68fb      	ldr	r3, [r7, #12]
 81027a0:	681a      	ldr	r2, [r3, #0]
 81027a2:	68fb      	ldr	r3, [r7, #12]
 81027a4:	605a      	str	r2, [r3, #4]
 81027a6:	e026      	b.n	81027f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81027a8:	68fb      	ldr	r3, [r7, #12]
 81027aa:	68d8      	ldr	r0, [r3, #12]
 81027ac:	68fb      	ldr	r3, [r7, #12]
 81027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81027b0:	461a      	mov	r2, r3
 81027b2:	68b9      	ldr	r1, [r7, #8]
 81027b4:	f001 fc44 	bl	8104040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81027b8:	68fb      	ldr	r3, [r7, #12]
 81027ba:	68da      	ldr	r2, [r3, #12]
 81027bc:	68fb      	ldr	r3, [r7, #12]
 81027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81027c0:	425b      	negs	r3, r3
 81027c2:	441a      	add	r2, r3
 81027c4:	68fb      	ldr	r3, [r7, #12]
 81027c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81027c8:	68fb      	ldr	r3, [r7, #12]
 81027ca:	68da      	ldr	r2, [r3, #12]
 81027cc:	68fb      	ldr	r3, [r7, #12]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	429a      	cmp	r2, r3
 81027d2:	d207      	bcs.n	81027e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81027d4:	68fb      	ldr	r3, [r7, #12]
 81027d6:	689a      	ldr	r2, [r3, #8]
 81027d8:	68fb      	ldr	r3, [r7, #12]
 81027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81027dc:	425b      	negs	r3, r3
 81027de:	441a      	add	r2, r3
 81027e0:	68fb      	ldr	r3, [r7, #12]
 81027e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	2b02      	cmp	r3, #2
 81027e8:	d105      	bne.n	81027f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81027ea:	693b      	ldr	r3, [r7, #16]
 81027ec:	2b00      	cmp	r3, #0
 81027ee:	d002      	beq.n	81027f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81027f0:	693b      	ldr	r3, [r7, #16]
 81027f2:	3b01      	subs	r3, #1
 81027f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81027f6:	693b      	ldr	r3, [r7, #16]
 81027f8:	1c5a      	adds	r2, r3, #1
 81027fa:	68fb      	ldr	r3, [r7, #12]
 81027fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 81027fe:	697b      	ldr	r3, [r7, #20]
}
 8102800:	4618      	mov	r0, r3
 8102802:	3718      	adds	r7, #24
 8102804:	46bd      	mov	sp, r7
 8102806:	bd80      	pop	{r7, pc}

08102808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8102808:	b580      	push	{r7, lr}
 810280a:	b082      	sub	sp, #8
 810280c:	af00      	add	r7, sp, #0
 810280e:	6078      	str	r0, [r7, #4]
 8102810:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102816:	2b00      	cmp	r3, #0
 8102818:	d018      	beq.n	810284c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	68da      	ldr	r2, [r3, #12]
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102822:	441a      	add	r2, r3
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	68da      	ldr	r2, [r3, #12]
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	689b      	ldr	r3, [r3, #8]
 8102830:	429a      	cmp	r2, r3
 8102832:	d303      	bcc.n	810283c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	681a      	ldr	r2, [r3, #0]
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	68d9      	ldr	r1, [r3, #12]
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102844:	461a      	mov	r2, r3
 8102846:	6838      	ldr	r0, [r7, #0]
 8102848:	f001 fbfa 	bl	8104040 <memcpy>
	}
}
 810284c:	bf00      	nop
 810284e:	3708      	adds	r7, #8
 8102850:	46bd      	mov	sp, r7
 8102852:	bd80      	pop	{r7, pc}

08102854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8102854:	b580      	push	{r7, lr}
 8102856:	b084      	sub	sp, #16
 8102858:	af00      	add	r7, sp, #0
 810285a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810285c:	f7ff fabc 	bl	8101dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102866:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102868:	e011      	b.n	810288e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810286e:	2b00      	cmp	r3, #0
 8102870:	d012      	beq.n	8102898 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	3324      	adds	r3, #36	@ 0x24
 8102876:	4618      	mov	r0, r3
 8102878:	f000 fd5c 	bl	8103334 <xTaskRemoveFromEventList>
 810287c:	4603      	mov	r3, r0
 810287e:	2b00      	cmp	r3, #0
 8102880:	d001      	beq.n	8102886 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8102882:	f000 fe35 	bl	81034f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8102886:	7bfb      	ldrb	r3, [r7, #15]
 8102888:	3b01      	subs	r3, #1
 810288a:	b2db      	uxtb	r3, r3
 810288c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102892:	2b00      	cmp	r3, #0
 8102894:	dce9      	bgt.n	810286a <prvUnlockQueue+0x16>
 8102896:	e000      	b.n	810289a <prvUnlockQueue+0x46>
					break;
 8102898:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810289a:	687b      	ldr	r3, [r7, #4]
 810289c:	22ff      	movs	r2, #255	@ 0xff
 810289e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 81028a2:	f7ff facb 	bl	8101e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81028a6:	f7ff fa97 	bl	8101dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81028b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81028b2:	e011      	b.n	81028d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	691b      	ldr	r3, [r3, #16]
 81028b8:	2b00      	cmp	r3, #0
 81028ba:	d012      	beq.n	81028e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	3310      	adds	r3, #16
 81028c0:	4618      	mov	r0, r3
 81028c2:	f000 fd37 	bl	8103334 <xTaskRemoveFromEventList>
 81028c6:	4603      	mov	r3, r0
 81028c8:	2b00      	cmp	r3, #0
 81028ca:	d001      	beq.n	81028d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81028cc:	f000 fe10 	bl	81034f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81028d0:	7bbb      	ldrb	r3, [r7, #14]
 81028d2:	3b01      	subs	r3, #1
 81028d4:	b2db      	uxtb	r3, r3
 81028d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81028d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81028dc:	2b00      	cmp	r3, #0
 81028de:	dce9      	bgt.n	81028b4 <prvUnlockQueue+0x60>
 81028e0:	e000      	b.n	81028e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81028e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	22ff      	movs	r2, #255	@ 0xff
 81028e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 81028ec:	f7ff faa6 	bl	8101e3c <vPortExitCritical>
}
 81028f0:	bf00      	nop
 81028f2:	3710      	adds	r7, #16
 81028f4:	46bd      	mov	sp, r7
 81028f6:	bd80      	pop	{r7, pc}

081028f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81028f8:	b580      	push	{r7, lr}
 81028fa:	b084      	sub	sp, #16
 81028fc:	af00      	add	r7, sp, #0
 81028fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8102900:	f7ff fa6a 	bl	8101dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102908:	2b00      	cmp	r3, #0
 810290a:	d102      	bne.n	8102912 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810290c:	2301      	movs	r3, #1
 810290e:	60fb      	str	r3, [r7, #12]
 8102910:	e001      	b.n	8102916 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8102912:	2300      	movs	r3, #0
 8102914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102916:	f7ff fa91 	bl	8101e3c <vPortExitCritical>

	return xReturn;
 810291a:	68fb      	ldr	r3, [r7, #12]
}
 810291c:	4618      	mov	r0, r3
 810291e:	3710      	adds	r7, #16
 8102920:	46bd      	mov	sp, r7
 8102922:	bd80      	pop	{r7, pc}

08102924 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8102924:	b580      	push	{r7, lr}
 8102926:	b084      	sub	sp, #16
 8102928:	af00      	add	r7, sp, #0
 810292a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810292c:	f7ff fa54 	bl	8101dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102938:	429a      	cmp	r2, r3
 810293a:	d102      	bne.n	8102942 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810293c:	2301      	movs	r3, #1
 810293e:	60fb      	str	r3, [r7, #12]
 8102940:	e001      	b.n	8102946 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8102942:	2300      	movs	r3, #0
 8102944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102946:	f7ff fa79 	bl	8101e3c <vPortExitCritical>

	return xReturn;
 810294a:	68fb      	ldr	r3, [r7, #12]
}
 810294c:	4618      	mov	r0, r3
 810294e:	3710      	adds	r7, #16
 8102950:	46bd      	mov	sp, r7
 8102952:	bd80      	pop	{r7, pc}

08102954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8102954:	b480      	push	{r7}
 8102956:	b085      	sub	sp, #20
 8102958:	af00      	add	r7, sp, #0
 810295a:	6078      	str	r0, [r7, #4]
 810295c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810295e:	2300      	movs	r3, #0
 8102960:	60fb      	str	r3, [r7, #12]
 8102962:	e014      	b.n	810298e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8102964:	4a0f      	ldr	r2, [pc, #60]	@ (81029a4 <vQueueAddToRegistry+0x50>)
 8102966:	68fb      	ldr	r3, [r7, #12]
 8102968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810296c:	2b00      	cmp	r3, #0
 810296e:	d10b      	bne.n	8102988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8102970:	490c      	ldr	r1, [pc, #48]	@ (81029a4 <vQueueAddToRegistry+0x50>)
 8102972:	68fb      	ldr	r3, [r7, #12]
 8102974:	683a      	ldr	r2, [r7, #0]
 8102976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810297a:	4a0a      	ldr	r2, [pc, #40]	@ (81029a4 <vQueueAddToRegistry+0x50>)
 810297c:	68fb      	ldr	r3, [r7, #12]
 810297e:	00db      	lsls	r3, r3, #3
 8102980:	4413      	add	r3, r2
 8102982:	687a      	ldr	r2, [r7, #4]
 8102984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8102986:	e006      	b.n	8102996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8102988:	68fb      	ldr	r3, [r7, #12]
 810298a:	3301      	adds	r3, #1
 810298c:	60fb      	str	r3, [r7, #12]
 810298e:	68fb      	ldr	r3, [r7, #12]
 8102990:	2b07      	cmp	r3, #7
 8102992:	d9e7      	bls.n	8102964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8102994:	bf00      	nop
 8102996:	bf00      	nop
 8102998:	3714      	adds	r7, #20
 810299a:	46bd      	mov	sp, r7
 810299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a0:	4770      	bx	lr
 81029a2:	bf00      	nop
 81029a4:	10004450 	.word	0x10004450

081029a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81029a8:	b580      	push	{r7, lr}
 81029aa:	b086      	sub	sp, #24
 81029ac:	af00      	add	r7, sp, #0
 81029ae:	60f8      	str	r0, [r7, #12]
 81029b0:	60b9      	str	r1, [r7, #8]
 81029b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81029b4:	68fb      	ldr	r3, [r7, #12]
 81029b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81029b8:	f7ff fa0e 	bl	8101dd8 <vPortEnterCritical>
 81029bc:	697b      	ldr	r3, [r7, #20]
 81029be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81029c2:	b25b      	sxtb	r3, r3
 81029c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81029c8:	d103      	bne.n	81029d2 <vQueueWaitForMessageRestricted+0x2a>
 81029ca:	697b      	ldr	r3, [r7, #20]
 81029cc:	2200      	movs	r2, #0
 81029ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81029d2:	697b      	ldr	r3, [r7, #20]
 81029d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81029d8:	b25b      	sxtb	r3, r3
 81029da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81029de:	d103      	bne.n	81029e8 <vQueueWaitForMessageRestricted+0x40>
 81029e0:	697b      	ldr	r3, [r7, #20]
 81029e2:	2200      	movs	r2, #0
 81029e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81029e8:	f7ff fa28 	bl	8101e3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81029ec:	697b      	ldr	r3, [r7, #20]
 81029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81029f0:	2b00      	cmp	r3, #0
 81029f2:	d106      	bne.n	8102a02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81029f4:	697b      	ldr	r3, [r7, #20]
 81029f6:	3324      	adds	r3, #36	@ 0x24
 81029f8:	687a      	ldr	r2, [r7, #4]
 81029fa:	68b9      	ldr	r1, [r7, #8]
 81029fc:	4618      	mov	r0, r3
 81029fe:	f000 fc6d 	bl	81032dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8102a02:	6978      	ldr	r0, [r7, #20]
 8102a04:	f7ff ff26 	bl	8102854 <prvUnlockQueue>
	}
 8102a08:	bf00      	nop
 8102a0a:	3718      	adds	r7, #24
 8102a0c:	46bd      	mov	sp, r7
 8102a0e:	bd80      	pop	{r7, pc}

08102a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8102a10:	b580      	push	{r7, lr}
 8102a12:	b08e      	sub	sp, #56	@ 0x38
 8102a14:	af04      	add	r7, sp, #16
 8102a16:	60f8      	str	r0, [r7, #12]
 8102a18:	60b9      	str	r1, [r7, #8]
 8102a1a:	607a      	str	r2, [r7, #4]
 8102a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8102a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102a20:	2b00      	cmp	r3, #0
 8102a22:	d10b      	bne.n	8102a3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8102a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102a28:	f383 8811 	msr	BASEPRI, r3
 8102a2c:	f3bf 8f6f 	isb	sy
 8102a30:	f3bf 8f4f 	dsb	sy
 8102a34:	623b      	str	r3, [r7, #32]
}
 8102a36:	bf00      	nop
 8102a38:	bf00      	nop
 8102a3a:	e7fd      	b.n	8102a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8102a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102a3e:	2b00      	cmp	r3, #0
 8102a40:	d10b      	bne.n	8102a5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8102a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102a46:	f383 8811 	msr	BASEPRI, r3
 8102a4a:	f3bf 8f6f 	isb	sy
 8102a4e:	f3bf 8f4f 	dsb	sy
 8102a52:	61fb      	str	r3, [r7, #28]
}
 8102a54:	bf00      	nop
 8102a56:	bf00      	nop
 8102a58:	e7fd      	b.n	8102a56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8102a5a:	23a8      	movs	r3, #168	@ 0xa8
 8102a5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8102a5e:	693b      	ldr	r3, [r7, #16]
 8102a60:	2ba8      	cmp	r3, #168	@ 0xa8
 8102a62:	d00b      	beq.n	8102a7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8102a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102a68:	f383 8811 	msr	BASEPRI, r3
 8102a6c:	f3bf 8f6f 	isb	sy
 8102a70:	f3bf 8f4f 	dsb	sy
 8102a74:	61bb      	str	r3, [r7, #24]
}
 8102a76:	bf00      	nop
 8102a78:	bf00      	nop
 8102a7a:	e7fd      	b.n	8102a78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8102a7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8102a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102a80:	2b00      	cmp	r3, #0
 8102a82:	d01e      	beq.n	8102ac2 <xTaskCreateStatic+0xb2>
 8102a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102a86:	2b00      	cmp	r3, #0
 8102a88:	d01b      	beq.n	8102ac2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8102a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102a8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8102a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8102a92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8102a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102a96:	2202      	movs	r2, #2
 8102a98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8102a9c:	2300      	movs	r3, #0
 8102a9e:	9303      	str	r3, [sp, #12]
 8102aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102aa2:	9302      	str	r3, [sp, #8]
 8102aa4:	f107 0314 	add.w	r3, r7, #20
 8102aa8:	9301      	str	r3, [sp, #4]
 8102aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102aac:	9300      	str	r3, [sp, #0]
 8102aae:	683b      	ldr	r3, [r7, #0]
 8102ab0:	687a      	ldr	r2, [r7, #4]
 8102ab2:	68b9      	ldr	r1, [r7, #8]
 8102ab4:	68f8      	ldr	r0, [r7, #12]
 8102ab6:	f000 f851 	bl	8102b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102aba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102abc:	f000 f8f6 	bl	8102cac <prvAddNewTaskToReadyList>
 8102ac0:	e001      	b.n	8102ac6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8102ac2:	2300      	movs	r3, #0
 8102ac4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8102ac6:	697b      	ldr	r3, [r7, #20]
	}
 8102ac8:	4618      	mov	r0, r3
 8102aca:	3728      	adds	r7, #40	@ 0x28
 8102acc:	46bd      	mov	sp, r7
 8102ace:	bd80      	pop	{r7, pc}

08102ad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8102ad0:	b580      	push	{r7, lr}
 8102ad2:	b08c      	sub	sp, #48	@ 0x30
 8102ad4:	af04      	add	r7, sp, #16
 8102ad6:	60f8      	str	r0, [r7, #12]
 8102ad8:	60b9      	str	r1, [r7, #8]
 8102ada:	603b      	str	r3, [r7, #0]
 8102adc:	4613      	mov	r3, r2
 8102ade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8102ae0:	88fb      	ldrh	r3, [r7, #6]
 8102ae2:	009b      	lsls	r3, r3, #2
 8102ae4:	4618      	mov	r0, r3
 8102ae6:	f7fe fda5 	bl	8101634 <pvPortMalloc>
 8102aea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8102aec:	697b      	ldr	r3, [r7, #20]
 8102aee:	2b00      	cmp	r3, #0
 8102af0:	d00e      	beq.n	8102b10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8102af2:	20a8      	movs	r0, #168	@ 0xa8
 8102af4:	f7fe fd9e 	bl	8101634 <pvPortMalloc>
 8102af8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8102afa:	69fb      	ldr	r3, [r7, #28]
 8102afc:	2b00      	cmp	r3, #0
 8102afe:	d003      	beq.n	8102b08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8102b00:	69fb      	ldr	r3, [r7, #28]
 8102b02:	697a      	ldr	r2, [r7, #20]
 8102b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8102b06:	e005      	b.n	8102b14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8102b08:	6978      	ldr	r0, [r7, #20]
 8102b0a:	f7fe fe61 	bl	81017d0 <vPortFree>
 8102b0e:	e001      	b.n	8102b14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8102b10:	2300      	movs	r3, #0
 8102b12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8102b14:	69fb      	ldr	r3, [r7, #28]
 8102b16:	2b00      	cmp	r3, #0
 8102b18:	d017      	beq.n	8102b4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8102b1a:	69fb      	ldr	r3, [r7, #28]
 8102b1c:	2200      	movs	r2, #0
 8102b1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8102b22:	88fa      	ldrh	r2, [r7, #6]
 8102b24:	2300      	movs	r3, #0
 8102b26:	9303      	str	r3, [sp, #12]
 8102b28:	69fb      	ldr	r3, [r7, #28]
 8102b2a:	9302      	str	r3, [sp, #8]
 8102b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102b2e:	9301      	str	r3, [sp, #4]
 8102b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102b32:	9300      	str	r3, [sp, #0]
 8102b34:	683b      	ldr	r3, [r7, #0]
 8102b36:	68b9      	ldr	r1, [r7, #8]
 8102b38:	68f8      	ldr	r0, [r7, #12]
 8102b3a:	f000 f80f 	bl	8102b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102b3e:	69f8      	ldr	r0, [r7, #28]
 8102b40:	f000 f8b4 	bl	8102cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8102b44:	2301      	movs	r3, #1
 8102b46:	61bb      	str	r3, [r7, #24]
 8102b48:	e002      	b.n	8102b50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8102b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8102b4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8102b50:	69bb      	ldr	r3, [r7, #24]
	}
 8102b52:	4618      	mov	r0, r3
 8102b54:	3720      	adds	r7, #32
 8102b56:	46bd      	mov	sp, r7
 8102b58:	bd80      	pop	{r7, pc}
	...

08102b5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8102b5c:	b580      	push	{r7, lr}
 8102b5e:	b088      	sub	sp, #32
 8102b60:	af00      	add	r7, sp, #0
 8102b62:	60f8      	str	r0, [r7, #12]
 8102b64:	60b9      	str	r1, [r7, #8]
 8102b66:	607a      	str	r2, [r7, #4]
 8102b68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8102b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102b6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	009b      	lsls	r3, r3, #2
 8102b72:	461a      	mov	r2, r3
 8102b74:	21a5      	movs	r1, #165	@ 0xa5
 8102b76:	f001 f9df 	bl	8103f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8102b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8102b84:	3b01      	subs	r3, #1
 8102b86:	009b      	lsls	r3, r3, #2
 8102b88:	4413      	add	r3, r2
 8102b8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8102b8c:	69bb      	ldr	r3, [r7, #24]
 8102b8e:	f023 0307 	bic.w	r3, r3, #7
 8102b92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8102b94:	69bb      	ldr	r3, [r7, #24]
 8102b96:	f003 0307 	and.w	r3, r3, #7
 8102b9a:	2b00      	cmp	r3, #0
 8102b9c:	d00b      	beq.n	8102bb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8102b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102ba2:	f383 8811 	msr	BASEPRI, r3
 8102ba6:	f3bf 8f6f 	isb	sy
 8102baa:	f3bf 8f4f 	dsb	sy
 8102bae:	617b      	str	r3, [r7, #20]
}
 8102bb0:	bf00      	nop
 8102bb2:	bf00      	nop
 8102bb4:	e7fd      	b.n	8102bb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8102bb6:	68bb      	ldr	r3, [r7, #8]
 8102bb8:	2b00      	cmp	r3, #0
 8102bba:	d01f      	beq.n	8102bfc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102bbc:	2300      	movs	r3, #0
 8102bbe:	61fb      	str	r3, [r7, #28]
 8102bc0:	e012      	b.n	8102be8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8102bc2:	68ba      	ldr	r2, [r7, #8]
 8102bc4:	69fb      	ldr	r3, [r7, #28]
 8102bc6:	4413      	add	r3, r2
 8102bc8:	7819      	ldrb	r1, [r3, #0]
 8102bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102bcc:	69fb      	ldr	r3, [r7, #28]
 8102bce:	4413      	add	r3, r2
 8102bd0:	3334      	adds	r3, #52	@ 0x34
 8102bd2:	460a      	mov	r2, r1
 8102bd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8102bd6:	68ba      	ldr	r2, [r7, #8]
 8102bd8:	69fb      	ldr	r3, [r7, #28]
 8102bda:	4413      	add	r3, r2
 8102bdc:	781b      	ldrb	r3, [r3, #0]
 8102bde:	2b00      	cmp	r3, #0
 8102be0:	d006      	beq.n	8102bf0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102be2:	69fb      	ldr	r3, [r7, #28]
 8102be4:	3301      	adds	r3, #1
 8102be6:	61fb      	str	r3, [r7, #28]
 8102be8:	69fb      	ldr	r3, [r7, #28]
 8102bea:	2b0f      	cmp	r3, #15
 8102bec:	d9e9      	bls.n	8102bc2 <prvInitialiseNewTask+0x66>
 8102bee:	e000      	b.n	8102bf2 <prvInitialiseNewTask+0x96>
			{
				break;
 8102bf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8102bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bf4:	2200      	movs	r2, #0
 8102bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8102bfa:	e003      	b.n	8102c04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8102bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bfe:	2200      	movs	r2, #0
 8102c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8102c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102c06:	2b37      	cmp	r3, #55	@ 0x37
 8102c08:	d901      	bls.n	8102c0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8102c0a:	2337      	movs	r3, #55	@ 0x37
 8102c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8102c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102c12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8102c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102c18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8102c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c1c:	2200      	movs	r2, #0
 8102c1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8102c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c22:	3304      	adds	r3, #4
 8102c24:	4618      	mov	r0, r3
 8102c26:	f7fe ff13 	bl	8101a50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8102c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c2c:	3318      	adds	r3, #24
 8102c2e:	4618      	mov	r0, r3
 8102c30:	f7fe ff0e 	bl	8101a50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8102c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102c38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102c3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8102c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8102c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102c48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8102c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c4c:	2200      	movs	r2, #0
 8102c4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8102c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c54:	2200      	movs	r2, #0
 8102c56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8102c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c5c:	3354      	adds	r3, #84	@ 0x54
 8102c5e:	224c      	movs	r2, #76	@ 0x4c
 8102c60:	2100      	movs	r1, #0
 8102c62:	4618      	mov	r0, r3
 8102c64:	f001 f968 	bl	8103f38 <memset>
 8102c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8102ca0 <prvInitialiseNewTask+0x144>)
 8102c6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8102c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c70:	4a0c      	ldr	r2, [pc, #48]	@ (8102ca4 <prvInitialiseNewTask+0x148>)
 8102c72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8102c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c76:	4a0c      	ldr	r2, [pc, #48]	@ (8102ca8 <prvInitialiseNewTask+0x14c>)
 8102c78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8102c7a:	683a      	ldr	r2, [r7, #0]
 8102c7c:	68f9      	ldr	r1, [r7, #12]
 8102c7e:	69b8      	ldr	r0, [r7, #24]
 8102c80:	f7fe ff7a 	bl	8101b78 <pxPortInitialiseStack>
 8102c84:	4602      	mov	r2, r0
 8102c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8102c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102c8c:	2b00      	cmp	r3, #0
 8102c8e:	d002      	beq.n	8102c96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8102c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102c96:	bf00      	nop
 8102c98:	3720      	adds	r7, #32
 8102c9a:	46bd      	mov	sp, r7
 8102c9c:	bd80      	pop	{r7, pc}
 8102c9e:	bf00      	nop
 8102ca0:	10004abc 	.word	0x10004abc
 8102ca4:	10004b24 	.word	0x10004b24
 8102ca8:	10004b8c 	.word	0x10004b8c

08102cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8102cac:	b580      	push	{r7, lr}
 8102cae:	b082      	sub	sp, #8
 8102cb0:	af00      	add	r7, sp, #0
 8102cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8102cb4:	f7ff f890 	bl	8101dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8102cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8102d70 <prvAddNewTaskToReadyList+0xc4>)
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	3301      	adds	r3, #1
 8102cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8102d70 <prvAddNewTaskToReadyList+0xc4>)
 8102cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8102cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8102d74 <prvAddNewTaskToReadyList+0xc8>)
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	2b00      	cmp	r3, #0
 8102cc8:	d109      	bne.n	8102cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8102cca:	4a2a      	ldr	r2, [pc, #168]	@ (8102d74 <prvAddNewTaskToReadyList+0xc8>)
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8102cd0:	4b27      	ldr	r3, [pc, #156]	@ (8102d70 <prvAddNewTaskToReadyList+0xc4>)
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	2b01      	cmp	r3, #1
 8102cd6:	d110      	bne.n	8102cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8102cd8:	f000 fc2e 	bl	8103538 <prvInitialiseTaskLists>
 8102cdc:	e00d      	b.n	8102cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8102cde:	4b26      	ldr	r3, [pc, #152]	@ (8102d78 <prvAddNewTaskToReadyList+0xcc>)
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	2b00      	cmp	r3, #0
 8102ce4:	d109      	bne.n	8102cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8102ce6:	4b23      	ldr	r3, [pc, #140]	@ (8102d74 <prvAddNewTaskToReadyList+0xc8>)
 8102ce8:	681b      	ldr	r3, [r3, #0]
 8102cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cf0:	429a      	cmp	r2, r3
 8102cf2:	d802      	bhi.n	8102cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8102cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8102d74 <prvAddNewTaskToReadyList+0xc8>)
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8102cfa:	4b20      	ldr	r3, [pc, #128]	@ (8102d7c <prvAddNewTaskToReadyList+0xd0>)
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	3301      	adds	r3, #1
 8102d00:	4a1e      	ldr	r2, [pc, #120]	@ (8102d7c <prvAddNewTaskToReadyList+0xd0>)
 8102d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8102d04:	4b1d      	ldr	r3, [pc, #116]	@ (8102d7c <prvAddNewTaskToReadyList+0xd0>)
 8102d06:	681a      	ldr	r2, [r3, #0]
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102d10:	4b1b      	ldr	r3, [pc, #108]	@ (8102d80 <prvAddNewTaskToReadyList+0xd4>)
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	429a      	cmp	r2, r3
 8102d16:	d903      	bls.n	8102d20 <prvAddNewTaskToReadyList+0x74>
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d1c:	4a18      	ldr	r2, [pc, #96]	@ (8102d80 <prvAddNewTaskToReadyList+0xd4>)
 8102d1e:	6013      	str	r3, [r2, #0]
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102d24:	4613      	mov	r3, r2
 8102d26:	009b      	lsls	r3, r3, #2
 8102d28:	4413      	add	r3, r2
 8102d2a:	009b      	lsls	r3, r3, #2
 8102d2c:	4a15      	ldr	r2, [pc, #84]	@ (8102d84 <prvAddNewTaskToReadyList+0xd8>)
 8102d2e:	441a      	add	r2, r3
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	3304      	adds	r3, #4
 8102d34:	4619      	mov	r1, r3
 8102d36:	4610      	mov	r0, r2
 8102d38:	f7fe fe97 	bl	8101a6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8102d3c:	f7ff f87e 	bl	8101e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8102d40:	4b0d      	ldr	r3, [pc, #52]	@ (8102d78 <prvAddNewTaskToReadyList+0xcc>)
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	2b00      	cmp	r3, #0
 8102d46:	d00e      	beq.n	8102d66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8102d48:	4b0a      	ldr	r3, [pc, #40]	@ (8102d74 <prvAddNewTaskToReadyList+0xc8>)
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d52:	429a      	cmp	r2, r3
 8102d54:	d207      	bcs.n	8102d66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8102d56:	4b0c      	ldr	r3, [pc, #48]	@ (8102d88 <prvAddNewTaskToReadyList+0xdc>)
 8102d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102d5c:	601a      	str	r2, [r3, #0]
 8102d5e:	f3bf 8f4f 	dsb	sy
 8102d62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102d66:	bf00      	nop
 8102d68:	3708      	adds	r7, #8
 8102d6a:	46bd      	mov	sp, r7
 8102d6c:	bd80      	pop	{r7, pc}
 8102d6e:	bf00      	nop
 8102d70:	10004964 	.word	0x10004964
 8102d74:	10004490 	.word	0x10004490
 8102d78:	10004970 	.word	0x10004970
 8102d7c:	10004980 	.word	0x10004980
 8102d80:	1000496c 	.word	0x1000496c
 8102d84:	10004494 	.word	0x10004494
 8102d88:	e000ed04 	.word	0xe000ed04

08102d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8102d8c:	b580      	push	{r7, lr}
 8102d8e:	b084      	sub	sp, #16
 8102d90:	af00      	add	r7, sp, #0
 8102d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8102d94:	2300      	movs	r3, #0
 8102d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	2b00      	cmp	r3, #0
 8102d9c:	d018      	beq.n	8102dd0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8102d9e:	4b14      	ldr	r3, [pc, #80]	@ (8102df0 <vTaskDelay+0x64>)
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d00b      	beq.n	8102dbe <vTaskDelay+0x32>
	__asm volatile
 8102da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102daa:	f383 8811 	msr	BASEPRI, r3
 8102dae:	f3bf 8f6f 	isb	sy
 8102db2:	f3bf 8f4f 	dsb	sy
 8102db6:	60bb      	str	r3, [r7, #8]
}
 8102db8:	bf00      	nop
 8102dba:	bf00      	nop
 8102dbc:	e7fd      	b.n	8102dba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8102dbe:	f000 f88b 	bl	8102ed8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8102dc2:	2100      	movs	r1, #0
 8102dc4:	6878      	ldr	r0, [r7, #4]
 8102dc6:	f000 fd09 	bl	81037dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8102dca:	f000 f893 	bl	8102ef4 <xTaskResumeAll>
 8102dce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	2b00      	cmp	r3, #0
 8102dd4:	d107      	bne.n	8102de6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8102dd6:	4b07      	ldr	r3, [pc, #28]	@ (8102df4 <vTaskDelay+0x68>)
 8102dd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102ddc:	601a      	str	r2, [r3, #0]
 8102dde:	f3bf 8f4f 	dsb	sy
 8102de2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8102de6:	bf00      	nop
 8102de8:	3710      	adds	r7, #16
 8102dea:	46bd      	mov	sp, r7
 8102dec:	bd80      	pop	{r7, pc}
 8102dee:	bf00      	nop
 8102df0:	1000498c 	.word	0x1000498c
 8102df4:	e000ed04 	.word	0xe000ed04

08102df8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8102df8:	b580      	push	{r7, lr}
 8102dfa:	b08a      	sub	sp, #40	@ 0x28
 8102dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8102dfe:	2300      	movs	r3, #0
 8102e00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8102e02:	2300      	movs	r3, #0
 8102e04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8102e06:	463a      	mov	r2, r7
 8102e08:	1d39      	adds	r1, r7, #4
 8102e0a:	f107 0308 	add.w	r3, r7, #8
 8102e0e:	4618      	mov	r0, r3
 8102e10:	f7fe fbdc 	bl	81015cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8102e14:	6839      	ldr	r1, [r7, #0]
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	68ba      	ldr	r2, [r7, #8]
 8102e1a:	9202      	str	r2, [sp, #8]
 8102e1c:	9301      	str	r3, [sp, #4]
 8102e1e:	2300      	movs	r3, #0
 8102e20:	9300      	str	r3, [sp, #0]
 8102e22:	2300      	movs	r3, #0
 8102e24:	460a      	mov	r2, r1
 8102e26:	4924      	ldr	r1, [pc, #144]	@ (8102eb8 <vTaskStartScheduler+0xc0>)
 8102e28:	4824      	ldr	r0, [pc, #144]	@ (8102ebc <vTaskStartScheduler+0xc4>)
 8102e2a:	f7ff fdf1 	bl	8102a10 <xTaskCreateStatic>
 8102e2e:	4603      	mov	r3, r0
 8102e30:	4a23      	ldr	r2, [pc, #140]	@ (8102ec0 <vTaskStartScheduler+0xc8>)
 8102e32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8102e34:	4b22      	ldr	r3, [pc, #136]	@ (8102ec0 <vTaskStartScheduler+0xc8>)
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	2b00      	cmp	r3, #0
 8102e3a:	d002      	beq.n	8102e42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8102e3c:	2301      	movs	r3, #1
 8102e3e:	617b      	str	r3, [r7, #20]
 8102e40:	e001      	b.n	8102e46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8102e42:	2300      	movs	r3, #0
 8102e44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8102e46:	697b      	ldr	r3, [r7, #20]
 8102e48:	2b01      	cmp	r3, #1
 8102e4a:	d102      	bne.n	8102e52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8102e4c:	f000 fd1a 	bl	8103884 <xTimerCreateTimerTask>
 8102e50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8102e52:	697b      	ldr	r3, [r7, #20]
 8102e54:	2b01      	cmp	r3, #1
 8102e56:	d11b      	bne.n	8102e90 <vTaskStartScheduler+0x98>
	__asm volatile
 8102e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102e5c:	f383 8811 	msr	BASEPRI, r3
 8102e60:	f3bf 8f6f 	isb	sy
 8102e64:	f3bf 8f4f 	dsb	sy
 8102e68:	613b      	str	r3, [r7, #16]
}
 8102e6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8102e6c:	4b15      	ldr	r3, [pc, #84]	@ (8102ec4 <vTaskStartScheduler+0xcc>)
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	3354      	adds	r3, #84	@ 0x54
 8102e72:	4a15      	ldr	r2, [pc, #84]	@ (8102ec8 <vTaskStartScheduler+0xd0>)
 8102e74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8102e76:	4b15      	ldr	r3, [pc, #84]	@ (8102ecc <vTaskStartScheduler+0xd4>)
 8102e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8102e7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8102e7e:	4b14      	ldr	r3, [pc, #80]	@ (8102ed0 <vTaskStartScheduler+0xd8>)
 8102e80:	2201      	movs	r2, #1
 8102e82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8102e84:	4b13      	ldr	r3, [pc, #76]	@ (8102ed4 <vTaskStartScheduler+0xdc>)
 8102e86:	2200      	movs	r2, #0
 8102e88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8102e8a:	f7fe ff01 	bl	8101c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8102e8e:	e00f      	b.n	8102eb0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8102e90:	697b      	ldr	r3, [r7, #20]
 8102e92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102e96:	d10b      	bne.n	8102eb0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8102e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102e9c:	f383 8811 	msr	BASEPRI, r3
 8102ea0:	f3bf 8f6f 	isb	sy
 8102ea4:	f3bf 8f4f 	dsb	sy
 8102ea8:	60fb      	str	r3, [r7, #12]
}
 8102eaa:	bf00      	nop
 8102eac:	bf00      	nop
 8102eae:	e7fd      	b.n	8102eac <vTaskStartScheduler+0xb4>
}
 8102eb0:	bf00      	nop
 8102eb2:	3718      	adds	r7, #24
 8102eb4:	46bd      	mov	sp, r7
 8102eb6:	bd80      	pop	{r7, pc}
 8102eb8:	0810412c 	.word	0x0810412c
 8102ebc:	08103509 	.word	0x08103509
 8102ec0:	10004988 	.word	0x10004988
 8102ec4:	10004490 	.word	0x10004490
 8102ec8:	10000014 	.word	0x10000014
 8102ecc:	10004984 	.word	0x10004984
 8102ed0:	10004970 	.word	0x10004970
 8102ed4:	10004968 	.word	0x10004968

08102ed8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8102ed8:	b480      	push	{r7}
 8102eda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8102edc:	4b04      	ldr	r3, [pc, #16]	@ (8102ef0 <vTaskSuspendAll+0x18>)
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	3301      	adds	r3, #1
 8102ee2:	4a03      	ldr	r2, [pc, #12]	@ (8102ef0 <vTaskSuspendAll+0x18>)
 8102ee4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8102ee6:	bf00      	nop
 8102ee8:	46bd      	mov	sp, r7
 8102eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eee:	4770      	bx	lr
 8102ef0:	1000498c 	.word	0x1000498c

08102ef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8102ef4:	b580      	push	{r7, lr}
 8102ef6:	b084      	sub	sp, #16
 8102ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8102efa:	2300      	movs	r3, #0
 8102efc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8102efe:	2300      	movs	r3, #0
 8102f00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8102f02:	4b42      	ldr	r3, [pc, #264]	@ (810300c <xTaskResumeAll+0x118>)
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	d10b      	bne.n	8102f22 <xTaskResumeAll+0x2e>
	__asm volatile
 8102f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102f0e:	f383 8811 	msr	BASEPRI, r3
 8102f12:	f3bf 8f6f 	isb	sy
 8102f16:	f3bf 8f4f 	dsb	sy
 8102f1a:	603b      	str	r3, [r7, #0]
}
 8102f1c:	bf00      	nop
 8102f1e:	bf00      	nop
 8102f20:	e7fd      	b.n	8102f1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8102f22:	f7fe ff59 	bl	8101dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8102f26:	4b39      	ldr	r3, [pc, #228]	@ (810300c <xTaskResumeAll+0x118>)
 8102f28:	681b      	ldr	r3, [r3, #0]
 8102f2a:	3b01      	subs	r3, #1
 8102f2c:	4a37      	ldr	r2, [pc, #220]	@ (810300c <xTaskResumeAll+0x118>)
 8102f2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102f30:	4b36      	ldr	r3, [pc, #216]	@ (810300c <xTaskResumeAll+0x118>)
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	d162      	bne.n	8102ffe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8102f38:	4b35      	ldr	r3, [pc, #212]	@ (8103010 <xTaskResumeAll+0x11c>)
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	2b00      	cmp	r3, #0
 8102f3e:	d05e      	beq.n	8102ffe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102f40:	e02f      	b.n	8102fa2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102f42:	4b34      	ldr	r3, [pc, #208]	@ (8103014 <xTaskResumeAll+0x120>)
 8102f44:	68db      	ldr	r3, [r3, #12]
 8102f46:	68db      	ldr	r3, [r3, #12]
 8102f48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8102f4a:	68fb      	ldr	r3, [r7, #12]
 8102f4c:	3318      	adds	r3, #24
 8102f4e:	4618      	mov	r0, r3
 8102f50:	f7fe fde8 	bl	8101b24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102f54:	68fb      	ldr	r3, [r7, #12]
 8102f56:	3304      	adds	r3, #4
 8102f58:	4618      	mov	r0, r3
 8102f5a:	f7fe fde3 	bl	8101b24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8102f5e:	68fb      	ldr	r3, [r7, #12]
 8102f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102f62:	4b2d      	ldr	r3, [pc, #180]	@ (8103018 <xTaskResumeAll+0x124>)
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	429a      	cmp	r2, r3
 8102f68:	d903      	bls.n	8102f72 <xTaskResumeAll+0x7e>
 8102f6a:	68fb      	ldr	r3, [r7, #12]
 8102f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8103018 <xTaskResumeAll+0x124>)
 8102f70:	6013      	str	r3, [r2, #0]
 8102f72:	68fb      	ldr	r3, [r7, #12]
 8102f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102f76:	4613      	mov	r3, r2
 8102f78:	009b      	lsls	r3, r3, #2
 8102f7a:	4413      	add	r3, r2
 8102f7c:	009b      	lsls	r3, r3, #2
 8102f7e:	4a27      	ldr	r2, [pc, #156]	@ (810301c <xTaskResumeAll+0x128>)
 8102f80:	441a      	add	r2, r3
 8102f82:	68fb      	ldr	r3, [r7, #12]
 8102f84:	3304      	adds	r3, #4
 8102f86:	4619      	mov	r1, r3
 8102f88:	4610      	mov	r0, r2
 8102f8a:	f7fe fd6e 	bl	8101a6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8102f8e:	68fb      	ldr	r3, [r7, #12]
 8102f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102f92:	4b23      	ldr	r3, [pc, #140]	@ (8103020 <xTaskResumeAll+0x12c>)
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f98:	429a      	cmp	r2, r3
 8102f9a:	d302      	bcc.n	8102fa2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8102f9c:	4b21      	ldr	r3, [pc, #132]	@ (8103024 <xTaskResumeAll+0x130>)
 8102f9e:	2201      	movs	r2, #1
 8102fa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8103014 <xTaskResumeAll+0x120>)
 8102fa4:	681b      	ldr	r3, [r3, #0]
 8102fa6:	2b00      	cmp	r3, #0
 8102fa8:	d1cb      	bne.n	8102f42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8102faa:	68fb      	ldr	r3, [r7, #12]
 8102fac:	2b00      	cmp	r3, #0
 8102fae:	d001      	beq.n	8102fb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8102fb0:	f000 fb66 	bl	8103680 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8102fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8103028 <xTaskResumeAll+0x134>)
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	2b00      	cmp	r3, #0
 8102fbe:	d010      	beq.n	8102fe2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8102fc0:	f000 f846 	bl	8103050 <xTaskIncrementTick>
 8102fc4:	4603      	mov	r3, r0
 8102fc6:	2b00      	cmp	r3, #0
 8102fc8:	d002      	beq.n	8102fd0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8102fca:	4b16      	ldr	r3, [pc, #88]	@ (8103024 <xTaskResumeAll+0x130>)
 8102fcc:	2201      	movs	r2, #1
 8102fce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	3b01      	subs	r3, #1
 8102fd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	d1f1      	bne.n	8102fc0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8102fdc:	4b12      	ldr	r3, [pc, #72]	@ (8103028 <xTaskResumeAll+0x134>)
 8102fde:	2200      	movs	r2, #0
 8102fe0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8102fe2:	4b10      	ldr	r3, [pc, #64]	@ (8103024 <xTaskResumeAll+0x130>)
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	2b00      	cmp	r3, #0
 8102fe8:	d009      	beq.n	8102ffe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8102fea:	2301      	movs	r3, #1
 8102fec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8102fee:	4b0f      	ldr	r3, [pc, #60]	@ (810302c <xTaskResumeAll+0x138>)
 8102ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102ff4:	601a      	str	r2, [r3, #0]
 8102ff6:	f3bf 8f4f 	dsb	sy
 8102ffa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8102ffe:	f7fe ff1d 	bl	8101e3c <vPortExitCritical>

	return xAlreadyYielded;
 8103002:	68bb      	ldr	r3, [r7, #8]
}
 8103004:	4618      	mov	r0, r3
 8103006:	3710      	adds	r7, #16
 8103008:	46bd      	mov	sp, r7
 810300a:	bd80      	pop	{r7, pc}
 810300c:	1000498c 	.word	0x1000498c
 8103010:	10004964 	.word	0x10004964
 8103014:	10004924 	.word	0x10004924
 8103018:	1000496c 	.word	0x1000496c
 810301c:	10004494 	.word	0x10004494
 8103020:	10004490 	.word	0x10004490
 8103024:	10004978 	.word	0x10004978
 8103028:	10004974 	.word	0x10004974
 810302c:	e000ed04 	.word	0xe000ed04

08103030 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8103030:	b480      	push	{r7}
 8103032:	b083      	sub	sp, #12
 8103034:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8103036:	4b05      	ldr	r3, [pc, #20]	@ (810304c <xTaskGetTickCount+0x1c>)
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810303c:	687b      	ldr	r3, [r7, #4]
}
 810303e:	4618      	mov	r0, r3
 8103040:	370c      	adds	r7, #12
 8103042:	46bd      	mov	sp, r7
 8103044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103048:	4770      	bx	lr
 810304a:	bf00      	nop
 810304c:	10004968 	.word	0x10004968

08103050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8103050:	b580      	push	{r7, lr}
 8103052:	b086      	sub	sp, #24
 8103054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8103056:	2300      	movs	r3, #0
 8103058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810305a:	4b4f      	ldr	r3, [pc, #316]	@ (8103198 <xTaskIncrementTick+0x148>)
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	2b00      	cmp	r3, #0
 8103060:	f040 8090 	bne.w	8103184 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8103064:	4b4d      	ldr	r3, [pc, #308]	@ (810319c <xTaskIncrementTick+0x14c>)
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	3301      	adds	r3, #1
 810306a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810306c:	4a4b      	ldr	r2, [pc, #300]	@ (810319c <xTaskIncrementTick+0x14c>)
 810306e:	693b      	ldr	r3, [r7, #16]
 8103070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8103072:	693b      	ldr	r3, [r7, #16]
 8103074:	2b00      	cmp	r3, #0
 8103076:	d121      	bne.n	81030bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8103078:	4b49      	ldr	r3, [pc, #292]	@ (81031a0 <xTaskIncrementTick+0x150>)
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	2b00      	cmp	r3, #0
 8103080:	d00b      	beq.n	810309a <xTaskIncrementTick+0x4a>
	__asm volatile
 8103082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103086:	f383 8811 	msr	BASEPRI, r3
 810308a:	f3bf 8f6f 	isb	sy
 810308e:	f3bf 8f4f 	dsb	sy
 8103092:	603b      	str	r3, [r7, #0]
}
 8103094:	bf00      	nop
 8103096:	bf00      	nop
 8103098:	e7fd      	b.n	8103096 <xTaskIncrementTick+0x46>
 810309a:	4b41      	ldr	r3, [pc, #260]	@ (81031a0 <xTaskIncrementTick+0x150>)
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	60fb      	str	r3, [r7, #12]
 81030a0:	4b40      	ldr	r3, [pc, #256]	@ (81031a4 <xTaskIncrementTick+0x154>)
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	4a3e      	ldr	r2, [pc, #248]	@ (81031a0 <xTaskIncrementTick+0x150>)
 81030a6:	6013      	str	r3, [r2, #0]
 81030a8:	4a3e      	ldr	r2, [pc, #248]	@ (81031a4 <xTaskIncrementTick+0x154>)
 81030aa:	68fb      	ldr	r3, [r7, #12]
 81030ac:	6013      	str	r3, [r2, #0]
 81030ae:	4b3e      	ldr	r3, [pc, #248]	@ (81031a8 <xTaskIncrementTick+0x158>)
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	3301      	adds	r3, #1
 81030b4:	4a3c      	ldr	r2, [pc, #240]	@ (81031a8 <xTaskIncrementTick+0x158>)
 81030b6:	6013      	str	r3, [r2, #0]
 81030b8:	f000 fae2 	bl	8103680 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81030bc:	4b3b      	ldr	r3, [pc, #236]	@ (81031ac <xTaskIncrementTick+0x15c>)
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	693a      	ldr	r2, [r7, #16]
 81030c2:	429a      	cmp	r2, r3
 81030c4:	d349      	bcc.n	810315a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81030c6:	4b36      	ldr	r3, [pc, #216]	@ (81031a0 <xTaskIncrementTick+0x150>)
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d104      	bne.n	81030da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81030d0:	4b36      	ldr	r3, [pc, #216]	@ (81031ac <xTaskIncrementTick+0x15c>)
 81030d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81030d6:	601a      	str	r2, [r3, #0]
					break;
 81030d8:	e03f      	b.n	810315a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81030da:	4b31      	ldr	r3, [pc, #196]	@ (81031a0 <xTaskIncrementTick+0x150>)
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	68db      	ldr	r3, [r3, #12]
 81030e0:	68db      	ldr	r3, [r3, #12]
 81030e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81030e4:	68bb      	ldr	r3, [r7, #8]
 81030e6:	685b      	ldr	r3, [r3, #4]
 81030e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81030ea:	693a      	ldr	r2, [r7, #16]
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	429a      	cmp	r2, r3
 81030f0:	d203      	bcs.n	81030fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81030f2:	4a2e      	ldr	r2, [pc, #184]	@ (81031ac <xTaskIncrementTick+0x15c>)
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81030f8:	e02f      	b.n	810315a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81030fa:	68bb      	ldr	r3, [r7, #8]
 81030fc:	3304      	adds	r3, #4
 81030fe:	4618      	mov	r0, r3
 8103100:	f7fe fd10 	bl	8101b24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8103104:	68bb      	ldr	r3, [r7, #8]
 8103106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103108:	2b00      	cmp	r3, #0
 810310a:	d004      	beq.n	8103116 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810310c:	68bb      	ldr	r3, [r7, #8]
 810310e:	3318      	adds	r3, #24
 8103110:	4618      	mov	r0, r3
 8103112:	f7fe fd07 	bl	8101b24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8103116:	68bb      	ldr	r3, [r7, #8]
 8103118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810311a:	4b25      	ldr	r3, [pc, #148]	@ (81031b0 <xTaskIncrementTick+0x160>)
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	429a      	cmp	r2, r3
 8103120:	d903      	bls.n	810312a <xTaskIncrementTick+0xda>
 8103122:	68bb      	ldr	r3, [r7, #8]
 8103124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103126:	4a22      	ldr	r2, [pc, #136]	@ (81031b0 <xTaskIncrementTick+0x160>)
 8103128:	6013      	str	r3, [r2, #0]
 810312a:	68bb      	ldr	r3, [r7, #8]
 810312c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810312e:	4613      	mov	r3, r2
 8103130:	009b      	lsls	r3, r3, #2
 8103132:	4413      	add	r3, r2
 8103134:	009b      	lsls	r3, r3, #2
 8103136:	4a1f      	ldr	r2, [pc, #124]	@ (81031b4 <xTaskIncrementTick+0x164>)
 8103138:	441a      	add	r2, r3
 810313a:	68bb      	ldr	r3, [r7, #8]
 810313c:	3304      	adds	r3, #4
 810313e:	4619      	mov	r1, r3
 8103140:	4610      	mov	r0, r2
 8103142:	f7fe fc92 	bl	8101a6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103146:	68bb      	ldr	r3, [r7, #8]
 8103148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810314a:	4b1b      	ldr	r3, [pc, #108]	@ (81031b8 <xTaskIncrementTick+0x168>)
 810314c:	681b      	ldr	r3, [r3, #0]
 810314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103150:	429a      	cmp	r2, r3
 8103152:	d3b8      	bcc.n	81030c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8103154:	2301      	movs	r3, #1
 8103156:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103158:	e7b5      	b.n	81030c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810315a:	4b17      	ldr	r3, [pc, #92]	@ (81031b8 <xTaskIncrementTick+0x168>)
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103160:	4914      	ldr	r1, [pc, #80]	@ (81031b4 <xTaskIncrementTick+0x164>)
 8103162:	4613      	mov	r3, r2
 8103164:	009b      	lsls	r3, r3, #2
 8103166:	4413      	add	r3, r2
 8103168:	009b      	lsls	r3, r3, #2
 810316a:	440b      	add	r3, r1
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	2b01      	cmp	r3, #1
 8103170:	d901      	bls.n	8103176 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8103172:	2301      	movs	r3, #1
 8103174:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8103176:	4b11      	ldr	r3, [pc, #68]	@ (81031bc <xTaskIncrementTick+0x16c>)
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	2b00      	cmp	r3, #0
 810317c:	d007      	beq.n	810318e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810317e:	2301      	movs	r3, #1
 8103180:	617b      	str	r3, [r7, #20]
 8103182:	e004      	b.n	810318e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8103184:	4b0e      	ldr	r3, [pc, #56]	@ (81031c0 <xTaskIncrementTick+0x170>)
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	3301      	adds	r3, #1
 810318a:	4a0d      	ldr	r2, [pc, #52]	@ (81031c0 <xTaskIncrementTick+0x170>)
 810318c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810318e:	697b      	ldr	r3, [r7, #20]
}
 8103190:	4618      	mov	r0, r3
 8103192:	3718      	adds	r7, #24
 8103194:	46bd      	mov	sp, r7
 8103196:	bd80      	pop	{r7, pc}
 8103198:	1000498c 	.word	0x1000498c
 810319c:	10004968 	.word	0x10004968
 81031a0:	1000491c 	.word	0x1000491c
 81031a4:	10004920 	.word	0x10004920
 81031a8:	1000497c 	.word	0x1000497c
 81031ac:	10004984 	.word	0x10004984
 81031b0:	1000496c 	.word	0x1000496c
 81031b4:	10004494 	.word	0x10004494
 81031b8:	10004490 	.word	0x10004490
 81031bc:	10004978 	.word	0x10004978
 81031c0:	10004974 	.word	0x10004974

081031c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81031c4:	b480      	push	{r7}
 81031c6:	b085      	sub	sp, #20
 81031c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8103278 <vTaskSwitchContext+0xb4>)
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	2b00      	cmp	r3, #0
 81031d0:	d003      	beq.n	81031da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81031d2:	4b2a      	ldr	r3, [pc, #168]	@ (810327c <vTaskSwitchContext+0xb8>)
 81031d4:	2201      	movs	r2, #1
 81031d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81031d8:	e047      	b.n	810326a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 81031da:	4b28      	ldr	r3, [pc, #160]	@ (810327c <vTaskSwitchContext+0xb8>)
 81031dc:	2200      	movs	r2, #0
 81031de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81031e0:	4b27      	ldr	r3, [pc, #156]	@ (8103280 <vTaskSwitchContext+0xbc>)
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	60fb      	str	r3, [r7, #12]
 81031e6:	e011      	b.n	810320c <vTaskSwitchContext+0x48>
 81031e8:	68fb      	ldr	r3, [r7, #12]
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	d10b      	bne.n	8103206 <vTaskSwitchContext+0x42>
	__asm volatile
 81031ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81031f2:	f383 8811 	msr	BASEPRI, r3
 81031f6:	f3bf 8f6f 	isb	sy
 81031fa:	f3bf 8f4f 	dsb	sy
 81031fe:	607b      	str	r3, [r7, #4]
}
 8103200:	bf00      	nop
 8103202:	bf00      	nop
 8103204:	e7fd      	b.n	8103202 <vTaskSwitchContext+0x3e>
 8103206:	68fb      	ldr	r3, [r7, #12]
 8103208:	3b01      	subs	r3, #1
 810320a:	60fb      	str	r3, [r7, #12]
 810320c:	491d      	ldr	r1, [pc, #116]	@ (8103284 <vTaskSwitchContext+0xc0>)
 810320e:	68fa      	ldr	r2, [r7, #12]
 8103210:	4613      	mov	r3, r2
 8103212:	009b      	lsls	r3, r3, #2
 8103214:	4413      	add	r3, r2
 8103216:	009b      	lsls	r3, r3, #2
 8103218:	440b      	add	r3, r1
 810321a:	681b      	ldr	r3, [r3, #0]
 810321c:	2b00      	cmp	r3, #0
 810321e:	d0e3      	beq.n	81031e8 <vTaskSwitchContext+0x24>
 8103220:	68fa      	ldr	r2, [r7, #12]
 8103222:	4613      	mov	r3, r2
 8103224:	009b      	lsls	r3, r3, #2
 8103226:	4413      	add	r3, r2
 8103228:	009b      	lsls	r3, r3, #2
 810322a:	4a16      	ldr	r2, [pc, #88]	@ (8103284 <vTaskSwitchContext+0xc0>)
 810322c:	4413      	add	r3, r2
 810322e:	60bb      	str	r3, [r7, #8]
 8103230:	68bb      	ldr	r3, [r7, #8]
 8103232:	685b      	ldr	r3, [r3, #4]
 8103234:	685a      	ldr	r2, [r3, #4]
 8103236:	68bb      	ldr	r3, [r7, #8]
 8103238:	605a      	str	r2, [r3, #4]
 810323a:	68bb      	ldr	r3, [r7, #8]
 810323c:	685a      	ldr	r2, [r3, #4]
 810323e:	68bb      	ldr	r3, [r7, #8]
 8103240:	3308      	adds	r3, #8
 8103242:	429a      	cmp	r2, r3
 8103244:	d104      	bne.n	8103250 <vTaskSwitchContext+0x8c>
 8103246:	68bb      	ldr	r3, [r7, #8]
 8103248:	685b      	ldr	r3, [r3, #4]
 810324a:	685a      	ldr	r2, [r3, #4]
 810324c:	68bb      	ldr	r3, [r7, #8]
 810324e:	605a      	str	r2, [r3, #4]
 8103250:	68bb      	ldr	r3, [r7, #8]
 8103252:	685b      	ldr	r3, [r3, #4]
 8103254:	68db      	ldr	r3, [r3, #12]
 8103256:	4a0c      	ldr	r2, [pc, #48]	@ (8103288 <vTaskSwitchContext+0xc4>)
 8103258:	6013      	str	r3, [r2, #0]
 810325a:	4a09      	ldr	r2, [pc, #36]	@ (8103280 <vTaskSwitchContext+0xbc>)
 810325c:	68fb      	ldr	r3, [r7, #12]
 810325e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8103260:	4b09      	ldr	r3, [pc, #36]	@ (8103288 <vTaskSwitchContext+0xc4>)
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	3354      	adds	r3, #84	@ 0x54
 8103266:	4a09      	ldr	r2, [pc, #36]	@ (810328c <vTaskSwitchContext+0xc8>)
 8103268:	6013      	str	r3, [r2, #0]
}
 810326a:	bf00      	nop
 810326c:	3714      	adds	r7, #20
 810326e:	46bd      	mov	sp, r7
 8103270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103274:	4770      	bx	lr
 8103276:	bf00      	nop
 8103278:	1000498c 	.word	0x1000498c
 810327c:	10004978 	.word	0x10004978
 8103280:	1000496c 	.word	0x1000496c
 8103284:	10004494 	.word	0x10004494
 8103288:	10004490 	.word	0x10004490
 810328c:	10000014 	.word	0x10000014

08103290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8103290:	b580      	push	{r7, lr}
 8103292:	b084      	sub	sp, #16
 8103294:	af00      	add	r7, sp, #0
 8103296:	6078      	str	r0, [r7, #4]
 8103298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	2b00      	cmp	r3, #0
 810329e:	d10b      	bne.n	81032b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 81032a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81032a4:	f383 8811 	msr	BASEPRI, r3
 81032a8:	f3bf 8f6f 	isb	sy
 81032ac:	f3bf 8f4f 	dsb	sy
 81032b0:	60fb      	str	r3, [r7, #12]
}
 81032b2:	bf00      	nop
 81032b4:	bf00      	nop
 81032b6:	e7fd      	b.n	81032b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81032b8:	4b07      	ldr	r3, [pc, #28]	@ (81032d8 <vTaskPlaceOnEventList+0x48>)
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	3318      	adds	r3, #24
 81032be:	4619      	mov	r1, r3
 81032c0:	6878      	ldr	r0, [r7, #4]
 81032c2:	f7fe fbf6 	bl	8101ab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81032c6:	2101      	movs	r1, #1
 81032c8:	6838      	ldr	r0, [r7, #0]
 81032ca:	f000 fa87 	bl	81037dc <prvAddCurrentTaskToDelayedList>
}
 81032ce:	bf00      	nop
 81032d0:	3710      	adds	r7, #16
 81032d2:	46bd      	mov	sp, r7
 81032d4:	bd80      	pop	{r7, pc}
 81032d6:	bf00      	nop
 81032d8:	10004490 	.word	0x10004490

081032dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81032dc:	b580      	push	{r7, lr}
 81032de:	b086      	sub	sp, #24
 81032e0:	af00      	add	r7, sp, #0
 81032e2:	60f8      	str	r0, [r7, #12]
 81032e4:	60b9      	str	r1, [r7, #8]
 81032e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	2b00      	cmp	r3, #0
 81032ec:	d10b      	bne.n	8103306 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 81032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81032f2:	f383 8811 	msr	BASEPRI, r3
 81032f6:	f3bf 8f6f 	isb	sy
 81032fa:	f3bf 8f4f 	dsb	sy
 81032fe:	617b      	str	r3, [r7, #20]
}
 8103300:	bf00      	nop
 8103302:	bf00      	nop
 8103304:	e7fd      	b.n	8103302 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8103306:	4b0a      	ldr	r3, [pc, #40]	@ (8103330 <vTaskPlaceOnEventListRestricted+0x54>)
 8103308:	681b      	ldr	r3, [r3, #0]
 810330a:	3318      	adds	r3, #24
 810330c:	4619      	mov	r1, r3
 810330e:	68f8      	ldr	r0, [r7, #12]
 8103310:	f7fe fbab 	bl	8101a6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	2b00      	cmp	r3, #0
 8103318:	d002      	beq.n	8103320 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810331a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810331e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8103320:	6879      	ldr	r1, [r7, #4]
 8103322:	68b8      	ldr	r0, [r7, #8]
 8103324:	f000 fa5a 	bl	81037dc <prvAddCurrentTaskToDelayedList>
	}
 8103328:	bf00      	nop
 810332a:	3718      	adds	r7, #24
 810332c:	46bd      	mov	sp, r7
 810332e:	bd80      	pop	{r7, pc}
 8103330:	10004490 	.word	0x10004490

08103334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8103334:	b580      	push	{r7, lr}
 8103336:	b086      	sub	sp, #24
 8103338:	af00      	add	r7, sp, #0
 810333a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	68db      	ldr	r3, [r3, #12]
 8103340:	68db      	ldr	r3, [r3, #12]
 8103342:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8103344:	693b      	ldr	r3, [r7, #16]
 8103346:	2b00      	cmp	r3, #0
 8103348:	d10b      	bne.n	8103362 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810334a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810334e:	f383 8811 	msr	BASEPRI, r3
 8103352:	f3bf 8f6f 	isb	sy
 8103356:	f3bf 8f4f 	dsb	sy
 810335a:	60fb      	str	r3, [r7, #12]
}
 810335c:	bf00      	nop
 810335e:	bf00      	nop
 8103360:	e7fd      	b.n	810335e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8103362:	693b      	ldr	r3, [r7, #16]
 8103364:	3318      	adds	r3, #24
 8103366:	4618      	mov	r0, r3
 8103368:	f7fe fbdc 	bl	8101b24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810336c:	4b1d      	ldr	r3, [pc, #116]	@ (81033e4 <xTaskRemoveFromEventList+0xb0>)
 810336e:	681b      	ldr	r3, [r3, #0]
 8103370:	2b00      	cmp	r3, #0
 8103372:	d11d      	bne.n	81033b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8103374:	693b      	ldr	r3, [r7, #16]
 8103376:	3304      	adds	r3, #4
 8103378:	4618      	mov	r0, r3
 810337a:	f7fe fbd3 	bl	8101b24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810337e:	693b      	ldr	r3, [r7, #16]
 8103380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103382:	4b19      	ldr	r3, [pc, #100]	@ (81033e8 <xTaskRemoveFromEventList+0xb4>)
 8103384:	681b      	ldr	r3, [r3, #0]
 8103386:	429a      	cmp	r2, r3
 8103388:	d903      	bls.n	8103392 <xTaskRemoveFromEventList+0x5e>
 810338a:	693b      	ldr	r3, [r7, #16]
 810338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810338e:	4a16      	ldr	r2, [pc, #88]	@ (81033e8 <xTaskRemoveFromEventList+0xb4>)
 8103390:	6013      	str	r3, [r2, #0]
 8103392:	693b      	ldr	r3, [r7, #16]
 8103394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103396:	4613      	mov	r3, r2
 8103398:	009b      	lsls	r3, r3, #2
 810339a:	4413      	add	r3, r2
 810339c:	009b      	lsls	r3, r3, #2
 810339e:	4a13      	ldr	r2, [pc, #76]	@ (81033ec <xTaskRemoveFromEventList+0xb8>)
 81033a0:	441a      	add	r2, r3
 81033a2:	693b      	ldr	r3, [r7, #16]
 81033a4:	3304      	adds	r3, #4
 81033a6:	4619      	mov	r1, r3
 81033a8:	4610      	mov	r0, r2
 81033aa:	f7fe fb5e 	bl	8101a6a <vListInsertEnd>
 81033ae:	e005      	b.n	81033bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81033b0:	693b      	ldr	r3, [r7, #16]
 81033b2:	3318      	adds	r3, #24
 81033b4:	4619      	mov	r1, r3
 81033b6:	480e      	ldr	r0, [pc, #56]	@ (81033f0 <xTaskRemoveFromEventList+0xbc>)
 81033b8:	f7fe fb57 	bl	8101a6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81033bc:	693b      	ldr	r3, [r7, #16]
 81033be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81033c0:	4b0c      	ldr	r3, [pc, #48]	@ (81033f4 <xTaskRemoveFromEventList+0xc0>)
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81033c6:	429a      	cmp	r2, r3
 81033c8:	d905      	bls.n	81033d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81033ca:	2301      	movs	r3, #1
 81033cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81033ce:	4b0a      	ldr	r3, [pc, #40]	@ (81033f8 <xTaskRemoveFromEventList+0xc4>)
 81033d0:	2201      	movs	r2, #1
 81033d2:	601a      	str	r2, [r3, #0]
 81033d4:	e001      	b.n	81033da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 81033d6:	2300      	movs	r3, #0
 81033d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81033da:	697b      	ldr	r3, [r7, #20]
}
 81033dc:	4618      	mov	r0, r3
 81033de:	3718      	adds	r7, #24
 81033e0:	46bd      	mov	sp, r7
 81033e2:	bd80      	pop	{r7, pc}
 81033e4:	1000498c 	.word	0x1000498c
 81033e8:	1000496c 	.word	0x1000496c
 81033ec:	10004494 	.word	0x10004494
 81033f0:	10004924 	.word	0x10004924
 81033f4:	10004490 	.word	0x10004490
 81033f8:	10004978 	.word	0x10004978

081033fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81033fc:	b480      	push	{r7}
 81033fe:	b083      	sub	sp, #12
 8103400:	af00      	add	r7, sp, #0
 8103402:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8103404:	4b06      	ldr	r3, [pc, #24]	@ (8103420 <vTaskInternalSetTimeOutState+0x24>)
 8103406:	681a      	ldr	r2, [r3, #0]
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810340c:	4b05      	ldr	r3, [pc, #20]	@ (8103424 <vTaskInternalSetTimeOutState+0x28>)
 810340e:	681a      	ldr	r2, [r3, #0]
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	605a      	str	r2, [r3, #4]
}
 8103414:	bf00      	nop
 8103416:	370c      	adds	r7, #12
 8103418:	46bd      	mov	sp, r7
 810341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810341e:	4770      	bx	lr
 8103420:	1000497c 	.word	0x1000497c
 8103424:	10004968 	.word	0x10004968

08103428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8103428:	b580      	push	{r7, lr}
 810342a:	b088      	sub	sp, #32
 810342c:	af00      	add	r7, sp, #0
 810342e:	6078      	str	r0, [r7, #4]
 8103430:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	2b00      	cmp	r3, #0
 8103436:	d10b      	bne.n	8103450 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8103438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810343c:	f383 8811 	msr	BASEPRI, r3
 8103440:	f3bf 8f6f 	isb	sy
 8103444:	f3bf 8f4f 	dsb	sy
 8103448:	613b      	str	r3, [r7, #16]
}
 810344a:	bf00      	nop
 810344c:	bf00      	nop
 810344e:	e7fd      	b.n	810344c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8103450:	683b      	ldr	r3, [r7, #0]
 8103452:	2b00      	cmp	r3, #0
 8103454:	d10b      	bne.n	810346e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8103456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810345a:	f383 8811 	msr	BASEPRI, r3
 810345e:	f3bf 8f6f 	isb	sy
 8103462:	f3bf 8f4f 	dsb	sy
 8103466:	60fb      	str	r3, [r7, #12]
}
 8103468:	bf00      	nop
 810346a:	bf00      	nop
 810346c:	e7fd      	b.n	810346a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810346e:	f7fe fcb3 	bl	8101dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8103472:	4b1d      	ldr	r3, [pc, #116]	@ (81034e8 <xTaskCheckForTimeOut+0xc0>)
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	685b      	ldr	r3, [r3, #4]
 810347c:	69ba      	ldr	r2, [r7, #24]
 810347e:	1ad3      	subs	r3, r2, r3
 8103480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8103482:	683b      	ldr	r3, [r7, #0]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810348a:	d102      	bne.n	8103492 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810348c:	2300      	movs	r3, #0
 810348e:	61fb      	str	r3, [r7, #28]
 8103490:	e023      	b.n	81034da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	681a      	ldr	r2, [r3, #0]
 8103496:	4b15      	ldr	r3, [pc, #84]	@ (81034ec <xTaskCheckForTimeOut+0xc4>)
 8103498:	681b      	ldr	r3, [r3, #0]
 810349a:	429a      	cmp	r2, r3
 810349c:	d007      	beq.n	81034ae <xTaskCheckForTimeOut+0x86>
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	685b      	ldr	r3, [r3, #4]
 81034a2:	69ba      	ldr	r2, [r7, #24]
 81034a4:	429a      	cmp	r2, r3
 81034a6:	d302      	bcc.n	81034ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81034a8:	2301      	movs	r3, #1
 81034aa:	61fb      	str	r3, [r7, #28]
 81034ac:	e015      	b.n	81034da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81034ae:	683b      	ldr	r3, [r7, #0]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	697a      	ldr	r2, [r7, #20]
 81034b4:	429a      	cmp	r2, r3
 81034b6:	d20b      	bcs.n	81034d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81034b8:	683b      	ldr	r3, [r7, #0]
 81034ba:	681a      	ldr	r2, [r3, #0]
 81034bc:	697b      	ldr	r3, [r7, #20]
 81034be:	1ad2      	subs	r2, r2, r3
 81034c0:	683b      	ldr	r3, [r7, #0]
 81034c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81034c4:	6878      	ldr	r0, [r7, #4]
 81034c6:	f7ff ff99 	bl	81033fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81034ca:	2300      	movs	r3, #0
 81034cc:	61fb      	str	r3, [r7, #28]
 81034ce:	e004      	b.n	81034da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 81034d0:	683b      	ldr	r3, [r7, #0]
 81034d2:	2200      	movs	r2, #0
 81034d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81034d6:	2301      	movs	r3, #1
 81034d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81034da:	f7fe fcaf 	bl	8101e3c <vPortExitCritical>

	return xReturn;
 81034de:	69fb      	ldr	r3, [r7, #28]
}
 81034e0:	4618      	mov	r0, r3
 81034e2:	3720      	adds	r7, #32
 81034e4:	46bd      	mov	sp, r7
 81034e6:	bd80      	pop	{r7, pc}
 81034e8:	10004968 	.word	0x10004968
 81034ec:	1000497c 	.word	0x1000497c

081034f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81034f0:	b480      	push	{r7}
 81034f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81034f4:	4b03      	ldr	r3, [pc, #12]	@ (8103504 <vTaskMissedYield+0x14>)
 81034f6:	2201      	movs	r2, #1
 81034f8:	601a      	str	r2, [r3, #0]
}
 81034fa:	bf00      	nop
 81034fc:	46bd      	mov	sp, r7
 81034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103502:	4770      	bx	lr
 8103504:	10004978 	.word	0x10004978

08103508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8103508:	b580      	push	{r7, lr}
 810350a:	b082      	sub	sp, #8
 810350c:	af00      	add	r7, sp, #0
 810350e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8103510:	f000 f852 	bl	81035b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8103514:	4b06      	ldr	r3, [pc, #24]	@ (8103530 <prvIdleTask+0x28>)
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	2b01      	cmp	r3, #1
 810351a:	d9f9      	bls.n	8103510 <prvIdleTask+0x8>
			{
				taskYIELD();
 810351c:	4b05      	ldr	r3, [pc, #20]	@ (8103534 <prvIdleTask+0x2c>)
 810351e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103522:	601a      	str	r2, [r3, #0]
 8103524:	f3bf 8f4f 	dsb	sy
 8103528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810352c:	e7f0      	b.n	8103510 <prvIdleTask+0x8>
 810352e:	bf00      	nop
 8103530:	10004494 	.word	0x10004494
 8103534:	e000ed04 	.word	0xe000ed04

08103538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8103538:	b580      	push	{r7, lr}
 810353a:	b082      	sub	sp, #8
 810353c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810353e:	2300      	movs	r3, #0
 8103540:	607b      	str	r3, [r7, #4]
 8103542:	e00c      	b.n	810355e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8103544:	687a      	ldr	r2, [r7, #4]
 8103546:	4613      	mov	r3, r2
 8103548:	009b      	lsls	r3, r3, #2
 810354a:	4413      	add	r3, r2
 810354c:	009b      	lsls	r3, r3, #2
 810354e:	4a12      	ldr	r2, [pc, #72]	@ (8103598 <prvInitialiseTaskLists+0x60>)
 8103550:	4413      	add	r3, r2
 8103552:	4618      	mov	r0, r3
 8103554:	f7fe fa5c 	bl	8101a10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	3301      	adds	r3, #1
 810355c:	607b      	str	r3, [r7, #4]
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	2b37      	cmp	r3, #55	@ 0x37
 8103562:	d9ef      	bls.n	8103544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8103564:	480d      	ldr	r0, [pc, #52]	@ (810359c <prvInitialiseTaskLists+0x64>)
 8103566:	f7fe fa53 	bl	8101a10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810356a:	480d      	ldr	r0, [pc, #52]	@ (81035a0 <prvInitialiseTaskLists+0x68>)
 810356c:	f7fe fa50 	bl	8101a10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8103570:	480c      	ldr	r0, [pc, #48]	@ (81035a4 <prvInitialiseTaskLists+0x6c>)
 8103572:	f7fe fa4d 	bl	8101a10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8103576:	480c      	ldr	r0, [pc, #48]	@ (81035a8 <prvInitialiseTaskLists+0x70>)
 8103578:	f7fe fa4a 	bl	8101a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810357c:	480b      	ldr	r0, [pc, #44]	@ (81035ac <prvInitialiseTaskLists+0x74>)
 810357e:	f7fe fa47 	bl	8101a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8103582:	4b0b      	ldr	r3, [pc, #44]	@ (81035b0 <prvInitialiseTaskLists+0x78>)
 8103584:	4a05      	ldr	r2, [pc, #20]	@ (810359c <prvInitialiseTaskLists+0x64>)
 8103586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8103588:	4b0a      	ldr	r3, [pc, #40]	@ (81035b4 <prvInitialiseTaskLists+0x7c>)
 810358a:	4a05      	ldr	r2, [pc, #20]	@ (81035a0 <prvInitialiseTaskLists+0x68>)
 810358c:	601a      	str	r2, [r3, #0]
}
 810358e:	bf00      	nop
 8103590:	3708      	adds	r7, #8
 8103592:	46bd      	mov	sp, r7
 8103594:	bd80      	pop	{r7, pc}
 8103596:	bf00      	nop
 8103598:	10004494 	.word	0x10004494
 810359c:	100048f4 	.word	0x100048f4
 81035a0:	10004908 	.word	0x10004908
 81035a4:	10004924 	.word	0x10004924
 81035a8:	10004938 	.word	0x10004938
 81035ac:	10004950 	.word	0x10004950
 81035b0:	1000491c 	.word	0x1000491c
 81035b4:	10004920 	.word	0x10004920

081035b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81035b8:	b580      	push	{r7, lr}
 81035ba:	b082      	sub	sp, #8
 81035bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81035be:	e019      	b.n	81035f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81035c0:	f7fe fc0a 	bl	8101dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81035c4:	4b10      	ldr	r3, [pc, #64]	@ (8103608 <prvCheckTasksWaitingTermination+0x50>)
 81035c6:	68db      	ldr	r3, [r3, #12]
 81035c8:	68db      	ldr	r3, [r3, #12]
 81035ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	3304      	adds	r3, #4
 81035d0:	4618      	mov	r0, r3
 81035d2:	f7fe faa7 	bl	8101b24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81035d6:	4b0d      	ldr	r3, [pc, #52]	@ (810360c <prvCheckTasksWaitingTermination+0x54>)
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	3b01      	subs	r3, #1
 81035dc:	4a0b      	ldr	r2, [pc, #44]	@ (810360c <prvCheckTasksWaitingTermination+0x54>)
 81035de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8103610 <prvCheckTasksWaitingTermination+0x58>)
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	3b01      	subs	r3, #1
 81035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8103610 <prvCheckTasksWaitingTermination+0x58>)
 81035e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81035ea:	f7fe fc27 	bl	8101e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81035ee:	6878      	ldr	r0, [r7, #4]
 81035f0:	f000 f810 	bl	8103614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81035f4:	4b06      	ldr	r3, [pc, #24]	@ (8103610 <prvCheckTasksWaitingTermination+0x58>)
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	2b00      	cmp	r3, #0
 81035fa:	d1e1      	bne.n	81035c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81035fc:	bf00      	nop
 81035fe:	bf00      	nop
 8103600:	3708      	adds	r7, #8
 8103602:	46bd      	mov	sp, r7
 8103604:	bd80      	pop	{r7, pc}
 8103606:	bf00      	nop
 8103608:	10004938 	.word	0x10004938
 810360c:	10004964 	.word	0x10004964
 8103610:	1000494c 	.word	0x1000494c

08103614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8103614:	b580      	push	{r7, lr}
 8103616:	b084      	sub	sp, #16
 8103618:	af00      	add	r7, sp, #0
 810361a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	3354      	adds	r3, #84	@ 0x54
 8103620:	4618      	mov	r0, r3
 8103622:	f000 fc91 	bl	8103f48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810362c:	2b00      	cmp	r3, #0
 810362e:	d108      	bne.n	8103642 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103634:	4618      	mov	r0, r3
 8103636:	f7fe f8cb 	bl	81017d0 <vPortFree>
				vPortFree( pxTCB );
 810363a:	6878      	ldr	r0, [r7, #4]
 810363c:	f7fe f8c8 	bl	81017d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8103640:	e019      	b.n	8103676 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8103648:	2b01      	cmp	r3, #1
 810364a:	d103      	bne.n	8103654 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810364c:	6878      	ldr	r0, [r7, #4]
 810364e:	f7fe f8bf 	bl	81017d0 <vPortFree>
	}
 8103652:	e010      	b.n	8103676 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810365a:	2b02      	cmp	r3, #2
 810365c:	d00b      	beq.n	8103676 <prvDeleteTCB+0x62>
	__asm volatile
 810365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103662:	f383 8811 	msr	BASEPRI, r3
 8103666:	f3bf 8f6f 	isb	sy
 810366a:	f3bf 8f4f 	dsb	sy
 810366e:	60fb      	str	r3, [r7, #12]
}
 8103670:	bf00      	nop
 8103672:	bf00      	nop
 8103674:	e7fd      	b.n	8103672 <prvDeleteTCB+0x5e>
	}
 8103676:	bf00      	nop
 8103678:	3710      	adds	r7, #16
 810367a:	46bd      	mov	sp, r7
 810367c:	bd80      	pop	{r7, pc}
	...

08103680 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8103680:	b480      	push	{r7}
 8103682:	b083      	sub	sp, #12
 8103684:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103686:	4b0c      	ldr	r3, [pc, #48]	@ (81036b8 <prvResetNextTaskUnblockTime+0x38>)
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	2b00      	cmp	r3, #0
 810368e:	d104      	bne.n	810369a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8103690:	4b0a      	ldr	r3, [pc, #40]	@ (81036bc <prvResetNextTaskUnblockTime+0x3c>)
 8103692:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8103696:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8103698:	e008      	b.n	81036ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810369a:	4b07      	ldr	r3, [pc, #28]	@ (81036b8 <prvResetNextTaskUnblockTime+0x38>)
 810369c:	681b      	ldr	r3, [r3, #0]
 810369e:	68db      	ldr	r3, [r3, #12]
 81036a0:	68db      	ldr	r3, [r3, #12]
 81036a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	685b      	ldr	r3, [r3, #4]
 81036a8:	4a04      	ldr	r2, [pc, #16]	@ (81036bc <prvResetNextTaskUnblockTime+0x3c>)
 81036aa:	6013      	str	r3, [r2, #0]
}
 81036ac:	bf00      	nop
 81036ae:	370c      	adds	r7, #12
 81036b0:	46bd      	mov	sp, r7
 81036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036b6:	4770      	bx	lr
 81036b8:	1000491c 	.word	0x1000491c
 81036bc:	10004984 	.word	0x10004984

081036c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81036c0:	b480      	push	{r7}
 81036c2:	b083      	sub	sp, #12
 81036c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81036c6:	4b0b      	ldr	r3, [pc, #44]	@ (81036f4 <xTaskGetSchedulerState+0x34>)
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	d102      	bne.n	81036d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81036ce:	2301      	movs	r3, #1
 81036d0:	607b      	str	r3, [r7, #4]
 81036d2:	e008      	b.n	81036e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81036d4:	4b08      	ldr	r3, [pc, #32]	@ (81036f8 <xTaskGetSchedulerState+0x38>)
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	2b00      	cmp	r3, #0
 81036da:	d102      	bne.n	81036e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81036dc:	2302      	movs	r3, #2
 81036de:	607b      	str	r3, [r7, #4]
 81036e0:	e001      	b.n	81036e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81036e2:	2300      	movs	r3, #0
 81036e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81036e6:	687b      	ldr	r3, [r7, #4]
	}
 81036e8:	4618      	mov	r0, r3
 81036ea:	370c      	adds	r7, #12
 81036ec:	46bd      	mov	sp, r7
 81036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036f2:	4770      	bx	lr
 81036f4:	10004970 	.word	0x10004970
 81036f8:	1000498c 	.word	0x1000498c

081036fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81036fc:	b580      	push	{r7, lr}
 81036fe:	b086      	sub	sp, #24
 8103700:	af00      	add	r7, sp, #0
 8103702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8103708:	2300      	movs	r3, #0
 810370a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	2b00      	cmp	r3, #0
 8103710:	d058      	beq.n	81037c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8103712:	4b2f      	ldr	r3, [pc, #188]	@ (81037d0 <xTaskPriorityDisinherit+0xd4>)
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	693a      	ldr	r2, [r7, #16]
 8103718:	429a      	cmp	r2, r3
 810371a:	d00b      	beq.n	8103734 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810371c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103720:	f383 8811 	msr	BASEPRI, r3
 8103724:	f3bf 8f6f 	isb	sy
 8103728:	f3bf 8f4f 	dsb	sy
 810372c:	60fb      	str	r3, [r7, #12]
}
 810372e:	bf00      	nop
 8103730:	bf00      	nop
 8103732:	e7fd      	b.n	8103730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8103734:	693b      	ldr	r3, [r7, #16]
 8103736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103738:	2b00      	cmp	r3, #0
 810373a:	d10b      	bne.n	8103754 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103740:	f383 8811 	msr	BASEPRI, r3
 8103744:	f3bf 8f6f 	isb	sy
 8103748:	f3bf 8f4f 	dsb	sy
 810374c:	60bb      	str	r3, [r7, #8]
}
 810374e:	bf00      	nop
 8103750:	bf00      	nop
 8103752:	e7fd      	b.n	8103750 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8103754:	693b      	ldr	r3, [r7, #16]
 8103756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103758:	1e5a      	subs	r2, r3, #1
 810375a:	693b      	ldr	r3, [r7, #16]
 810375c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810375e:	693b      	ldr	r3, [r7, #16]
 8103760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103762:	693b      	ldr	r3, [r7, #16]
 8103764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103766:	429a      	cmp	r2, r3
 8103768:	d02c      	beq.n	81037c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810376a:	693b      	ldr	r3, [r7, #16]
 810376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810376e:	2b00      	cmp	r3, #0
 8103770:	d128      	bne.n	81037c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103772:	693b      	ldr	r3, [r7, #16]
 8103774:	3304      	adds	r3, #4
 8103776:	4618      	mov	r0, r3
 8103778:	f7fe f9d4 	bl	8101b24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810377c:	693b      	ldr	r3, [r7, #16]
 810377e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103780:	693b      	ldr	r3, [r7, #16]
 8103782:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103784:	693b      	ldr	r3, [r7, #16]
 8103786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103788:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810378c:	693b      	ldr	r3, [r7, #16]
 810378e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8103790:	693b      	ldr	r3, [r7, #16]
 8103792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103794:	4b0f      	ldr	r3, [pc, #60]	@ (81037d4 <xTaskPriorityDisinherit+0xd8>)
 8103796:	681b      	ldr	r3, [r3, #0]
 8103798:	429a      	cmp	r2, r3
 810379a:	d903      	bls.n	81037a4 <xTaskPriorityDisinherit+0xa8>
 810379c:	693b      	ldr	r3, [r7, #16]
 810379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037a0:	4a0c      	ldr	r2, [pc, #48]	@ (81037d4 <xTaskPriorityDisinherit+0xd8>)
 81037a2:	6013      	str	r3, [r2, #0]
 81037a4:	693b      	ldr	r3, [r7, #16]
 81037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81037a8:	4613      	mov	r3, r2
 81037aa:	009b      	lsls	r3, r3, #2
 81037ac:	4413      	add	r3, r2
 81037ae:	009b      	lsls	r3, r3, #2
 81037b0:	4a09      	ldr	r2, [pc, #36]	@ (81037d8 <xTaskPriorityDisinherit+0xdc>)
 81037b2:	441a      	add	r2, r3
 81037b4:	693b      	ldr	r3, [r7, #16]
 81037b6:	3304      	adds	r3, #4
 81037b8:	4619      	mov	r1, r3
 81037ba:	4610      	mov	r0, r2
 81037bc:	f7fe f955 	bl	8101a6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81037c0:	2301      	movs	r3, #1
 81037c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81037c4:	697b      	ldr	r3, [r7, #20]
	}
 81037c6:	4618      	mov	r0, r3
 81037c8:	3718      	adds	r7, #24
 81037ca:	46bd      	mov	sp, r7
 81037cc:	bd80      	pop	{r7, pc}
 81037ce:	bf00      	nop
 81037d0:	10004490 	.word	0x10004490
 81037d4:	1000496c 	.word	0x1000496c
 81037d8:	10004494 	.word	0x10004494

081037dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81037dc:	b580      	push	{r7, lr}
 81037de:	b084      	sub	sp, #16
 81037e0:	af00      	add	r7, sp, #0
 81037e2:	6078      	str	r0, [r7, #4]
 81037e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81037e6:	4b21      	ldr	r3, [pc, #132]	@ (810386c <prvAddCurrentTaskToDelayedList+0x90>)
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81037ec:	4b20      	ldr	r3, [pc, #128]	@ (8103870 <prvAddCurrentTaskToDelayedList+0x94>)
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	3304      	adds	r3, #4
 81037f2:	4618      	mov	r0, r3
 81037f4:	f7fe f996 	bl	8101b24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81037fe:	d10a      	bne.n	8103816 <prvAddCurrentTaskToDelayedList+0x3a>
 8103800:	683b      	ldr	r3, [r7, #0]
 8103802:	2b00      	cmp	r3, #0
 8103804:	d007      	beq.n	8103816 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103806:	4b1a      	ldr	r3, [pc, #104]	@ (8103870 <prvAddCurrentTaskToDelayedList+0x94>)
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	3304      	adds	r3, #4
 810380c:	4619      	mov	r1, r3
 810380e:	4819      	ldr	r0, [pc, #100]	@ (8103874 <prvAddCurrentTaskToDelayedList+0x98>)
 8103810:	f7fe f92b 	bl	8101a6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8103814:	e026      	b.n	8103864 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8103816:	68fa      	ldr	r2, [r7, #12]
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	4413      	add	r3, r2
 810381c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810381e:	4b14      	ldr	r3, [pc, #80]	@ (8103870 <prvAddCurrentTaskToDelayedList+0x94>)
 8103820:	681b      	ldr	r3, [r3, #0]
 8103822:	68ba      	ldr	r2, [r7, #8]
 8103824:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8103826:	68ba      	ldr	r2, [r7, #8]
 8103828:	68fb      	ldr	r3, [r7, #12]
 810382a:	429a      	cmp	r2, r3
 810382c:	d209      	bcs.n	8103842 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810382e:	4b12      	ldr	r3, [pc, #72]	@ (8103878 <prvAddCurrentTaskToDelayedList+0x9c>)
 8103830:	681a      	ldr	r2, [r3, #0]
 8103832:	4b0f      	ldr	r3, [pc, #60]	@ (8103870 <prvAddCurrentTaskToDelayedList+0x94>)
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	3304      	adds	r3, #4
 8103838:	4619      	mov	r1, r3
 810383a:	4610      	mov	r0, r2
 810383c:	f7fe f939 	bl	8101ab2 <vListInsert>
}
 8103840:	e010      	b.n	8103864 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103842:	4b0e      	ldr	r3, [pc, #56]	@ (810387c <prvAddCurrentTaskToDelayedList+0xa0>)
 8103844:	681a      	ldr	r2, [r3, #0]
 8103846:	4b0a      	ldr	r3, [pc, #40]	@ (8103870 <prvAddCurrentTaskToDelayedList+0x94>)
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	3304      	adds	r3, #4
 810384c:	4619      	mov	r1, r3
 810384e:	4610      	mov	r0, r2
 8103850:	f7fe f92f 	bl	8101ab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8103854:	4b0a      	ldr	r3, [pc, #40]	@ (8103880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	68ba      	ldr	r2, [r7, #8]
 810385a:	429a      	cmp	r2, r3
 810385c:	d202      	bcs.n	8103864 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810385e:	4a08      	ldr	r2, [pc, #32]	@ (8103880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8103860:	68bb      	ldr	r3, [r7, #8]
 8103862:	6013      	str	r3, [r2, #0]
}
 8103864:	bf00      	nop
 8103866:	3710      	adds	r7, #16
 8103868:	46bd      	mov	sp, r7
 810386a:	bd80      	pop	{r7, pc}
 810386c:	10004968 	.word	0x10004968
 8103870:	10004490 	.word	0x10004490
 8103874:	10004950 	.word	0x10004950
 8103878:	10004920 	.word	0x10004920
 810387c:	1000491c 	.word	0x1000491c
 8103880:	10004984 	.word	0x10004984

08103884 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8103884:	b580      	push	{r7, lr}
 8103886:	b08a      	sub	sp, #40	@ 0x28
 8103888:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810388a:	2300      	movs	r3, #0
 810388c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810388e:	f000 fb13 	bl	8103eb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8103892:	4b1d      	ldr	r3, [pc, #116]	@ (8103908 <xTimerCreateTimerTask+0x84>)
 8103894:	681b      	ldr	r3, [r3, #0]
 8103896:	2b00      	cmp	r3, #0
 8103898:	d021      	beq.n	81038de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810389a:	2300      	movs	r3, #0
 810389c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810389e:	2300      	movs	r3, #0
 81038a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81038a2:	1d3a      	adds	r2, r7, #4
 81038a4:	f107 0108 	add.w	r1, r7, #8
 81038a8:	f107 030c 	add.w	r3, r7, #12
 81038ac:	4618      	mov	r0, r3
 81038ae:	f7fd fea7 	bl	8101600 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81038b2:	6879      	ldr	r1, [r7, #4]
 81038b4:	68bb      	ldr	r3, [r7, #8]
 81038b6:	68fa      	ldr	r2, [r7, #12]
 81038b8:	9202      	str	r2, [sp, #8]
 81038ba:	9301      	str	r3, [sp, #4]
 81038bc:	2302      	movs	r3, #2
 81038be:	9300      	str	r3, [sp, #0]
 81038c0:	2300      	movs	r3, #0
 81038c2:	460a      	mov	r2, r1
 81038c4:	4911      	ldr	r1, [pc, #68]	@ (810390c <xTimerCreateTimerTask+0x88>)
 81038c6:	4812      	ldr	r0, [pc, #72]	@ (8103910 <xTimerCreateTimerTask+0x8c>)
 81038c8:	f7ff f8a2 	bl	8102a10 <xTaskCreateStatic>
 81038cc:	4603      	mov	r3, r0
 81038ce:	4a11      	ldr	r2, [pc, #68]	@ (8103914 <xTimerCreateTimerTask+0x90>)
 81038d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81038d2:	4b10      	ldr	r3, [pc, #64]	@ (8103914 <xTimerCreateTimerTask+0x90>)
 81038d4:	681b      	ldr	r3, [r3, #0]
 81038d6:	2b00      	cmp	r3, #0
 81038d8:	d001      	beq.n	81038de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81038da:	2301      	movs	r3, #1
 81038dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81038de:	697b      	ldr	r3, [r7, #20]
 81038e0:	2b00      	cmp	r3, #0
 81038e2:	d10b      	bne.n	81038fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 81038e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81038e8:	f383 8811 	msr	BASEPRI, r3
 81038ec:	f3bf 8f6f 	isb	sy
 81038f0:	f3bf 8f4f 	dsb	sy
 81038f4:	613b      	str	r3, [r7, #16]
}
 81038f6:	bf00      	nop
 81038f8:	bf00      	nop
 81038fa:	e7fd      	b.n	81038f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 81038fc:	697b      	ldr	r3, [r7, #20]
}
 81038fe:	4618      	mov	r0, r3
 8103900:	3718      	adds	r7, #24
 8103902:	46bd      	mov	sp, r7
 8103904:	bd80      	pop	{r7, pc}
 8103906:	bf00      	nop
 8103908:	100049c0 	.word	0x100049c0
 810390c:	08104134 	.word	0x08104134
 8103910:	08103a51 	.word	0x08103a51
 8103914:	100049c4 	.word	0x100049c4

08103918 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8103918:	b580      	push	{r7, lr}
 810391a:	b08a      	sub	sp, #40	@ 0x28
 810391c:	af00      	add	r7, sp, #0
 810391e:	60f8      	str	r0, [r7, #12]
 8103920:	60b9      	str	r1, [r7, #8]
 8103922:	607a      	str	r2, [r7, #4]
 8103924:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8103926:	2300      	movs	r3, #0
 8103928:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810392a:	68fb      	ldr	r3, [r7, #12]
 810392c:	2b00      	cmp	r3, #0
 810392e:	d10b      	bne.n	8103948 <xTimerGenericCommand+0x30>
	__asm volatile
 8103930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103934:	f383 8811 	msr	BASEPRI, r3
 8103938:	f3bf 8f6f 	isb	sy
 810393c:	f3bf 8f4f 	dsb	sy
 8103940:	623b      	str	r3, [r7, #32]
}
 8103942:	bf00      	nop
 8103944:	bf00      	nop
 8103946:	e7fd      	b.n	8103944 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8103948:	4b19      	ldr	r3, [pc, #100]	@ (81039b0 <xTimerGenericCommand+0x98>)
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	2b00      	cmp	r3, #0
 810394e:	d02a      	beq.n	81039a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8103950:	68bb      	ldr	r3, [r7, #8]
 8103952:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8103958:	68fb      	ldr	r3, [r7, #12]
 810395a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810395c:	68bb      	ldr	r3, [r7, #8]
 810395e:	2b05      	cmp	r3, #5
 8103960:	dc18      	bgt.n	8103994 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8103962:	f7ff fead 	bl	81036c0 <xTaskGetSchedulerState>
 8103966:	4603      	mov	r3, r0
 8103968:	2b02      	cmp	r3, #2
 810396a:	d109      	bne.n	8103980 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810396c:	4b10      	ldr	r3, [pc, #64]	@ (81039b0 <xTimerGenericCommand+0x98>)
 810396e:	6818      	ldr	r0, [r3, #0]
 8103970:	f107 0110 	add.w	r1, r7, #16
 8103974:	2300      	movs	r3, #0
 8103976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103978:	f7fe fc5a 	bl	8102230 <xQueueGenericSend>
 810397c:	6278      	str	r0, [r7, #36]	@ 0x24
 810397e:	e012      	b.n	81039a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8103980:	4b0b      	ldr	r3, [pc, #44]	@ (81039b0 <xTimerGenericCommand+0x98>)
 8103982:	6818      	ldr	r0, [r3, #0]
 8103984:	f107 0110 	add.w	r1, r7, #16
 8103988:	2300      	movs	r3, #0
 810398a:	2200      	movs	r2, #0
 810398c:	f7fe fc50 	bl	8102230 <xQueueGenericSend>
 8103990:	6278      	str	r0, [r7, #36]	@ 0x24
 8103992:	e008      	b.n	81039a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8103994:	4b06      	ldr	r3, [pc, #24]	@ (81039b0 <xTimerGenericCommand+0x98>)
 8103996:	6818      	ldr	r0, [r3, #0]
 8103998:	f107 0110 	add.w	r1, r7, #16
 810399c:	2300      	movs	r3, #0
 810399e:	683a      	ldr	r2, [r7, #0]
 81039a0:	f7fe fd48 	bl	8102434 <xQueueGenericSendFromISR>
 81039a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81039a8:	4618      	mov	r0, r3
 81039aa:	3728      	adds	r7, #40	@ 0x28
 81039ac:	46bd      	mov	sp, r7
 81039ae:	bd80      	pop	{r7, pc}
 81039b0:	100049c0 	.word	0x100049c0

081039b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81039b4:	b580      	push	{r7, lr}
 81039b6:	b088      	sub	sp, #32
 81039b8:	af02      	add	r7, sp, #8
 81039ba:	6078      	str	r0, [r7, #4]
 81039bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81039be:	4b23      	ldr	r3, [pc, #140]	@ (8103a4c <prvProcessExpiredTimer+0x98>)
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	68db      	ldr	r3, [r3, #12]
 81039c4:	68db      	ldr	r3, [r3, #12]
 81039c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81039c8:	697b      	ldr	r3, [r7, #20]
 81039ca:	3304      	adds	r3, #4
 81039cc:	4618      	mov	r0, r3
 81039ce:	f7fe f8a9 	bl	8101b24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81039d2:	697b      	ldr	r3, [r7, #20]
 81039d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81039d8:	f003 0304 	and.w	r3, r3, #4
 81039dc:	2b00      	cmp	r3, #0
 81039de:	d023      	beq.n	8103a28 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81039e0:	697b      	ldr	r3, [r7, #20]
 81039e2:	699a      	ldr	r2, [r3, #24]
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	18d1      	adds	r1, r2, r3
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	683a      	ldr	r2, [r7, #0]
 81039ec:	6978      	ldr	r0, [r7, #20]
 81039ee:	f000 f8d5 	bl	8103b9c <prvInsertTimerInActiveList>
 81039f2:	4603      	mov	r3, r0
 81039f4:	2b00      	cmp	r3, #0
 81039f6:	d020      	beq.n	8103a3a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81039f8:	2300      	movs	r3, #0
 81039fa:	9300      	str	r3, [sp, #0]
 81039fc:	2300      	movs	r3, #0
 81039fe:	687a      	ldr	r2, [r7, #4]
 8103a00:	2100      	movs	r1, #0
 8103a02:	6978      	ldr	r0, [r7, #20]
 8103a04:	f7ff ff88 	bl	8103918 <xTimerGenericCommand>
 8103a08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8103a0a:	693b      	ldr	r3, [r7, #16]
 8103a0c:	2b00      	cmp	r3, #0
 8103a0e:	d114      	bne.n	8103a3a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8103a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103a14:	f383 8811 	msr	BASEPRI, r3
 8103a18:	f3bf 8f6f 	isb	sy
 8103a1c:	f3bf 8f4f 	dsb	sy
 8103a20:	60fb      	str	r3, [r7, #12]
}
 8103a22:	bf00      	nop
 8103a24:	bf00      	nop
 8103a26:	e7fd      	b.n	8103a24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103a28:	697b      	ldr	r3, [r7, #20]
 8103a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103a2e:	f023 0301 	bic.w	r3, r3, #1
 8103a32:	b2da      	uxtb	r2, r3
 8103a34:	697b      	ldr	r3, [r7, #20]
 8103a36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103a3a:	697b      	ldr	r3, [r7, #20]
 8103a3c:	6a1b      	ldr	r3, [r3, #32]
 8103a3e:	6978      	ldr	r0, [r7, #20]
 8103a40:	4798      	blx	r3
}
 8103a42:	bf00      	nop
 8103a44:	3718      	adds	r7, #24
 8103a46:	46bd      	mov	sp, r7
 8103a48:	bd80      	pop	{r7, pc}
 8103a4a:	bf00      	nop
 8103a4c:	100049b8 	.word	0x100049b8

08103a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8103a50:	b580      	push	{r7, lr}
 8103a52:	b084      	sub	sp, #16
 8103a54:	af00      	add	r7, sp, #0
 8103a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103a58:	f107 0308 	add.w	r3, r7, #8
 8103a5c:	4618      	mov	r0, r3
 8103a5e:	f000 f859 	bl	8103b14 <prvGetNextExpireTime>
 8103a62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8103a64:	68bb      	ldr	r3, [r7, #8]
 8103a66:	4619      	mov	r1, r3
 8103a68:	68f8      	ldr	r0, [r7, #12]
 8103a6a:	f000 f805 	bl	8103a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8103a6e:	f000 f8d7 	bl	8103c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103a72:	bf00      	nop
 8103a74:	e7f0      	b.n	8103a58 <prvTimerTask+0x8>
	...

08103a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8103a78:	b580      	push	{r7, lr}
 8103a7a:	b084      	sub	sp, #16
 8103a7c:	af00      	add	r7, sp, #0
 8103a7e:	6078      	str	r0, [r7, #4]
 8103a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8103a82:	f7ff fa29 	bl	8102ed8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103a86:	f107 0308 	add.w	r3, r7, #8
 8103a8a:	4618      	mov	r0, r3
 8103a8c:	f000 f866 	bl	8103b5c <prvSampleTimeNow>
 8103a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8103a92:	68bb      	ldr	r3, [r7, #8]
 8103a94:	2b00      	cmp	r3, #0
 8103a96:	d130      	bne.n	8103afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8103a98:	683b      	ldr	r3, [r7, #0]
 8103a9a:	2b00      	cmp	r3, #0
 8103a9c:	d10a      	bne.n	8103ab4 <prvProcessTimerOrBlockTask+0x3c>
 8103a9e:	687a      	ldr	r2, [r7, #4]
 8103aa0:	68fb      	ldr	r3, [r7, #12]
 8103aa2:	429a      	cmp	r2, r3
 8103aa4:	d806      	bhi.n	8103ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8103aa6:	f7ff fa25 	bl	8102ef4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8103aaa:	68f9      	ldr	r1, [r7, #12]
 8103aac:	6878      	ldr	r0, [r7, #4]
 8103aae:	f7ff ff81 	bl	81039b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8103ab2:	e024      	b.n	8103afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8103ab4:	683b      	ldr	r3, [r7, #0]
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d008      	beq.n	8103acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8103aba:	4b13      	ldr	r3, [pc, #76]	@ (8103b08 <prvProcessTimerOrBlockTask+0x90>)
 8103abc:	681b      	ldr	r3, [r3, #0]
 8103abe:	681b      	ldr	r3, [r3, #0]
 8103ac0:	2b00      	cmp	r3, #0
 8103ac2:	d101      	bne.n	8103ac8 <prvProcessTimerOrBlockTask+0x50>
 8103ac4:	2301      	movs	r3, #1
 8103ac6:	e000      	b.n	8103aca <prvProcessTimerOrBlockTask+0x52>
 8103ac8:	2300      	movs	r3, #0
 8103aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8103acc:	4b0f      	ldr	r3, [pc, #60]	@ (8103b0c <prvProcessTimerOrBlockTask+0x94>)
 8103ace:	6818      	ldr	r0, [r3, #0]
 8103ad0:	687a      	ldr	r2, [r7, #4]
 8103ad2:	68fb      	ldr	r3, [r7, #12]
 8103ad4:	1ad3      	subs	r3, r2, r3
 8103ad6:	683a      	ldr	r2, [r7, #0]
 8103ad8:	4619      	mov	r1, r3
 8103ada:	f7fe ff65 	bl	81029a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8103ade:	f7ff fa09 	bl	8102ef4 <xTaskResumeAll>
 8103ae2:	4603      	mov	r3, r0
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d10a      	bne.n	8103afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8103ae8:	4b09      	ldr	r3, [pc, #36]	@ (8103b10 <prvProcessTimerOrBlockTask+0x98>)
 8103aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103aee:	601a      	str	r2, [r3, #0]
 8103af0:	f3bf 8f4f 	dsb	sy
 8103af4:	f3bf 8f6f 	isb	sy
}
 8103af8:	e001      	b.n	8103afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8103afa:	f7ff f9fb 	bl	8102ef4 <xTaskResumeAll>
}
 8103afe:	bf00      	nop
 8103b00:	3710      	adds	r7, #16
 8103b02:	46bd      	mov	sp, r7
 8103b04:	bd80      	pop	{r7, pc}
 8103b06:	bf00      	nop
 8103b08:	100049bc 	.word	0x100049bc
 8103b0c:	100049c0 	.word	0x100049c0
 8103b10:	e000ed04 	.word	0xe000ed04

08103b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8103b14:	b480      	push	{r7}
 8103b16:	b085      	sub	sp, #20
 8103b18:	af00      	add	r7, sp, #0
 8103b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8103b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8103b58 <prvGetNextExpireTime+0x44>)
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d101      	bne.n	8103b2a <prvGetNextExpireTime+0x16>
 8103b26:	2201      	movs	r2, #1
 8103b28:	e000      	b.n	8103b2c <prvGetNextExpireTime+0x18>
 8103b2a:	2200      	movs	r2, #0
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	681b      	ldr	r3, [r3, #0]
 8103b34:	2b00      	cmp	r3, #0
 8103b36:	d105      	bne.n	8103b44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8103b38:	4b07      	ldr	r3, [pc, #28]	@ (8103b58 <prvGetNextExpireTime+0x44>)
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	68db      	ldr	r3, [r3, #12]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	60fb      	str	r3, [r7, #12]
 8103b42:	e001      	b.n	8103b48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8103b44:	2300      	movs	r3, #0
 8103b46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8103b48:	68fb      	ldr	r3, [r7, #12]
}
 8103b4a:	4618      	mov	r0, r3
 8103b4c:	3714      	adds	r7, #20
 8103b4e:	46bd      	mov	sp, r7
 8103b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b54:	4770      	bx	lr
 8103b56:	bf00      	nop
 8103b58:	100049b8 	.word	0x100049b8

08103b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8103b5c:	b580      	push	{r7, lr}
 8103b5e:	b084      	sub	sp, #16
 8103b60:	af00      	add	r7, sp, #0
 8103b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8103b64:	f7ff fa64 	bl	8103030 <xTaskGetTickCount>
 8103b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8103b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8103b98 <prvSampleTimeNow+0x3c>)
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	68fa      	ldr	r2, [r7, #12]
 8103b70:	429a      	cmp	r2, r3
 8103b72:	d205      	bcs.n	8103b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8103b74:	f000 f93a 	bl	8103dec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	2201      	movs	r2, #1
 8103b7c:	601a      	str	r2, [r3, #0]
 8103b7e:	e002      	b.n	8103b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	2200      	movs	r2, #0
 8103b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8103b86:	4a04      	ldr	r2, [pc, #16]	@ (8103b98 <prvSampleTimeNow+0x3c>)
 8103b88:	68fb      	ldr	r3, [r7, #12]
 8103b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8103b8c:	68fb      	ldr	r3, [r7, #12]
}
 8103b8e:	4618      	mov	r0, r3
 8103b90:	3710      	adds	r7, #16
 8103b92:	46bd      	mov	sp, r7
 8103b94:	bd80      	pop	{r7, pc}
 8103b96:	bf00      	nop
 8103b98:	100049c8 	.word	0x100049c8

08103b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8103b9c:	b580      	push	{r7, lr}
 8103b9e:	b086      	sub	sp, #24
 8103ba0:	af00      	add	r7, sp, #0
 8103ba2:	60f8      	str	r0, [r7, #12]
 8103ba4:	60b9      	str	r1, [r7, #8]
 8103ba6:	607a      	str	r2, [r7, #4]
 8103ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8103baa:	2300      	movs	r3, #0
 8103bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8103bae:	68fb      	ldr	r3, [r7, #12]
 8103bb0:	68ba      	ldr	r2, [r7, #8]
 8103bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103bb4:	68fb      	ldr	r3, [r7, #12]
 8103bb6:	68fa      	ldr	r2, [r7, #12]
 8103bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8103bba:	68ba      	ldr	r2, [r7, #8]
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	429a      	cmp	r2, r3
 8103bc0:	d812      	bhi.n	8103be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103bc2:	687a      	ldr	r2, [r7, #4]
 8103bc4:	683b      	ldr	r3, [r7, #0]
 8103bc6:	1ad2      	subs	r2, r2, r3
 8103bc8:	68fb      	ldr	r3, [r7, #12]
 8103bca:	699b      	ldr	r3, [r3, #24]
 8103bcc:	429a      	cmp	r2, r3
 8103bce:	d302      	bcc.n	8103bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8103bd0:	2301      	movs	r3, #1
 8103bd2:	617b      	str	r3, [r7, #20]
 8103bd4:	e01b      	b.n	8103c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8103bd6:	4b10      	ldr	r3, [pc, #64]	@ (8103c18 <prvInsertTimerInActiveList+0x7c>)
 8103bd8:	681a      	ldr	r2, [r3, #0]
 8103bda:	68fb      	ldr	r3, [r7, #12]
 8103bdc:	3304      	adds	r3, #4
 8103bde:	4619      	mov	r1, r3
 8103be0:	4610      	mov	r0, r2
 8103be2:	f7fd ff66 	bl	8101ab2 <vListInsert>
 8103be6:	e012      	b.n	8103c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8103be8:	687a      	ldr	r2, [r7, #4]
 8103bea:	683b      	ldr	r3, [r7, #0]
 8103bec:	429a      	cmp	r2, r3
 8103bee:	d206      	bcs.n	8103bfe <prvInsertTimerInActiveList+0x62>
 8103bf0:	68ba      	ldr	r2, [r7, #8]
 8103bf2:	683b      	ldr	r3, [r7, #0]
 8103bf4:	429a      	cmp	r2, r3
 8103bf6:	d302      	bcc.n	8103bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8103bf8:	2301      	movs	r3, #1
 8103bfa:	617b      	str	r3, [r7, #20]
 8103bfc:	e007      	b.n	8103c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8103bfe:	4b07      	ldr	r3, [pc, #28]	@ (8103c1c <prvInsertTimerInActiveList+0x80>)
 8103c00:	681a      	ldr	r2, [r3, #0]
 8103c02:	68fb      	ldr	r3, [r7, #12]
 8103c04:	3304      	adds	r3, #4
 8103c06:	4619      	mov	r1, r3
 8103c08:	4610      	mov	r0, r2
 8103c0a:	f7fd ff52 	bl	8101ab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8103c0e:	697b      	ldr	r3, [r7, #20]
}
 8103c10:	4618      	mov	r0, r3
 8103c12:	3718      	adds	r7, #24
 8103c14:	46bd      	mov	sp, r7
 8103c16:	bd80      	pop	{r7, pc}
 8103c18:	100049bc 	.word	0x100049bc
 8103c1c:	100049b8 	.word	0x100049b8

08103c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8103c20:	b580      	push	{r7, lr}
 8103c22:	b08e      	sub	sp, #56	@ 0x38
 8103c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8103c26:	e0ce      	b.n	8103dc6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	2b00      	cmp	r3, #0
 8103c2c:	da19      	bge.n	8103c62 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8103c2e:	1d3b      	adds	r3, r7, #4
 8103c30:	3304      	adds	r3, #4
 8103c32:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8103c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	d10b      	bne.n	8103c52 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8103c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103c3e:	f383 8811 	msr	BASEPRI, r3
 8103c42:	f3bf 8f6f 	isb	sy
 8103c46:	f3bf 8f4f 	dsb	sy
 8103c4a:	61fb      	str	r3, [r7, #28]
}
 8103c4c:	bf00      	nop
 8103c4e:	bf00      	nop
 8103c50:	e7fd      	b.n	8103c4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8103c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103c58:	6850      	ldr	r0, [r2, #4]
 8103c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103c5c:	6892      	ldr	r2, [r2, #8]
 8103c5e:	4611      	mov	r1, r2
 8103c60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	2b00      	cmp	r3, #0
 8103c66:	f2c0 80ae 	blt.w	8103dc6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8103c6a:	68fb      	ldr	r3, [r7, #12]
 8103c6c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8103c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103c70:	695b      	ldr	r3, [r3, #20]
 8103c72:	2b00      	cmp	r3, #0
 8103c74:	d004      	beq.n	8103c80 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103c78:	3304      	adds	r3, #4
 8103c7a:	4618      	mov	r0, r3
 8103c7c:	f7fd ff52 	bl	8101b24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103c80:	463b      	mov	r3, r7
 8103c82:	4618      	mov	r0, r3
 8103c84:	f7ff ff6a 	bl	8103b5c <prvSampleTimeNow>
 8103c88:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	2b09      	cmp	r3, #9
 8103c8e:	f200 8097 	bhi.w	8103dc0 <prvProcessReceivedCommands+0x1a0>
 8103c92:	a201      	add	r2, pc, #4	@ (adr r2, 8103c98 <prvProcessReceivedCommands+0x78>)
 8103c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c98:	08103cc1 	.word	0x08103cc1
 8103c9c:	08103cc1 	.word	0x08103cc1
 8103ca0:	08103cc1 	.word	0x08103cc1
 8103ca4:	08103d37 	.word	0x08103d37
 8103ca8:	08103d4b 	.word	0x08103d4b
 8103cac:	08103d97 	.word	0x08103d97
 8103cb0:	08103cc1 	.word	0x08103cc1
 8103cb4:	08103cc1 	.word	0x08103cc1
 8103cb8:	08103d37 	.word	0x08103d37
 8103cbc:	08103d4b 	.word	0x08103d4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8103cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103cc6:	f043 0301 	orr.w	r3, r3, #1
 8103cca:	b2da      	uxtb	r2, r3
 8103ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8103cd2:	68ba      	ldr	r2, [r7, #8]
 8103cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103cd6:	699b      	ldr	r3, [r3, #24]
 8103cd8:	18d1      	adds	r1, r2, r3
 8103cda:	68bb      	ldr	r3, [r7, #8]
 8103cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103ce0:	f7ff ff5c 	bl	8103b9c <prvInsertTimerInActiveList>
 8103ce4:	4603      	mov	r3, r0
 8103ce6:	2b00      	cmp	r3, #0
 8103ce8:	d06c      	beq.n	8103dc4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103cec:	6a1b      	ldr	r3, [r3, #32]
 8103cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103cf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103cf8:	f003 0304 	and.w	r3, r3, #4
 8103cfc:	2b00      	cmp	r3, #0
 8103cfe:	d061      	beq.n	8103dc4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8103d00:	68ba      	ldr	r2, [r7, #8]
 8103d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d04:	699b      	ldr	r3, [r3, #24]
 8103d06:	441a      	add	r2, r3
 8103d08:	2300      	movs	r3, #0
 8103d0a:	9300      	str	r3, [sp, #0]
 8103d0c:	2300      	movs	r3, #0
 8103d0e:	2100      	movs	r1, #0
 8103d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103d12:	f7ff fe01 	bl	8103918 <xTimerGenericCommand>
 8103d16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8103d18:	6a3b      	ldr	r3, [r7, #32]
 8103d1a:	2b00      	cmp	r3, #0
 8103d1c:	d152      	bne.n	8103dc4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8103d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103d22:	f383 8811 	msr	BASEPRI, r3
 8103d26:	f3bf 8f6f 	isb	sy
 8103d2a:	f3bf 8f4f 	dsb	sy
 8103d2e:	61bb      	str	r3, [r7, #24]
}
 8103d30:	bf00      	nop
 8103d32:	bf00      	nop
 8103d34:	e7fd      	b.n	8103d32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103d3c:	f023 0301 	bic.w	r3, r3, #1
 8103d40:	b2da      	uxtb	r2, r3
 8103d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8103d48:	e03d      	b.n	8103dc6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8103d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103d50:	f043 0301 	orr.w	r3, r3, #1
 8103d54:	b2da      	uxtb	r2, r3
 8103d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8103d5c:	68ba      	ldr	r2, [r7, #8]
 8103d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8103d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d64:	699b      	ldr	r3, [r3, #24]
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d10b      	bne.n	8103d82 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8103d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103d6e:	f383 8811 	msr	BASEPRI, r3
 8103d72:	f3bf 8f6f 	isb	sy
 8103d76:	f3bf 8f4f 	dsb	sy
 8103d7a:	617b      	str	r3, [r7, #20]
}
 8103d7c:	bf00      	nop
 8103d7e:	bf00      	nop
 8103d80:	e7fd      	b.n	8103d7e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8103d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d84:	699a      	ldr	r2, [r3, #24]
 8103d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103d88:	18d1      	adds	r1, r2, r3
 8103d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103d90:	f7ff ff04 	bl	8103b9c <prvInsertTimerInActiveList>
					break;
 8103d94:	e017      	b.n	8103dc6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8103d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103d9c:	f003 0302 	and.w	r3, r3, #2
 8103da0:	2b00      	cmp	r3, #0
 8103da2:	d103      	bne.n	8103dac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8103da4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103da6:	f7fd fd13 	bl	81017d0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8103daa:	e00c      	b.n	8103dc6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103dae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103db2:	f023 0301 	bic.w	r3, r3, #1
 8103db6:	b2da      	uxtb	r2, r3
 8103db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103dba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8103dbe:	e002      	b.n	8103dc6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8103dc0:	bf00      	nop
 8103dc2:	e000      	b.n	8103dc6 <prvProcessReceivedCommands+0x1a6>
					break;
 8103dc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8103dc6:	4b08      	ldr	r3, [pc, #32]	@ (8103de8 <prvProcessReceivedCommands+0x1c8>)
 8103dc8:	681b      	ldr	r3, [r3, #0]
 8103dca:	1d39      	adds	r1, r7, #4
 8103dcc:	2200      	movs	r2, #0
 8103dce:	4618      	mov	r0, r3
 8103dd0:	f7fe fbce 	bl	8102570 <xQueueReceive>
 8103dd4:	4603      	mov	r3, r0
 8103dd6:	2b00      	cmp	r3, #0
 8103dd8:	f47f af26 	bne.w	8103c28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8103ddc:	bf00      	nop
 8103dde:	bf00      	nop
 8103de0:	3730      	adds	r7, #48	@ 0x30
 8103de2:	46bd      	mov	sp, r7
 8103de4:	bd80      	pop	{r7, pc}
 8103de6:	bf00      	nop
 8103de8:	100049c0 	.word	0x100049c0

08103dec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8103dec:	b580      	push	{r7, lr}
 8103dee:	b088      	sub	sp, #32
 8103df0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8103df2:	e049      	b.n	8103e88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8103df4:	4b2e      	ldr	r3, [pc, #184]	@ (8103eb0 <prvSwitchTimerLists+0xc4>)
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	68db      	ldr	r3, [r3, #12]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8103eb0 <prvSwitchTimerLists+0xc4>)
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	68db      	ldr	r3, [r3, #12]
 8103e04:	68db      	ldr	r3, [r3, #12]
 8103e06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103e08:	68fb      	ldr	r3, [r7, #12]
 8103e0a:	3304      	adds	r3, #4
 8103e0c:	4618      	mov	r0, r3
 8103e0e:	f7fd fe89 	bl	8101b24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	6a1b      	ldr	r3, [r3, #32]
 8103e16:	68f8      	ldr	r0, [r7, #12]
 8103e18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103e1a:	68fb      	ldr	r3, [r7, #12]
 8103e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103e20:	f003 0304 	and.w	r3, r3, #4
 8103e24:	2b00      	cmp	r3, #0
 8103e26:	d02f      	beq.n	8103e88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8103e28:	68fb      	ldr	r3, [r7, #12]
 8103e2a:	699b      	ldr	r3, [r3, #24]
 8103e2c:	693a      	ldr	r2, [r7, #16]
 8103e2e:	4413      	add	r3, r2
 8103e30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8103e32:	68ba      	ldr	r2, [r7, #8]
 8103e34:	693b      	ldr	r3, [r7, #16]
 8103e36:	429a      	cmp	r2, r3
 8103e38:	d90e      	bls.n	8103e58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	68ba      	ldr	r2, [r7, #8]
 8103e3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103e40:	68fb      	ldr	r3, [r7, #12]
 8103e42:	68fa      	ldr	r2, [r7, #12]
 8103e44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8103e46:	4b1a      	ldr	r3, [pc, #104]	@ (8103eb0 <prvSwitchTimerLists+0xc4>)
 8103e48:	681a      	ldr	r2, [r3, #0]
 8103e4a:	68fb      	ldr	r3, [r7, #12]
 8103e4c:	3304      	adds	r3, #4
 8103e4e:	4619      	mov	r1, r3
 8103e50:	4610      	mov	r0, r2
 8103e52:	f7fd fe2e 	bl	8101ab2 <vListInsert>
 8103e56:	e017      	b.n	8103e88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8103e58:	2300      	movs	r3, #0
 8103e5a:	9300      	str	r3, [sp, #0]
 8103e5c:	2300      	movs	r3, #0
 8103e5e:	693a      	ldr	r2, [r7, #16]
 8103e60:	2100      	movs	r1, #0
 8103e62:	68f8      	ldr	r0, [r7, #12]
 8103e64:	f7ff fd58 	bl	8103918 <xTimerGenericCommand>
 8103e68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	2b00      	cmp	r3, #0
 8103e6e:	d10b      	bne.n	8103e88 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8103e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103e74:	f383 8811 	msr	BASEPRI, r3
 8103e78:	f3bf 8f6f 	isb	sy
 8103e7c:	f3bf 8f4f 	dsb	sy
 8103e80:	603b      	str	r3, [r7, #0]
}
 8103e82:	bf00      	nop
 8103e84:	bf00      	nop
 8103e86:	e7fd      	b.n	8103e84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8103e88:	4b09      	ldr	r3, [pc, #36]	@ (8103eb0 <prvSwitchTimerLists+0xc4>)
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	2b00      	cmp	r3, #0
 8103e90:	d1b0      	bne.n	8103df4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8103e92:	4b07      	ldr	r3, [pc, #28]	@ (8103eb0 <prvSwitchTimerLists+0xc4>)
 8103e94:	681b      	ldr	r3, [r3, #0]
 8103e96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8103e98:	4b06      	ldr	r3, [pc, #24]	@ (8103eb4 <prvSwitchTimerLists+0xc8>)
 8103e9a:	681b      	ldr	r3, [r3, #0]
 8103e9c:	4a04      	ldr	r2, [pc, #16]	@ (8103eb0 <prvSwitchTimerLists+0xc4>)
 8103e9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8103ea0:	4a04      	ldr	r2, [pc, #16]	@ (8103eb4 <prvSwitchTimerLists+0xc8>)
 8103ea2:	697b      	ldr	r3, [r7, #20]
 8103ea4:	6013      	str	r3, [r2, #0]
}
 8103ea6:	bf00      	nop
 8103ea8:	3718      	adds	r7, #24
 8103eaa:	46bd      	mov	sp, r7
 8103eac:	bd80      	pop	{r7, pc}
 8103eae:	bf00      	nop
 8103eb0:	100049b8 	.word	0x100049b8
 8103eb4:	100049bc 	.word	0x100049bc

08103eb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8103eb8:	b580      	push	{r7, lr}
 8103eba:	b082      	sub	sp, #8
 8103ebc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8103ebe:	f7fd ff8b 	bl	8101dd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8103ec2:	4b15      	ldr	r3, [pc, #84]	@ (8103f18 <prvCheckForValidListAndQueue+0x60>)
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	2b00      	cmp	r3, #0
 8103ec8:	d120      	bne.n	8103f0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8103eca:	4814      	ldr	r0, [pc, #80]	@ (8103f1c <prvCheckForValidListAndQueue+0x64>)
 8103ecc:	f7fd fda0 	bl	8101a10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8103ed0:	4813      	ldr	r0, [pc, #76]	@ (8103f20 <prvCheckForValidListAndQueue+0x68>)
 8103ed2:	f7fd fd9d 	bl	8101a10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8103ed6:	4b13      	ldr	r3, [pc, #76]	@ (8103f24 <prvCheckForValidListAndQueue+0x6c>)
 8103ed8:	4a10      	ldr	r2, [pc, #64]	@ (8103f1c <prvCheckForValidListAndQueue+0x64>)
 8103eda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8103edc:	4b12      	ldr	r3, [pc, #72]	@ (8103f28 <prvCheckForValidListAndQueue+0x70>)
 8103ede:	4a10      	ldr	r2, [pc, #64]	@ (8103f20 <prvCheckForValidListAndQueue+0x68>)
 8103ee0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8103ee2:	2300      	movs	r3, #0
 8103ee4:	9300      	str	r3, [sp, #0]
 8103ee6:	4b11      	ldr	r3, [pc, #68]	@ (8103f2c <prvCheckForValidListAndQueue+0x74>)
 8103ee8:	4a11      	ldr	r2, [pc, #68]	@ (8103f30 <prvCheckForValidListAndQueue+0x78>)
 8103eea:	2110      	movs	r1, #16
 8103eec:	200a      	movs	r0, #10
 8103eee:	f7fe f8ff 	bl	81020f0 <xQueueGenericCreateStatic>
 8103ef2:	4603      	mov	r3, r0
 8103ef4:	4a08      	ldr	r2, [pc, #32]	@ (8103f18 <prvCheckForValidListAndQueue+0x60>)
 8103ef6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8103ef8:	4b07      	ldr	r3, [pc, #28]	@ (8103f18 <prvCheckForValidListAndQueue+0x60>)
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	2b00      	cmp	r3, #0
 8103efe:	d005      	beq.n	8103f0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8103f00:	4b05      	ldr	r3, [pc, #20]	@ (8103f18 <prvCheckForValidListAndQueue+0x60>)
 8103f02:	681b      	ldr	r3, [r3, #0]
 8103f04:	490b      	ldr	r1, [pc, #44]	@ (8103f34 <prvCheckForValidListAndQueue+0x7c>)
 8103f06:	4618      	mov	r0, r3
 8103f08:	f7fe fd24 	bl	8102954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8103f0c:	f7fd ff96 	bl	8101e3c <vPortExitCritical>
}
 8103f10:	bf00      	nop
 8103f12:	46bd      	mov	sp, r7
 8103f14:	bd80      	pop	{r7, pc}
 8103f16:	bf00      	nop
 8103f18:	100049c0 	.word	0x100049c0
 8103f1c:	10004990 	.word	0x10004990
 8103f20:	100049a4 	.word	0x100049a4
 8103f24:	100049b8 	.word	0x100049b8
 8103f28:	100049bc 	.word	0x100049bc
 8103f2c:	10004a6c 	.word	0x10004a6c
 8103f30:	100049cc 	.word	0x100049cc
 8103f34:	0810413c 	.word	0x0810413c

08103f38 <memset>:
 8103f38:	4402      	add	r2, r0
 8103f3a:	4603      	mov	r3, r0
 8103f3c:	4293      	cmp	r3, r2
 8103f3e:	d100      	bne.n	8103f42 <memset+0xa>
 8103f40:	4770      	bx	lr
 8103f42:	f803 1b01 	strb.w	r1, [r3], #1
 8103f46:	e7f9      	b.n	8103f3c <memset+0x4>

08103f48 <_reclaim_reent>:
 8103f48:	4b29      	ldr	r3, [pc, #164]	@ (8103ff0 <_reclaim_reent+0xa8>)
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	4283      	cmp	r3, r0
 8103f4e:	b570      	push	{r4, r5, r6, lr}
 8103f50:	4604      	mov	r4, r0
 8103f52:	d04b      	beq.n	8103fec <_reclaim_reent+0xa4>
 8103f54:	69c3      	ldr	r3, [r0, #28]
 8103f56:	b1ab      	cbz	r3, 8103f84 <_reclaim_reent+0x3c>
 8103f58:	68db      	ldr	r3, [r3, #12]
 8103f5a:	b16b      	cbz	r3, 8103f78 <_reclaim_reent+0x30>
 8103f5c:	2500      	movs	r5, #0
 8103f5e:	69e3      	ldr	r3, [r4, #28]
 8103f60:	68db      	ldr	r3, [r3, #12]
 8103f62:	5959      	ldr	r1, [r3, r5]
 8103f64:	2900      	cmp	r1, #0
 8103f66:	d13b      	bne.n	8103fe0 <_reclaim_reent+0x98>
 8103f68:	3504      	adds	r5, #4
 8103f6a:	2d80      	cmp	r5, #128	@ 0x80
 8103f6c:	d1f7      	bne.n	8103f5e <_reclaim_reent+0x16>
 8103f6e:	69e3      	ldr	r3, [r4, #28]
 8103f70:	4620      	mov	r0, r4
 8103f72:	68d9      	ldr	r1, [r3, #12]
 8103f74:	f000 f872 	bl	810405c <_free_r>
 8103f78:	69e3      	ldr	r3, [r4, #28]
 8103f7a:	6819      	ldr	r1, [r3, #0]
 8103f7c:	b111      	cbz	r1, 8103f84 <_reclaim_reent+0x3c>
 8103f7e:	4620      	mov	r0, r4
 8103f80:	f000 f86c 	bl	810405c <_free_r>
 8103f84:	6961      	ldr	r1, [r4, #20]
 8103f86:	b111      	cbz	r1, 8103f8e <_reclaim_reent+0x46>
 8103f88:	4620      	mov	r0, r4
 8103f8a:	f000 f867 	bl	810405c <_free_r>
 8103f8e:	69e1      	ldr	r1, [r4, #28]
 8103f90:	b111      	cbz	r1, 8103f98 <_reclaim_reent+0x50>
 8103f92:	4620      	mov	r0, r4
 8103f94:	f000 f862 	bl	810405c <_free_r>
 8103f98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8103f9a:	b111      	cbz	r1, 8103fa2 <_reclaim_reent+0x5a>
 8103f9c:	4620      	mov	r0, r4
 8103f9e:	f000 f85d 	bl	810405c <_free_r>
 8103fa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8103fa4:	b111      	cbz	r1, 8103fac <_reclaim_reent+0x64>
 8103fa6:	4620      	mov	r0, r4
 8103fa8:	f000 f858 	bl	810405c <_free_r>
 8103fac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8103fae:	b111      	cbz	r1, 8103fb6 <_reclaim_reent+0x6e>
 8103fb0:	4620      	mov	r0, r4
 8103fb2:	f000 f853 	bl	810405c <_free_r>
 8103fb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8103fb8:	b111      	cbz	r1, 8103fc0 <_reclaim_reent+0x78>
 8103fba:	4620      	mov	r0, r4
 8103fbc:	f000 f84e 	bl	810405c <_free_r>
 8103fc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8103fc2:	b111      	cbz	r1, 8103fca <_reclaim_reent+0x82>
 8103fc4:	4620      	mov	r0, r4
 8103fc6:	f000 f849 	bl	810405c <_free_r>
 8103fca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8103fcc:	b111      	cbz	r1, 8103fd4 <_reclaim_reent+0x8c>
 8103fce:	4620      	mov	r0, r4
 8103fd0:	f000 f844 	bl	810405c <_free_r>
 8103fd4:	6a23      	ldr	r3, [r4, #32]
 8103fd6:	b14b      	cbz	r3, 8103fec <_reclaim_reent+0xa4>
 8103fd8:	4620      	mov	r0, r4
 8103fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8103fde:	4718      	bx	r3
 8103fe0:	680e      	ldr	r6, [r1, #0]
 8103fe2:	4620      	mov	r0, r4
 8103fe4:	f000 f83a 	bl	810405c <_free_r>
 8103fe8:	4631      	mov	r1, r6
 8103fea:	e7bb      	b.n	8103f64 <_reclaim_reent+0x1c>
 8103fec:	bd70      	pop	{r4, r5, r6, pc}
 8103fee:	bf00      	nop
 8103ff0:	10000014 	.word	0x10000014

08103ff4 <__libc_init_array>:
 8103ff4:	b570      	push	{r4, r5, r6, lr}
 8103ff6:	4d0d      	ldr	r5, [pc, #52]	@ (810402c <__libc_init_array+0x38>)
 8103ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8104030 <__libc_init_array+0x3c>)
 8103ffa:	1b64      	subs	r4, r4, r5
 8103ffc:	10a4      	asrs	r4, r4, #2
 8103ffe:	2600      	movs	r6, #0
 8104000:	42a6      	cmp	r6, r4
 8104002:	d109      	bne.n	8104018 <__libc_init_array+0x24>
 8104004:	4d0b      	ldr	r5, [pc, #44]	@ (8104034 <__libc_init_array+0x40>)
 8104006:	4c0c      	ldr	r4, [pc, #48]	@ (8104038 <__libc_init_array+0x44>)
 8104008:	f000 f87e 	bl	8104108 <_init>
 810400c:	1b64      	subs	r4, r4, r5
 810400e:	10a4      	asrs	r4, r4, #2
 8104010:	2600      	movs	r6, #0
 8104012:	42a6      	cmp	r6, r4
 8104014:	d105      	bne.n	8104022 <__libc_init_array+0x2e>
 8104016:	bd70      	pop	{r4, r5, r6, pc}
 8104018:	f855 3b04 	ldr.w	r3, [r5], #4
 810401c:	4798      	blx	r3
 810401e:	3601      	adds	r6, #1
 8104020:	e7ee      	b.n	8104000 <__libc_init_array+0xc>
 8104022:	f855 3b04 	ldr.w	r3, [r5], #4
 8104026:	4798      	blx	r3
 8104028:	3601      	adds	r6, #1
 810402a:	e7f2      	b.n	8104012 <__libc_init_array+0x1e>
 810402c:	08104178 	.word	0x08104178
 8104030:	08104178 	.word	0x08104178
 8104034:	08104178 	.word	0x08104178
 8104038:	0810417c 	.word	0x0810417c

0810403c <__retarget_lock_acquire_recursive>:
 810403c:	4770      	bx	lr

0810403e <__retarget_lock_release_recursive>:
 810403e:	4770      	bx	lr

08104040 <memcpy>:
 8104040:	440a      	add	r2, r1
 8104042:	4291      	cmp	r1, r2
 8104044:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8104048:	d100      	bne.n	810404c <memcpy+0xc>
 810404a:	4770      	bx	lr
 810404c:	b510      	push	{r4, lr}
 810404e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104056:	4291      	cmp	r1, r2
 8104058:	d1f9      	bne.n	810404e <memcpy+0xe>
 810405a:	bd10      	pop	{r4, pc}

0810405c <_free_r>:
 810405c:	b538      	push	{r3, r4, r5, lr}
 810405e:	4605      	mov	r5, r0
 8104060:	2900      	cmp	r1, #0
 8104062:	d041      	beq.n	81040e8 <_free_r+0x8c>
 8104064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8104068:	1f0c      	subs	r4, r1, #4
 810406a:	2b00      	cmp	r3, #0
 810406c:	bfb8      	it	lt
 810406e:	18e4      	addlt	r4, r4, r3
 8104070:	f000 f83e 	bl	81040f0 <__malloc_lock>
 8104074:	4a1d      	ldr	r2, [pc, #116]	@ (81040ec <_free_r+0x90>)
 8104076:	6813      	ldr	r3, [r2, #0]
 8104078:	b933      	cbnz	r3, 8104088 <_free_r+0x2c>
 810407a:	6063      	str	r3, [r4, #4]
 810407c:	6014      	str	r4, [r2, #0]
 810407e:	4628      	mov	r0, r5
 8104080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8104084:	f000 b83a 	b.w	81040fc <__malloc_unlock>
 8104088:	42a3      	cmp	r3, r4
 810408a:	d908      	bls.n	810409e <_free_r+0x42>
 810408c:	6820      	ldr	r0, [r4, #0]
 810408e:	1821      	adds	r1, r4, r0
 8104090:	428b      	cmp	r3, r1
 8104092:	bf01      	itttt	eq
 8104094:	6819      	ldreq	r1, [r3, #0]
 8104096:	685b      	ldreq	r3, [r3, #4]
 8104098:	1809      	addeq	r1, r1, r0
 810409a:	6021      	streq	r1, [r4, #0]
 810409c:	e7ed      	b.n	810407a <_free_r+0x1e>
 810409e:	461a      	mov	r2, r3
 81040a0:	685b      	ldr	r3, [r3, #4]
 81040a2:	b10b      	cbz	r3, 81040a8 <_free_r+0x4c>
 81040a4:	42a3      	cmp	r3, r4
 81040a6:	d9fa      	bls.n	810409e <_free_r+0x42>
 81040a8:	6811      	ldr	r1, [r2, #0]
 81040aa:	1850      	adds	r0, r2, r1
 81040ac:	42a0      	cmp	r0, r4
 81040ae:	d10b      	bne.n	81040c8 <_free_r+0x6c>
 81040b0:	6820      	ldr	r0, [r4, #0]
 81040b2:	4401      	add	r1, r0
 81040b4:	1850      	adds	r0, r2, r1
 81040b6:	4283      	cmp	r3, r0
 81040b8:	6011      	str	r1, [r2, #0]
 81040ba:	d1e0      	bne.n	810407e <_free_r+0x22>
 81040bc:	6818      	ldr	r0, [r3, #0]
 81040be:	685b      	ldr	r3, [r3, #4]
 81040c0:	6053      	str	r3, [r2, #4]
 81040c2:	4408      	add	r0, r1
 81040c4:	6010      	str	r0, [r2, #0]
 81040c6:	e7da      	b.n	810407e <_free_r+0x22>
 81040c8:	d902      	bls.n	81040d0 <_free_r+0x74>
 81040ca:	230c      	movs	r3, #12
 81040cc:	602b      	str	r3, [r5, #0]
 81040ce:	e7d6      	b.n	810407e <_free_r+0x22>
 81040d0:	6820      	ldr	r0, [r4, #0]
 81040d2:	1821      	adds	r1, r4, r0
 81040d4:	428b      	cmp	r3, r1
 81040d6:	bf04      	itt	eq
 81040d8:	6819      	ldreq	r1, [r3, #0]
 81040da:	685b      	ldreq	r3, [r3, #4]
 81040dc:	6063      	str	r3, [r4, #4]
 81040de:	bf04      	itt	eq
 81040e0:	1809      	addeq	r1, r1, r0
 81040e2:	6021      	streq	r1, [r4, #0]
 81040e4:	6054      	str	r4, [r2, #4]
 81040e6:	e7ca      	b.n	810407e <_free_r+0x22>
 81040e8:	bd38      	pop	{r3, r4, r5, pc}
 81040ea:	bf00      	nop
 81040ec:	10004bf8 	.word	0x10004bf8

081040f0 <__malloc_lock>:
 81040f0:	4801      	ldr	r0, [pc, #4]	@ (81040f8 <__malloc_lock+0x8>)
 81040f2:	f7ff bfa3 	b.w	810403c <__retarget_lock_acquire_recursive>
 81040f6:	bf00      	nop
 81040f8:	10004bf4 	.word	0x10004bf4

081040fc <__malloc_unlock>:
 81040fc:	4801      	ldr	r0, [pc, #4]	@ (8104104 <__malloc_unlock+0x8>)
 81040fe:	f7ff bf9e 	b.w	810403e <__retarget_lock_release_recursive>
 8104102:	bf00      	nop
 8104104:	10004bf4 	.word	0x10004bf4

08104108 <_init>:
 8104108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810410a:	bf00      	nop
 810410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810410e:	bc08      	pop	{r3}
 8104110:	469e      	mov	lr, r3
 8104112:	4770      	bx	lr

08104114 <_fini>:
 8104114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104116:	bf00      	nop
 8104118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810411a:	bc08      	pop	{r3}
 810411c:	469e      	mov	lr, r3
 810411e:	4770      	bx	lr
